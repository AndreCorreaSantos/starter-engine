module {
  func.func @main() {
    %c3 = arith.constant 3 : index
    %cst = arith.constant 3.000000e+00 : f64
    %cst_0 = arith.constant 2.000000e+00 : f64
    %cst_1 = arith.constant 1.000000e+00 : f64
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %alloc = memref.alloc() : memref<3xf64>
    affine.store %cst_1, %alloc[%c0] : memref<3xf64>
    affine.store %cst_0, %alloc[%c1] : memref<3xf64>
    affine.store %cst, %alloc[%c2] : memref<3xf64>
    %alloc_2 = memref.alloc() : memref<3xf64>
    affine.store %cst_1, %alloc_2[%c0] : memref<3xf64>
    affine.store %cst_0, %alloc_2[%c1] : memref<3xf64>
    affine.store %cst, %alloc_2[%c2] : memref<3xf64>
    %alloc_3 = memref.alloc() : memref<3xf64>
    scf.for %arg0 = %c0 to %c3 step %c1 {
      %0 = memref.load %alloc[%arg0] : memref<3xf64>
      %1 = memref.load %alloc_2[%arg0] : memref<3xf64>
      %2 = arith.addf %0, %1 : f64
      memref.store %2, %alloc_3[%arg0] : memref<3xf64>
    }
    return
  }
}
// -----// IR Dump After ConvertAffineToStandard (lower-affine) //----- //
module {
  func.func @main() {
    %c3 = arith.constant 3 : index
    %c3_i64 = arith.constant 3 : i64
    %c2_i64 = arith.constant 2 : i64
    %c1_i64 = arith.constant 1 : i64
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %alloc = memref.alloc() : memref<3xi64>
    memref.store %c1_i64, %alloc[%c0] : memref<3xi64>
    memref.store %c2_i64, %alloc[%c1] : memref<3xi64>
    memref.store %c3_i64, %alloc[%c2] : memref<3xi64>
    %alloc_0 = memref.alloc() : memref<3xi64>
    memref.store %c1_i64, %alloc_0[%c0] : memref<3xi64>
    memref.store %c2_i64, %alloc_0[%c1] : memref<3xi64>
    memref.store %c3_i64, %alloc_0[%c2] : memref<3xi64>
    %alloc_1 = memref.alloc() : memref<3xi64>
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb2
    %1 = arith.cmpi slt, %0, %c3 : index
    cf.cond_br %1, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    %2 = memref.load %alloc[%0] : memref<3xi64>
    %3 = memref.load %alloc_0[%0] : memref<3xi64>
    %4 = arith.addi %2, %3 : i64
    memref.store %4, %alloc_1[%0] : memref<3xi64>
    %5 = arith.addi %0, %c1 : index
    cf.br ^bb1(%5 : index)
  ^bb3:  // pred: ^bb1
    return
  }
}


// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
module {
  func.func @main() {
    %c3 = arith.constant 3 : index
    %c3_i64 = arith.constant 3 : i64
    %c2_i64 = arith.constant 2 : i64
    %c1_i64 = arith.constant 1 : i64
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %alloc = memref.alloc() : memref<3xi64>
    memref.store %c1_i64, %alloc[%c0] : memref<3xi64>
    memref.store %c2_i64, %alloc[%c1] : memref<3xi64>
    memref.store %c3_i64, %alloc[%c2] : memref<3xi64>
    %alloc_0 = memref.alloc() : memref<3xi64>
    memref.store %c1_i64, %alloc_0[%c0] : memref<3xi64>
    memref.store %c2_i64, %alloc_0[%c1] : memref<3xi64>
    memref.store %c3_i64, %alloc_0[%c2] : memref<3xi64>
    %alloc_1 = memref.alloc() : memref<3xi64>
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb2
    %1 = arith.cmpi slt, %0, %c3 : index
    cf.cond_br %1, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    %2 = memref.load %alloc[%0] : memref<3xi64>
    %3 = memref.load %alloc_0[%0] : memref<3xi64>
    %4 = arith.addi %2, %3 : i64
    memref.store %4, %alloc_1[%0] : memref<3xi64>
    %5 = arith.addi %0, %c1 : index
    cf.br ^bb1(%5 : index)
  ^bb3:  // pred: ^bb1
    return
  }
}


// -----// IR Dump After FlattenMemRef (flatten-memref) //----- //
module {
  func.func @main() {
    %c3 = arith.constant 3 : index
    %c3_i64 = arith.constant 3 : i64
    %c2_i64 = arith.constant 2 : i64
    %c1_i64 = arith.constant 1 : i64
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %alloc = memref.alloc() : memref<3xi64>
    memref.store %c1_i64, %alloc[%c0] : memref<3xi64>
    memref.store %c2_i64, %alloc[%c1] : memref<3xi64>
    memref.store %c3_i64, %alloc[%c2] : memref<3xi64>
    %alloc_0 = memref.alloc() : memref<3xi64>
    memref.store %c1_i64, %alloc_0[%c0] : memref<3xi64>
    memref.store %c2_i64, %alloc_0[%c1] : memref<3xi64>
    memref.store %c3_i64, %alloc_0[%c2] : memref<3xi64>
    %alloc_1 = memref.alloc() : memref<3xi64>
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb2
    %1 = arith.cmpi slt, %0, %c3 : index
    cf.cond_br %1, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    %2 = memref.load %alloc[%0] : memref<3xi64>
    %3 = memref.load %alloc_0[%0] : memref<3xi64>
    %4 = arith.addi %2, %3 : i64
    memref.store %4, %alloc_1[%0] : memref<3xi64>
    %5 = arith.addi %0, %c1 : index
    cf.br ^bb1(%5 : index)
  ^bb3:  // pred: ^bb1
    return
  }
}


// -----// IR Dump After HandshakeLegalizeMemrefs (handshake-legalize-memrefs) //----- //
func.func @main() {
  %c3 = arith.constant 3 : index
  %c3_i64 = arith.constant 3 : i64
  %c2_i64 = arith.constant 2 : i64
  %c1_i64 = arith.constant 1 : i64
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %alloc = memref.alloc() : memref<3xi64>
  memref.store %c1_i64, %alloc[%c0] : memref<3xi64>
  memref.store %c2_i64, %alloc[%c1] : memref<3xi64>
  memref.store %c3_i64, %alloc[%c2] : memref<3xi64>
  %alloc_0 = memref.alloc() : memref<3xi64>
  memref.store %c1_i64, %alloc_0[%c0] : memref<3xi64>
  memref.store %c2_i64, %alloc_0[%c1] : memref<3xi64>
  memref.store %c3_i64, %alloc_0[%c2] : memref<3xi64>
  %alloc_1 = memref.alloc() : memref<3xi64>
  cf.br ^bb1(%c0 : index)
^bb1(%0: index):  // 2 preds: ^bb0, ^bb2
  %1 = arith.cmpi slt, %0, %c3 : index
  cf.cond_br %1, ^bb2, ^bb3
^bb2:  // pred: ^bb1
  %2 = memref.load %alloc[%0] : memref<3xi64>
  %3 = memref.load %alloc_0[%0] : memref<3xi64>
  %4 = arith.addi %2, %3 : i64
  memref.store %4, %alloc_1[%0] : memref<3xi64>
  %5 = arith.addi %0, %c1 : index
  cf.br ^bb1(%5 : index)
^bb3:  // pred: ^bb1
  return
}

// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
module {
  func.func @main() {
    %c3 = arith.constant 3 : index
    %c3_i64 = arith.constant 3 : i64
    %c2_i64 = arith.constant 2 : i64
    %c1_i64 = arith.constant 1 : i64
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %alloc = memref.alloc() : memref<3xi64>
    memref.store %c1_i64, %alloc[%c0] : memref<3xi64>
    memref.store %c2_i64, %alloc[%c1] : memref<3xi64>
    memref.store %c3_i64, %alloc[%c2] : memref<3xi64>
    %alloc_0 = memref.alloc() : memref<3xi64>
    memref.store %c1_i64, %alloc_0[%c0] : memref<3xi64>
    memref.store %c2_i64, %alloc_0[%c1] : memref<3xi64>
    memref.store %c3_i64, %alloc_0[%c2] : memref<3xi64>
    %alloc_1 = memref.alloc() : memref<3xi64>
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb2
    %1 = arith.cmpi slt, %0, %c3 : index
    cf.cond_br %1, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    %2 = memref.load %alloc[%0] : memref<3xi64>
    %3 = memref.load %alloc_0[%0] : memref<3xi64>
    %4 = arith.addi %2, %3 : i64
    memref.store %4, %alloc_1[%0] : memref<3xi64>
    %5 = arith.addi %0, %c1 : index
    cf.br ^bb1(%5 : index)
  ^bb3:  // pred: ^bb1
    return
  }
}


// -----// IR Dump After CFToHandshake (lower-cf-to-handshake) //----- //
module {
  handshake.func @main(%arg0: none, ...) -> none attributes {argNames = ["in0"], resNames = ["out0"]} {
    %0 = memory[ld = 0, st = 1] (%dataResult_21, %addressResult_22) {id = 2 : i32, lsq = false} : memref<3xi64>, (i64, index) -> none
    %1:5 = memory[ld = 1, st = 3] (%dataResult_4, %addressResult_5, %dataResult_6, %addressResult_7, %dataResult_8, %addressResult_9, %addressResults_20) {id = 1 : i32, lsq = false} : memref<3xi64>, (i64, index, i64, index, i64, index, index) -> (i64, none, none, none, none)
    %2:5 = memory[ld = 1, st = 3] (%dataResult, %addressResult, %dataResult_0, %addressResult_1, %dataResult_2, %addressResult_3, %addressResults) {id = 0 : i32, lsq = false} : memref<3xi64>, (i64, index, i64, index, i64, index, index) -> (i64, none, none, none, none)
    %3 = merge %arg0 : none
    %4 = join %3, %2#1, %2#2, %2#3, %1#1, %1#2, %1#3 : none, none, none, none, none, none, none
    %5 = constant %3 {value = 3 : index} : index
    %6 = constant %3 {value = 3 : i64} : i64
    %7 = constant %3 {value = 2 : i64} : i64
    %8 = constant %3 {value = 1 : i64} : i64
    %9 = constant %3 {value = 2 : index} : index
    %10 = constant %3 {value = 1 : index} : index
    %11 = constant %3 {value = 0 : index} : index
    %dataResult, %addressResult = store [%11] %8, %3 : index, i64
    %12 = join %3, %2#1 : none, none
    %dataResult_0, %addressResult_1 = store [%10] %7, %12 : index, i64
    %13 = join %3, %2#1, %2#2 : none, none, none
    %dataResult_2, %addressResult_3 = store [%9] %6, %13 : index, i64
    %dataResult_4, %addressResult_5 = store [%11] %8, %3 : index, i64
    %14 = join %3, %1#1 : none, none
    %dataResult_6, %addressResult_7 = store [%10] %7, %14 : index, i64
    %15 = join %3, %1#1, %1#2 : none, none, none
    %dataResult_8, %addressResult_9 = store [%9] %6, %15 : index, i64
    %16 = br %4 : none
    %17 = br %5 : index
    %18 = br %10 : index
    %19 = br %11 : index
    %result, %index = control_merge %16 : none, index
    %20 = buffer [1] seq %28 {initValues = [0]} : i1
    %21 = mux %20 [%result, %38] : i1, none
    %22 = mux %index [%19] : index, index
    %23 = mux %20 [%22, %39] : i1, index
    %24 = mux %index [%17] : index, index
    %25 = mux %20 [%24, %36] : i1, index
    %26 = mux %index [%18] : index, index
    %27 = mux %20 [%26, %37] : i1, index
    %28 = merge %29 : i1
    %29 = arith.cmpi slt, %23, %25 : index
    %trueResult, %falseResult = cond_br %29, %23 : index
    %trueResult_10, %falseResult_11 = cond_br %29, %25 : index
    %trueResult_12, %falseResult_13 = cond_br %29, %27 : index
    %trueResult_14, %falseResult_15 = cond_br %29, %21 : none
    %30 = merge %trueResult_10 : index
    %31 = merge %trueResult_12 : index
    %32 = merge %trueResult : index
    %result_16, %index_17 = control_merge %trueResult_14 : none, index
    %33 = join %result_16, %2#4, %1#4, %0 : none, none, none, none
    %dataResult_18, %addressResults = load [%32] %2#0, %result_16 : index, i64
    %dataResult_19, %addressResults_20 = load [%32] %1#0, %result_16 : index, i64
    %34 = arith.addi %dataResult_18, %dataResult_19 : i64
    %dataResult_21, %addressResult_22 = store [%32] %34, %result_16 : index, i64
    %35 = arith.addi %32, %31 : index
    %36 = br %30 : index
    %37 = br %31 : index
    %38 = br %33 : none
    %39 = br %35 : index
    %result_23, %index_24 = control_merge %falseResult_15 : none, index
    return %result_23 : none
  }
}


// -----// IR Dump After HandshakeLowerExtmemToHW (handshake-lower-extmem-to-hw) //----- //
module {
  handshake.func @main(%arg0: none, ...) -> none attributes {argNames = ["in0"], resNames = ["out0"]} {
    %0 = memory[ld = 0, st = 1] (%dataResult_21, %addressResult_22) {id = 2 : i32, lsq = false} : memref<3xi64>, (i64, index) -> none
    %1:5 = memory[ld = 1, st = 3] (%dataResult_4, %addressResult_5, %dataResult_6, %addressResult_7, %dataResult_8, %addressResult_9, %addressResults_20) {id = 1 : i32, lsq = false} : memref<3xi64>, (i64, index, i64, index, i64, index, index) -> (i64, none, none, none, none)
    %2:5 = memory[ld = 1, st = 3] (%dataResult, %addressResult, %dataResult_0, %addressResult_1, %dataResult_2, %addressResult_3, %addressResults) {id = 0 : i32, lsq = false} : memref<3xi64>, (i64, index, i64, index, i64, index, index) -> (i64, none, none, none, none)
    %3 = merge %arg0 : none
    %4 = join %3, %2#1, %2#2, %2#3, %1#1, %1#2, %1#3 : none, none, none, none, none, none, none
    %5 = constant %3 {value = 3 : index} : index
    %6 = constant %3 {value = 3 : i64} : i64
    %7 = constant %3 {value = 2 : i64} : i64
    %8 = constant %3 {value = 1 : i64} : i64
    %9 = constant %3 {value = 2 : index} : index
    %10 = constant %3 {value = 1 : index} : index
    %11 = constant %3 {value = 0 : index} : index
    %dataResult, %addressResult = store [%11] %8, %3 : index, i64
    %12 = join %3, %2#1 : none, none
    %dataResult_0, %addressResult_1 = store [%10] %7, %12 : index, i64
    %13 = join %3, %2#1, %2#2 : none, none, none
    %dataResult_2, %addressResult_3 = store [%9] %6, %13 : index, i64
    %dataResult_4, %addressResult_5 = store [%11] %8, %3 : index, i64
    %14 = join %3, %1#1 : none, none
    %dataResult_6, %addressResult_7 = store [%10] %7, %14 : index, i64
    %15 = join %3, %1#1, %1#2 : none, none, none
    %dataResult_8, %addressResult_9 = store [%9] %6, %15 : index, i64
    %16 = br %4 : none
    %17 = br %5 : index
    %18 = br %10 : index
    %19 = br %11 : index
    %result, %index = control_merge %16 : none, index
    %20 = buffer [1] seq %28 {initValues = [0]} : i1
    %21 = mux %20 [%result, %38] : i1, none
    %22 = mux %index [%19] : index, index
    %23 = mux %20 [%22, %39] : i1, index
    %24 = mux %index [%17] : index, index
    %25 = mux %20 [%24, %36] : i1, index
    %26 = mux %index [%18] : index, index
    %27 = mux %20 [%26, %37] : i1, index
    %28 = merge %29 : i1
    %29 = arith.cmpi slt, %23, %25 : index
    %trueResult, %falseResult = cond_br %29, %23 : index
    %trueResult_10, %falseResult_11 = cond_br %29, %25 : index
    %trueResult_12, %falseResult_13 = cond_br %29, %27 : index
    %trueResult_14, %falseResult_15 = cond_br %29, %21 : none
    %30 = merge %trueResult_10 : index
    %31 = merge %trueResult_12 : index
    %32 = merge %trueResult : index
    %result_16, %index_17 = control_merge %trueResult_14 : none, index
    %33 = join %result_16, %2#4, %1#4, %0 : none, none, none, none
    %dataResult_18, %addressResults = load [%32] %2#0, %result_16 : index, i64
    %dataResult_19, %addressResults_20 = load [%32] %1#0, %result_16 : index, i64
    %34 = arith.addi %dataResult_18, %dataResult_19 : i64
    %dataResult_21, %addressResult_22 = store [%32] %34, %result_16 : index, i64
    %35 = arith.addi %32, %31 : index
    %36 = br %30 : index
    %37 = br %31 : index
    %38 = br %33 : none
    %39 = br %35 : index
    %result_23, %index_24 = control_merge %falseResult_15 : none, index
    return %result_23 : none
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
handshake.func @main(%arg0: none, ...) -> none attributes {argNames = ["in0"], resNames = ["out0"]} {
  %0 = memory[ld = 0, st = 1] (%dataResult_19, %addressResult_20) {id = 2 : i32, lsq = false} : memref<3xi64>, (i64, index) -> none
  %1:5 = memory[ld = 1, st = 3] (%dataResult_4, %addressResult_5, %dataResult_6, %addressResult_7, %dataResult_8, %addressResult_9, %addressResults_18) {id = 1 : i32, lsq = false} : memref<3xi64>, (i64, index, i64, index, i64, index, index) -> (i64, none, none, none, none)
  %2:5 = memory[ld = 1, st = 3] (%dataResult, %addressResult, %dataResult_0, %addressResult_1, %dataResult_2, %addressResult_3, %addressResults) {id = 0 : i32, lsq = false} : memref<3xi64>, (i64, index, i64, index, i64, index, index) -> (i64, none, none, none, none)
  %3 = join %arg0, %2#1, %2#2, %2#3, %1#1, %1#2, %1#3 : none, none, none, none, none, none, none
  %4 = constant %arg0 {value = 3 : index} : index
  %5 = constant %arg0 {value = 3 : i64} : i64
  %6 = constant %arg0 {value = 2 : i64} : i64
  %7 = constant %arg0 {value = 1 : i64} : i64
  %8 = constant %arg0 {value = 2 : index} : index
  %9 = constant %arg0 {value = 1 : index} : index
  %10 = constant %arg0 {value = 0 : index} : index
  %dataResult, %addressResult = store [%10] %7, %arg0 : index, i64
  %11 = join %arg0, %2#1 : none, none
  %dataResult_0, %addressResult_1 = store [%9] %6, %11 : index, i64
  %12 = join %arg0, %2#1, %2#2 : none, none, none
  %dataResult_2, %addressResult_3 = store [%8] %5, %12 : index, i64
  %dataResult_4, %addressResult_5 = store [%10] %7, %arg0 : index, i64
  %13 = join %arg0, %1#1 : none, none
  %dataResult_6, %addressResult_7 = store [%9] %6, %13 : index, i64
  %14 = join %arg0, %1#1, %1#2 : none, none, none
  %dataResult_8, %addressResult_9 = store [%8] %5, %14 : index, i64
  %15 = buffer [1] seq %20 {initValues = [0]} : i1
  %16 = mux %15 [%3, %21] : i1, none
  %17 = mux %15 [%10, %23] : i1, index
  %18 = mux %15 [%4, %trueResult_10] : i1, index
  %19 = mux %15 [%9, %trueResult_12] : i1, index
  %20 = arith.cmpi slt, %17, %18 : index
  %trueResult, %falseResult = cond_br %20, %17 : index
  %trueResult_10, %falseResult_11 = cond_br %20, %18 : index
  %trueResult_12, %falseResult_13 = cond_br %20, %19 : index
  %trueResult_14, %falseResult_15 = cond_br %20, %16 : none
  %21 = join %trueResult_14, %2#4, %1#4, %0 : none, none, none, none
  %dataResult_16, %addressResults = load [%trueResult] %2#0, %trueResult_14 : index, i64
  %dataResult_17, %addressResults_18 = load [%trueResult] %1#0, %trueResult_14 : index, i64
  %22 = arith.addi %dataResult_16, %dataResult_17 : i64
  %dataResult_19, %addressResult_20 = store [%trueResult] %22, %trueResult_14 : index, i64
  %23 = arith.addi %trueResult, %trueResult_12 : index
  return %falseResult_15 : none
}

// -----// IR Dump After HandshakeMaterializeForksSinks (handshake-materialize-forks-sinks) //----- //
handshake.func @main(%arg0: none, ...) -> none attributes {argNames = ["in0"], resNames = ["out0"]} {
  %0:14 = fork [14] %arg0 : none
  %1 = memory[ld = 0, st = 1] (%dataResult_19, %addressResult_20) {id = 2 : i32, lsq = false} : memref<3xi64>, (i64, index) -> none
  %2:5 = memory[ld = 1, st = 3] (%dataResult_4, %addressResult_5, %dataResult_6, %addressResult_7, %dataResult_8, %addressResult_9, %addressResults_18) {id = 1 : i32, lsq = false} : memref<3xi64>, (i64, index, i64, index, i64, index, index) -> (i64, none, none, none, none)
  %3:2 = fork [2] %2#2 : none
  %4:3 = fork [3] %2#1 : none
  %5:5 = memory[ld = 1, st = 3] (%dataResult, %addressResult, %dataResult_0, %addressResult_1, %dataResult_2, %addressResult_3, %addressResults) {id = 0 : i32, lsq = false} : memref<3xi64>, (i64, index, i64, index, i64, index, index) -> (i64, none, none, none, none)
  %6:2 = fork [2] %5#2 : none
  %7:3 = fork [3] %5#1 : none
  %8 = join %0#10, %7#0, %6#0, %5#3, %4#2, %3#1, %2#3 : none, none, none, none, none, none, none
  %9 = constant %0#0 {value = 3 : index} : index
  %10 = constant %0#1 {value = 3 : i64} : i64
  %11:2 = fork [2] %10 : i64
  %12 = constant %0#2 {value = 2 : i64} : i64
  %13:2 = fork [2] %12 : i64
  %14 = constant %0#3 {value = 1 : i64} : i64
  %15:2 = fork [2] %14 : i64
  %16 = constant %0#4 {value = 2 : index} : index
  %17:2 = fork [2] %16 : index
  %18 = constant %0#5 {value = 1 : index} : index
  %19:3 = fork [3] %18 : index
  %20 = constant %0#6 {value = 0 : index} : index
  %21:3 = fork [3] %20 : index
  %dataResult, %addressResult = store [%21#2] %15#1, %0#7 : index, i64
  %22 = join %0#8, %7#2 : none, none
  %dataResult_0, %addressResult_1 = store [%19#2] %13#1, %22 : index, i64
  %23 = join %0#9, %7#1, %6#1 : none, none, none
  %dataResult_2, %addressResult_3 = store [%17#1] %11#1, %23 : index, i64
  %dataResult_4, %addressResult_5 = store [%21#1] %15#0, %0#11 : index, i64
  %24 = join %0#12, %4#1 : none, none
  %dataResult_6, %addressResult_7 = store [%19#1] %13#0, %24 : index, i64
  %25 = join %0#13, %4#0, %3#0 : none, none, none
  %dataResult_8, %addressResult_9 = store [%17#0] %11#0, %25 : index, i64
  %26 = buffer [1] seq %35#0 {initValues = [0]} : i1
  %27:4 = fork [4] %26 : i1
  %28 = mux %27#3 [%8, %39] : i1, none
  %29 = mux %27#2 [%21#0, %41] : i1, index
  %30:2 = fork [2] %29 : index
  %31 = mux %27#1 [%9, %trueResult_10] : i1, index
  %32:2 = fork [2] %31 : index
  %33 = mux %27#0 [%19#0, %37#0] : i1, index
  %34 = arith.cmpi slt, %30#0, %32#0 : index
  %35:5 = fork [5] %34 : i1
  %trueResult, %falseResult = cond_br %35#4, %30#1 : index
  sink %falseResult : index
  %36:4 = fork [4] %trueResult : index
  %trueResult_10, %falseResult_11 = cond_br %35#3, %32#1 : index
  sink %falseResult_11 : index
  %trueResult_12, %falseResult_13 = cond_br %35#2, %33 : index
  sink %falseResult_13 : index
  %37:2 = fork [2] %trueResult_12 : index
  %trueResult_14, %falseResult_15 = cond_br %35#1, %28 : none
  %38:4 = fork [4] %trueResult_14 : none
  %39 = join %38#1, %5#4, %2#4, %1 : none, none, none, none
  %dataResult_16, %addressResults = load [%36#1] %5#0, %38#3 : index, i64
  %dataResult_17, %addressResults_18 = load [%36#2] %2#0, %38#2 : index, i64
  %40 = arith.addi %dataResult_16, %dataResult_17 : i64
  %dataResult_19, %addressResult_20 = store [%36#3] %40, %38#0 : index, i64
  %41 = arith.addi %36#0, %37#1 : index
  return %falseResult_15 : none
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
handshake.func @main(%arg0: none, ...) -> none attributes {argNames = ["in0"], resNames = ["out0"]} {
  %0:14 = fork [14] %arg0 : none
  %1 = memory[ld = 0, st = 1] (%dataResult_19, %addressResult_20) {id = 2 : i32, lsq = false} : memref<3xi64>, (i64, index) -> none
  %2:5 = memory[ld = 1, st = 3] (%dataResult_4, %addressResult_5, %dataResult_6, %addressResult_7, %dataResult_8, %addressResult_9, %addressResults_18) {id = 1 : i32, lsq = false} : memref<3xi64>, (i64, index, i64, index, i64, index, index) -> (i64, none, none, none, none)
  %3:2 = fork [2] %2#2 : none
  %4:3 = fork [3] %2#1 : none
  %5:5 = memory[ld = 1, st = 3] (%dataResult, %addressResult, %dataResult_0, %addressResult_1, %dataResult_2, %addressResult_3, %addressResults) {id = 0 : i32, lsq = false} : memref<3xi64>, (i64, index, i64, index, i64, index, index) -> (i64, none, none, none, none)
  %6:2 = fork [2] %5#2 : none
  %7:3 = fork [3] %5#1 : none
  %8 = join %0#10, %7#0, %6#0, %5#3, %4#2, %3#1, %2#3 : none, none, none, none, none, none, none
  %9 = constant %0#0 {value = 3 : index} : index
  %10 = constant %0#1 {value = 3 : i64} : i64
  %11:2 = fork [2] %10 : i64
  %12 = constant %0#2 {value = 2 : i64} : i64
  %13:2 = fork [2] %12 : i64
  %14 = constant %0#3 {value = 1 : i64} : i64
  %15:2 = fork [2] %14 : i64
  %16 = constant %0#4 {value = 2 : index} : index
  %17:2 = fork [2] %16 : index
  %18 = constant %0#5 {value = 1 : index} : index
  %19:3 = fork [3] %18 : index
  %20 = constant %0#6 {value = 0 : index} : index
  %21:3 = fork [3] %20 : index
  %dataResult, %addressResult = store [%21#2] %15#1, %0#7 : index, i64
  %22 = join %0#8, %7#2 : none, none
  %dataResult_0, %addressResult_1 = store [%19#2] %13#1, %22 : index, i64
  %23 = join %0#9, %7#1, %6#1 : none, none, none
  %dataResult_2, %addressResult_3 = store [%17#1] %11#1, %23 : index, i64
  %dataResult_4, %addressResult_5 = store [%21#1] %15#0, %0#11 : index, i64
  %24 = join %0#12, %4#1 : none, none
  %dataResult_6, %addressResult_7 = store [%19#1] %13#0, %24 : index, i64
  %25 = join %0#13, %4#0, %3#0 : none, none, none
  %dataResult_8, %addressResult_9 = store [%17#0] %11#0, %25 : index, i64
  %26 = buffer [1] seq %35#0 {initValues = [0]} : i1
  %27:4 = fork [4] %26 : i1
  %28 = mux %27#3 [%8, %39] : i1, none
  %29 = mux %27#2 [%21#0, %41] : i1, index
  %30:2 = fork [2] %29 : index
  %31 = mux %27#1 [%9, %trueResult_10] : i1, index
  %32:2 = fork [2] %31 : index
  %33 = mux %27#0 [%19#0, %37#0] : i1, index
  %34 = arith.cmpi slt, %30#0, %32#0 : index
  %35:5 = fork [5] %34 : i1
  %trueResult, %falseResult = cond_br %35#4, %30#1 : index
  sink %falseResult : index
  %36:4 = fork [4] %trueResult : index
  %trueResult_10, %falseResult_11 = cond_br %35#3, %32#1 : index
  sink %falseResult_11 : index
  %trueResult_12, %falseResult_13 = cond_br %35#2, %33 : index
  sink %falseResult_13 : index
  %37:2 = fork [2] %trueResult_12 : index
  %trueResult_14, %falseResult_15 = cond_br %35#1, %28 : none
  %38:4 = fork [4] %trueResult_14 : none
  %39 = join %38#1, %5#4, %2#4, %1 : none, none, none, none
  %dataResult_16, %addressResults = load [%36#1] %5#0, %38#3 : index, i64
  %dataResult_17, %addressResults_18 = load [%36#2] %2#0, %38#2 : index, i64
  %40 = arith.addi %dataResult_16, %dataResult_17 : i64
  %dataResult_19, %addressResult_20 = store [%36#3] %40, %38#0 : index, i64
  %41 = arith.addi %36#0, %37#1 : index
  return %falseResult_15 : none
}

// -----// IR Dump After HandshakeInsertBuffers (handshake-insert-buffers) //----- //
handshake.func @main(%arg0: none, ...) -> none attributes {argNames = ["in0"], resNames = ["out0"]} {
  %0 = buffer [2] seq %arg0 : none
  %1:14 = fork [14] %0 : none
  %2 = buffer [2] seq %1#13 : none
  %3 = buffer [2] seq %1#12 : none
  %4 = buffer [2] seq %1#11 : none
  %5 = buffer [2] seq %1#10 : none
  %6 = buffer [2] seq %1#9 : none
  %7 = buffer [2] seq %1#8 : none
  %8 = buffer [2] seq %1#7 : none
  %9 = buffer [2] seq %1#6 : none
  %10 = buffer [2] seq %1#5 : none
  %11 = buffer [2] seq %1#4 : none
  %12 = buffer [2] seq %1#3 : none
  %13 = buffer [2] seq %1#2 : none
  %14 = buffer [2] seq %1#1 : none
  %15 = buffer [2] seq %1#0 : none
  %16 = memory[ld = 0, st = 1] (%157, %156) {id = 2 : i32, lsq = false} : memref<3xi64>, (i64, index) -> none
  %17 = buffer [2] seq %16 : none
  %18:5 = memory[ld = 1, st = 3] (%91, %90, %95, %94, %99, %98, %152) {id = 1 : i32, lsq = false} : memref<3xi64>, (i64, index, i64, index, i64, index, index) -> (i64, none, none, none, none)
  %19 = buffer [2] seq %18#4 : none
  %20 = buffer [2] seq %18#3 : none
  %21 = buffer [2] seq %18#2 : none
  %22 = buffer [2] seq %18#1 : none
  %23 = buffer [2] seq %18#0 : i64
  %24:2 = fork [2] %21 : none
  %25 = buffer [2] seq %24#1 : none
  %26 = buffer [2] seq %24#0 : none
  %27:3 = fork [3] %22 : none
  %28 = buffer [2] seq %27#2 : none
  %29 = buffer [2] seq %27#1 : none
  %30 = buffer [2] seq %27#0 : none
  %31:5 = memory[ld = 1, st = 3] (%81, %80, %85, %84, %89, %88, %150) {id = 0 : i32, lsq = false} : memref<3xi64>, (i64, index, i64, index, i64, index, index) -> (i64, none, none, none, none)
  %32 = buffer [2] seq %31#4 : none
  %33 = buffer [2] seq %31#3 : none
  %34 = buffer [2] seq %31#2 : none
  %35 = buffer [2] seq %31#1 : none
  %36 = buffer [2] seq %31#0 : i64
  %37:2 = fork [2] %34 : none
  %38 = buffer [2] seq %37#1 : none
  %39 = buffer [2] seq %37#0 : none
  %40:3 = fork [3] %35 : none
  %41 = buffer [2] seq %40#2 : none
  %42 = buffer [2] seq %40#1 : none
  %43 = buffer [2] seq %40#0 : none
  %44 = join %5, %43, %39, %33, %28, %25, %20 : none, none, none, none, none, none, none
  %45 = buffer [2] seq %44 : none
  %46 = constant %15 {value = 3 : index} : index
  %47 = buffer [2] seq %46 : index
  %48 = constant %14 {value = 3 : i64} : i64
  %49 = buffer [2] seq %48 : i64
  %50:2 = fork [2] %49 : i64
  %51 = buffer [2] seq %50#1 : i64
  %52 = buffer [2] seq %50#0 : i64
  %53 = constant %13 {value = 2 : i64} : i64
  %54 = buffer [2] seq %53 : i64
  %55:2 = fork [2] %54 : i64
  %56 = buffer [2] seq %55#1 : i64
  %57 = buffer [2] seq %55#0 : i64
  %58 = constant %12 {value = 1 : i64} : i64
  %59 = buffer [2] seq %58 : i64
  %60:2 = fork [2] %59 : i64
  %61 = buffer [2] seq %60#1 : i64
  %62 = buffer [2] seq %60#0 : i64
  %63 = constant %11 {value = 2 : index} : index
  %64 = buffer [2] seq %63 : index
  %65:2 = fork [2] %64 : index
  %66 = buffer [2] seq %65#1 : index
  %67 = buffer [2] seq %65#0 : index
  %68 = constant %10 {value = 1 : index} : index
  %69 = buffer [2] seq %68 : index
  %70:3 = fork [3] %69 : index
  %71 = buffer [2] seq %70#2 : index
  %72 = buffer [2] seq %70#1 : index
  %73 = buffer [2] seq %70#0 : index
  %74 = constant %9 {value = 0 : index} : index
  %75 = buffer [2] seq %74 : index
  %76:3 = fork [3] %75 : index
  %77 = buffer [2] seq %76#2 : index
  %78 = buffer [2] seq %76#1 : index
  %79 = buffer [2] seq %76#0 : index
  %dataResult, %addressResult = store [%77] %61, %8 : index, i64
  %80 = buffer [2] seq %addressResult : index
  %81 = buffer [2] seq %dataResult : i64
  %82 = join %7, %41 : none, none
  %83 = buffer [2] seq %82 : none
  %dataResult_0, %addressResult_1 = store [%71] %56, %83 : index, i64
  %84 = buffer [2] seq %addressResult_1 : index
  %85 = buffer [2] seq %dataResult_0 : i64
  %86 = join %6, %42, %38 : none, none, none
  %87 = buffer [2] seq %86 : none
  %dataResult_2, %addressResult_3 = store [%66] %51, %87 : index, i64
  %88 = buffer [2] seq %addressResult_3 : index
  %89 = buffer [2] seq %dataResult_2 : i64
  %dataResult_4, %addressResult_5 = store [%78] %62, %4 : index, i64
  %90 = buffer [2] seq %addressResult_5 : index
  %91 = buffer [2] seq %dataResult_4 : i64
  %92 = join %3, %29 : none, none
  %93 = buffer [2] seq %92 : none
  %dataResult_6, %addressResult_7 = store [%72] %57, %93 : index, i64
  %94 = buffer [2] seq %addressResult_7 : index
  %95 = buffer [2] seq %dataResult_6 : i64
  %96 = join %2, %30, %26 : none, none, none
  %97 = buffer [2] seq %96 : none
  %dataResult_8, %addressResult_9 = store [%67] %52, %97 : index, i64
  %98 = buffer [2] seq %addressResult_9 : index
  %99 = buffer [2] seq %dataResult_8 : i64
  %100 = buffer [1] seq %122#0 {initValues = [0]} : i1
  %101:4 = fork [4] %100 : i1
  %102 = buffer [2] seq %101#3 : i1
  %103 = buffer [2] seq %101#2 : i1
  %104 = buffer [2] seq %101#1 : i1
  %105 = buffer [2] seq %101#0 : i1
  %106 = mux %102 [%45, %149] : i1, none
  %107 = buffer [2] seq %106 : none
  %108 = mux %103 [%79, %159] : i1, index
  %109 = buffer [2] seq %108 : index
  %110:2 = fork [2] %109 : index
  %111 = buffer [2] seq %110#1 : index
  %112 = buffer [2] seq %110#0 : index
  %113 = mux %104 [%47, %135] : i1, index
  %114 = buffer [2] seq %113 : index
  %115:2 = fork [2] %114 : index
  %116 = buffer [2] seq %115#1 : index
  %117 = buffer [2] seq %115#0 : index
  %118 = mux %105 [%73, %140] : i1, index
  %119 = buffer [2] seq %118 : index
  %120 = arith.cmpi slt, %112, %117 : index
  %121 = buffer [2] seq %120 : i1
  %122:5 = fork [5] %121 : i1
  %123 = buffer [2] seq %122#4 : i1
  %124 = buffer [2] seq %122#3 : i1
  %125 = buffer [2] seq %122#2 : i1
  %126 = buffer [2] seq %122#1 : i1
  %trueResult, %falseResult = cond_br %123, %111 : index
  %127 = buffer [2] seq %falseResult : index
  %128 = buffer [2] seq %trueResult : index
  sink %127 : index
  %129:4 = fork [4] %128 : index
  %130 = buffer [2] seq %129#3 : index
  %131 = buffer [2] seq %129#2 : index
  %132 = buffer [2] seq %129#1 : index
  %133 = buffer [2] seq %129#0 : index
  %trueResult_10, %falseResult_11 = cond_br %124, %116 : index
  %134 = buffer [2] seq %falseResult_11 : index
  %135 = buffer [2] seq %trueResult_10 : index
  sink %134 : index
  %trueResult_12, %falseResult_13 = cond_br %125, %119 : index
  %136 = buffer [2] seq %falseResult_13 : index
  %137 = buffer [2] seq %trueResult_12 : index
  sink %136 : index
  %138:2 = fork [2] %137 : index
  %139 = buffer [2] seq %138#1 : index
  %140 = buffer [2] seq %138#0 : index
  %trueResult_14, %falseResult_15 = cond_br %126, %107 : none
  %141 = buffer [2] seq %falseResult_15 : none
  %142 = buffer [2] seq %trueResult_14 : none
  %143:4 = fork [4] %142 : none
  %144 = buffer [2] seq %143#3 : none
  %145 = buffer [2] seq %143#2 : none
  %146 = buffer [2] seq %143#1 : none
  %147 = buffer [2] seq %143#0 : none
  %148 = join %146, %32, %19, %17 : none, none, none, none
  %149 = buffer [2] seq %148 : none
  %dataResult_16, %addressResults = load [%132] %36, %144 : index, i64
  %150 = buffer [2] seq %addressResults : index
  %151 = buffer [2] seq %dataResult_16 : i64
  %dataResult_17, %addressResults_18 = load [%131] %23, %145 : index, i64
  %152 = buffer [2] seq %addressResults_18 : index
  %153 = buffer [2] seq %dataResult_17 : i64
  %154 = arith.addi %151, %153 : i64
  %155 = buffer [2] seq %154 : i64
  %dataResult_19, %addressResult_20 = store [%130] %155, %147 : index, i64
  %156 = buffer [2] seq %addressResult_20 : index
  %157 = buffer [2] seq %dataResult_19 : i64
  %158 = arith.addi %133, %139 : index
  %159 = buffer [2] seq %158 : index
  return %141 : none
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
handshake.func @main(%arg0: none, ...) -> none attributes {argNames = ["in0"], resNames = ["out0"]} {
  %0 = buffer [2] seq %arg0 : none
  %1:14 = fork [14] %0 : none
  %2 = buffer [2] seq %1#13 : none
  %3 = buffer [2] seq %1#12 : none
  %4 = buffer [2] seq %1#11 : none
  %5 = buffer [2] seq %1#10 : none
  %6 = buffer [2] seq %1#9 : none
  %7 = buffer [2] seq %1#8 : none
  %8 = buffer [2] seq %1#7 : none
  %9 = buffer [2] seq %1#6 : none
  %10 = buffer [2] seq %1#5 : none
  %11 = buffer [2] seq %1#4 : none
  %12 = buffer [2] seq %1#3 : none
  %13 = buffer [2] seq %1#2 : none
  %14 = buffer [2] seq %1#1 : none
  %15 = buffer [2] seq %1#0 : none
  %16 = memory[ld = 0, st = 1] (%154, %153) {id = 2 : i32, lsq = false} : memref<3xi64>, (i64, index) -> none
  %17 = buffer [2] seq %16 : none
  %18:5 = memory[ld = 1, st = 3] (%91, %90, %95, %94, %99, %98, %149) {id = 1 : i32, lsq = false} : memref<3xi64>, (i64, index, i64, index, i64, index, index) -> (i64, none, none, none, none)
  %19 = buffer [2] seq %18#4 : none
  %20 = buffer [2] seq %18#3 : none
  %21 = buffer [2] seq %18#2 : none
  %22 = buffer [2] seq %18#1 : none
  %23 = buffer [2] seq %18#0 : i64
  %24:2 = fork [2] %21 : none
  %25 = buffer [2] seq %24#1 : none
  %26 = buffer [2] seq %24#0 : none
  %27:3 = fork [3] %22 : none
  %28 = buffer [2] seq %27#2 : none
  %29 = buffer [2] seq %27#1 : none
  %30 = buffer [2] seq %27#0 : none
  %31:5 = memory[ld = 1, st = 3] (%81, %80, %85, %84, %89, %88, %147) {id = 0 : i32, lsq = false} : memref<3xi64>, (i64, index, i64, index, i64, index, index) -> (i64, none, none, none, none)
  %32 = buffer [2] seq %31#4 : none
  %33 = buffer [2] seq %31#3 : none
  %34 = buffer [2] seq %31#2 : none
  %35 = buffer [2] seq %31#1 : none
  %36 = buffer [2] seq %31#0 : i64
  %37:2 = fork [2] %34 : none
  %38 = buffer [2] seq %37#1 : none
  %39 = buffer [2] seq %37#0 : none
  %40:3 = fork [3] %35 : none
  %41 = buffer [2] seq %40#2 : none
  %42 = buffer [2] seq %40#1 : none
  %43 = buffer [2] seq %40#0 : none
  %44 = join %5, %43, %39, %33, %28, %25, %20 : none, none, none, none, none, none, none
  %45 = buffer [2] seq %44 : none
  %46 = constant %15 {value = 3 : index} : index
  %47 = buffer [2] seq %46 : index
  %48 = constant %14 {value = 3 : i64} : i64
  %49 = buffer [2] seq %48 : i64
  %50:2 = fork [2] %49 : i64
  %51 = buffer [2] seq %50#1 : i64
  %52 = buffer [2] seq %50#0 : i64
  %53 = constant %13 {value = 2 : i64} : i64
  %54 = buffer [2] seq %53 : i64
  %55:2 = fork [2] %54 : i64
  %56 = buffer [2] seq %55#1 : i64
  %57 = buffer [2] seq %55#0 : i64
  %58 = constant %12 {value = 1 : i64} : i64
  %59 = buffer [2] seq %58 : i64
  %60:2 = fork [2] %59 : i64
  %61 = buffer [2] seq %60#1 : i64
  %62 = buffer [2] seq %60#0 : i64
  %63 = constant %11 {value = 2 : index} : index
  %64 = buffer [2] seq %63 : index
  %65:2 = fork [2] %64 : index
  %66 = buffer [2] seq %65#1 : index
  %67 = buffer [2] seq %65#0 : index
  %68 = constant %10 {value = 1 : index} : index
  %69 = buffer [2] seq %68 : index
  %70:3 = fork [3] %69 : index
  %71 = buffer [2] seq %70#2 : index
  %72 = buffer [2] seq %70#1 : index
  %73 = buffer [2] seq %70#0 : index
  %74 = constant %9 {value = 0 : index} : index
  %75 = buffer [2] seq %74 : index
  %76:3 = fork [3] %75 : index
  %77 = buffer [2] seq %76#2 : index
  %78 = buffer [2] seq %76#1 : index
  %79 = buffer [2] seq %76#0 : index
  %dataResult, %addressResult = store [%77] %61, %8 : index, i64
  %80 = buffer [2] seq %addressResult : index
  %81 = buffer [2] seq %dataResult : i64
  %82 = join %7, %41 : none, none
  %83 = buffer [2] seq %82 : none
  %dataResult_0, %addressResult_1 = store [%71] %56, %83 : index, i64
  %84 = buffer [2] seq %addressResult_1 : index
  %85 = buffer [2] seq %dataResult_0 : i64
  %86 = join %6, %42, %38 : none, none, none
  %87 = buffer [2] seq %86 : none
  %dataResult_2, %addressResult_3 = store [%66] %51, %87 : index, i64
  %88 = buffer [2] seq %addressResult_3 : index
  %89 = buffer [2] seq %dataResult_2 : i64
  %dataResult_4, %addressResult_5 = store [%78] %62, %4 : index, i64
  %90 = buffer [2] seq %addressResult_5 : index
  %91 = buffer [2] seq %dataResult_4 : i64
  %92 = join %3, %29 : none, none
  %93 = buffer [2] seq %92 : none
  %dataResult_6, %addressResult_7 = store [%72] %57, %93 : index, i64
  %94 = buffer [2] seq %addressResult_7 : index
  %95 = buffer [2] seq %dataResult_6 : i64
  %96 = join %2, %30, %26 : none, none, none
  %97 = buffer [2] seq %96 : none
  %dataResult_8, %addressResult_9 = store [%67] %52, %97 : index, i64
  %98 = buffer [2] seq %addressResult_9 : index
  %99 = buffer [2] seq %dataResult_8 : i64
  %100 = buffer [1] seq %122#0 {initValues = [0]} : i1
  %101:4 = fork [4] %100 : i1
  %102 = buffer [2] seq %101#3 : i1
  %103 = buffer [2] seq %101#2 : i1
  %104 = buffer [2] seq %101#1 : i1
  %105 = buffer [2] seq %101#0 : i1
  %106 = mux %102 [%45, %146] : i1, none
  %107 = buffer [2] seq %106 : none
  %108 = mux %103 [%79, %156] : i1, index
  %109 = buffer [2] seq %108 : index
  %110:2 = fork [2] %109 : index
  %111 = buffer [2] seq %110#1 : index
  %112 = buffer [2] seq %110#0 : index
  %113 = mux %104 [%47, %133] : i1, index
  %114 = buffer [2] seq %113 : index
  %115:2 = fork [2] %114 : index
  %116 = buffer [2] seq %115#1 : index
  %117 = buffer [2] seq %115#0 : index
  %118 = mux %105 [%73, %137] : i1, index
  %119 = buffer [2] seq %118 : index
  %120 = arith.cmpi slt, %112, %117 : index
  %121 = buffer [2] seq %120 : i1
  %122:5 = fork [5] %121 : i1
  %123 = buffer [2] seq %122#4 : i1
  %124 = buffer [2] seq %122#3 : i1
  %125 = buffer [2] seq %122#2 : i1
  %126 = buffer [2] seq %122#1 : i1
  %trueResult, %falseResult = cond_br %123, %111 : index
  %127 = buffer [2] seq %trueResult : index
  sink %falseResult : index
  %128:4 = fork [4] %127 : index
  %129 = buffer [2] seq %128#3 : index
  %130 = buffer [2] seq %128#2 : index
  %131 = buffer [2] seq %128#1 : index
  %132 = buffer [2] seq %128#0 : index
  %trueResult_10, %falseResult_11 = cond_br %124, %116 : index
  %133 = buffer [2] seq %trueResult_10 : index
  sink %falseResult_11 : index
  %trueResult_12, %falseResult_13 = cond_br %125, %119 : index
  %134 = buffer [2] seq %trueResult_12 : index
  sink %falseResult_13 : index
  %135:2 = fork [2] %134 : index
  %136 = buffer [2] seq %135#1 : index
  %137 = buffer [2] seq %135#0 : index
  %trueResult_14, %falseResult_15 = cond_br %126, %107 : none
  %138 = buffer [2] seq %falseResult_15 : none
  %139 = buffer [2] seq %trueResult_14 : none
  %140:4 = fork [4] %139 : none
  %141 = buffer [2] seq %140#3 : none
  %142 = buffer [2] seq %140#2 : none
  %143 = buffer [2] seq %140#1 : none
  %144 = buffer [2] seq %140#0 : none
  %145 = join %143, %32, %19, %17 : none, none, none, none
  %146 = buffer [2] seq %145 : none
  %dataResult_16, %addressResults = load [%131] %36, %141 : index, i64
  %147 = buffer [2] seq %addressResults : index
  %148 = buffer [2] seq %dataResult_16 : i64
  %dataResult_17, %addressResults_18 = load [%130] %23, %142 : index, i64
  %149 = buffer [2] seq %addressResults_18 : index
  %150 = buffer [2] seq %dataResult_17 : i64
  %151 = arith.addi %148, %150 : i64
  %152 = buffer [2] seq %151 : i64
  %dataResult_19, %addressResult_20 = store [%129] %152, %144 : index, i64
  %153 = buffer [2] seq %addressResult_20 : index
  %154 = buffer [2] seq %dataResult_19 : i64
  %155 = arith.addi %132, %136 : index
  %156 = buffer [2] seq %155 : index
  return %138 : none
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
handshake.func @main(%arg0: none, ...) -> none attributes {argNames = ["in0"], resNames = ["out0"]} {
  %0 = buffer [2] seq %arg0 : none
  %1:14 = fork [14] %0 : none
  %2 = buffer [2] seq %1#13 : none
  %3 = buffer [2] seq %1#12 : none
  %4 = buffer [2] seq %1#11 : none
  %5 = buffer [2] seq %1#10 : none
  %6 = buffer [2] seq %1#9 : none
  %7 = buffer [2] seq %1#8 : none
  %8 = buffer [2] seq %1#7 : none
  %9 = buffer [2] seq %1#6 : none
  %10 = buffer [2] seq %1#5 : none
  %11 = buffer [2] seq %1#4 : none
  %12 = buffer [2] seq %1#3 : none
  %13 = buffer [2] seq %1#2 : none
  %14 = buffer [2] seq %1#1 : none
  %15 = buffer [2] seq %1#0 : none
  %16 = memory[ld = 0, st = 1] (%154, %153) {id = 2 : i32, lsq = false} : memref<3xi64>, (i64, index) -> none
  %17 = buffer [2] seq %16 : none
  %18:5 = memory[ld = 1, st = 3] (%91, %90, %95, %94, %99, %98, %149) {id = 1 : i32, lsq = false} : memref<3xi64>, (i64, index, i64, index, i64, index, index) -> (i64, none, none, none, none)
  %19 = buffer [2] seq %18#4 : none
  %20 = buffer [2] seq %18#3 : none
  %21 = buffer [2] seq %18#2 : none
  %22 = buffer [2] seq %18#1 : none
  %23 = buffer [2] seq %18#0 : i64
  %24:2 = fork [2] %21 : none
  %25 = buffer [2] seq %24#1 : none
  %26 = buffer [2] seq %24#0 : none
  %27:3 = fork [3] %22 : none
  %28 = buffer [2] seq %27#2 : none
  %29 = buffer [2] seq %27#1 : none
  %30 = buffer [2] seq %27#0 : none
  %31:5 = memory[ld = 1, st = 3] (%81, %80, %85, %84, %89, %88, %147) {id = 0 : i32, lsq = false} : memref<3xi64>, (i64, index, i64, index, i64, index, index) -> (i64, none, none, none, none)
  %32 = buffer [2] seq %31#4 : none
  %33 = buffer [2] seq %31#3 : none
  %34 = buffer [2] seq %31#2 : none
  %35 = buffer [2] seq %31#1 : none
  %36 = buffer [2] seq %31#0 : i64
  %37:2 = fork [2] %34 : none
  %38 = buffer [2] seq %37#1 : none
  %39 = buffer [2] seq %37#0 : none
  %40:3 = fork [3] %35 : none
  %41 = buffer [2] seq %40#2 : none
  %42 = buffer [2] seq %40#1 : none
  %43 = buffer [2] seq %40#0 : none
  %44 = join %5, %43, %39, %33, %28, %25, %20 : none, none, none, none, none, none, none
  %45 = buffer [2] seq %44 : none
  %46 = constant %15 {value = 3 : index} : index
  %47 = buffer [2] seq %46 : index
  %48 = constant %14 {value = 3 : i64} : i64
  %49 = buffer [2] seq %48 : i64
  %50:2 = fork [2] %49 : i64
  %51 = buffer [2] seq %50#1 : i64
  %52 = buffer [2] seq %50#0 : i64
  %53 = constant %13 {value = 2 : i64} : i64
  %54 = buffer [2] seq %53 : i64
  %55:2 = fork [2] %54 : i64
  %56 = buffer [2] seq %55#1 : i64
  %57 = buffer [2] seq %55#0 : i64
  %58 = constant %12 {value = 1 : i64} : i64
  %59 = buffer [2] seq %58 : i64
  %60:2 = fork [2] %59 : i64
  %61 = buffer [2] seq %60#1 : i64
  %62 = buffer [2] seq %60#0 : i64
  %63 = constant %11 {value = 2 : index} : index
  %64 = buffer [2] seq %63 : index
  %65:2 = fork [2] %64 : index
  %66 = buffer [2] seq %65#1 : index
  %67 = buffer [2] seq %65#0 : index
  %68 = constant %10 {value = 1 : index} : index
  %69 = buffer [2] seq %68 : index
  %70:3 = fork [3] %69 : index
  %71 = buffer [2] seq %70#2 : index
  %72 = buffer [2] seq %70#1 : index
  %73 = buffer [2] seq %70#0 : index
  %74 = constant %9 {value = 0 : index} : index
  %75 = buffer [2] seq %74 : index
  %76:3 = fork [3] %75 : index
  %77 = buffer [2] seq %76#2 : index
  %78 = buffer [2] seq %76#1 : index
  %79 = buffer [2] seq %76#0 : index
  %dataResult, %addressResult = store [%77] %61, %8 : index, i64
  %80 = buffer [2] seq %addressResult : index
  %81 = buffer [2] seq %dataResult : i64
  %82 = join %7, %41 : none, none
  %83 = buffer [2] seq %82 : none
  %dataResult_0, %addressResult_1 = store [%71] %56, %83 : index, i64
  %84 = buffer [2] seq %addressResult_1 : index
  %85 = buffer [2] seq %dataResult_0 : i64
  %86 = join %6, %42, %38 : none, none, none
  %87 = buffer [2] seq %86 : none
  %dataResult_2, %addressResult_3 = store [%66] %51, %87 : index, i64
  %88 = buffer [2] seq %addressResult_3 : index
  %89 = buffer [2] seq %dataResult_2 : i64
  %dataResult_4, %addressResult_5 = store [%78] %62, %4 : index, i64
  %90 = buffer [2] seq %addressResult_5 : index
  %91 = buffer [2] seq %dataResult_4 : i64
  %92 = join %3, %29 : none, none
  %93 = buffer [2] seq %92 : none
  %dataResult_6, %addressResult_7 = store [%72] %57, %93 : index, i64
  %94 = buffer [2] seq %addressResult_7 : index
  %95 = buffer [2] seq %dataResult_6 : i64
  %96 = join %2, %30, %26 : none, none, none
  %97 = buffer [2] seq %96 : none
  %dataResult_8, %addressResult_9 = store [%67] %52, %97 : index, i64
  %98 = buffer [2] seq %addressResult_9 : index
  %99 = buffer [2] seq %dataResult_8 : i64
  %100 = buffer [1] seq %122#0 {initValues = [0]} : i1
  %101:4 = fork [4] %100 : i1
  %102 = buffer [2] seq %101#3 : i1
  %103 = buffer [2] seq %101#2 : i1
  %104 = buffer [2] seq %101#1 : i1
  %105 = buffer [2] seq %101#0 : i1
  %106 = mux %102 [%45, %146] : i1, none
  %107 = buffer [2] seq %106 : none
  %108 = mux %103 [%79, %156] : i1, index
  %109 = buffer [2] seq %108 : index
  %110:2 = fork [2] %109 : index
  %111 = buffer [2] seq %110#1 : index
  %112 = buffer [2] seq %110#0 : index
  %113 = mux %104 [%47, %133] : i1, index
  %114 = buffer [2] seq %113 : index
  %115:2 = fork [2] %114 : index
  %116 = buffer [2] seq %115#1 : index
  %117 = buffer [2] seq %115#0 : index
  %118 = mux %105 [%73, %137] : i1, index
  %119 = buffer [2] seq %118 : index
  %120 = arith.cmpi slt, %112, %117 : index
  %121 = buffer [2] seq %120 : i1
  %122:5 = fork [5] %121 : i1
  %123 = buffer [2] seq %122#4 : i1
  %124 = buffer [2] seq %122#3 : i1
  %125 = buffer [2] seq %122#2 : i1
  %126 = buffer [2] seq %122#1 : i1
  %trueResult, %falseResult = cond_br %123, %111 : index
  %127 = buffer [2] seq %trueResult : index
  sink %falseResult : index
  %128:4 = fork [4] %127 : index
  %129 = buffer [2] seq %128#3 : index
  %130 = buffer [2] seq %128#2 : index
  %131 = buffer [2] seq %128#1 : index
  %132 = buffer [2] seq %128#0 : index
  %trueResult_10, %falseResult_11 = cond_br %124, %116 : index
  %133 = buffer [2] seq %trueResult_10 : index
  sink %falseResult_11 : index
  %trueResult_12, %falseResult_13 = cond_br %125, %119 : index
  %134 = buffer [2] seq %trueResult_12 : index
  sink %falseResult_13 : index
  %135:2 = fork [2] %134 : index
  %136 = buffer [2] seq %135#1 : index
  %137 = buffer [2] seq %135#0 : index
  %trueResult_14, %falseResult_15 = cond_br %126, %107 : none
  %138 = buffer [2] seq %falseResult_15 : none
  %139 = buffer [2] seq %trueResult_14 : none
  %140:4 = fork [4] %139 : none
  %141 = buffer [2] seq %140#3 : none
  %142 = buffer [2] seq %140#2 : none
  %143 = buffer [2] seq %140#1 : none
  %144 = buffer [2] seq %140#0 : none
  %145 = join %143, %32, %19, %17 : none, none, none, none
  %146 = buffer [2] seq %145 : none
  %dataResult_16, %addressResults = load [%131] %36, %141 : index, i64
  %147 = buffer [2] seq %addressResults : index
  %148 = buffer [2] seq %dataResult_16 : i64
  %dataResult_17, %addressResults_18 = load [%130] %23, %142 : index, i64
  %149 = buffer [2] seq %addressResults_18 : index
  %150 = buffer [2] seq %dataResult_17 : i64
  %151 = arith.addi %148, %150 : i64
  %152 = buffer [2] seq %151 : i64
  %dataResult_19, %addressResult_20 = store [%129] %152, %144 : index, i64
  %153 = buffer [2] seq %addressResult_20 : index
  %154 = buffer [2] seq %dataResult_19 : i64
  %155 = arith.addi %132, %136 : index
  %156 = buffer [2] seq %155 : index
  return %138 : none
}

// -----// IR Dump After HandshakeToHW (lower-handshake-to-hw) //----- //
module {
  hw.module @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in %in0 : !esi.channel<i0>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i0>) {
    %rawOutput, %valid = esi.unwrap.vr %in0, %1 : i0
    %chanOutput, %ready = esi.wrap.vr %25, %18 : i0
    %c0_i0 = hw.constant 0 : i0
    %false = hw.constant false
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
    %true = hw.constant true
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %valid, %valid0_reg : i1
    %3 = comb.mux %1, %rawOutput, %data0_reg : i0
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %c0_i0 : i0  
    %ready0_reg = seq.compreg sym @ready0_reg %10, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %15, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %15, %ready0_reg : i1
    %10 = comb.mux %9, %false, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %13, %clock reset %reset, %c0_i0 : i0  
    %11 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i0
    %12 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i0
    %13 = comb.mux %9, %c0_i0, %12 : i0
    %c0_i0_0 = hw.constant 0 : i0
    %valid1_reg = seq.compreg sym @valid1_reg %16, %clock reset %reset, %false : i1  
    %14 = comb.xor %valid1_reg, %true : i1
    %15 = comb.or %14, %19 : i1
    %16 = comb.mux %15, %4, %valid1_reg : i1
    %17 = comb.mux %15, %11, %data1_reg : i0
    %data1_reg = seq.compreg sym @data1_reg %17, %clock reset %reset, %c0_i0_0 : i0  
    %ready1_reg = seq.compreg sym @ready1_reg %24, %clock reset %reset, %false : i1  
    %18 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
    %19 = comb.xor %ready1_reg, %true : i1
    %20 = comb.xor %ready, %true : i1
    %21 = comb.and %20, %19 : i1
    %22 = comb.mux %21, %valid1_reg, %ready1_reg : i1
    %23 = comb.and %ready, %ready1_reg : i1
    %24 = comb.mux %23, %false, %22 : i1
    %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %27, %clock reset %reset, %c0_i0_0 : i0  
    %25 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i0
    %26 = comb.mux %21, %data1_reg, %ctrl_data1_reg : i0
    %27 = comb.mux %23, %c0_i0_0, %26 : i0
    hw.output %chanOutput : !esi.channel<i0>
  }
  hw.module @handshake_fork_1ins_14outs_ctrl(in %in0 : !esi.channel<i0>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i0>, out out1 : !esi.channel<i0>, out out2 : !esi.channel<i0>, out out3 : !esi.channel<i0>, out out4 : !esi.channel<i0>, out out5 : !esi.channel<i0>, out out6 : !esi.channel<i0>, out out7 : !esi.channel<i0>, out out8 : !esi.channel<i0>, out out9 : !esi.channel<i0>, out out10 : !esi.channel<i0>, out out11 : !esi.channel<i0>, out out12 : !esi.channel<i0>, out out13 : !esi.channel<i0>) {
    %rawOutput, %valid = esi.unwrap.vr %in0, %84 : i0
    %chanOutput, %ready = esi.wrap.vr %rawOutput, %3 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %9 : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %15 : i0
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %21 : i0
    %chanOutput_6, %ready_7 = esi.wrap.vr %rawOutput, %27 : i0
    %chanOutput_8, %ready_9 = esi.wrap.vr %rawOutput, %33 : i0
    %chanOutput_10, %ready_11 = esi.wrap.vr %rawOutput, %39 : i0
    %chanOutput_12, %ready_13 = esi.wrap.vr %rawOutput, %45 : i0
    %chanOutput_14, %ready_15 = esi.wrap.vr %rawOutput, %51 : i0
    %chanOutput_16, %ready_17 = esi.wrap.vr %rawOutput, %57 : i0
    %chanOutput_18, %ready_19 = esi.wrap.vr %rawOutput, %63 : i0
    %chanOutput_20, %ready_21 = esi.wrap.vr %rawOutput, %69 : i0
    %chanOutput_22, %ready_23 = esi.wrap.vr %rawOutput, %75 : i0
    %chanOutput_24, %ready_25 = esi.wrap.vr %rawOutput, %81 : i0
    %false = hw.constant false
    %true = hw.constant true
    %0 = comb.xor %84, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %84, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_1, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %84, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_3, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %84, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %valid : i1
    %22 = comb.and %ready_5, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.xor %84, %true : i1
    %25 = comb.and %29, %24 : i1
    %emitted_4 = seq.compreg sym @emitted_4 %25, %clock reset %reset, %false : i1  
    %26 = comb.xor %emitted_4, %true : i1
    %27 = comb.and %26, %valid : i1
    %28 = comb.and %ready_7, %27 : i1
    %29 = comb.or %28, %emitted_4 {sv.namehint = "done4"} : i1
    %30 = comb.xor %84, %true : i1
    %31 = comb.and %35, %30 : i1
    %emitted_5 = seq.compreg sym @emitted_5 %31, %clock reset %reset, %false : i1  
    %32 = comb.xor %emitted_5, %true : i1
    %33 = comb.and %32, %valid : i1
    %34 = comb.and %ready_9, %33 : i1
    %35 = comb.or %34, %emitted_5 {sv.namehint = "done5"} : i1
    %36 = comb.xor %84, %true : i1
    %37 = comb.and %41, %36 : i1
    %emitted_6 = seq.compreg sym @emitted_6 %37, %clock reset %reset, %false : i1  
    %38 = comb.xor %emitted_6, %true : i1
    %39 = comb.and %38, %valid : i1
    %40 = comb.and %ready_11, %39 : i1
    %41 = comb.or %40, %emitted_6 {sv.namehint = "done6"} : i1
    %42 = comb.xor %84, %true : i1
    %43 = comb.and %47, %42 : i1
    %emitted_7 = seq.compreg sym @emitted_7 %43, %clock reset %reset, %false : i1  
    %44 = comb.xor %emitted_7, %true : i1
    %45 = comb.and %44, %valid : i1
    %46 = comb.and %ready_13, %45 : i1
    %47 = comb.or %46, %emitted_7 {sv.namehint = "done7"} : i1
    %48 = comb.xor %84, %true : i1
    %49 = comb.and %53, %48 : i1
    %emitted_8 = seq.compreg sym @emitted_8 %49, %clock reset %reset, %false : i1  
    %50 = comb.xor %emitted_8, %true : i1
    %51 = comb.and %50, %valid : i1
    %52 = comb.and %ready_15, %51 : i1
    %53 = comb.or %52, %emitted_8 {sv.namehint = "done8"} : i1
    %54 = comb.xor %84, %true : i1
    %55 = comb.and %59, %54 : i1
    %emitted_9 = seq.compreg sym @emitted_9 %55, %clock reset %reset, %false : i1  
    %56 = comb.xor %emitted_9, %true : i1
    %57 = comb.and %56, %valid : i1
    %58 = comb.and %ready_17, %57 : i1
    %59 = comb.or %58, %emitted_9 {sv.namehint = "done9"} : i1
    %60 = comb.xor %84, %true : i1
    %61 = comb.and %65, %60 : i1
    %emitted_10 = seq.compreg sym @emitted_10 %61, %clock reset %reset, %false : i1  
    %62 = comb.xor %emitted_10, %true : i1
    %63 = comb.and %62, %valid : i1
    %64 = comb.and %ready_19, %63 : i1
    %65 = comb.or %64, %emitted_10 {sv.namehint = "done10"} : i1
    %66 = comb.xor %84, %true : i1
    %67 = comb.and %71, %66 : i1
    %emitted_11 = seq.compreg sym @emitted_11 %67, %clock reset %reset, %false : i1  
    %68 = comb.xor %emitted_11, %true : i1
    %69 = comb.and %68, %valid : i1
    %70 = comb.and %ready_21, %69 : i1
    %71 = comb.or %70, %emitted_11 {sv.namehint = "done11"} : i1
    %72 = comb.xor %84, %true : i1
    %73 = comb.and %77, %72 : i1
    %emitted_12 = seq.compreg sym @emitted_12 %73, %clock reset %reset, %false : i1  
    %74 = comb.xor %emitted_12, %true : i1
    %75 = comb.and %74, %valid : i1
    %76 = comb.and %ready_23, %75 : i1
    %77 = comb.or %76, %emitted_12 {sv.namehint = "done12"} : i1
    %78 = comb.xor %84, %true : i1
    %79 = comb.and %83, %78 : i1
    %emitted_13 = seq.compreg sym @emitted_13 %79, %clock reset %reset, %false : i1  
    %80 = comb.xor %emitted_13, %true : i1
    %81 = comb.and %80, %valid : i1
    %82 = comb.and %ready_25, %81 : i1
    %83 = comb.or %82, %emitted_13 {sv.namehint = "done13"} : i1
    %84 = comb.and %5, %11, %17, %23, %29, %35, %41, %47, %53, %59, %65, %71, %77, %83 {sv.namehint = "allDone"} : i1
    hw.output %chanOutput, %chanOutput_0, %chanOutput_2, %chanOutput_4, %chanOutput_6, %chanOutput_8, %chanOutput_10, %chanOutput_12, %chanOutput_14, %chanOutput_16, %chanOutput_18, %chanOutput_20, %chanOutput_22, %chanOutput_24 : !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>
  }
  hw.module @handshake_memory_out_ui64_id2(in %stData0 : !esi.channel<i64>, in %stAddr0 : !esi.channel<i64>, in %clock : !seq.clock, in %reset : i1, out stDone0 : !esi.channel<i0>) {
    %rawOutput, %valid = esi.unwrap.vr %stData0, %2 : i64
    %rawOutput_0, %valid_1 = esi.unwrap.vr %stAddr0, %2 : i64
    %chanOutput, %ready = esi.wrap.vr %c0_i0, %writeValidBuffer : i0
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_2 = seq.hlmem @_handshake_memory_2 %clock, %reset : <3xi64>
    %false = hw.constant false
    %writeValidBuffer = seq.compreg sym @writeValidBuffer %4, %clock reset %reset, %false : i1  
    %0 = comb.and %ready, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
    %true = hw.constant true
    %1 = comb.xor %writeValidBuffer, %true : i1
    %2 = comb.or %1, %0 {sv.namehint = "emptyOrComplete"} : i1
    %3 = comb.and %valid_1, %valid {sv.namehint = "writeValid"} : i1
    %4 = comb.mux %2, %3, %writeValidBuffer : i1
    %5 = comb.extract %rawOutput_0 from 0 : (i64) -> i2
    seq.write %_handshake_memory_2[%5] %rawOutput wren %3 {latency = 1 : i64} : !seq.hlmem<3xi64>
    hw.output %chanOutput : !esi.channel<i0>
  }
  hw.module @handshake_memory_out_ui64_id1(in %stData0 : !esi.channel<i64>, in %stAddr0 : !esi.channel<i64>, in %stData1 : !esi.channel<i64>, in %stAddr1 : !esi.channel<i64>, in %stData2 : !esi.channel<i64>, in %stAddr2 : !esi.channel<i64>, in %ldAddr0 : !esi.channel<i64>, in %clock : !seq.clock, in %reset : i1, out ldData0 : !esi.channel<i64>, out stDone0 : !esi.channel<i0>, out stDone1 : !esi.channel<i0>, out stDone2 : !esi.channel<i0>, out ldDone0 : !esi.channel<i0>) {
    %rawOutput, %valid = esi.unwrap.vr %stData0, %16 : i64
    %rawOutput_0, %valid_1 = esi.unwrap.vr %stAddr0, %16 : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %stData1, %22 : i64
    %rawOutput_4, %valid_5 = esi.unwrap.vr %stAddr1, %22 : i64
    %rawOutput_6, %valid_7 = esi.unwrap.vr %stData2, %28 : i64
    %rawOutput_8, %valid_9 = esi.unwrap.vr %stAddr2, %28 : i64
    %rawOutput_10, %valid_11 = esi.unwrap.vr %ldAddr0, %13 : i64
    %chanOutput, %ready = esi.wrap.vr %_handshake_memory_1_rdata, %4 : i64
    %chanOutput_12, %ready_13 = esi.wrap.vr %c0_i0, %writeValidBuffer : i0
    %chanOutput_14, %ready_15 = esi.wrap.vr %c0_i0, %writeValidBuffer_20 : i0
    %chanOutput_16, %ready_17 = esi.wrap.vr %c0_i0, %writeValidBuffer_21 : i0
    %chanOutput_18, %ready_19 = esi.wrap.vr %c0_i0, %10 : i0
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_1 = seq.hlmem @_handshake_memory_1 %clock, %reset : <3xi64>
    %0 = comb.extract %rawOutput_10 from 0 : (i64) -> i2
    %_handshake_memory_1_rdata = seq.read %_handshake_memory_1[%0] rden %valid_11 {latency = 0 : i64} : !seq.hlmem<3xi64>
    %false = hw.constant false
    %true = hw.constant true
    %1 = comb.xor %13, %true : i1
    %2 = comb.and %6, %1 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %2, %clock reset %reset, %false : i1  
    %3 = comb.xor %emitted_0, %true : i1
    %4 = comb.and %3, %valid_11 : i1
    %5 = comb.and %ready, %4 : i1
    %6 = comb.or %5, %emitted_0 {sv.namehint = "done0"} : i1
    %7 = comb.xor %13, %true : i1
    %8 = comb.and %12, %7 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %8, %clock reset %reset, %false : i1  
    %9 = comb.xor %emitted_1, %true : i1
    %10 = comb.and %9, %valid_11 : i1
    %11 = comb.and %ready_19, %10 : i1
    %12 = comb.or %11, %emitted_1 {sv.namehint = "done1"} : i1
    %13 = comb.and %6, %12 {sv.namehint = "allDone"} : i1
    %writeValidBuffer = seq.compreg sym @writeValidBuffer %18, %clock reset %reset, %false : i1  
    %14 = comb.and %ready_13, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
    %15 = comb.xor %writeValidBuffer, %true : i1
    %16 = comb.or %15, %14 {sv.namehint = "emptyOrComplete"} : i1
    %17 = comb.and %valid_1, %valid {sv.namehint = "writeValid"} : i1
    %18 = comb.mux %16, %17, %writeValidBuffer : i1
    %19 = comb.extract %rawOutput_0 from 0 : (i64) -> i2
    seq.write %_handshake_memory_1[%19] %rawOutput wren %17 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_20 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %24, %clock reset %reset, %false : i1  
    %20 = comb.and %ready_15, %writeValidBuffer_20 {sv.namehint = "storeCompleted"} : i1
    %21 = comb.xor %writeValidBuffer_20, %true : i1
    %22 = comb.or %21, %20 {sv.namehint = "emptyOrComplete"} : i1
    %23 = comb.and %valid_5, %valid_3 {sv.namehint = "writeValid"} : i1
    %24 = comb.mux %22, %23, %writeValidBuffer_20 : i1
    %25 = comb.extract %rawOutput_4 from 0 : (i64) -> i2
    seq.write %_handshake_memory_1[%25] %rawOutput_2 wren %23 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_21 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %30, %clock reset %reset, %false : i1  
    %26 = comb.and %ready_17, %writeValidBuffer_21 {sv.namehint = "storeCompleted"} : i1
    %27 = comb.xor %writeValidBuffer_21, %true : i1
    %28 = comb.or %27, %26 {sv.namehint = "emptyOrComplete"} : i1
    %29 = comb.and %valid_9, %valid_7 {sv.namehint = "writeValid"} : i1
    %30 = comb.mux %28, %29, %writeValidBuffer_21 : i1
    %31 = comb.extract %rawOutput_8 from 0 : (i64) -> i2
    seq.write %_handshake_memory_1[%31] %rawOutput_6 wren %29 {latency = 1 : i64} : !seq.hlmem<3xi64>
    hw.output %chanOutput, %chanOutput_12, %chanOutput_14, %chanOutput_16, %chanOutput_18 : !esi.channel<i64>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>
  }
  hw.module @handshake_buffer_in_ui64_out_ui64_2slots_seq(in %in0 : !esi.channel<i64>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i64>) {
    %rawOutput, %valid = esi.unwrap.vr %in0, %1 : i64
    %chanOutput, %ready = esi.wrap.vr %25, %18 : i64
    %c0_i64 = hw.constant 0 : i64
    %false = hw.constant false
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
    %true = hw.constant true
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %valid, %valid0_reg : i1
    %3 = comb.mux %1, %rawOutput, %data0_reg : i64
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %c0_i64 : i64  
    %ready0_reg = seq.compreg sym @ready0_reg %10, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %15, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %15, %ready0_reg : i1
    %10 = comb.mux %9, %false, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %13, %clock reset %reset, %c0_i64 : i64  
    %11 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i64
    %12 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i64
    %13 = comb.mux %9, %c0_i64, %12 : i64
    %valid1_reg = seq.compreg sym @valid1_reg %16, %clock reset %reset, %false : i1  
    %14 = comb.xor %valid1_reg, %true : i1
    %15 = comb.or %14, %19 : i1
    %16 = comb.mux %15, %4, %valid1_reg : i1
    %17 = comb.mux %15, %11, %data1_reg : i64
    %data1_reg = seq.compreg sym @data1_reg %17, %clock reset %reset, %c0_i64 : i64  
    %ready1_reg = seq.compreg sym @ready1_reg %24, %clock reset %reset, %false : i1  
    %18 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
    %19 = comb.xor %ready1_reg, %true : i1
    %20 = comb.xor %ready, %true : i1
    %21 = comb.and %20, %19 : i1
    %22 = comb.mux %21, %valid1_reg, %ready1_reg : i1
    %23 = comb.and %ready, %ready1_reg : i1
    %24 = comb.mux %23, %false, %22 : i1
    %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %27, %clock reset %reset, %c0_i64 : i64  
    %25 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i64
    %26 = comb.mux %21, %data1_reg, %ctrl_data1_reg : i64
    %27 = comb.mux %23, %c0_i64, %26 : i64
    hw.output %chanOutput : !esi.channel<i64>
  }
  hw.module @handshake_fork_1ins_2outs_ctrl(in %in0 : !esi.channel<i0>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i0>, out out1 : !esi.channel<i0>) {
    %rawOutput, %valid = esi.unwrap.vr %in0, %12 : i0
    %chanOutput, %ready = esi.wrap.vr %rawOutput, %3 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %9 : i0
    %false = hw.constant false
    %true = hw.constant true
    %0 = comb.xor %12, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %12, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_1, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.and %5, %11 {sv.namehint = "allDone"} : i1
    hw.output %chanOutput, %chanOutput_0 : !esi.channel<i0>, !esi.channel<i0>
  }
  hw.module @handshake_fork_1ins_3outs_ctrl(in %in0 : !esi.channel<i0>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i0>, out out1 : !esi.channel<i0>, out out2 : !esi.channel<i0>) {
    %rawOutput, %valid = esi.unwrap.vr %in0, %18 : i0
    %chanOutput, %ready = esi.wrap.vr %rawOutput, %3 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %9 : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %15 : i0
    %false = hw.constant false
    %true = hw.constant true
    %0 = comb.xor %18, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %18, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_1, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %18, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_3, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.and %5, %11, %17 {sv.namehint = "allDone"} : i1
    hw.output %chanOutput, %chanOutput_0, %chanOutput_2 : !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>
  }
  hw.module @handshake_memory_out_ui64_id0(in %stData0 : !esi.channel<i64>, in %stAddr0 : !esi.channel<i64>, in %stData1 : !esi.channel<i64>, in %stAddr1 : !esi.channel<i64>, in %stData2 : !esi.channel<i64>, in %stAddr2 : !esi.channel<i64>, in %ldAddr0 : !esi.channel<i64>, in %clock : !seq.clock, in %reset : i1, out ldData0 : !esi.channel<i64>, out stDone0 : !esi.channel<i0>, out stDone1 : !esi.channel<i0>, out stDone2 : !esi.channel<i0>, out ldDone0 : !esi.channel<i0>) {
    %rawOutput, %valid = esi.unwrap.vr %stData0, %16 : i64
    %rawOutput_0, %valid_1 = esi.unwrap.vr %stAddr0, %16 : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %stData1, %22 : i64
    %rawOutput_4, %valid_5 = esi.unwrap.vr %stAddr1, %22 : i64
    %rawOutput_6, %valid_7 = esi.unwrap.vr %stData2, %28 : i64
    %rawOutput_8, %valid_9 = esi.unwrap.vr %stAddr2, %28 : i64
    %rawOutput_10, %valid_11 = esi.unwrap.vr %ldAddr0, %13 : i64
    %chanOutput, %ready = esi.wrap.vr %_handshake_memory_0_rdata, %4 : i64
    %chanOutput_12, %ready_13 = esi.wrap.vr %c0_i0, %writeValidBuffer : i0
    %chanOutput_14, %ready_15 = esi.wrap.vr %c0_i0, %writeValidBuffer_20 : i0
    %chanOutput_16, %ready_17 = esi.wrap.vr %c0_i0, %writeValidBuffer_21 : i0
    %chanOutput_18, %ready_19 = esi.wrap.vr %c0_i0, %10 : i0
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_0 = seq.hlmem @_handshake_memory_0 %clock, %reset : <3xi64>
    %0 = comb.extract %rawOutput_10 from 0 : (i64) -> i2
    %_handshake_memory_0_rdata = seq.read %_handshake_memory_0[%0] rden %valid_11 {latency = 0 : i64} : !seq.hlmem<3xi64>
    %false = hw.constant false
    %true = hw.constant true
    %1 = comb.xor %13, %true : i1
    %2 = comb.and %6, %1 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %2, %clock reset %reset, %false : i1  
    %3 = comb.xor %emitted_0, %true : i1
    %4 = comb.and %3, %valid_11 : i1
    %5 = comb.and %ready, %4 : i1
    %6 = comb.or %5, %emitted_0 {sv.namehint = "done0"} : i1
    %7 = comb.xor %13, %true : i1
    %8 = comb.and %12, %7 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %8, %clock reset %reset, %false : i1  
    %9 = comb.xor %emitted_1, %true : i1
    %10 = comb.and %9, %valid_11 : i1
    %11 = comb.and %ready_19, %10 : i1
    %12 = comb.or %11, %emitted_1 {sv.namehint = "done1"} : i1
    %13 = comb.and %6, %12 {sv.namehint = "allDone"} : i1
    %writeValidBuffer = seq.compreg sym @writeValidBuffer %18, %clock reset %reset, %false : i1  
    %14 = comb.and %ready_13, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
    %15 = comb.xor %writeValidBuffer, %true : i1
    %16 = comb.or %15, %14 {sv.namehint = "emptyOrComplete"} : i1
    %17 = comb.and %valid_1, %valid {sv.namehint = "writeValid"} : i1
    %18 = comb.mux %16, %17, %writeValidBuffer : i1
    %19 = comb.extract %rawOutput_0 from 0 : (i64) -> i2
    seq.write %_handshake_memory_0[%19] %rawOutput wren %17 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_20 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %24, %clock reset %reset, %false : i1  
    %20 = comb.and %ready_15, %writeValidBuffer_20 {sv.namehint = "storeCompleted"} : i1
    %21 = comb.xor %writeValidBuffer_20, %true : i1
    %22 = comb.or %21, %20 {sv.namehint = "emptyOrComplete"} : i1
    %23 = comb.and %valid_5, %valid_3 {sv.namehint = "writeValid"} : i1
    %24 = comb.mux %22, %23, %writeValidBuffer_20 : i1
    %25 = comb.extract %rawOutput_4 from 0 : (i64) -> i2
    seq.write %_handshake_memory_0[%25] %rawOutput_2 wren %23 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_21 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %30, %clock reset %reset, %false : i1  
    %26 = comb.and %ready_17, %writeValidBuffer_21 {sv.namehint = "storeCompleted"} : i1
    %27 = comb.xor %writeValidBuffer_21, %true : i1
    %28 = comb.or %27, %26 {sv.namehint = "emptyOrComplete"} : i1
    %29 = comb.and %valid_9, %valid_7 {sv.namehint = "writeValid"} : i1
    %30 = comb.mux %28, %29, %writeValidBuffer_21 : i1
    %31 = comb.extract %rawOutput_8 from 0 : (i64) -> i2
    seq.write %_handshake_memory_0[%31] %rawOutput_6 wren %29 {latency = 1 : i64} : !seq.hlmem<3xi64>
    hw.output %chanOutput, %chanOutput_12, %chanOutput_14, %chanOutput_16, %chanOutput_18 : !esi.channel<i64>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>
  }
  hw.module @handshake_join_7ins_1outs_ctrl(in %in0 : !esi.channel<i0>, in %in1 : !esi.channel<i0>, in %in2 : !esi.channel<i0>, in %in3 : !esi.channel<i0>, in %in4 : !esi.channel<i0>, in %in5 : !esi.channel<i0>, in %in6 : !esi.channel<i0>, out out0 : !esi.channel<i0>) {
    %rawOutput, %valid = esi.unwrap.vr %in0, %1 : i0
    %rawOutput_0, %valid_1 = esi.unwrap.vr %in1, %1 : i0
    %rawOutput_2, %valid_3 = esi.unwrap.vr %in2, %1 : i0
    %rawOutput_4, %valid_5 = esi.unwrap.vr %in3, %1 : i0
    %rawOutput_6, %valid_7 = esi.unwrap.vr %in4, %1 : i0
    %rawOutput_8, %valid_9 = esi.unwrap.vr %in5, %1 : i0
    %rawOutput_10, %valid_11 = esi.unwrap.vr %in6, %1 : i0
    %chanOutput, %ready = esi.wrap.vr %c0_i0, %0 : i0
    %0 = comb.and %valid, %valid_1, %valid_3, %valid_5, %valid_7, %valid_9, %valid_11 : i1
    %1 = comb.and %ready, %0 : i1
    %c0_i0 = hw.constant 0 : i0
    hw.output %chanOutput : !esi.channel<i0>
  }
  hw.module @handshake_constant_c3_out_ui64(in %ctrl : !esi.channel<i0>, out out0 : !esi.channel<i64>) {
    %rawOutput, %valid = esi.unwrap.vr %ctrl, %ready : i0
    %chanOutput, %ready = esi.wrap.vr %c3_i64, %valid : i64
    %c3_i64 = hw.constant 3 : i64
    hw.output %chanOutput : !esi.channel<i64>
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64(in %in0 : !esi.channel<i64>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i64>, out out1 : !esi.channel<i64>) {
    %rawOutput, %valid = esi.unwrap.vr %in0, %12 : i64
    %chanOutput, %ready = esi.wrap.vr %rawOutput, %3 : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %9 : i64
    %false = hw.constant false
    %true = hw.constant true
    %0 = comb.xor %12, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %12, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_1, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.and %5, %11 {sv.namehint = "allDone"} : i1
    hw.output %chanOutput, %chanOutput_0 : !esi.channel<i64>, !esi.channel<i64>
  }
  hw.module @handshake_constant_c2_out_ui64(in %ctrl : !esi.channel<i0>, out out0 : !esi.channel<i64>) {
    %rawOutput, %valid = esi.unwrap.vr %ctrl, %ready : i0
    %chanOutput, %ready = esi.wrap.vr %c2_i64, %valid : i64
    %c2_i64 = hw.constant 2 : i64
    hw.output %chanOutput : !esi.channel<i64>
  }
  hw.module @handshake_constant_c1_out_ui64(in %ctrl : !esi.channel<i0>, out out0 : !esi.channel<i64>) {
    %rawOutput, %valid = esi.unwrap.vr %ctrl, %ready : i0
    %chanOutput, %ready = esi.wrap.vr %c1_i64, %valid : i64
    %c1_i64 = hw.constant 1 : i64
    hw.output %chanOutput : !esi.channel<i64>
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64(in %in0 : !esi.channel<i64>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i64>, out out1 : !esi.channel<i64>, out out2 : !esi.channel<i64>) {
    %rawOutput, %valid = esi.unwrap.vr %in0, %18 : i64
    %chanOutput, %ready = esi.wrap.vr %rawOutput, %3 : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %9 : i64
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %15 : i64
    %false = hw.constant false
    %true = hw.constant true
    %0 = comb.xor %18, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %18, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_1, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %18, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_3, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.and %5, %11, %17 {sv.namehint = "allDone"} : i1
    hw.output %chanOutput, %chanOutput_0, %chanOutput_2 : !esi.channel<i64>, !esi.channel<i64>, !esi.channel<i64>
  }
  hw.module @handshake_constant_c0_out_ui64(in %ctrl : !esi.channel<i0>, out out0 : !esi.channel<i64>) {
    %rawOutput, %valid = esi.unwrap.vr %ctrl, %ready : i0
    %chanOutput, %ready = esi.wrap.vr %c0_i64, %valid : i64
    %c0_i64 = hw.constant 0 : i64
    hw.output %chanOutput : !esi.channel<i64>
  }
  hw.module @handshake_store_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : !esi.channel<i64>, in %dataIn : !esi.channel<i64>, in %ctrl : !esi.channel<i0>, out dataToMem : !esi.channel<i64>, out addrOut0 : !esi.channel<i64>) {
    %rawOutput, %valid = esi.unwrap.vr %addrIn0, %2 : i64
    %rawOutput_0, %valid_1 = esi.unwrap.vr %dataIn, %2 : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %ctrl, %2 : i0
    %chanOutput, %ready = esi.wrap.vr %rawOutput_0, %1 : i64
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %1 : i64
    %0 = comb.and %ready, %ready_5 : i1
    %1 = comb.and %valid_1, %valid, %valid_3 : i1
    %2 = comb.and %0, %1 : i1
    hw.output %chanOutput, %chanOutput_4 : !esi.channel<i64>, !esi.channel<i64>
  }
  hw.module @handshake_join_2ins_1outs_ctrl(in %in0 : !esi.channel<i0>, in %in1 : !esi.channel<i0>, out out0 : !esi.channel<i0>) {
    %rawOutput, %valid = esi.unwrap.vr %in0, %1 : i0
    %rawOutput_0, %valid_1 = esi.unwrap.vr %in1, %1 : i0
    %chanOutput, %ready = esi.wrap.vr %c0_i0, %0 : i0
    %0 = comb.and %valid, %valid_1 : i1
    %1 = comb.and %ready, %0 : i1
    %c0_i0 = hw.constant 0 : i0
    hw.output %chanOutput : !esi.channel<i0>
  }
  hw.module @handshake_join_3ins_1outs_ctrl(in %in0 : !esi.channel<i0>, in %in1 : !esi.channel<i0>, in %in2 : !esi.channel<i0>, out out0 : !esi.channel<i0>) {
    %rawOutput, %valid = esi.unwrap.vr %in0, %1 : i0
    %rawOutput_0, %valid_1 = esi.unwrap.vr %in1, %1 : i0
    %rawOutput_2, %valid_3 = esi.unwrap.vr %in2, %1 : i0
    %chanOutput, %ready = esi.wrap.vr %c0_i0, %0 : i0
    %0 = comb.and %valid, %valid_1, %valid_3 : i1
    %1 = comb.and %ready, %0 : i1
    %c0_i0 = hw.constant 0 : i0
    hw.output %chanOutput : !esi.channel<i0>
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in %in0 : !esi.channel<i1>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i1>) {
    %rawOutput, %valid = esi.unwrap.vr %in0, %1 : i1
    %chanOutput, %ready = esi.wrap.vr %11, %4 : i1
    %false = hw.constant false
    %true = hw.constant true
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %true : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %valid, %valid0_reg : i1
    %3 = comb.mux %1, %rawOutput, %data0_reg : i1
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %false : i1  
    %ready0_reg = seq.compreg sym @ready0_reg %10, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %ready, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %ready, %ready0_reg : i1
    %10 = comb.mux %9, %false, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %13, %clock reset %reset, %false : i1  
    %11 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i1
    %12 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i1
    %13 = comb.mux %9, %false, %12 : i1
    hw.output %chanOutput : !esi.channel<i1>
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in %in0 : !esi.channel<i1>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i1>, out out1 : !esi.channel<i1>, out out2 : !esi.channel<i1>, out out3 : !esi.channel<i1>) {
    %rawOutput, %valid = esi.unwrap.vr %in0, %24 : i1
    %chanOutput, %ready = esi.wrap.vr %rawOutput, %3 : i1
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %9 : i1
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %15 : i1
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %21 : i1
    %false = hw.constant false
    %true = hw.constant true
    %0 = comb.xor %24, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %24, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_1, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %24, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_3, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %24, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %valid : i1
    %22 = comb.and %ready_5, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
    hw.output %chanOutput, %chanOutput_0, %chanOutput_2, %chanOutput_4 : !esi.channel<i1>, !esi.channel<i1>, !esi.channel<i1>, !esi.channel<i1>
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_2slots_seq(in %in0 : !esi.channel<i1>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i1>) {
    %rawOutput, %valid = esi.unwrap.vr %in0, %1 : i1
    %chanOutput, %ready = esi.wrap.vr %25, %18 : i1
    %false = hw.constant false
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
    %true = hw.constant true
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %valid, %valid0_reg : i1
    %3 = comb.mux %1, %rawOutput, %data0_reg : i1
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %false : i1  
    %ready0_reg = seq.compreg sym @ready0_reg %10, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %15, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %15, %ready0_reg : i1
    %10 = comb.mux %9, %false, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %13, %clock reset %reset, %false : i1  
    %11 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i1
    %12 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i1
    %13 = comb.mux %9, %false, %12 : i1
    %valid1_reg = seq.compreg sym @valid1_reg %16, %clock reset %reset, %false : i1  
    %14 = comb.xor %valid1_reg, %true : i1
    %15 = comb.or %14, %19 : i1
    %16 = comb.mux %15, %4, %valid1_reg : i1
    %17 = comb.mux %15, %11, %data1_reg : i1
    %data1_reg = seq.compreg sym @data1_reg %17, %clock reset %reset, %false : i1  
    %ready1_reg = seq.compreg sym @ready1_reg %24, %clock reset %reset, %false : i1  
    %18 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
    %19 = comb.xor %ready1_reg, %true : i1
    %20 = comb.xor %ready, %true : i1
    %21 = comb.and %20, %19 : i1
    %22 = comb.mux %21, %valid1_reg, %ready1_reg : i1
    %23 = comb.and %ready, %ready1_reg : i1
    %24 = comb.mux %23, %false, %22 : i1
    %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %27, %clock reset %reset, %false : i1  
    %25 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i1
    %26 = comb.mux %21, %data1_reg, %ctrl_data1_reg : i1
    %27 = comb.mux %23, %false, %26 : i1
    hw.output %chanOutput : !esi.channel<i1>
  }
  hw.module @handshake_mux_in_ui1_3ins_1outs_ctrl(in %select : !esi.channel<i1>, in %in0 : !esi.channel<i0>, in %in1 : !esi.channel<i0>, out out0 : !esi.channel<i0>) {
    %rawOutput, %valid = esi.unwrap.vr %select, %4 : i1
    %rawOutput_0, %valid_1 = esi.unwrap.vr %in0, %6 : i0
    %rawOutput_2, %valid_3 = esi.unwrap.vr %in1, %8 : i0
    %chanOutput, %ready = esi.wrap.vr %9, %3 : i0
    %false = hw.constant false
    %0 = comb.concat %false, %rawOutput : i1, i1
    %c1_i2 = hw.constant 1 : i2
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = comb.mux %rawOutput, %valid_3, %valid_1 : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %3, %ready : i1
    %5 = comb.extract %1 from 0 : (i2) -> i1
    %6 = comb.and %5, %4 : i1
    %7 = comb.extract %1 from 1 : (i2) -> i1
    %8 = comb.and %7, %4 : i1
    %9 = comb.mux %rawOutput, %rawOutput_2, %rawOutput_0 : i0
    hw.output %chanOutput : !esi.channel<i0>
  }
  hw.module @handshake_mux_in_ui1_ui64_ui64_out_ui64(in %select : !esi.channel<i1>, in %in0 : !esi.channel<i64>, in %in1 : !esi.channel<i64>, out out0 : !esi.channel<i64>) {
    %rawOutput, %valid = esi.unwrap.vr %select, %4 : i1
    %rawOutput_0, %valid_1 = esi.unwrap.vr %in0, %6 : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %in1, %8 : i64
    %chanOutput, %ready = esi.wrap.vr %9, %3 : i64
    %false = hw.constant false
    %0 = comb.concat %false, %rawOutput : i1, i1
    %c1_i2 = hw.constant 1 : i2
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = comb.mux %rawOutput, %valid_3, %valid_1 : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %3, %ready : i1
    %5 = comb.extract %1 from 0 : (i2) -> i1
    %6 = comb.and %5, %4 : i1
    %7 = comb.extract %1 from 1 : (i2) -> i1
    %8 = comb.and %7, %4 : i1
    %9 = comb.mux %rawOutput, %rawOutput_2, %rawOutput_0 : i64
    hw.output %chanOutput : !esi.channel<i64>
  }
  hw.module @arith_cmpi_in_ui64_ui64_out_ui1_slt(in %in0 : !esi.channel<i64>, in %in1 : !esi.channel<i64>, out out0 : !esi.channel<i1>) {
    %rawOutput, %valid = esi.unwrap.vr %in0, %1 : i64
    %rawOutput_0, %valid_1 = esi.unwrap.vr %in1, %1 : i64
    %chanOutput, %ready = esi.wrap.vr %2, %0 : i1
    %0 = comb.and %valid, %valid_1 : i1
    %1 = comb.and %ready, %0 : i1
    %2 = comb.icmp slt %rawOutput, %rawOutput_0 : i64
    hw.output %chanOutput : !esi.channel<i1>
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in %in0 : !esi.channel<i1>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i1>, out out1 : !esi.channel<i1>, out out2 : !esi.channel<i1>, out out3 : !esi.channel<i1>, out out4 : !esi.channel<i1>) {
    %rawOutput, %valid = esi.unwrap.vr %in0, %30 : i1
    %chanOutput, %ready = esi.wrap.vr %rawOutput, %3 : i1
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %9 : i1
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %15 : i1
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %21 : i1
    %chanOutput_6, %ready_7 = esi.wrap.vr %rawOutput, %27 : i1
    %false = hw.constant false
    %true = hw.constant true
    %0 = comb.xor %30, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %30, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_1, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %30, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_3, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %30, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %valid : i1
    %22 = comb.and %ready_5, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.xor %30, %true : i1
    %25 = comb.and %29, %24 : i1
    %emitted_4 = seq.compreg sym @emitted_4 %25, %clock reset %reset, %false : i1  
    %26 = comb.xor %emitted_4, %true : i1
    %27 = comb.and %26, %valid : i1
    %28 = comb.and %ready_7, %27 : i1
    %29 = comb.or %28, %emitted_4 {sv.namehint = "done4"} : i1
    %30 = comb.and %5, %11, %17, %23, %29 {sv.namehint = "allDone"} : i1
    hw.output %chanOutput, %chanOutput_0, %chanOutput_2, %chanOutput_4, %chanOutput_6 : !esi.channel<i1>, !esi.channel<i1>, !esi.channel<i1>, !esi.channel<i1>, !esi.channel<i1>
  }
  hw.module @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(in %cond : !esi.channel<i1>, in %data : !esi.channel<i64>, out outTrue : !esi.channel<i64>, out outFalse : !esi.channel<i64>) {
    %rawOutput, %valid = esi.unwrap.vr %cond, %5 : i1
    %rawOutput_0, %valid_1 = esi.unwrap.vr %data, %5 : i64
    %chanOutput, %ready = esi.wrap.vr %rawOutput_0, %1 : i64
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput_0, %3 : i64
    %0 = comb.and %valid, %valid_1 : i1
    %1 = comb.and %rawOutput, %0 : i1
    %true = hw.constant true
    %2 = comb.xor %rawOutput, %true : i1
    %3 = comb.and %2, %0 : i1
    %4 = comb.mux %rawOutput, %ready, %ready_3 : i1
    %5 = comb.and %4, %0 : i1
    hw.output %chanOutput, %chanOutput_2 : !esi.channel<i64>, !esi.channel<i64>
  }
  hw.module @handshake_sink_in_ui64(in %in0 : !esi.channel<i64>) {
    %rawOutput, %valid = esi.unwrap.vr %in0, %true : i64
    %true = hw.constant true
    hw.output
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in %in0 : !esi.channel<i64>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i64>, out out1 : !esi.channel<i64>, out out2 : !esi.channel<i64>, out out3 : !esi.channel<i64>) {
    %rawOutput, %valid = esi.unwrap.vr %in0, %24 : i64
    %chanOutput, %ready = esi.wrap.vr %rawOutput, %3 : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %9 : i64
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %15 : i64
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %21 : i64
    %false = hw.constant false
    %true = hw.constant true
    %0 = comb.xor %24, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %24, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_1, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %24, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_3, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %24, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %valid : i1
    %22 = comb.and %ready_5, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
    hw.output %chanOutput, %chanOutput_0, %chanOutput_2, %chanOutput_4 : !esi.channel<i64>, !esi.channel<i64>, !esi.channel<i64>, !esi.channel<i64>
  }
  hw.module @handshake_cond_br_in_ui1_2ins_2outs_ctrl(in %cond : !esi.channel<i1>, in %data : !esi.channel<i0>, out outTrue : !esi.channel<i0>, out outFalse : !esi.channel<i0>) {
    %rawOutput, %valid = esi.unwrap.vr %cond, %5 : i1
    %rawOutput_0, %valid_1 = esi.unwrap.vr %data, %5 : i0
    %chanOutput, %ready = esi.wrap.vr %rawOutput_0, %1 : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput_0, %3 : i0
    %0 = comb.and %valid, %valid_1 : i1
    %1 = comb.and %rawOutput, %0 : i1
    %true = hw.constant true
    %2 = comb.xor %rawOutput, %true : i1
    %3 = comb.and %2, %0 : i1
    %4 = comb.mux %rawOutput, %ready, %ready_3 : i1
    %5 = comb.and %4, %0 : i1
    hw.output %chanOutput, %chanOutput_2 : !esi.channel<i0>, !esi.channel<i0>
  }
  hw.module @handshake_fork_1ins_4outs_ctrl(in %in0 : !esi.channel<i0>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i0>, out out1 : !esi.channel<i0>, out out2 : !esi.channel<i0>, out out3 : !esi.channel<i0>) {
    %rawOutput, %valid = esi.unwrap.vr %in0, %24 : i0
    %chanOutput, %ready = esi.wrap.vr %rawOutput, %3 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %9 : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %15 : i0
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %21 : i0
    %false = hw.constant false
    %true = hw.constant true
    %0 = comb.xor %24, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %24, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_1, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %24, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_3, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %24, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %valid : i1
    %22 = comb.and %ready_5, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
    hw.output %chanOutput, %chanOutput_0, %chanOutput_2, %chanOutput_4 : !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>
  }
  hw.module @handshake_join_4ins_1outs_ctrl(in %in0 : !esi.channel<i0>, in %in1 : !esi.channel<i0>, in %in2 : !esi.channel<i0>, in %in3 : !esi.channel<i0>, out out0 : !esi.channel<i0>) {
    %rawOutput, %valid = esi.unwrap.vr %in0, %1 : i0
    %rawOutput_0, %valid_1 = esi.unwrap.vr %in1, %1 : i0
    %rawOutput_2, %valid_3 = esi.unwrap.vr %in2, %1 : i0
    %rawOutput_4, %valid_5 = esi.unwrap.vr %in3, %1 : i0
    %chanOutput, %ready = esi.wrap.vr %c0_i0, %0 : i0
    %0 = comb.and %valid, %valid_1, %valid_3, %valid_5 : i1
    %1 = comb.and %ready, %0 : i1
    %c0_i0 = hw.constant 0 : i0
    hw.output %chanOutput : !esi.channel<i0>
  }
  hw.module @handshake_load_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : !esi.channel<i64>, in %dataFromMem : !esi.channel<i64>, in %ctrl : !esi.channel<i0>, out dataOut : !esi.channel<i64>, out addrOut0 : !esi.channel<i64>) {
    %rawOutput, %valid = esi.unwrap.vr %addrIn0, %1 : i64
    %rawOutput_0, %valid_1 = esi.unwrap.vr %dataFromMem, %ready : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %ctrl, %1 : i0
    %chanOutput, %ready = esi.wrap.vr %rawOutput_0, %valid_1 : i64
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %0 : i64
    %0 = comb.and %valid, %valid_3 : i1
    %1 = comb.and %ready_5, %0 : i1
    hw.output %chanOutput, %chanOutput_4 : !esi.channel<i64>, !esi.channel<i64>
  }
  hw.module @arith_addi_in_ui64_ui64_out_ui64(in %in0 : !esi.channel<i64>, in %in1 : !esi.channel<i64>, out out0 : !esi.channel<i64>) {
    %rawOutput, %valid = esi.unwrap.vr %in0, %1 : i64
    %rawOutput_0, %valid_1 = esi.unwrap.vr %in1, %1 : i64
    %chanOutput, %ready = esi.wrap.vr %2, %0 : i64
    %0 = comb.and %valid, %valid_1 : i1
    %1 = comb.and %ready, %0 : i1
    %2 = comb.add %rawOutput, %rawOutput_0 : i64
    hw.output %chanOutput : !esi.channel<i64>
  }
  hw.module @main(in %in0 : !esi.channel<i0>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i0>) {
    %handshake_buffer0.out0 = hw.instance "handshake_buffer0" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %in0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_fork0.out0, %handshake_fork0.out1, %handshake_fork0.out2, %handshake_fork0.out3, %handshake_fork0.out4, %handshake_fork0.out5, %handshake_fork0.out6, %handshake_fork0.out7, %handshake_fork0.out8, %handshake_fork0.out9, %handshake_fork0.out10, %handshake_fork0.out11, %handshake_fork0.out12, %handshake_fork0.out13 = hw.instance "handshake_fork0" @handshake_fork_1ins_14outs_ctrl(in0: %handshake_buffer0.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>, out1: !esi.channel<i0>, out2: !esi.channel<i0>, out3: !esi.channel<i0>, out4: !esi.channel<i0>, out5: !esi.channel<i0>, out6: !esi.channel<i0>, out7: !esi.channel<i0>, out8: !esi.channel<i0>, out9: !esi.channel<i0>, out10: !esi.channel<i0>, out11: !esi.channel<i0>, out12: !esi.channel<i0>, out13: !esi.channel<i0>)
    %handshake_buffer1.out0 = hw.instance "handshake_buffer1" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out13: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer2.out0 = hw.instance "handshake_buffer2" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out12: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer3.out0 = hw.instance "handshake_buffer3" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out11: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer4.out0 = hw.instance "handshake_buffer4" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out10: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer5.out0 = hw.instance "handshake_buffer5" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out9: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer6.out0 = hw.instance "handshake_buffer6" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out8: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer7.out0 = hw.instance "handshake_buffer7" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out7: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer8.out0 = hw.instance "handshake_buffer8" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out6: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer9.out0 = hw.instance "handshake_buffer9" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out5: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer10.out0 = hw.instance "handshake_buffer10" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out4: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer11.out0 = hw.instance "handshake_buffer11" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out3: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer12.out0 = hw.instance "handshake_buffer12" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out2: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer13.out0 = hw.instance "handshake_buffer13" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out1: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer14.out0 = hw.instance "handshake_buffer14" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_memory0.stDone0 = hw.instance "handshake_memory0" @handshake_memory_out_ui64_id2(stData0: %handshake_buffer114.out0: !esi.channel<i64>, stAddr0: %handshake_buffer113.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (stDone0: !esi.channel<i0>)
    %handshake_buffer15.out0 = hw.instance "handshake_buffer15" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory0.stDone0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_memory1.ldData0, %handshake_memory1.stDone0, %handshake_memory1.stDone1, %handshake_memory1.stDone2, %handshake_memory1.ldDone0 = hw.instance "handshake_memory1" @handshake_memory_out_ui64_id1(stData0: %handshake_buffer67.out0: !esi.channel<i64>, stAddr0: %handshake_buffer66.out0: !esi.channel<i64>, stData1: %handshake_buffer70.out0: !esi.channel<i64>, stAddr1: %handshake_buffer69.out0: !esi.channel<i64>, stData2: %handshake_buffer73.out0: !esi.channel<i64>, stAddr2: %handshake_buffer72.out0: !esi.channel<i64>, ldAddr0: %handshake_buffer110.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (ldData0: !esi.channel<i64>, stDone0: !esi.channel<i0>, stDone1: !esi.channel<i0>, stDone2: !esi.channel<i0>, ldDone0: !esi.channel<i0>)
    %handshake_buffer16.out0 = hw.instance "handshake_buffer16" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.ldDone0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer17.out0 = hw.instance "handshake_buffer17" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone2: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer18.out0 = hw.instance "handshake_buffer18" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone1: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer19.out0 = hw.instance "handshake_buffer19" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer20.out0 = hw.instance "handshake_buffer20" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory1.ldData0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_fork1.out0, %handshake_fork1.out1 = hw.instance "handshake_fork1" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer18.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>, out1: !esi.channel<i0>)
    %handshake_buffer21.out0 = hw.instance "handshake_buffer21" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out1: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer22.out0 = hw.instance "handshake_buffer22" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_fork2.out0, %handshake_fork2.out1, %handshake_fork2.out2 = hw.instance "handshake_fork2" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer19.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>, out1: !esi.channel<i0>, out2: !esi.channel<i0>)
    %handshake_buffer23.out0 = hw.instance "handshake_buffer23" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out2: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer24.out0 = hw.instance "handshake_buffer24" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out1: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer25.out0 = hw.instance "handshake_buffer25" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_memory2.ldData0, %handshake_memory2.stDone0, %handshake_memory2.stDone1, %handshake_memory2.stDone2, %handshake_memory2.ldDone0 = hw.instance "handshake_memory2" @handshake_memory_out_ui64_id0(stData0: %handshake_buffer59.out0: !esi.channel<i64>, stAddr0: %handshake_buffer58.out0: !esi.channel<i64>, stData1: %handshake_buffer62.out0: !esi.channel<i64>, stAddr1: %handshake_buffer61.out0: !esi.channel<i64>, stData2: %handshake_buffer65.out0: !esi.channel<i64>, stAddr2: %handshake_buffer64.out0: !esi.channel<i64>, ldAddr0: %handshake_buffer108.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (ldData0: !esi.channel<i64>, stDone0: !esi.channel<i0>, stDone1: !esi.channel<i0>, stDone2: !esi.channel<i0>, ldDone0: !esi.channel<i0>)
    %handshake_buffer26.out0 = hw.instance "handshake_buffer26" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.ldDone0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer27.out0 = hw.instance "handshake_buffer27" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone2: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer28.out0 = hw.instance "handshake_buffer28" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone1: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer29.out0 = hw.instance "handshake_buffer29" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer30.out0 = hw.instance "handshake_buffer30" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory2.ldData0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_fork3.out0, %handshake_fork3.out1 = hw.instance "handshake_fork3" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer28.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>, out1: !esi.channel<i0>)
    %handshake_buffer31.out0 = hw.instance "handshake_buffer31" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out1: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer32.out0 = hw.instance "handshake_buffer32" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_fork4.out0, %handshake_fork4.out1, %handshake_fork4.out2 = hw.instance "handshake_fork4" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer29.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>, out1: !esi.channel<i0>, out2: !esi.channel<i0>)
    %handshake_buffer33.out0 = hw.instance "handshake_buffer33" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out2: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer34.out0 = hw.instance "handshake_buffer34" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out1: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer35.out0 = hw.instance "handshake_buffer35" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_join0.out0 = hw.instance "handshake_join0" @handshake_join_7ins_1outs_ctrl(in0: %handshake_buffer4.out0: !esi.channel<i0>, in1: %handshake_buffer35.out0: !esi.channel<i0>, in2: %handshake_buffer32.out0: !esi.channel<i0>, in3: %handshake_buffer27.out0: !esi.channel<i0>, in4: %handshake_buffer23.out0: !esi.channel<i0>, in5: %handshake_buffer21.out0: !esi.channel<i0>, in6: %handshake_buffer17.out0: !esi.channel<i0>) -> (out0: !esi.channel<i0>)
    %handshake_buffer36.out0 = hw.instance "handshake_buffer36" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join0.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_constant0.out0 = hw.instance "handshake_constant0" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer14.out0: !esi.channel<i0>) -> (out0: !esi.channel<i64>)
    %handshake_buffer37.out0 = hw.instance "handshake_buffer37" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant0.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_constant1.out0 = hw.instance "handshake_constant1" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer13.out0: !esi.channel<i0>) -> (out0: !esi.channel<i64>)
    %handshake_buffer38.out0 = hw.instance "handshake_buffer38" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant1.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_fork5.out0, %handshake_fork5.out1 = hw.instance "handshake_fork5" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer38.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>, out1: !esi.channel<i64>)
    %handshake_buffer39.out0 = hw.instance "handshake_buffer39" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out1: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer40.out0 = hw.instance "handshake_buffer40" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_constant2.out0 = hw.instance "handshake_constant2" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer12.out0: !esi.channel<i0>) -> (out0: !esi.channel<i64>)
    %handshake_buffer41.out0 = hw.instance "handshake_buffer41" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant2.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_fork6.out0, %handshake_fork6.out1 = hw.instance "handshake_fork6" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer41.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>, out1: !esi.channel<i64>)
    %handshake_buffer42.out0 = hw.instance "handshake_buffer42" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out1: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer43.out0 = hw.instance "handshake_buffer43" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_constant3.out0 = hw.instance "handshake_constant3" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer11.out0: !esi.channel<i0>) -> (out0: !esi.channel<i64>)
    %handshake_buffer44.out0 = hw.instance "handshake_buffer44" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant3.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_fork7.out0, %handshake_fork7.out1 = hw.instance "handshake_fork7" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer44.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>, out1: !esi.channel<i64>)
    %handshake_buffer45.out0 = hw.instance "handshake_buffer45" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out1: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer46.out0 = hw.instance "handshake_buffer46" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_constant4.out0 = hw.instance "handshake_constant4" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer10.out0: !esi.channel<i0>) -> (out0: !esi.channel<i64>)
    %handshake_buffer47.out0 = hw.instance "handshake_buffer47" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant4.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_fork8.out0, %handshake_fork8.out1 = hw.instance "handshake_fork8" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer47.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>, out1: !esi.channel<i64>)
    %handshake_buffer48.out0 = hw.instance "handshake_buffer48" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out1: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer49.out0 = hw.instance "handshake_buffer49" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_constant5.out0 = hw.instance "handshake_constant5" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer9.out0: !esi.channel<i0>) -> (out0: !esi.channel<i64>)
    %handshake_buffer50.out0 = hw.instance "handshake_buffer50" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant5.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_fork9.out0, %handshake_fork9.out1, %handshake_fork9.out2 = hw.instance "handshake_fork9" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer50.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>, out1: !esi.channel<i64>, out2: !esi.channel<i64>)
    %handshake_buffer51.out0 = hw.instance "handshake_buffer51" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out2: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer52.out0 = hw.instance "handshake_buffer52" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out1: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer53.out0 = hw.instance "handshake_buffer53" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_constant6.out0 = hw.instance "handshake_constant6" @handshake_constant_c0_out_ui64(ctrl: %handshake_buffer8.out0: !esi.channel<i0>) -> (out0: !esi.channel<i64>)
    %handshake_buffer54.out0 = hw.instance "handshake_buffer54" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant6.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_fork10.out0, %handshake_fork10.out1, %handshake_fork10.out2 = hw.instance "handshake_fork10" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer54.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>, out1: !esi.channel<i64>, out2: !esi.channel<i64>)
    %handshake_buffer55.out0 = hw.instance "handshake_buffer55" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out2: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer56.out0 = hw.instance "handshake_buffer56" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out1: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer57.out0 = hw.instance "handshake_buffer57" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_store0.dataToMem, %handshake_store0.addrOut0 = hw.instance "handshake_store0" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer55.out0: !esi.channel<i64>, dataIn: %handshake_buffer45.out0: !esi.channel<i64>, ctrl: %handshake_buffer7.out0: !esi.channel<i0>) -> (dataToMem: !esi.channel<i64>, addrOut0: !esi.channel<i64>)
    %handshake_buffer58.out0 = hw.instance "handshake_buffer58" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.addrOut0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer59.out0 = hw.instance "handshake_buffer59" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.dataToMem: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_join1.out0 = hw.instance "handshake_join1" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer6.out0: !esi.channel<i0>, in1: %handshake_buffer33.out0: !esi.channel<i0>) -> (out0: !esi.channel<i0>)
    %handshake_buffer60.out0 = hw.instance "handshake_buffer60" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join1.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_store1.dataToMem, %handshake_store1.addrOut0 = hw.instance "handshake_store1" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer51.out0: !esi.channel<i64>, dataIn: %handshake_buffer42.out0: !esi.channel<i64>, ctrl: %handshake_buffer60.out0: !esi.channel<i0>) -> (dataToMem: !esi.channel<i64>, addrOut0: !esi.channel<i64>)
    %handshake_buffer61.out0 = hw.instance "handshake_buffer61" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.addrOut0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer62.out0 = hw.instance "handshake_buffer62" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.dataToMem: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_join2.out0 = hw.instance "handshake_join2" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer5.out0: !esi.channel<i0>, in1: %handshake_buffer34.out0: !esi.channel<i0>, in2: %handshake_buffer31.out0: !esi.channel<i0>) -> (out0: !esi.channel<i0>)
    %handshake_buffer63.out0 = hw.instance "handshake_buffer63" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join2.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_store2.dataToMem, %handshake_store2.addrOut0 = hw.instance "handshake_store2" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer48.out0: !esi.channel<i64>, dataIn: %handshake_buffer39.out0: !esi.channel<i64>, ctrl: %handshake_buffer63.out0: !esi.channel<i0>) -> (dataToMem: !esi.channel<i64>, addrOut0: !esi.channel<i64>)
    %handshake_buffer64.out0 = hw.instance "handshake_buffer64" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.addrOut0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer65.out0 = hw.instance "handshake_buffer65" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.dataToMem: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_store3.dataToMem, %handshake_store3.addrOut0 = hw.instance "handshake_store3" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer56.out0: !esi.channel<i64>, dataIn: %handshake_buffer46.out0: !esi.channel<i64>, ctrl: %handshake_buffer3.out0: !esi.channel<i0>) -> (dataToMem: !esi.channel<i64>, addrOut0: !esi.channel<i64>)
    %handshake_buffer66.out0 = hw.instance "handshake_buffer66" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.addrOut0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer67.out0 = hw.instance "handshake_buffer67" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.dataToMem: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_join3.out0 = hw.instance "handshake_join3" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer2.out0: !esi.channel<i0>, in1: %handshake_buffer24.out0: !esi.channel<i0>) -> (out0: !esi.channel<i0>)
    %handshake_buffer68.out0 = hw.instance "handshake_buffer68" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join3.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_store4.dataToMem, %handshake_store4.addrOut0 = hw.instance "handshake_store4" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer52.out0: !esi.channel<i64>, dataIn: %handshake_buffer43.out0: !esi.channel<i64>, ctrl: %handshake_buffer68.out0: !esi.channel<i0>) -> (dataToMem: !esi.channel<i64>, addrOut0: !esi.channel<i64>)
    %handshake_buffer69.out0 = hw.instance "handshake_buffer69" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.addrOut0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer70.out0 = hw.instance "handshake_buffer70" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.dataToMem: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_join4.out0 = hw.instance "handshake_join4" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer1.out0: !esi.channel<i0>, in1: %handshake_buffer25.out0: !esi.channel<i0>, in2: %handshake_buffer22.out0: !esi.channel<i0>) -> (out0: !esi.channel<i0>)
    %handshake_buffer71.out0 = hw.instance "handshake_buffer71" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join4.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_store5.dataToMem, %handshake_store5.addrOut0 = hw.instance "handshake_store5" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer49.out0: !esi.channel<i64>, dataIn: %handshake_buffer40.out0: !esi.channel<i64>, ctrl: %handshake_buffer71.out0: !esi.channel<i0>) -> (dataToMem: !esi.channel<i64>, addrOut0: !esi.channel<i64>)
    %handshake_buffer72.out0 = hw.instance "handshake_buffer72" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.addrOut0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer73.out0 = hw.instance "handshake_buffer73" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.dataToMem: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer74.out0 = hw.instance "handshake_buffer74" @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in0: %handshake_fork14.out0: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>)
    %handshake_fork11.out0, %handshake_fork11.out1, %handshake_fork11.out2, %handshake_fork11.out3 = hw.instance "handshake_fork11" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in0: %handshake_buffer74.out0: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>, out1: !esi.channel<i1>, out2: !esi.channel<i1>, out3: !esi.channel<i1>)
    %handshake_buffer75.out0 = hw.instance "handshake_buffer75" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out3: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>)
    %handshake_buffer76.out0 = hw.instance "handshake_buffer76" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out2: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>)
    %handshake_buffer77.out0 = hw.instance "handshake_buffer77" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out1: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>)
    %handshake_buffer78.out0 = hw.instance "handshake_buffer78" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out0: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>)
    %handshake_mux0.out0 = hw.instance "handshake_mux0" @handshake_mux_in_ui1_3ins_1outs_ctrl(select: %handshake_buffer75.out0: !esi.channel<i1>, in0: %handshake_buffer36.out0: !esi.channel<i0>, in1: %handshake_buffer107.out0: !esi.channel<i0>) -> (out0: !esi.channel<i0>)
    %handshake_buffer79.out0 = hw.instance "handshake_buffer79" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_mux0.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_mux1.out0 = hw.instance "handshake_mux1" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer76.out0: !esi.channel<i1>, in0: %handshake_buffer57.out0: !esi.channel<i64>, in1: %handshake_buffer115.out0: !esi.channel<i64>) -> (out0: !esi.channel<i64>)
    %handshake_buffer80.out0 = hw.instance "handshake_buffer80" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux1.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_fork12.out0, %handshake_fork12.out1 = hw.instance "handshake_fork12" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer80.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>, out1: !esi.channel<i64>)
    %handshake_buffer81.out0 = hw.instance "handshake_buffer81" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out1: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer82.out0 = hw.instance "handshake_buffer82" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_mux2.out0 = hw.instance "handshake_mux2" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer77.out0: !esi.channel<i1>, in0: %handshake_buffer37.out0: !esi.channel<i64>, in1: %handshake_buffer97.out0: !esi.channel<i64>) -> (out0: !esi.channel<i64>)
    %handshake_buffer83.out0 = hw.instance "handshake_buffer83" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux2.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_fork13.out0, %handshake_fork13.out1 = hw.instance "handshake_fork13" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer83.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>, out1: !esi.channel<i64>)
    %handshake_buffer84.out0 = hw.instance "handshake_buffer84" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out1: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer85.out0 = hw.instance "handshake_buffer85" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_mux3.out0 = hw.instance "handshake_mux3" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer78.out0: !esi.channel<i1>, in0: %handshake_buffer53.out0: !esi.channel<i64>, in1: %handshake_buffer100.out0: !esi.channel<i64>) -> (out0: !esi.channel<i64>)
    %handshake_buffer86.out0 = hw.instance "handshake_buffer86" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux3.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %arith_cmpi0.out0 = hw.instance "arith_cmpi0" @arith_cmpi_in_ui64_ui64_out_ui1_slt(in0: %handshake_buffer82.out0: !esi.channel<i64>, in1: %handshake_buffer85.out0: !esi.channel<i64>) -> (out0: !esi.channel<i1>)
    %handshake_buffer87.out0 = hw.instance "handshake_buffer87" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %arith_cmpi0.out0: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>)
    %handshake_fork14.out0, %handshake_fork14.out1, %handshake_fork14.out2, %handshake_fork14.out3, %handshake_fork14.out4 = hw.instance "handshake_fork14" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in0: %handshake_buffer87.out0: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>, out1: !esi.channel<i1>, out2: !esi.channel<i1>, out3: !esi.channel<i1>, out4: !esi.channel<i1>)
    %handshake_buffer88.out0 = hw.instance "handshake_buffer88" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out4: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>)
    %handshake_buffer89.out0 = hw.instance "handshake_buffer89" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out3: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>)
    %handshake_buffer90.out0 = hw.instance "handshake_buffer90" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out2: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>)
    %handshake_buffer91.out0 = hw.instance "handshake_buffer91" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out1: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>)
    %handshake_cond_br0.outTrue, %handshake_cond_br0.outFalse = hw.instance "handshake_cond_br0" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer88.out0: !esi.channel<i1>, data: %handshake_buffer81.out0: !esi.channel<i64>) -> (outTrue: !esi.channel<i64>, outFalse: !esi.channel<i64>)
    %handshake_buffer92.out0 = hw.instance "handshake_buffer92" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br0.outTrue: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    hw.instance "handshake_sink0" @handshake_sink_in_ui64(in0: %handshake_cond_br0.outFalse: !esi.channel<i64>) -> ()
    %handshake_fork15.out0, %handshake_fork15.out1, %handshake_fork15.out2, %handshake_fork15.out3 = hw.instance "handshake_fork15" @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in0: %handshake_buffer92.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>, out1: !esi.channel<i64>, out2: !esi.channel<i64>, out3: !esi.channel<i64>)
    %handshake_buffer93.out0 = hw.instance "handshake_buffer93" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out3: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer94.out0 = hw.instance "handshake_buffer94" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out2: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer95.out0 = hw.instance "handshake_buffer95" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out1: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer96.out0 = hw.instance "handshake_buffer96" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_cond_br1.outTrue, %handshake_cond_br1.outFalse = hw.instance "handshake_cond_br1" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer89.out0: !esi.channel<i1>, data: %handshake_buffer84.out0: !esi.channel<i64>) -> (outTrue: !esi.channel<i64>, outFalse: !esi.channel<i64>)
    %handshake_buffer97.out0 = hw.instance "handshake_buffer97" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br1.outTrue: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    hw.instance "handshake_sink1" @handshake_sink_in_ui64(in0: %handshake_cond_br1.outFalse: !esi.channel<i64>) -> ()
    %handshake_cond_br2.outTrue, %handshake_cond_br2.outFalse = hw.instance "handshake_cond_br2" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer90.out0: !esi.channel<i1>, data: %handshake_buffer86.out0: !esi.channel<i64>) -> (outTrue: !esi.channel<i64>, outFalse: !esi.channel<i64>)
    %handshake_buffer98.out0 = hw.instance "handshake_buffer98" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br2.outTrue: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    hw.instance "handshake_sink2" @handshake_sink_in_ui64(in0: %handshake_cond_br2.outFalse: !esi.channel<i64>) -> ()
    %handshake_fork16.out0, %handshake_fork16.out1 = hw.instance "handshake_fork16" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer98.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>, out1: !esi.channel<i64>)
    %handshake_buffer99.out0 = hw.instance "handshake_buffer99" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out1: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer100.out0 = hw.instance "handshake_buffer100" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_cond_br3.outTrue, %handshake_cond_br3.outFalse = hw.instance "handshake_cond_br3" @handshake_cond_br_in_ui1_2ins_2outs_ctrl(cond: %handshake_buffer91.out0: !esi.channel<i1>, data: %handshake_buffer79.out0: !esi.channel<i0>) -> (outTrue: !esi.channel<i0>, outFalse: !esi.channel<i0>)
    %handshake_buffer101.out0 = hw.instance "handshake_buffer101" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outFalse: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer102.out0 = hw.instance "handshake_buffer102" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outTrue: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_fork17.out0, %handshake_fork17.out1, %handshake_fork17.out2, %handshake_fork17.out3 = hw.instance "handshake_fork17" @handshake_fork_1ins_4outs_ctrl(in0: %handshake_buffer102.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>, out1: !esi.channel<i0>, out2: !esi.channel<i0>, out3: !esi.channel<i0>)
    %handshake_buffer103.out0 = hw.instance "handshake_buffer103" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out3: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer104.out0 = hw.instance "handshake_buffer104" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out2: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer105.out0 = hw.instance "handshake_buffer105" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out1: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer106.out0 = hw.instance "handshake_buffer106" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_join5.out0 = hw.instance "handshake_join5" @handshake_join_4ins_1outs_ctrl(in0: %handshake_buffer105.out0: !esi.channel<i0>, in1: %handshake_buffer26.out0: !esi.channel<i0>, in2: %handshake_buffer16.out0: !esi.channel<i0>, in3: %handshake_buffer15.out0: !esi.channel<i0>) -> (out0: !esi.channel<i0>)
    %handshake_buffer107.out0 = hw.instance "handshake_buffer107" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join5.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_load0.dataOut, %handshake_load0.addrOut0 = hw.instance "handshake_load0" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer95.out0: !esi.channel<i64>, dataFromMem: %handshake_buffer30.out0: !esi.channel<i64>, ctrl: %handshake_buffer103.out0: !esi.channel<i0>) -> (dataOut: !esi.channel<i64>, addrOut0: !esi.channel<i64>)
    %handshake_buffer108.out0 = hw.instance "handshake_buffer108" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.addrOut0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer109.out0 = hw.instance "handshake_buffer109" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.dataOut: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_load1.dataOut, %handshake_load1.addrOut0 = hw.instance "handshake_load1" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer94.out0: !esi.channel<i64>, dataFromMem: %handshake_buffer20.out0: !esi.channel<i64>, ctrl: %handshake_buffer104.out0: !esi.channel<i0>) -> (dataOut: !esi.channel<i64>, addrOut0: !esi.channel<i64>)
    %handshake_buffer110.out0 = hw.instance "handshake_buffer110" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.addrOut0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer111.out0 = hw.instance "handshake_buffer111" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.dataOut: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %arith_addi0.out0 = hw.instance "arith_addi0" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer109.out0: !esi.channel<i64>, in1: %handshake_buffer111.out0: !esi.channel<i64>) -> (out0: !esi.channel<i64>)
    %handshake_buffer112.out0 = hw.instance "handshake_buffer112" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi0.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_store6.dataToMem, %handshake_store6.addrOut0 = hw.instance "handshake_store6" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer93.out0: !esi.channel<i64>, dataIn: %handshake_buffer112.out0: !esi.channel<i64>, ctrl: %handshake_buffer106.out0: !esi.channel<i0>) -> (dataToMem: !esi.channel<i64>, addrOut0: !esi.channel<i64>)
    %handshake_buffer113.out0 = hw.instance "handshake_buffer113" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.addrOut0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer114.out0 = hw.instance "handshake_buffer114" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.dataToMem: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %arith_addi1.out0 = hw.instance "arith_addi1" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer96.out0: !esi.channel<i64>, in1: %handshake_buffer99.out0: !esi.channel<i64>) -> (out0: !esi.channel<i64>)
    %handshake_buffer115.out0 = hw.instance "handshake_buffer115" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi1.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    hw.output %handshake_buffer101.out0 : !esi.channel<i0>
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
module {
  hw.module @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in %in0 : !esi.channel<i0>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i0>) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %in0, %1 : i0
    %chanOutput, %ready = esi.wrap.vr %27, %19 : i0
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %valid, %valid0_reg : i1
    %3 = comb.mux %1, %rawOutput, %data0_reg : i0
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %c0_i0 : i0  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %16, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %16, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %14, %clock reset %reset, %c0_i0 : i0  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i0
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i0
    %14 = comb.mux %9, %c0_i0, %13 : i0
    %valid1_reg = seq.compreg sym @valid1_reg %17, %clock reset %reset, %false : i1  
    %15 = comb.xor %valid1_reg, %true : i1
    %16 = comb.or %15, %20 : i1
    %17 = comb.mux %16, %4, %valid1_reg : i1
    %18 = comb.mux %16, %12, %data1_reg : i0
    %data1_reg = seq.compreg sym @data1_reg %18, %clock reset %reset, %c0_i0 : i0  
    %ready1_reg = seq.compreg sym @ready1_reg %26, %clock reset %reset, %false : i1  
    %19 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
    %20 = comb.xor %ready1_reg, %true : i1
    %21 = comb.xor %ready, %true : i1
    %22 = comb.and %21, %20 : i1
    %23 = comb.mux %22, %valid1_reg, %ready1_reg : i1
    %24 = comb.and %ready, %ready1_reg : i1
    %25 = comb.xor %24, %true : i1
    %26 = comb.and %25, %23 : i1
    %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %29, %clock reset %reset, %c0_i0 : i0  
    %27 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i0
    %28 = comb.mux %22, %data1_reg, %ctrl_data1_reg : i0
    %29 = comb.mux %24, %c0_i0, %28 : i0
    hw.output %chanOutput : !esi.channel<i0>
  }
  hw.module @handshake_fork_1ins_14outs_ctrl(in %in0 : !esi.channel<i0>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i0>, out out1 : !esi.channel<i0>, out out2 : !esi.channel<i0>, out out3 : !esi.channel<i0>, out out4 : !esi.channel<i0>, out out5 : !esi.channel<i0>, out out6 : !esi.channel<i0>, out out7 : !esi.channel<i0>, out out8 : !esi.channel<i0>, out out9 : !esi.channel<i0>, out out10 : !esi.channel<i0>, out out11 : !esi.channel<i0>, out out12 : !esi.channel<i0>, out out13 : !esi.channel<i0>) {
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %in0, %84 : i0
    %chanOutput, %ready = esi.wrap.vr %rawOutput, %3 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %9 : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %15 : i0
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %21 : i0
    %chanOutput_6, %ready_7 = esi.wrap.vr %rawOutput, %27 : i0
    %chanOutput_8, %ready_9 = esi.wrap.vr %rawOutput, %33 : i0
    %chanOutput_10, %ready_11 = esi.wrap.vr %rawOutput, %39 : i0
    %chanOutput_12, %ready_13 = esi.wrap.vr %rawOutput, %45 : i0
    %chanOutput_14, %ready_15 = esi.wrap.vr %rawOutput, %51 : i0
    %chanOutput_16, %ready_17 = esi.wrap.vr %rawOutput, %57 : i0
    %chanOutput_18, %ready_19 = esi.wrap.vr %rawOutput, %63 : i0
    %chanOutput_20, %ready_21 = esi.wrap.vr %rawOutput, %69 : i0
    %chanOutput_22, %ready_23 = esi.wrap.vr %rawOutput, %75 : i0
    %chanOutput_24, %ready_25 = esi.wrap.vr %rawOutput, %81 : i0
    %0 = comb.xor %84, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %84, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_1, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %84, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_3, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %84, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %valid : i1
    %22 = comb.and %ready_5, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.xor %84, %true : i1
    %25 = comb.and %29, %24 : i1
    %emitted_4 = seq.compreg sym @emitted_4 %25, %clock reset %reset, %false : i1  
    %26 = comb.xor %emitted_4, %true : i1
    %27 = comb.and %26, %valid : i1
    %28 = comb.and %ready_7, %27 : i1
    %29 = comb.or %28, %emitted_4 {sv.namehint = "done4"} : i1
    %30 = comb.xor %84, %true : i1
    %31 = comb.and %35, %30 : i1
    %emitted_5 = seq.compreg sym @emitted_5 %31, %clock reset %reset, %false : i1  
    %32 = comb.xor %emitted_5, %true : i1
    %33 = comb.and %32, %valid : i1
    %34 = comb.and %ready_9, %33 : i1
    %35 = comb.or %34, %emitted_5 {sv.namehint = "done5"} : i1
    %36 = comb.xor %84, %true : i1
    %37 = comb.and %41, %36 : i1
    %emitted_6 = seq.compreg sym @emitted_6 %37, %clock reset %reset, %false : i1  
    %38 = comb.xor %emitted_6, %true : i1
    %39 = comb.and %38, %valid : i1
    %40 = comb.and %ready_11, %39 : i1
    %41 = comb.or %40, %emitted_6 {sv.namehint = "done6"} : i1
    %42 = comb.xor %84, %true : i1
    %43 = comb.and %47, %42 : i1
    %emitted_7 = seq.compreg sym @emitted_7 %43, %clock reset %reset, %false : i1  
    %44 = comb.xor %emitted_7, %true : i1
    %45 = comb.and %44, %valid : i1
    %46 = comb.and %ready_13, %45 : i1
    %47 = comb.or %46, %emitted_7 {sv.namehint = "done7"} : i1
    %48 = comb.xor %84, %true : i1
    %49 = comb.and %53, %48 : i1
    %emitted_8 = seq.compreg sym @emitted_8 %49, %clock reset %reset, %false : i1  
    %50 = comb.xor %emitted_8, %true : i1
    %51 = comb.and %50, %valid : i1
    %52 = comb.and %ready_15, %51 : i1
    %53 = comb.or %52, %emitted_8 {sv.namehint = "done8"} : i1
    %54 = comb.xor %84, %true : i1
    %55 = comb.and %59, %54 : i1
    %emitted_9 = seq.compreg sym @emitted_9 %55, %clock reset %reset, %false : i1  
    %56 = comb.xor %emitted_9, %true : i1
    %57 = comb.and %56, %valid : i1
    %58 = comb.and %ready_17, %57 : i1
    %59 = comb.or %58, %emitted_9 {sv.namehint = "done9"} : i1
    %60 = comb.xor %84, %true : i1
    %61 = comb.and %65, %60 : i1
    %emitted_10 = seq.compreg sym @emitted_10 %61, %clock reset %reset, %false : i1  
    %62 = comb.xor %emitted_10, %true : i1
    %63 = comb.and %62, %valid : i1
    %64 = comb.and %ready_19, %63 : i1
    %65 = comb.or %64, %emitted_10 {sv.namehint = "done10"} : i1
    %66 = comb.xor %84, %true : i1
    %67 = comb.and %71, %66 : i1
    %emitted_11 = seq.compreg sym @emitted_11 %67, %clock reset %reset, %false : i1  
    %68 = comb.xor %emitted_11, %true : i1
    %69 = comb.and %68, %valid : i1
    %70 = comb.and %ready_21, %69 : i1
    %71 = comb.or %70, %emitted_11 {sv.namehint = "done11"} : i1
    %72 = comb.xor %84, %true : i1
    %73 = comb.and %77, %72 : i1
    %emitted_12 = seq.compreg sym @emitted_12 %73, %clock reset %reset, %false : i1  
    %74 = comb.xor %emitted_12, %true : i1
    %75 = comb.and %74, %valid : i1
    %76 = comb.and %ready_23, %75 : i1
    %77 = comb.or %76, %emitted_12 {sv.namehint = "done12"} : i1
    %78 = comb.xor %84, %true : i1
    %79 = comb.and %83, %78 : i1
    %emitted_13 = seq.compreg sym @emitted_13 %79, %clock reset %reset, %false : i1  
    %80 = comb.xor %emitted_13, %true : i1
    %81 = comb.and %80, %valid : i1
    %82 = comb.and %ready_25, %81 : i1
    %83 = comb.or %82, %emitted_13 {sv.namehint = "done13"} : i1
    %84 = comb.and %5, %11, %17, %23, %29, %35, %41, %47, %53, %59, %65, %71, %77, %83 {sv.namehint = "allDone"} : i1
    hw.output %chanOutput, %chanOutput_0, %chanOutput_2, %chanOutput_4, %chanOutput_6, %chanOutput_8, %chanOutput_10, %chanOutput_12, %chanOutput_14, %chanOutput_16, %chanOutput_18, %chanOutput_20, %chanOutput_22, %chanOutput_24 : !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>
  }
  hw.module @handshake_memory_out_ui64_id2(in %stData0 : !esi.channel<i64>, in %stAddr0 : !esi.channel<i64>, in %clock : !seq.clock, in %reset : i1, out stDone0 : !esi.channel<i0>) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %stData0, %2 : i64
    %rawOutput_0, %valid_1 = esi.unwrap.vr %stAddr0, %2 : i64
    %chanOutput, %ready = esi.wrap.vr %c0_i0, %writeValidBuffer : i0
    %_handshake_memory_2 = seq.hlmem @_handshake_memory_2 %clock, %reset : <3xi64>
    %writeValidBuffer = seq.compreg sym @writeValidBuffer %4, %clock reset %reset, %false : i1  
    %0 = comb.and %ready, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
    %1 = comb.xor %writeValidBuffer, %true : i1
    %2 = comb.or %1, %0 {sv.namehint = "emptyOrComplete"} : i1
    %3 = comb.and %valid_1, %valid {sv.namehint = "writeValid"} : i1
    %4 = comb.mux %2, %3, %writeValidBuffer : i1
    %5 = comb.extract %rawOutput_0 from 0 : (i64) -> i2
    seq.write %_handshake_memory_2[%5] %rawOutput wren %3 {latency = 1 : i64} : !seq.hlmem<3xi64>
    hw.output %chanOutput : !esi.channel<i0>
  }
  hw.module @handshake_memory_out_ui64_id1(in %stData0 : !esi.channel<i64>, in %stAddr0 : !esi.channel<i64>, in %stData1 : !esi.channel<i64>, in %stAddr1 : !esi.channel<i64>, in %stData2 : !esi.channel<i64>, in %stAddr2 : !esi.channel<i64>, in %ldAddr0 : !esi.channel<i64>, in %clock : !seq.clock, in %reset : i1, out ldData0 : !esi.channel<i64>, out stDone0 : !esi.channel<i0>, out stDone1 : !esi.channel<i0>, out stDone2 : !esi.channel<i0>, out ldDone0 : !esi.channel<i0>) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %stData0, %16 : i64
    %rawOutput_0, %valid_1 = esi.unwrap.vr %stAddr0, %16 : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %stData1, %22 : i64
    %rawOutput_4, %valid_5 = esi.unwrap.vr %stAddr1, %22 : i64
    %rawOutput_6, %valid_7 = esi.unwrap.vr %stData2, %28 : i64
    %rawOutput_8, %valid_9 = esi.unwrap.vr %stAddr2, %28 : i64
    %rawOutput_10, %valid_11 = esi.unwrap.vr %ldAddr0, %13 : i64
    %chanOutput, %ready = esi.wrap.vr %_handshake_memory_1_rdata, %4 : i64
    %chanOutput_12, %ready_13 = esi.wrap.vr %c0_i0, %writeValidBuffer : i0
    %chanOutput_14, %ready_15 = esi.wrap.vr %c0_i0, %writeValidBuffer_20 : i0
    %chanOutput_16, %ready_17 = esi.wrap.vr %c0_i0, %writeValidBuffer_21 : i0
    %chanOutput_18, %ready_19 = esi.wrap.vr %c0_i0, %10 : i0
    %_handshake_memory_1 = seq.hlmem @_handshake_memory_1 %clock, %reset : <3xi64>
    %0 = comb.extract %rawOutput_10 from 0 : (i64) -> i2
    %_handshake_memory_1_rdata = seq.read %_handshake_memory_1[%0] rden %valid_11 {latency = 0 : i64} : !seq.hlmem<3xi64>
    %1 = comb.xor %13, %true : i1
    %2 = comb.and %6, %1 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %2, %clock reset %reset, %false : i1  
    %3 = comb.xor %emitted_0, %true : i1
    %4 = comb.and %3, %valid_11 : i1
    %5 = comb.and %ready, %4 : i1
    %6 = comb.or %5, %emitted_0 {sv.namehint = "done0"} : i1
    %7 = comb.xor %13, %true : i1
    %8 = comb.and %12, %7 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %8, %clock reset %reset, %false : i1  
    %9 = comb.xor %emitted_1, %true : i1
    %10 = comb.and %9, %valid_11 : i1
    %11 = comb.and %ready_19, %10 : i1
    %12 = comb.or %11, %emitted_1 {sv.namehint = "done1"} : i1
    %13 = comb.and %6, %12 {sv.namehint = "allDone"} : i1
    %writeValidBuffer = seq.compreg sym @writeValidBuffer %18, %clock reset %reset, %false : i1  
    %14 = comb.and %ready_13, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
    %15 = comb.xor %writeValidBuffer, %true : i1
    %16 = comb.or %15, %14 {sv.namehint = "emptyOrComplete"} : i1
    %17 = comb.and %valid_1, %valid {sv.namehint = "writeValid"} : i1
    %18 = comb.mux %16, %17, %writeValidBuffer : i1
    %19 = comb.extract %rawOutput_0 from 0 : (i64) -> i2
    seq.write %_handshake_memory_1[%19] %rawOutput wren %17 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_20 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %24, %clock reset %reset, %false : i1  
    %20 = comb.and %ready_15, %writeValidBuffer_20 {sv.namehint = "storeCompleted"} : i1
    %21 = comb.xor %writeValidBuffer_20, %true : i1
    %22 = comb.or %21, %20 {sv.namehint = "emptyOrComplete"} : i1
    %23 = comb.and %valid_5, %valid_3 {sv.namehint = "writeValid"} : i1
    %24 = comb.mux %22, %23, %writeValidBuffer_20 : i1
    %25 = comb.extract %rawOutput_4 from 0 : (i64) -> i2
    seq.write %_handshake_memory_1[%25] %rawOutput_2 wren %23 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_21 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %30, %clock reset %reset, %false : i1  
    %26 = comb.and %ready_17, %writeValidBuffer_21 {sv.namehint = "storeCompleted"} : i1
    %27 = comb.xor %writeValidBuffer_21, %true : i1
    %28 = comb.or %27, %26 {sv.namehint = "emptyOrComplete"} : i1
    %29 = comb.and %valid_9, %valid_7 {sv.namehint = "writeValid"} : i1
    %30 = comb.mux %28, %29, %writeValidBuffer_21 : i1
    %31 = comb.extract %rawOutput_8 from 0 : (i64) -> i2
    seq.write %_handshake_memory_1[%31] %rawOutput_6 wren %29 {latency = 1 : i64} : !seq.hlmem<3xi64>
    hw.output %chanOutput, %chanOutput_12, %chanOutput_14, %chanOutput_16, %chanOutput_18 : !esi.channel<i64>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>
  }
  hw.module @handshake_buffer_in_ui64_out_ui64_2slots_seq(in %in0 : !esi.channel<i64>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i64>) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i64 = hw.constant 0 : i64
    %rawOutput, %valid = esi.unwrap.vr %in0, %1 : i64
    %chanOutput, %ready = esi.wrap.vr %27, %19 : i64
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %valid, %valid0_reg : i1
    %3 = comb.mux %1, %rawOutput, %data0_reg : i64
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %c0_i64 : i64  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %16, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %16, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %14, %clock reset %reset, %c0_i64 : i64  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i64
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i64
    %14 = comb.mux %9, %c0_i64, %13 : i64
    %valid1_reg = seq.compreg sym @valid1_reg %17, %clock reset %reset, %false : i1  
    %15 = comb.xor %valid1_reg, %true : i1
    %16 = comb.or %15, %20 : i1
    %17 = comb.mux %16, %4, %valid1_reg : i1
    %18 = comb.mux %16, %12, %data1_reg : i64
    %data1_reg = seq.compreg sym @data1_reg %18, %clock reset %reset, %c0_i64 : i64  
    %ready1_reg = seq.compreg sym @ready1_reg %26, %clock reset %reset, %false : i1  
    %19 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
    %20 = comb.xor %ready1_reg, %true : i1
    %21 = comb.xor %ready, %true : i1
    %22 = comb.and %21, %20 : i1
    %23 = comb.mux %22, %valid1_reg, %ready1_reg : i1
    %24 = comb.and %ready, %ready1_reg : i1
    %25 = comb.xor %24, %true : i1
    %26 = comb.and %25, %23 : i1
    %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %29, %clock reset %reset, %c0_i64 : i64  
    %27 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i64
    %28 = comb.mux %22, %data1_reg, %ctrl_data1_reg : i64
    %29 = comb.mux %24, %c0_i64, %28 : i64
    hw.output %chanOutput : !esi.channel<i64>
  }
  hw.module @handshake_fork_1ins_2outs_ctrl(in %in0 : !esi.channel<i0>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i0>, out out1 : !esi.channel<i0>) {
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %in0, %12 : i0
    %chanOutput, %ready = esi.wrap.vr %rawOutput, %3 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %9 : i0
    %0 = comb.xor %12, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %12, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_1, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.and %5, %11 {sv.namehint = "allDone"} : i1
    hw.output %chanOutput, %chanOutput_0 : !esi.channel<i0>, !esi.channel<i0>
  }
  hw.module @handshake_fork_1ins_3outs_ctrl(in %in0 : !esi.channel<i0>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i0>, out out1 : !esi.channel<i0>, out out2 : !esi.channel<i0>) {
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %in0, %18 : i0
    %chanOutput, %ready = esi.wrap.vr %rawOutput, %3 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %9 : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %15 : i0
    %0 = comb.xor %18, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %18, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_1, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %18, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_3, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.and %5, %11, %17 {sv.namehint = "allDone"} : i1
    hw.output %chanOutput, %chanOutput_0, %chanOutput_2 : !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>
  }
  hw.module @handshake_memory_out_ui64_id0(in %stData0 : !esi.channel<i64>, in %stAddr0 : !esi.channel<i64>, in %stData1 : !esi.channel<i64>, in %stAddr1 : !esi.channel<i64>, in %stData2 : !esi.channel<i64>, in %stAddr2 : !esi.channel<i64>, in %ldAddr0 : !esi.channel<i64>, in %clock : !seq.clock, in %reset : i1, out ldData0 : !esi.channel<i64>, out stDone0 : !esi.channel<i0>, out stDone1 : !esi.channel<i0>, out stDone2 : !esi.channel<i0>, out ldDone0 : !esi.channel<i0>) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %stData0, %16 : i64
    %rawOutput_0, %valid_1 = esi.unwrap.vr %stAddr0, %16 : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %stData1, %22 : i64
    %rawOutput_4, %valid_5 = esi.unwrap.vr %stAddr1, %22 : i64
    %rawOutput_6, %valid_7 = esi.unwrap.vr %stData2, %28 : i64
    %rawOutput_8, %valid_9 = esi.unwrap.vr %stAddr2, %28 : i64
    %rawOutput_10, %valid_11 = esi.unwrap.vr %ldAddr0, %13 : i64
    %chanOutput, %ready = esi.wrap.vr %_handshake_memory_0_rdata, %4 : i64
    %chanOutput_12, %ready_13 = esi.wrap.vr %c0_i0, %writeValidBuffer : i0
    %chanOutput_14, %ready_15 = esi.wrap.vr %c0_i0, %writeValidBuffer_20 : i0
    %chanOutput_16, %ready_17 = esi.wrap.vr %c0_i0, %writeValidBuffer_21 : i0
    %chanOutput_18, %ready_19 = esi.wrap.vr %c0_i0, %10 : i0
    %_handshake_memory_0 = seq.hlmem @_handshake_memory_0 %clock, %reset : <3xi64>
    %0 = comb.extract %rawOutput_10 from 0 : (i64) -> i2
    %_handshake_memory_0_rdata = seq.read %_handshake_memory_0[%0] rden %valid_11 {latency = 0 : i64} : !seq.hlmem<3xi64>
    %1 = comb.xor %13, %true : i1
    %2 = comb.and %6, %1 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %2, %clock reset %reset, %false : i1  
    %3 = comb.xor %emitted_0, %true : i1
    %4 = comb.and %3, %valid_11 : i1
    %5 = comb.and %ready, %4 : i1
    %6 = comb.or %5, %emitted_0 {sv.namehint = "done0"} : i1
    %7 = comb.xor %13, %true : i1
    %8 = comb.and %12, %7 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %8, %clock reset %reset, %false : i1  
    %9 = comb.xor %emitted_1, %true : i1
    %10 = comb.and %9, %valid_11 : i1
    %11 = comb.and %ready_19, %10 : i1
    %12 = comb.or %11, %emitted_1 {sv.namehint = "done1"} : i1
    %13 = comb.and %6, %12 {sv.namehint = "allDone"} : i1
    %writeValidBuffer = seq.compreg sym @writeValidBuffer %18, %clock reset %reset, %false : i1  
    %14 = comb.and %ready_13, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
    %15 = comb.xor %writeValidBuffer, %true : i1
    %16 = comb.or %15, %14 {sv.namehint = "emptyOrComplete"} : i1
    %17 = comb.and %valid_1, %valid {sv.namehint = "writeValid"} : i1
    %18 = comb.mux %16, %17, %writeValidBuffer : i1
    %19 = comb.extract %rawOutput_0 from 0 : (i64) -> i2
    seq.write %_handshake_memory_0[%19] %rawOutput wren %17 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_20 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %24, %clock reset %reset, %false : i1  
    %20 = comb.and %ready_15, %writeValidBuffer_20 {sv.namehint = "storeCompleted"} : i1
    %21 = comb.xor %writeValidBuffer_20, %true : i1
    %22 = comb.or %21, %20 {sv.namehint = "emptyOrComplete"} : i1
    %23 = comb.and %valid_5, %valid_3 {sv.namehint = "writeValid"} : i1
    %24 = comb.mux %22, %23, %writeValidBuffer_20 : i1
    %25 = comb.extract %rawOutput_4 from 0 : (i64) -> i2
    seq.write %_handshake_memory_0[%25] %rawOutput_2 wren %23 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_21 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %30, %clock reset %reset, %false : i1  
    %26 = comb.and %ready_17, %writeValidBuffer_21 {sv.namehint = "storeCompleted"} : i1
    %27 = comb.xor %writeValidBuffer_21, %true : i1
    %28 = comb.or %27, %26 {sv.namehint = "emptyOrComplete"} : i1
    %29 = comb.and %valid_9, %valid_7 {sv.namehint = "writeValid"} : i1
    %30 = comb.mux %28, %29, %writeValidBuffer_21 : i1
    %31 = comb.extract %rawOutput_8 from 0 : (i64) -> i2
    seq.write %_handshake_memory_0[%31] %rawOutput_6 wren %29 {latency = 1 : i64} : !seq.hlmem<3xi64>
    hw.output %chanOutput, %chanOutput_12, %chanOutput_14, %chanOutput_16, %chanOutput_18 : !esi.channel<i64>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>
  }
  hw.module @handshake_join_7ins_1outs_ctrl(in %in0 : !esi.channel<i0>, in %in1 : !esi.channel<i0>, in %in2 : !esi.channel<i0>, in %in3 : !esi.channel<i0>, in %in4 : !esi.channel<i0>, in %in5 : !esi.channel<i0>, in %in6 : !esi.channel<i0>, out out0 : !esi.channel<i0>) {
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %in0, %1 : i0
    %rawOutput_0, %valid_1 = esi.unwrap.vr %in1, %1 : i0
    %rawOutput_2, %valid_3 = esi.unwrap.vr %in2, %1 : i0
    %rawOutput_4, %valid_5 = esi.unwrap.vr %in3, %1 : i0
    %rawOutput_6, %valid_7 = esi.unwrap.vr %in4, %1 : i0
    %rawOutput_8, %valid_9 = esi.unwrap.vr %in5, %1 : i0
    %rawOutput_10, %valid_11 = esi.unwrap.vr %in6, %1 : i0
    %chanOutput, %ready = esi.wrap.vr %c0_i0, %0 : i0
    %0 = comb.and %valid, %valid_1, %valid_3, %valid_5, %valid_7, %valid_9, %valid_11 : i1
    %1 = comb.and %ready, %0 : i1
    hw.output %chanOutput : !esi.channel<i0>
  }
  hw.module @handshake_constant_c3_out_ui64(in %ctrl : !esi.channel<i0>, out out0 : !esi.channel<i64>) {
    %c3_i64 = hw.constant 3 : i64
    %rawOutput, %valid = esi.unwrap.vr %ctrl, %ready : i0
    %chanOutput, %ready = esi.wrap.vr %c3_i64, %valid : i64
    hw.output %chanOutput : !esi.channel<i64>
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64(in %in0 : !esi.channel<i64>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i64>, out out1 : !esi.channel<i64>) {
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %in0, %12 : i64
    %chanOutput, %ready = esi.wrap.vr %rawOutput, %3 : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %9 : i64
    %0 = comb.xor %12, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %12, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_1, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.and %5, %11 {sv.namehint = "allDone"} : i1
    hw.output %chanOutput, %chanOutput_0 : !esi.channel<i64>, !esi.channel<i64>
  }
  hw.module @handshake_constant_c2_out_ui64(in %ctrl : !esi.channel<i0>, out out0 : !esi.channel<i64>) {
    %c2_i64 = hw.constant 2 : i64
    %rawOutput, %valid = esi.unwrap.vr %ctrl, %ready : i0
    %chanOutput, %ready = esi.wrap.vr %c2_i64, %valid : i64
    hw.output %chanOutput : !esi.channel<i64>
  }
  hw.module @handshake_constant_c1_out_ui64(in %ctrl : !esi.channel<i0>, out out0 : !esi.channel<i64>) {
    %c1_i64 = hw.constant 1 : i64
    %rawOutput, %valid = esi.unwrap.vr %ctrl, %ready : i0
    %chanOutput, %ready = esi.wrap.vr %c1_i64, %valid : i64
    hw.output %chanOutput : !esi.channel<i64>
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64(in %in0 : !esi.channel<i64>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i64>, out out1 : !esi.channel<i64>, out out2 : !esi.channel<i64>) {
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %in0, %18 : i64
    %chanOutput, %ready = esi.wrap.vr %rawOutput, %3 : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %9 : i64
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %15 : i64
    %0 = comb.xor %18, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %18, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_1, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %18, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_3, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.and %5, %11, %17 {sv.namehint = "allDone"} : i1
    hw.output %chanOutput, %chanOutput_0, %chanOutput_2 : !esi.channel<i64>, !esi.channel<i64>, !esi.channel<i64>
  }
  hw.module @handshake_constant_c0_out_ui64(in %ctrl : !esi.channel<i0>, out out0 : !esi.channel<i64>) {
    %c0_i64 = hw.constant 0 : i64
    %rawOutput, %valid = esi.unwrap.vr %ctrl, %ready : i0
    %chanOutput, %ready = esi.wrap.vr %c0_i64, %valid : i64
    hw.output %chanOutput : !esi.channel<i64>
  }
  hw.module @handshake_store_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : !esi.channel<i64>, in %dataIn : !esi.channel<i64>, in %ctrl : !esi.channel<i0>, out dataToMem : !esi.channel<i64>, out addrOut0 : !esi.channel<i64>) {
    %rawOutput, %valid = esi.unwrap.vr %addrIn0, %1 : i64
    %rawOutput_0, %valid_1 = esi.unwrap.vr %dataIn, %1 : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %ctrl, %1 : i0
    %chanOutput, %ready = esi.wrap.vr %rawOutput_0, %0 : i64
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %0 : i64
    %0 = comb.and %valid_1, %valid, %valid_3 : i1
    %1 = comb.and %ready, %ready_5, %0 : i1
    hw.output %chanOutput, %chanOutput_4 : !esi.channel<i64>, !esi.channel<i64>
  }
  hw.module @handshake_join_2ins_1outs_ctrl(in %in0 : !esi.channel<i0>, in %in1 : !esi.channel<i0>, out out0 : !esi.channel<i0>) {
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %in0, %1 : i0
    %rawOutput_0, %valid_1 = esi.unwrap.vr %in1, %1 : i0
    %chanOutput, %ready = esi.wrap.vr %c0_i0, %0 : i0
    %0 = comb.and %valid, %valid_1 : i1
    %1 = comb.and %ready, %0 : i1
    hw.output %chanOutput : !esi.channel<i0>
  }
  hw.module @handshake_join_3ins_1outs_ctrl(in %in0 : !esi.channel<i0>, in %in1 : !esi.channel<i0>, in %in2 : !esi.channel<i0>, out out0 : !esi.channel<i0>) {
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %in0, %1 : i0
    %rawOutput_0, %valid_1 = esi.unwrap.vr %in1, %1 : i0
    %rawOutput_2, %valid_3 = esi.unwrap.vr %in2, %1 : i0
    %chanOutput, %ready = esi.wrap.vr %c0_i0, %0 : i0
    %0 = comb.and %valid, %valid_1, %valid_3 : i1
    %1 = comb.and %ready, %0 : i1
    hw.output %chanOutput : !esi.channel<i0>
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in %in0 : !esi.channel<i1>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i1>) {
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %in0, %1 : i1
    %chanOutput, %ready = esi.wrap.vr %12, %4 : i1
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %true : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %valid, %valid0_reg : i1
    %3 = comb.mux %1, %rawOutput, %data0_reg : i1
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %false : i1  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %ready, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %ready, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %15, %clock reset %reset, %false : i1  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i1
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i1
    %14 = comb.xor %9, %true : i1
    %15 = comb.and %14, %13 : i1
    hw.output %chanOutput : !esi.channel<i1>
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in %in0 : !esi.channel<i1>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i1>, out out1 : !esi.channel<i1>, out out2 : !esi.channel<i1>, out out3 : !esi.channel<i1>) {
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %in0, %24 : i1
    %chanOutput, %ready = esi.wrap.vr %rawOutput, %3 : i1
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %9 : i1
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %15 : i1
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %21 : i1
    %0 = comb.xor %24, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %24, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_1, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %24, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_3, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %24, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %valid : i1
    %22 = comb.and %ready_5, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
    hw.output %chanOutput, %chanOutput_0, %chanOutput_2, %chanOutput_4 : !esi.channel<i1>, !esi.channel<i1>, !esi.channel<i1>, !esi.channel<i1>
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_2slots_seq(in %in0 : !esi.channel<i1>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i1>) {
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %in0, %1 : i1
    %chanOutput, %ready = esi.wrap.vr %28, %20 : i1
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %valid, %valid0_reg : i1
    %3 = comb.mux %1, %rawOutput, %data0_reg : i1
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %false : i1  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %17, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %17, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %15, %clock reset %reset, %false : i1  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i1
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i1
    %14 = comb.xor %9, %true : i1
    %15 = comb.and %14, %13 : i1
    %valid1_reg = seq.compreg sym @valid1_reg %18, %clock reset %reset, %false : i1  
    %16 = comb.xor %valid1_reg, %true : i1
    %17 = comb.or %16, %21 : i1
    %18 = comb.mux %17, %4, %valid1_reg : i1
    %19 = comb.mux %17, %12, %data1_reg : i1
    %data1_reg = seq.compreg sym @data1_reg %19, %clock reset %reset, %false : i1  
    %ready1_reg = seq.compreg sym @ready1_reg %27, %clock reset %reset, %false : i1  
    %20 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
    %21 = comb.xor %ready1_reg, %true : i1
    %22 = comb.xor %ready, %true : i1
    %23 = comb.and %22, %21 : i1
    %24 = comb.mux %23, %valid1_reg, %ready1_reg : i1
    %25 = comb.and %ready, %ready1_reg : i1
    %26 = comb.xor %25, %true : i1
    %27 = comb.and %26, %24 : i1
    %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %31, %clock reset %reset, %false : i1  
    %28 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i1
    %29 = comb.mux %23, %data1_reg, %ctrl_data1_reg : i1
    %30 = comb.xor %25, %true : i1
    %31 = comb.and %30, %29 : i1
    hw.output %chanOutput : !esi.channel<i1>
  }
  hw.module @handshake_mux_in_ui1_3ins_1outs_ctrl(in %select : !esi.channel<i1>, in %in0 : !esi.channel<i0>, in %in1 : !esi.channel<i0>, out out0 : !esi.channel<i0>) {
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %select, %4 : i1
    %rawOutput_0, %valid_1 = esi.unwrap.vr %in0, %6 : i0
    %rawOutput_2, %valid_3 = esi.unwrap.vr %in1, %8 : i0
    %chanOutput, %ready = esi.wrap.vr %9, %3 : i0
    %0 = comb.concat %false, %rawOutput : i1, i1
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = comb.mux %rawOutput, %valid_3, %valid_1 : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %3, %ready : i1
    %5 = comb.extract %1 from 0 : (i2) -> i1
    %6 = comb.and %5, %4 : i1
    %7 = comb.extract %1 from 1 : (i2) -> i1
    %8 = comb.and %7, %4 : i1
    %9 = comb.mux %rawOutput, %rawOutput_2, %rawOutput_0 : i0
    hw.output %chanOutput : !esi.channel<i0>
  }
  hw.module @handshake_mux_in_ui1_ui64_ui64_out_ui64(in %select : !esi.channel<i1>, in %in0 : !esi.channel<i64>, in %in1 : !esi.channel<i64>, out out0 : !esi.channel<i64>) {
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %select, %4 : i1
    %rawOutput_0, %valid_1 = esi.unwrap.vr %in0, %6 : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %in1, %8 : i64
    %chanOutput, %ready = esi.wrap.vr %9, %3 : i64
    %0 = comb.concat %false, %rawOutput : i1, i1
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = comb.mux %rawOutput, %valid_3, %valid_1 : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %3, %ready : i1
    %5 = comb.extract %1 from 0 : (i2) -> i1
    %6 = comb.and %5, %4 : i1
    %7 = comb.extract %1 from 1 : (i2) -> i1
    %8 = comb.and %7, %4 : i1
    %9 = comb.mux %rawOutput, %rawOutput_2, %rawOutput_0 : i64
    hw.output %chanOutput : !esi.channel<i64>
  }
  hw.module @arith_cmpi_in_ui64_ui64_out_ui1_slt(in %in0 : !esi.channel<i64>, in %in1 : !esi.channel<i64>, out out0 : !esi.channel<i1>) {
    %rawOutput, %valid = esi.unwrap.vr %in0, %1 : i64
    %rawOutput_0, %valid_1 = esi.unwrap.vr %in1, %1 : i64
    %chanOutput, %ready = esi.wrap.vr %2, %0 : i1
    %0 = comb.and %valid, %valid_1 : i1
    %1 = comb.and %ready, %0 : i1
    %2 = comb.icmp slt %rawOutput, %rawOutput_0 : i64
    hw.output %chanOutput : !esi.channel<i1>
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in %in0 : !esi.channel<i1>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i1>, out out1 : !esi.channel<i1>, out out2 : !esi.channel<i1>, out out3 : !esi.channel<i1>, out out4 : !esi.channel<i1>) {
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %in0, %30 : i1
    %chanOutput, %ready = esi.wrap.vr %rawOutput, %3 : i1
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %9 : i1
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %15 : i1
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %21 : i1
    %chanOutput_6, %ready_7 = esi.wrap.vr %rawOutput, %27 : i1
    %0 = comb.xor %30, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %30, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_1, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %30, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_3, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %30, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %valid : i1
    %22 = comb.and %ready_5, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.xor %30, %true : i1
    %25 = comb.and %29, %24 : i1
    %emitted_4 = seq.compreg sym @emitted_4 %25, %clock reset %reset, %false : i1  
    %26 = comb.xor %emitted_4, %true : i1
    %27 = comb.and %26, %valid : i1
    %28 = comb.and %ready_7, %27 : i1
    %29 = comb.or %28, %emitted_4 {sv.namehint = "done4"} : i1
    %30 = comb.and %5, %11, %17, %23, %29 {sv.namehint = "allDone"} : i1
    hw.output %chanOutput, %chanOutput_0, %chanOutput_2, %chanOutput_4, %chanOutput_6 : !esi.channel<i1>, !esi.channel<i1>, !esi.channel<i1>, !esi.channel<i1>, !esi.channel<i1>
  }
  hw.module @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(in %cond : !esi.channel<i1>, in %data : !esi.channel<i64>, out outTrue : !esi.channel<i64>, out outFalse : !esi.channel<i64>) {
    %true = hw.constant true
    %rawOutput, %valid = esi.unwrap.vr %cond, %5 : i1
    %rawOutput_0, %valid_1 = esi.unwrap.vr %data, %5 : i64
    %chanOutput, %ready = esi.wrap.vr %rawOutput_0, %1 : i64
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput_0, %3 : i64
    %0 = comb.and %valid, %valid_1 : i1
    %1 = comb.and %rawOutput, %0 : i1
    %2 = comb.xor %rawOutput, %true : i1
    %3 = comb.and %2, %0 : i1
    %4 = comb.mux %rawOutput, %ready, %ready_3 : i1
    %5 = comb.and %4, %0 : i1
    hw.output %chanOutput, %chanOutput_2 : !esi.channel<i64>, !esi.channel<i64>
  }
  hw.module @handshake_sink_in_ui64(in %in0 : !esi.channel<i64>) {
    %true = hw.constant true
    %rawOutput, %valid = esi.unwrap.vr %in0, %true : i64
    hw.output
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in %in0 : !esi.channel<i64>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i64>, out out1 : !esi.channel<i64>, out out2 : !esi.channel<i64>, out out3 : !esi.channel<i64>) {
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %in0, %24 : i64
    %chanOutput, %ready = esi.wrap.vr %rawOutput, %3 : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %9 : i64
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %15 : i64
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %21 : i64
    %0 = comb.xor %24, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %24, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_1, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %24, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_3, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %24, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %valid : i1
    %22 = comb.and %ready_5, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
    hw.output %chanOutput, %chanOutput_0, %chanOutput_2, %chanOutput_4 : !esi.channel<i64>, !esi.channel<i64>, !esi.channel<i64>, !esi.channel<i64>
  }
  hw.module @handshake_cond_br_in_ui1_2ins_2outs_ctrl(in %cond : !esi.channel<i1>, in %data : !esi.channel<i0>, out outTrue : !esi.channel<i0>, out outFalse : !esi.channel<i0>) {
    %true = hw.constant true
    %rawOutput, %valid = esi.unwrap.vr %cond, %5 : i1
    %rawOutput_0, %valid_1 = esi.unwrap.vr %data, %5 : i0
    %chanOutput, %ready = esi.wrap.vr %rawOutput_0, %1 : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput_0, %3 : i0
    %0 = comb.and %valid, %valid_1 : i1
    %1 = comb.and %rawOutput, %0 : i1
    %2 = comb.xor %rawOutput, %true : i1
    %3 = comb.and %2, %0 : i1
    %4 = comb.mux %rawOutput, %ready, %ready_3 : i1
    %5 = comb.and %4, %0 : i1
    hw.output %chanOutput, %chanOutput_2 : !esi.channel<i0>, !esi.channel<i0>
  }
  hw.module @handshake_fork_1ins_4outs_ctrl(in %in0 : !esi.channel<i0>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i0>, out out1 : !esi.channel<i0>, out out2 : !esi.channel<i0>, out out3 : !esi.channel<i0>) {
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %in0, %24 : i0
    %chanOutput, %ready = esi.wrap.vr %rawOutput, %3 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %9 : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %15 : i0
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %21 : i0
    %0 = comb.xor %24, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %24, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_1, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %24, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_3, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %24, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %valid : i1
    %22 = comb.and %ready_5, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
    hw.output %chanOutput, %chanOutput_0, %chanOutput_2, %chanOutput_4 : !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>, !esi.channel<i0>
  }
  hw.module @handshake_join_4ins_1outs_ctrl(in %in0 : !esi.channel<i0>, in %in1 : !esi.channel<i0>, in %in2 : !esi.channel<i0>, in %in3 : !esi.channel<i0>, out out0 : !esi.channel<i0>) {
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %in0, %1 : i0
    %rawOutput_0, %valid_1 = esi.unwrap.vr %in1, %1 : i0
    %rawOutput_2, %valid_3 = esi.unwrap.vr %in2, %1 : i0
    %rawOutput_4, %valid_5 = esi.unwrap.vr %in3, %1 : i0
    %chanOutput, %ready = esi.wrap.vr %c0_i0, %0 : i0
    %0 = comb.and %valid, %valid_1, %valid_3, %valid_5 : i1
    %1 = comb.and %ready, %0 : i1
    hw.output %chanOutput : !esi.channel<i0>
  }
  hw.module @handshake_load_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : !esi.channel<i64>, in %dataFromMem : !esi.channel<i64>, in %ctrl : !esi.channel<i0>, out dataOut : !esi.channel<i64>, out addrOut0 : !esi.channel<i64>) {
    %rawOutput, %valid = esi.unwrap.vr %addrIn0, %1 : i64
    %rawOutput_0, %valid_1 = esi.unwrap.vr %dataFromMem, %ready : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %ctrl, %1 : i0
    %chanOutput, %ready = esi.wrap.vr %rawOutput_0, %valid_1 : i64
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %0 : i64
    %0 = comb.and %valid, %valid_3 : i1
    %1 = comb.and %ready_5, %0 : i1
    hw.output %chanOutput, %chanOutput_4 : !esi.channel<i64>, !esi.channel<i64>
  }
  hw.module @arith_addi_in_ui64_ui64_out_ui64(in %in0 : !esi.channel<i64>, in %in1 : !esi.channel<i64>, out out0 : !esi.channel<i64>) {
    %rawOutput, %valid = esi.unwrap.vr %in0, %1 : i64
    %rawOutput_0, %valid_1 = esi.unwrap.vr %in1, %1 : i64
    %chanOutput, %ready = esi.wrap.vr %2, %0 : i64
    %0 = comb.and %valid, %valid_1 : i1
    %1 = comb.and %ready, %0 : i1
    %2 = comb.add %rawOutput, %rawOutput_0 : i64
    hw.output %chanOutput : !esi.channel<i64>
  }
  hw.module @main(in %in0 : !esi.channel<i0>, in %clock : !seq.clock, in %reset : i1, out out0 : !esi.channel<i0>) {
    %handshake_buffer0.out0 = hw.instance "handshake_buffer0" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %in0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_fork0.out0, %handshake_fork0.out1, %handshake_fork0.out2, %handshake_fork0.out3, %handshake_fork0.out4, %handshake_fork0.out5, %handshake_fork0.out6, %handshake_fork0.out7, %handshake_fork0.out8, %handshake_fork0.out9, %handshake_fork0.out10, %handshake_fork0.out11, %handshake_fork0.out12, %handshake_fork0.out13 = hw.instance "handshake_fork0" @handshake_fork_1ins_14outs_ctrl(in0: %handshake_buffer0.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>, out1: !esi.channel<i0>, out2: !esi.channel<i0>, out3: !esi.channel<i0>, out4: !esi.channel<i0>, out5: !esi.channel<i0>, out6: !esi.channel<i0>, out7: !esi.channel<i0>, out8: !esi.channel<i0>, out9: !esi.channel<i0>, out10: !esi.channel<i0>, out11: !esi.channel<i0>, out12: !esi.channel<i0>, out13: !esi.channel<i0>)
    %handshake_buffer1.out0 = hw.instance "handshake_buffer1" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out13: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer2.out0 = hw.instance "handshake_buffer2" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out12: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer3.out0 = hw.instance "handshake_buffer3" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out11: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer4.out0 = hw.instance "handshake_buffer4" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out10: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer5.out0 = hw.instance "handshake_buffer5" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out9: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer6.out0 = hw.instance "handshake_buffer6" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out8: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer7.out0 = hw.instance "handshake_buffer7" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out7: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer8.out0 = hw.instance "handshake_buffer8" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out6: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer9.out0 = hw.instance "handshake_buffer9" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out5: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer10.out0 = hw.instance "handshake_buffer10" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out4: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer11.out0 = hw.instance "handshake_buffer11" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out3: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer12.out0 = hw.instance "handshake_buffer12" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out2: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer13.out0 = hw.instance "handshake_buffer13" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out1: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer14.out0 = hw.instance "handshake_buffer14" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_memory0.stDone0 = hw.instance "handshake_memory0" @handshake_memory_out_ui64_id2(stData0: %handshake_buffer114.out0: !esi.channel<i64>, stAddr0: %handshake_buffer113.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (stDone0: !esi.channel<i0>)
    %handshake_buffer15.out0 = hw.instance "handshake_buffer15" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory0.stDone0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_memory1.ldData0, %handshake_memory1.stDone0, %handshake_memory1.stDone1, %handshake_memory1.stDone2, %handshake_memory1.ldDone0 = hw.instance "handshake_memory1" @handshake_memory_out_ui64_id1(stData0: %handshake_buffer67.out0: !esi.channel<i64>, stAddr0: %handshake_buffer66.out0: !esi.channel<i64>, stData1: %handshake_buffer70.out0: !esi.channel<i64>, stAddr1: %handshake_buffer69.out0: !esi.channel<i64>, stData2: %handshake_buffer73.out0: !esi.channel<i64>, stAddr2: %handshake_buffer72.out0: !esi.channel<i64>, ldAddr0: %handshake_buffer110.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (ldData0: !esi.channel<i64>, stDone0: !esi.channel<i0>, stDone1: !esi.channel<i0>, stDone2: !esi.channel<i0>, ldDone0: !esi.channel<i0>)
    %handshake_buffer16.out0 = hw.instance "handshake_buffer16" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.ldDone0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer17.out0 = hw.instance "handshake_buffer17" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone2: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer18.out0 = hw.instance "handshake_buffer18" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone1: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer19.out0 = hw.instance "handshake_buffer19" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer20.out0 = hw.instance "handshake_buffer20" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory1.ldData0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_fork1.out0, %handshake_fork1.out1 = hw.instance "handshake_fork1" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer18.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>, out1: !esi.channel<i0>)
    %handshake_buffer21.out0 = hw.instance "handshake_buffer21" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out1: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer22.out0 = hw.instance "handshake_buffer22" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_fork2.out0, %handshake_fork2.out1, %handshake_fork2.out2 = hw.instance "handshake_fork2" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer19.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>, out1: !esi.channel<i0>, out2: !esi.channel<i0>)
    %handshake_buffer23.out0 = hw.instance "handshake_buffer23" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out2: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer24.out0 = hw.instance "handshake_buffer24" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out1: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer25.out0 = hw.instance "handshake_buffer25" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_memory2.ldData0, %handshake_memory2.stDone0, %handshake_memory2.stDone1, %handshake_memory2.stDone2, %handshake_memory2.ldDone0 = hw.instance "handshake_memory2" @handshake_memory_out_ui64_id0(stData0: %handshake_buffer59.out0: !esi.channel<i64>, stAddr0: %handshake_buffer58.out0: !esi.channel<i64>, stData1: %handshake_buffer62.out0: !esi.channel<i64>, stAddr1: %handshake_buffer61.out0: !esi.channel<i64>, stData2: %handshake_buffer65.out0: !esi.channel<i64>, stAddr2: %handshake_buffer64.out0: !esi.channel<i64>, ldAddr0: %handshake_buffer108.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (ldData0: !esi.channel<i64>, stDone0: !esi.channel<i0>, stDone1: !esi.channel<i0>, stDone2: !esi.channel<i0>, ldDone0: !esi.channel<i0>)
    %handshake_buffer26.out0 = hw.instance "handshake_buffer26" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.ldDone0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer27.out0 = hw.instance "handshake_buffer27" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone2: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer28.out0 = hw.instance "handshake_buffer28" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone1: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer29.out0 = hw.instance "handshake_buffer29" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer30.out0 = hw.instance "handshake_buffer30" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory2.ldData0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_fork3.out0, %handshake_fork3.out1 = hw.instance "handshake_fork3" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer28.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>, out1: !esi.channel<i0>)
    %handshake_buffer31.out0 = hw.instance "handshake_buffer31" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out1: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer32.out0 = hw.instance "handshake_buffer32" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_fork4.out0, %handshake_fork4.out1, %handshake_fork4.out2 = hw.instance "handshake_fork4" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer29.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>, out1: !esi.channel<i0>, out2: !esi.channel<i0>)
    %handshake_buffer33.out0 = hw.instance "handshake_buffer33" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out2: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer34.out0 = hw.instance "handshake_buffer34" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out1: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer35.out0 = hw.instance "handshake_buffer35" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_join0.out0 = hw.instance "handshake_join0" @handshake_join_7ins_1outs_ctrl(in0: %handshake_buffer4.out0: !esi.channel<i0>, in1: %handshake_buffer35.out0: !esi.channel<i0>, in2: %handshake_buffer32.out0: !esi.channel<i0>, in3: %handshake_buffer27.out0: !esi.channel<i0>, in4: %handshake_buffer23.out0: !esi.channel<i0>, in5: %handshake_buffer21.out0: !esi.channel<i0>, in6: %handshake_buffer17.out0: !esi.channel<i0>) -> (out0: !esi.channel<i0>)
    %handshake_buffer36.out0 = hw.instance "handshake_buffer36" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join0.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_constant0.out0 = hw.instance "handshake_constant0" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer14.out0: !esi.channel<i0>) -> (out0: !esi.channel<i64>)
    %handshake_buffer37.out0 = hw.instance "handshake_buffer37" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant0.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_constant1.out0 = hw.instance "handshake_constant1" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer13.out0: !esi.channel<i0>) -> (out0: !esi.channel<i64>)
    %handshake_buffer38.out0 = hw.instance "handshake_buffer38" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant1.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_fork5.out0, %handshake_fork5.out1 = hw.instance "handshake_fork5" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer38.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>, out1: !esi.channel<i64>)
    %handshake_buffer39.out0 = hw.instance "handshake_buffer39" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out1: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer40.out0 = hw.instance "handshake_buffer40" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_constant2.out0 = hw.instance "handshake_constant2" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer12.out0: !esi.channel<i0>) -> (out0: !esi.channel<i64>)
    %handshake_buffer41.out0 = hw.instance "handshake_buffer41" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant2.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_fork6.out0, %handshake_fork6.out1 = hw.instance "handshake_fork6" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer41.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>, out1: !esi.channel<i64>)
    %handshake_buffer42.out0 = hw.instance "handshake_buffer42" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out1: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer43.out0 = hw.instance "handshake_buffer43" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_constant3.out0 = hw.instance "handshake_constant3" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer11.out0: !esi.channel<i0>) -> (out0: !esi.channel<i64>)
    %handshake_buffer44.out0 = hw.instance "handshake_buffer44" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant3.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_fork7.out0, %handshake_fork7.out1 = hw.instance "handshake_fork7" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer44.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>, out1: !esi.channel<i64>)
    %handshake_buffer45.out0 = hw.instance "handshake_buffer45" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out1: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer46.out0 = hw.instance "handshake_buffer46" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_constant4.out0 = hw.instance "handshake_constant4" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer10.out0: !esi.channel<i0>) -> (out0: !esi.channel<i64>)
    %handshake_buffer47.out0 = hw.instance "handshake_buffer47" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant4.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_fork8.out0, %handshake_fork8.out1 = hw.instance "handshake_fork8" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer47.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>, out1: !esi.channel<i64>)
    %handshake_buffer48.out0 = hw.instance "handshake_buffer48" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out1: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer49.out0 = hw.instance "handshake_buffer49" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_constant5.out0 = hw.instance "handshake_constant5" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer9.out0: !esi.channel<i0>) -> (out0: !esi.channel<i64>)
    %handshake_buffer50.out0 = hw.instance "handshake_buffer50" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant5.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_fork9.out0, %handshake_fork9.out1, %handshake_fork9.out2 = hw.instance "handshake_fork9" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer50.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>, out1: !esi.channel<i64>, out2: !esi.channel<i64>)
    %handshake_buffer51.out0 = hw.instance "handshake_buffer51" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out2: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer52.out0 = hw.instance "handshake_buffer52" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out1: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer53.out0 = hw.instance "handshake_buffer53" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_constant6.out0 = hw.instance "handshake_constant6" @handshake_constant_c0_out_ui64(ctrl: %handshake_buffer8.out0: !esi.channel<i0>) -> (out0: !esi.channel<i64>)
    %handshake_buffer54.out0 = hw.instance "handshake_buffer54" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant6.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_fork10.out0, %handshake_fork10.out1, %handshake_fork10.out2 = hw.instance "handshake_fork10" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer54.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>, out1: !esi.channel<i64>, out2: !esi.channel<i64>)
    %handshake_buffer55.out0 = hw.instance "handshake_buffer55" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out2: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer56.out0 = hw.instance "handshake_buffer56" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out1: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer57.out0 = hw.instance "handshake_buffer57" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_store0.dataToMem, %handshake_store0.addrOut0 = hw.instance "handshake_store0" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer55.out0: !esi.channel<i64>, dataIn: %handshake_buffer45.out0: !esi.channel<i64>, ctrl: %handshake_buffer7.out0: !esi.channel<i0>) -> (dataToMem: !esi.channel<i64>, addrOut0: !esi.channel<i64>)
    %handshake_buffer58.out0 = hw.instance "handshake_buffer58" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.addrOut0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer59.out0 = hw.instance "handshake_buffer59" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.dataToMem: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_join1.out0 = hw.instance "handshake_join1" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer6.out0: !esi.channel<i0>, in1: %handshake_buffer33.out0: !esi.channel<i0>) -> (out0: !esi.channel<i0>)
    %handshake_buffer60.out0 = hw.instance "handshake_buffer60" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join1.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_store1.dataToMem, %handshake_store1.addrOut0 = hw.instance "handshake_store1" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer51.out0: !esi.channel<i64>, dataIn: %handshake_buffer42.out0: !esi.channel<i64>, ctrl: %handshake_buffer60.out0: !esi.channel<i0>) -> (dataToMem: !esi.channel<i64>, addrOut0: !esi.channel<i64>)
    %handshake_buffer61.out0 = hw.instance "handshake_buffer61" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.addrOut0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer62.out0 = hw.instance "handshake_buffer62" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.dataToMem: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_join2.out0 = hw.instance "handshake_join2" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer5.out0: !esi.channel<i0>, in1: %handshake_buffer34.out0: !esi.channel<i0>, in2: %handshake_buffer31.out0: !esi.channel<i0>) -> (out0: !esi.channel<i0>)
    %handshake_buffer63.out0 = hw.instance "handshake_buffer63" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join2.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_store2.dataToMem, %handshake_store2.addrOut0 = hw.instance "handshake_store2" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer48.out0: !esi.channel<i64>, dataIn: %handshake_buffer39.out0: !esi.channel<i64>, ctrl: %handshake_buffer63.out0: !esi.channel<i0>) -> (dataToMem: !esi.channel<i64>, addrOut0: !esi.channel<i64>)
    %handshake_buffer64.out0 = hw.instance "handshake_buffer64" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.addrOut0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer65.out0 = hw.instance "handshake_buffer65" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.dataToMem: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_store3.dataToMem, %handshake_store3.addrOut0 = hw.instance "handshake_store3" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer56.out0: !esi.channel<i64>, dataIn: %handshake_buffer46.out0: !esi.channel<i64>, ctrl: %handshake_buffer3.out0: !esi.channel<i0>) -> (dataToMem: !esi.channel<i64>, addrOut0: !esi.channel<i64>)
    %handshake_buffer66.out0 = hw.instance "handshake_buffer66" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.addrOut0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer67.out0 = hw.instance "handshake_buffer67" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.dataToMem: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_join3.out0 = hw.instance "handshake_join3" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer2.out0: !esi.channel<i0>, in1: %handshake_buffer24.out0: !esi.channel<i0>) -> (out0: !esi.channel<i0>)
    %handshake_buffer68.out0 = hw.instance "handshake_buffer68" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join3.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_store4.dataToMem, %handshake_store4.addrOut0 = hw.instance "handshake_store4" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer52.out0: !esi.channel<i64>, dataIn: %handshake_buffer43.out0: !esi.channel<i64>, ctrl: %handshake_buffer68.out0: !esi.channel<i0>) -> (dataToMem: !esi.channel<i64>, addrOut0: !esi.channel<i64>)
    %handshake_buffer69.out0 = hw.instance "handshake_buffer69" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.addrOut0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer70.out0 = hw.instance "handshake_buffer70" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.dataToMem: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_join4.out0 = hw.instance "handshake_join4" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer1.out0: !esi.channel<i0>, in1: %handshake_buffer25.out0: !esi.channel<i0>, in2: %handshake_buffer22.out0: !esi.channel<i0>) -> (out0: !esi.channel<i0>)
    %handshake_buffer71.out0 = hw.instance "handshake_buffer71" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join4.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_store5.dataToMem, %handshake_store5.addrOut0 = hw.instance "handshake_store5" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer49.out0: !esi.channel<i64>, dataIn: %handshake_buffer40.out0: !esi.channel<i64>, ctrl: %handshake_buffer71.out0: !esi.channel<i0>) -> (dataToMem: !esi.channel<i64>, addrOut0: !esi.channel<i64>)
    %handshake_buffer72.out0 = hw.instance "handshake_buffer72" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.addrOut0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer73.out0 = hw.instance "handshake_buffer73" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.dataToMem: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer74.out0 = hw.instance "handshake_buffer74" @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in0: %handshake_fork14.out0: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>)
    %handshake_fork11.out0, %handshake_fork11.out1, %handshake_fork11.out2, %handshake_fork11.out3 = hw.instance "handshake_fork11" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in0: %handshake_buffer74.out0: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>, out1: !esi.channel<i1>, out2: !esi.channel<i1>, out3: !esi.channel<i1>)
    %handshake_buffer75.out0 = hw.instance "handshake_buffer75" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out3: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>)
    %handshake_buffer76.out0 = hw.instance "handshake_buffer76" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out2: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>)
    %handshake_buffer77.out0 = hw.instance "handshake_buffer77" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out1: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>)
    %handshake_buffer78.out0 = hw.instance "handshake_buffer78" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out0: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>)
    %handshake_mux0.out0 = hw.instance "handshake_mux0" @handshake_mux_in_ui1_3ins_1outs_ctrl(select: %handshake_buffer75.out0: !esi.channel<i1>, in0: %handshake_buffer36.out0: !esi.channel<i0>, in1: %handshake_buffer107.out0: !esi.channel<i0>) -> (out0: !esi.channel<i0>)
    %handshake_buffer79.out0 = hw.instance "handshake_buffer79" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_mux0.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_mux1.out0 = hw.instance "handshake_mux1" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer76.out0: !esi.channel<i1>, in0: %handshake_buffer57.out0: !esi.channel<i64>, in1: %handshake_buffer115.out0: !esi.channel<i64>) -> (out0: !esi.channel<i64>)
    %handshake_buffer80.out0 = hw.instance "handshake_buffer80" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux1.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_fork12.out0, %handshake_fork12.out1 = hw.instance "handshake_fork12" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer80.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>, out1: !esi.channel<i64>)
    %handshake_buffer81.out0 = hw.instance "handshake_buffer81" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out1: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer82.out0 = hw.instance "handshake_buffer82" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_mux2.out0 = hw.instance "handshake_mux2" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer77.out0: !esi.channel<i1>, in0: %handshake_buffer37.out0: !esi.channel<i64>, in1: %handshake_buffer97.out0: !esi.channel<i64>) -> (out0: !esi.channel<i64>)
    %handshake_buffer83.out0 = hw.instance "handshake_buffer83" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux2.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_fork13.out0, %handshake_fork13.out1 = hw.instance "handshake_fork13" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer83.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>, out1: !esi.channel<i64>)
    %handshake_buffer84.out0 = hw.instance "handshake_buffer84" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out1: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer85.out0 = hw.instance "handshake_buffer85" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_mux3.out0 = hw.instance "handshake_mux3" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer78.out0: !esi.channel<i1>, in0: %handshake_buffer53.out0: !esi.channel<i64>, in1: %handshake_buffer100.out0: !esi.channel<i64>) -> (out0: !esi.channel<i64>)
    %handshake_buffer86.out0 = hw.instance "handshake_buffer86" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux3.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %arith_cmpi0.out0 = hw.instance "arith_cmpi0" @arith_cmpi_in_ui64_ui64_out_ui1_slt(in0: %handshake_buffer82.out0: !esi.channel<i64>, in1: %handshake_buffer85.out0: !esi.channel<i64>) -> (out0: !esi.channel<i1>)
    %handshake_buffer87.out0 = hw.instance "handshake_buffer87" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %arith_cmpi0.out0: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>)
    %handshake_fork14.out0, %handshake_fork14.out1, %handshake_fork14.out2, %handshake_fork14.out3, %handshake_fork14.out4 = hw.instance "handshake_fork14" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in0: %handshake_buffer87.out0: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>, out1: !esi.channel<i1>, out2: !esi.channel<i1>, out3: !esi.channel<i1>, out4: !esi.channel<i1>)
    %handshake_buffer88.out0 = hw.instance "handshake_buffer88" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out4: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>)
    %handshake_buffer89.out0 = hw.instance "handshake_buffer89" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out3: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>)
    %handshake_buffer90.out0 = hw.instance "handshake_buffer90" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out2: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>)
    %handshake_buffer91.out0 = hw.instance "handshake_buffer91" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out1: !esi.channel<i1>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i1>)
    %handshake_cond_br0.outTrue, %handshake_cond_br0.outFalse = hw.instance "handshake_cond_br0" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer88.out0: !esi.channel<i1>, data: %handshake_buffer81.out0: !esi.channel<i64>) -> (outTrue: !esi.channel<i64>, outFalse: !esi.channel<i64>)
    %handshake_buffer92.out0 = hw.instance "handshake_buffer92" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br0.outTrue: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    hw.instance "handshake_sink0" @handshake_sink_in_ui64(in0: %handshake_cond_br0.outFalse: !esi.channel<i64>) -> ()
    %handshake_fork15.out0, %handshake_fork15.out1, %handshake_fork15.out2, %handshake_fork15.out3 = hw.instance "handshake_fork15" @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in0: %handshake_buffer92.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>, out1: !esi.channel<i64>, out2: !esi.channel<i64>, out3: !esi.channel<i64>)
    %handshake_buffer93.out0 = hw.instance "handshake_buffer93" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out3: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer94.out0 = hw.instance "handshake_buffer94" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out2: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer95.out0 = hw.instance "handshake_buffer95" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out1: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer96.out0 = hw.instance "handshake_buffer96" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_cond_br1.outTrue, %handshake_cond_br1.outFalse = hw.instance "handshake_cond_br1" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer89.out0: !esi.channel<i1>, data: %handshake_buffer84.out0: !esi.channel<i64>) -> (outTrue: !esi.channel<i64>, outFalse: !esi.channel<i64>)
    %handshake_buffer97.out0 = hw.instance "handshake_buffer97" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br1.outTrue: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    hw.instance "handshake_sink1" @handshake_sink_in_ui64(in0: %handshake_cond_br1.outFalse: !esi.channel<i64>) -> ()
    %handshake_cond_br2.outTrue, %handshake_cond_br2.outFalse = hw.instance "handshake_cond_br2" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer90.out0: !esi.channel<i1>, data: %handshake_buffer86.out0: !esi.channel<i64>) -> (outTrue: !esi.channel<i64>, outFalse: !esi.channel<i64>)
    %handshake_buffer98.out0 = hw.instance "handshake_buffer98" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br2.outTrue: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    hw.instance "handshake_sink2" @handshake_sink_in_ui64(in0: %handshake_cond_br2.outFalse: !esi.channel<i64>) -> ()
    %handshake_fork16.out0, %handshake_fork16.out1 = hw.instance "handshake_fork16" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer98.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>, out1: !esi.channel<i64>)
    %handshake_buffer99.out0 = hw.instance "handshake_buffer99" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out1: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer100.out0 = hw.instance "handshake_buffer100" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_cond_br3.outTrue, %handshake_cond_br3.outFalse = hw.instance "handshake_cond_br3" @handshake_cond_br_in_ui1_2ins_2outs_ctrl(cond: %handshake_buffer91.out0: !esi.channel<i1>, data: %handshake_buffer79.out0: !esi.channel<i0>) -> (outTrue: !esi.channel<i0>, outFalse: !esi.channel<i0>)
    %handshake_buffer101.out0 = hw.instance "handshake_buffer101" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outFalse: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer102.out0 = hw.instance "handshake_buffer102" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outTrue: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_fork17.out0, %handshake_fork17.out1, %handshake_fork17.out2, %handshake_fork17.out3 = hw.instance "handshake_fork17" @handshake_fork_1ins_4outs_ctrl(in0: %handshake_buffer102.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>, out1: !esi.channel<i0>, out2: !esi.channel<i0>, out3: !esi.channel<i0>)
    %handshake_buffer103.out0 = hw.instance "handshake_buffer103" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out3: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer104.out0 = hw.instance "handshake_buffer104" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out2: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer105.out0 = hw.instance "handshake_buffer105" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out1: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_buffer106.out0 = hw.instance "handshake_buffer106" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_join5.out0 = hw.instance "handshake_join5" @handshake_join_4ins_1outs_ctrl(in0: %handshake_buffer105.out0: !esi.channel<i0>, in1: %handshake_buffer26.out0: !esi.channel<i0>, in2: %handshake_buffer16.out0: !esi.channel<i0>, in3: %handshake_buffer15.out0: !esi.channel<i0>) -> (out0: !esi.channel<i0>)
    %handshake_buffer107.out0 = hw.instance "handshake_buffer107" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join5.out0: !esi.channel<i0>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i0>)
    %handshake_load0.dataOut, %handshake_load0.addrOut0 = hw.instance "handshake_load0" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer95.out0: !esi.channel<i64>, dataFromMem: %handshake_buffer30.out0: !esi.channel<i64>, ctrl: %handshake_buffer103.out0: !esi.channel<i0>) -> (dataOut: !esi.channel<i64>, addrOut0: !esi.channel<i64>)
    %handshake_buffer108.out0 = hw.instance "handshake_buffer108" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.addrOut0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer109.out0 = hw.instance "handshake_buffer109" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.dataOut: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_load1.dataOut, %handshake_load1.addrOut0 = hw.instance "handshake_load1" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer94.out0: !esi.channel<i64>, dataFromMem: %handshake_buffer20.out0: !esi.channel<i64>, ctrl: %handshake_buffer104.out0: !esi.channel<i0>) -> (dataOut: !esi.channel<i64>, addrOut0: !esi.channel<i64>)
    %handshake_buffer110.out0 = hw.instance "handshake_buffer110" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.addrOut0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer111.out0 = hw.instance "handshake_buffer111" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.dataOut: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %arith_addi0.out0 = hw.instance "arith_addi0" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer109.out0: !esi.channel<i64>, in1: %handshake_buffer111.out0: !esi.channel<i64>) -> (out0: !esi.channel<i64>)
    %handshake_buffer112.out0 = hw.instance "handshake_buffer112" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi0.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_store6.dataToMem, %handshake_store6.addrOut0 = hw.instance "handshake_store6" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer93.out0: !esi.channel<i64>, dataIn: %handshake_buffer112.out0: !esi.channel<i64>, ctrl: %handshake_buffer106.out0: !esi.channel<i0>) -> (dataToMem: !esi.channel<i64>, addrOut0: !esi.channel<i64>)
    %handshake_buffer113.out0 = hw.instance "handshake_buffer113" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.addrOut0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %handshake_buffer114.out0 = hw.instance "handshake_buffer114" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.dataToMem: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    %arith_addi1.out0 = hw.instance "arith_addi1" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer96.out0: !esi.channel<i64>, in1: %handshake_buffer99.out0: !esi.channel<i64>) -> (out0: !esi.channel<i64>)
    %handshake_buffer115.out0 = hw.instance "handshake_buffer115" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi1.out0: !esi.channel<i64>, clock: %clock: !seq.clock, reset: %reset: i1) -> (out0: !esi.channel<i64>)
    hw.output %handshake_buffer101.out0 : !esi.channel<i0>
  }
}


// -----// IR Dump After LowerESIPorts (lower-esi-ports) //----- //
module {
  hw.module @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i0
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %1 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %27, %19 : i0
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %valid, %valid0_reg : i1
    %3 = comb.mux %1, %rawOutput, %data0_reg : i0
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %c0_i0 : i0  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %16, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %16, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %14, %clock reset %reset, %c0_i0 : i0  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i0
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i0
    %14 = comb.mux %9, %c0_i0, %13 : i0
    %valid1_reg = seq.compreg sym @valid1_reg %17, %clock reset %reset, %false : i1  
    %15 = comb.xor %valid1_reg, %true : i1
    %16 = comb.or %15, %20 : i1
    %17 = comb.mux %16, %4, %valid1_reg : i1
    %18 = comb.mux %16, %12, %data1_reg : i0
    %data1_reg = seq.compreg sym @data1_reg %18, %clock reset %reset, %c0_i0 : i0  
    %ready1_reg = seq.compreg sym @ready1_reg %26, %clock reset %reset, %false : i1  
    %19 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
    %20 = comb.xor %ready1_reg, %true : i1
    %21 = comb.xor %ready_1, %true : i1
    %22 = comb.and %21, %20 : i1
    %23 = comb.mux %22, %valid1_reg, %ready1_reg : i1
    %24 = comb.and %ready_1, %ready1_reg : i1
    %25 = comb.xor %24, %true : i1
    %26 = comb.and %25, %23 : i1
    %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %29, %clock reset %reset, %c0_i0 : i0  
    %27 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i0
    %28 = comb.mux %22, %data1_reg, %ctrl_data1_reg : i0
    %29 = comb.mux %24, %c0_i0, %28 : i0
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput_0, %out0_ready : i0
    hw.output %ready, %rawOutput_2, %valid_3 : i1, i0, i1
  }
  hw.module @handshake_fork_1ins_14outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, in %out5_ready : i1, in %out6_ready : i1, in %out7_ready : i1, in %out8_ready : i1, in %out9_ready : i1, in %out10_ready : i1, in %out11_ready : i1, in %out12_ready : i1, in %out13_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1, out out4 : i0, out out4_valid : i1, out out5 : i0, out out5_valid : i1, out out6 : i0, out out6_valid : i1, out out7 : i0, out out7_valid : i1, out out8 : i0, out out8_valid : i1, out out9 : i0, out out9_valid : i1, out out10 : i0, out out10_valid : i1, out out11 : i0, out out11_valid : i1, out out12 : i0, out out12_valid : i1, out out13 : i0, out out13_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i0
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %84 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %3 : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %9 : i0
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %15 : i0
    %chanOutput_6, %ready_7 = esi.wrap.vr %rawOutput, %21 : i0
    %chanOutput_8, %ready_9 = esi.wrap.vr %rawOutput, %27 : i0
    %chanOutput_10, %ready_11 = esi.wrap.vr %rawOutput, %33 : i0
    %chanOutput_12, %ready_13 = esi.wrap.vr %rawOutput, %39 : i0
    %chanOutput_14, %ready_15 = esi.wrap.vr %rawOutput, %45 : i0
    %chanOutput_16, %ready_17 = esi.wrap.vr %rawOutput, %51 : i0
    %chanOutput_18, %ready_19 = esi.wrap.vr %rawOutput, %57 : i0
    %chanOutput_20, %ready_21 = esi.wrap.vr %rawOutput, %63 : i0
    %chanOutput_22, %ready_23 = esi.wrap.vr %rawOutput, %69 : i0
    %chanOutput_24, %ready_25 = esi.wrap.vr %rawOutput, %75 : i0
    %chanOutput_26, %ready_27 = esi.wrap.vr %rawOutput, %81 : i0
    %0 = comb.xor %84, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready_1, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %84, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_3, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %84, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_5, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %84, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %valid : i1
    %22 = comb.and %ready_7, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.xor %84, %true : i1
    %25 = comb.and %29, %24 : i1
    %emitted_4 = seq.compreg sym @emitted_4 %25, %clock reset %reset, %false : i1  
    %26 = comb.xor %emitted_4, %true : i1
    %27 = comb.and %26, %valid : i1
    %28 = comb.and %ready_9, %27 : i1
    %29 = comb.or %28, %emitted_4 {sv.namehint = "done4"} : i1
    %30 = comb.xor %84, %true : i1
    %31 = comb.and %35, %30 : i1
    %emitted_5 = seq.compreg sym @emitted_5 %31, %clock reset %reset, %false : i1  
    %32 = comb.xor %emitted_5, %true : i1
    %33 = comb.and %32, %valid : i1
    %34 = comb.and %ready_11, %33 : i1
    %35 = comb.or %34, %emitted_5 {sv.namehint = "done5"} : i1
    %36 = comb.xor %84, %true : i1
    %37 = comb.and %41, %36 : i1
    %emitted_6 = seq.compreg sym @emitted_6 %37, %clock reset %reset, %false : i1  
    %38 = comb.xor %emitted_6, %true : i1
    %39 = comb.and %38, %valid : i1
    %40 = comb.and %ready_13, %39 : i1
    %41 = comb.or %40, %emitted_6 {sv.namehint = "done6"} : i1
    %42 = comb.xor %84, %true : i1
    %43 = comb.and %47, %42 : i1
    %emitted_7 = seq.compreg sym @emitted_7 %43, %clock reset %reset, %false : i1  
    %44 = comb.xor %emitted_7, %true : i1
    %45 = comb.and %44, %valid : i1
    %46 = comb.and %ready_15, %45 : i1
    %47 = comb.or %46, %emitted_7 {sv.namehint = "done7"} : i1
    %48 = comb.xor %84, %true : i1
    %49 = comb.and %53, %48 : i1
    %emitted_8 = seq.compreg sym @emitted_8 %49, %clock reset %reset, %false : i1  
    %50 = comb.xor %emitted_8, %true : i1
    %51 = comb.and %50, %valid : i1
    %52 = comb.and %ready_17, %51 : i1
    %53 = comb.or %52, %emitted_8 {sv.namehint = "done8"} : i1
    %54 = comb.xor %84, %true : i1
    %55 = comb.and %59, %54 : i1
    %emitted_9 = seq.compreg sym @emitted_9 %55, %clock reset %reset, %false : i1  
    %56 = comb.xor %emitted_9, %true : i1
    %57 = comb.and %56, %valid : i1
    %58 = comb.and %ready_19, %57 : i1
    %59 = comb.or %58, %emitted_9 {sv.namehint = "done9"} : i1
    %60 = comb.xor %84, %true : i1
    %61 = comb.and %65, %60 : i1
    %emitted_10 = seq.compreg sym @emitted_10 %61, %clock reset %reset, %false : i1  
    %62 = comb.xor %emitted_10, %true : i1
    %63 = comb.and %62, %valid : i1
    %64 = comb.and %ready_21, %63 : i1
    %65 = comb.or %64, %emitted_10 {sv.namehint = "done10"} : i1
    %66 = comb.xor %84, %true : i1
    %67 = comb.and %71, %66 : i1
    %emitted_11 = seq.compreg sym @emitted_11 %67, %clock reset %reset, %false : i1  
    %68 = comb.xor %emitted_11, %true : i1
    %69 = comb.and %68, %valid : i1
    %70 = comb.and %ready_23, %69 : i1
    %71 = comb.or %70, %emitted_11 {sv.namehint = "done11"} : i1
    %72 = comb.xor %84, %true : i1
    %73 = comb.and %77, %72 : i1
    %emitted_12 = seq.compreg sym @emitted_12 %73, %clock reset %reset, %false : i1  
    %74 = comb.xor %emitted_12, %true : i1
    %75 = comb.and %74, %valid : i1
    %76 = comb.and %ready_25, %75 : i1
    %77 = comb.or %76, %emitted_12 {sv.namehint = "done12"} : i1
    %78 = comb.xor %84, %true : i1
    %79 = comb.and %83, %78 : i1
    %emitted_13 = seq.compreg sym @emitted_13 %79, %clock reset %reset, %false : i1  
    %80 = comb.xor %emitted_13, %true : i1
    %81 = comb.and %80, %valid : i1
    %82 = comb.and %ready_27, %81 : i1
    %83 = comb.or %82, %emitted_13 {sv.namehint = "done13"} : i1
    %84 = comb.and %5, %11, %17, %23, %29, %35, %41, %47, %53, %59, %65, %71, %77, %83 {sv.namehint = "allDone"} : i1
    %rawOutput_28, %valid_29 = esi.unwrap.vr %chanOutput_0, %out0_ready : i0
    %rawOutput_30, %valid_31 = esi.unwrap.vr %chanOutput_2, %out1_ready : i0
    %rawOutput_32, %valid_33 = esi.unwrap.vr %chanOutput_4, %out2_ready : i0
    %rawOutput_34, %valid_35 = esi.unwrap.vr %chanOutput_6, %out3_ready : i0
    %rawOutput_36, %valid_37 = esi.unwrap.vr %chanOutput_8, %out4_ready : i0
    %rawOutput_38, %valid_39 = esi.unwrap.vr %chanOutput_10, %out5_ready : i0
    %rawOutput_40, %valid_41 = esi.unwrap.vr %chanOutput_12, %out6_ready : i0
    %rawOutput_42, %valid_43 = esi.unwrap.vr %chanOutput_14, %out7_ready : i0
    %rawOutput_44, %valid_45 = esi.unwrap.vr %chanOutput_16, %out8_ready : i0
    %rawOutput_46, %valid_47 = esi.unwrap.vr %chanOutput_18, %out9_ready : i0
    %rawOutput_48, %valid_49 = esi.unwrap.vr %chanOutput_20, %out10_ready : i0
    %rawOutput_50, %valid_51 = esi.unwrap.vr %chanOutput_22, %out11_ready : i0
    %rawOutput_52, %valid_53 = esi.unwrap.vr %chanOutput_24, %out12_ready : i0
    %rawOutput_54, %valid_55 = esi.unwrap.vr %chanOutput_26, %out13_ready : i0
    hw.output %ready, %rawOutput_28, %valid_29, %rawOutput_30, %valid_31, %rawOutput_32, %valid_33, %rawOutput_34, %valid_35, %rawOutput_36, %valid_37, %rawOutput_38, %valid_39, %rawOutput_40, %valid_41, %rawOutput_42, %valid_43, %rawOutput_44, %valid_45, %rawOutput_46, %valid_47, %rawOutput_48, %valid_49, %rawOutput_50, %valid_51, %rawOutput_52, %valid_53, %rawOutput_54, %valid_55 : i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id2(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %stDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stDone0 : i0, out stDone0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %stAddr0, %stAddr0_valid : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %stData0, %stData0_valid : i64
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_0, %2 : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput, %2 : i64
    %chanOutput_4, %ready_5 = esi.wrap.vr %c0_i0, %writeValidBuffer : i0
    %_handshake_memory_2 = seq.hlmem @_handshake_memory_2 %clock, %reset : <3xi64>
    %writeValidBuffer = seq.compreg sym @writeValidBuffer %4, %clock reset %reset, %false : i1  
    %0 = comb.and %ready_5, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
    %1 = comb.xor %writeValidBuffer, %true : i1
    %2 = comb.or %1, %0 {sv.namehint = "emptyOrComplete"} : i1
    %3 = comb.and %valid_3, %valid {sv.namehint = "writeValid"} : i1
    %4 = comb.mux %2, %3, %writeValidBuffer : i1
    %5 = comb.extract %rawOutput_2 from 0 : (i64) -> i2
    seq.write %_handshake_memory_2[%5] %rawOutput wren %3 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput_4, %stDone0_ready : i0
    hw.output %ready_1, %ready, %rawOutput_6, %valid_7 : i1, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id1(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %ldAddr0, %ldAddr0_valid : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %stAddr2, %stAddr2_valid : i64
    %chanOutput_2, %ready_3 = esi.wrap.vr %stData2, %stData2_valid : i64
    %chanOutput_4, %ready_5 = esi.wrap.vr %stAddr1, %stAddr1_valid : i64
    %chanOutput_6, %ready_7 = esi.wrap.vr %stData1, %stData1_valid : i64
    %chanOutput_8, %ready_9 = esi.wrap.vr %stAddr0, %stAddr0_valid : i64
    %chanOutput_10, %ready_11 = esi.wrap.vr %stData0, %stData0_valid : i64
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_10, %16 : i64
    %rawOutput_12, %valid_13 = esi.unwrap.vr %chanOutput_8, %16 : i64
    %rawOutput_14, %valid_15 = esi.unwrap.vr %chanOutput_6, %22 : i64
    %rawOutput_16, %valid_17 = esi.unwrap.vr %chanOutput_4, %22 : i64
    %rawOutput_18, %valid_19 = esi.unwrap.vr %chanOutput_2, %28 : i64
    %rawOutput_20, %valid_21 = esi.unwrap.vr %chanOutput_0, %28 : i64
    %rawOutput_22, %valid_23 = esi.unwrap.vr %chanOutput, %13 : i64
    %chanOutput_24, %ready_25 = esi.wrap.vr %_handshake_memory_1_rdata, %4 : i64
    %chanOutput_26, %ready_27 = esi.wrap.vr %c0_i0, %writeValidBuffer : i0
    %chanOutput_28, %ready_29 = esi.wrap.vr %c0_i0, %writeValidBuffer_34 : i0
    %chanOutput_30, %ready_31 = esi.wrap.vr %c0_i0, %writeValidBuffer_35 : i0
    %chanOutput_32, %ready_33 = esi.wrap.vr %c0_i0, %10 : i0
    %_handshake_memory_1 = seq.hlmem @_handshake_memory_1 %clock, %reset : <3xi64>
    %0 = comb.extract %rawOutput_22 from 0 : (i64) -> i2
    %_handshake_memory_1_rdata = seq.read %_handshake_memory_1[%0] rden %valid_23 {latency = 0 : i64} : !seq.hlmem<3xi64>
    %1 = comb.xor %13, %true : i1
    %2 = comb.and %6, %1 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %2, %clock reset %reset, %false : i1  
    %3 = comb.xor %emitted_0, %true : i1
    %4 = comb.and %3, %valid_23 : i1
    %5 = comb.and %ready_25, %4 : i1
    %6 = comb.or %5, %emitted_0 {sv.namehint = "done0"} : i1
    %7 = comb.xor %13, %true : i1
    %8 = comb.and %12, %7 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %8, %clock reset %reset, %false : i1  
    %9 = comb.xor %emitted_1, %true : i1
    %10 = comb.and %9, %valid_23 : i1
    %11 = comb.and %ready_33, %10 : i1
    %12 = comb.or %11, %emitted_1 {sv.namehint = "done1"} : i1
    %13 = comb.and %6, %12 {sv.namehint = "allDone"} : i1
    %writeValidBuffer = seq.compreg sym @writeValidBuffer %18, %clock reset %reset, %false : i1  
    %14 = comb.and %ready_27, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
    %15 = comb.xor %writeValidBuffer, %true : i1
    %16 = comb.or %15, %14 {sv.namehint = "emptyOrComplete"} : i1
    %17 = comb.and %valid_13, %valid {sv.namehint = "writeValid"} : i1
    %18 = comb.mux %16, %17, %writeValidBuffer : i1
    %19 = comb.extract %rawOutput_12 from 0 : (i64) -> i2
    seq.write %_handshake_memory_1[%19] %rawOutput wren %17 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_34 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %24, %clock reset %reset, %false : i1  
    %20 = comb.and %ready_29, %writeValidBuffer_34 {sv.namehint = "storeCompleted"} : i1
    %21 = comb.xor %writeValidBuffer_34, %true : i1
    %22 = comb.or %21, %20 {sv.namehint = "emptyOrComplete"} : i1
    %23 = comb.and %valid_17, %valid_15 {sv.namehint = "writeValid"} : i1
    %24 = comb.mux %22, %23, %writeValidBuffer_34 : i1
    %25 = comb.extract %rawOutput_16 from 0 : (i64) -> i2
    seq.write %_handshake_memory_1[%25] %rawOutput_14 wren %23 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_35 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %30, %clock reset %reset, %false : i1  
    %26 = comb.and %ready_31, %writeValidBuffer_35 {sv.namehint = "storeCompleted"} : i1
    %27 = comb.xor %writeValidBuffer_35, %true : i1
    %28 = comb.or %27, %26 {sv.namehint = "emptyOrComplete"} : i1
    %29 = comb.and %valid_21, %valid_19 {sv.namehint = "writeValid"} : i1
    %30 = comb.mux %28, %29, %writeValidBuffer_35 : i1
    %31 = comb.extract %rawOutput_20 from 0 : (i64) -> i2
    seq.write %_handshake_memory_1[%31] %rawOutput_18 wren %29 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %rawOutput_36, %valid_37 = esi.unwrap.vr %chanOutput_24, %ldData0_ready : i64
    %rawOutput_38, %valid_39 = esi.unwrap.vr %chanOutput_26, %stDone0_ready : i0
    %rawOutput_40, %valid_41 = esi.unwrap.vr %chanOutput_28, %stDone1_ready : i0
    %rawOutput_42, %valid_43 = esi.unwrap.vr %chanOutput_30, %stDone2_ready : i0
    %rawOutput_44, %valid_45 = esi.unwrap.vr %chanOutput_32, %ldDone0_ready : i0
    hw.output %ready_11, %ready_9, %ready_7, %ready_5, %ready_3, %ready_1, %ready, %rawOutput_36, %valid_37, %rawOutput_38, %valid_39, %rawOutput_40, %valid_41, %rawOutput_42, %valid_43, %rawOutput_44, %valid_45 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_buffer_in_ui64_out_ui64_2slots_seq(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i64
    %true = hw.constant true
    %false = hw.constant false
    %c0_i64 = hw.constant 0 : i64
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %1 : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %27, %19 : i64
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %valid, %valid0_reg : i1
    %3 = comb.mux %1, %rawOutput, %data0_reg : i64
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %c0_i64 : i64  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %16, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %16, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %14, %clock reset %reset, %c0_i64 : i64  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i64
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i64
    %14 = comb.mux %9, %c0_i64, %13 : i64
    %valid1_reg = seq.compreg sym @valid1_reg %17, %clock reset %reset, %false : i1  
    %15 = comb.xor %valid1_reg, %true : i1
    %16 = comb.or %15, %20 : i1
    %17 = comb.mux %16, %4, %valid1_reg : i1
    %18 = comb.mux %16, %12, %data1_reg : i64
    %data1_reg = seq.compreg sym @data1_reg %18, %clock reset %reset, %c0_i64 : i64  
    %ready1_reg = seq.compreg sym @ready1_reg %26, %clock reset %reset, %false : i1  
    %19 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
    %20 = comb.xor %ready1_reg, %true : i1
    %21 = comb.xor %ready_1, %true : i1
    %22 = comb.and %21, %20 : i1
    %23 = comb.mux %22, %valid1_reg, %ready1_reg : i1
    %24 = comb.and %ready_1, %ready1_reg : i1
    %25 = comb.xor %24, %true : i1
    %26 = comb.and %25, %23 : i1
    %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %29, %clock reset %reset, %c0_i64 : i64  
    %27 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i64
    %28 = comb.mux %22, %data1_reg, %ctrl_data1_reg : i64
    %29 = comb.mux %24, %c0_i64, %28 : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput_0, %out0_ready : i64
    hw.output %ready, %rawOutput_2, %valid_3 : i1, i64, i1
  }
  hw.module @handshake_fork_1ins_2outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i0
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %12 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %3 : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %9 : i0
    %0 = comb.xor %12, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready_1, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %12, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_3, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.and %5, %11 {sv.namehint = "allDone"} : i1
    %rawOutput_4, %valid_5 = esi.unwrap.vr %chanOutput_0, %out0_ready : i0
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput_2, %out1_ready : i0
    hw.output %ready, %rawOutput_4, %valid_5, %rawOutput_6, %valid_7 : i1, i0, i1, i0, i1
  }
  hw.module @handshake_fork_1ins_3outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i0
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %18 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %3 : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %9 : i0
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %15 : i0
    %0 = comb.xor %18, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready_1, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %18, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_3, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %18, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_5, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.and %5, %11, %17 {sv.namehint = "allDone"} : i1
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput_0, %out0_ready : i0
    %rawOutput_8, %valid_9 = esi.unwrap.vr %chanOutput_2, %out1_ready : i0
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput_4, %out2_ready : i0
    hw.output %ready, %rawOutput_6, %valid_7, %rawOutput_8, %valid_9, %rawOutput_10, %valid_11 : i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id0(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %ldAddr0, %ldAddr0_valid : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %stAddr2, %stAddr2_valid : i64
    %chanOutput_2, %ready_3 = esi.wrap.vr %stData2, %stData2_valid : i64
    %chanOutput_4, %ready_5 = esi.wrap.vr %stAddr1, %stAddr1_valid : i64
    %chanOutput_6, %ready_7 = esi.wrap.vr %stData1, %stData1_valid : i64
    %chanOutput_8, %ready_9 = esi.wrap.vr %stAddr0, %stAddr0_valid : i64
    %chanOutput_10, %ready_11 = esi.wrap.vr %stData0, %stData0_valid : i64
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_10, %16 : i64
    %rawOutput_12, %valid_13 = esi.unwrap.vr %chanOutput_8, %16 : i64
    %rawOutput_14, %valid_15 = esi.unwrap.vr %chanOutput_6, %22 : i64
    %rawOutput_16, %valid_17 = esi.unwrap.vr %chanOutput_4, %22 : i64
    %rawOutput_18, %valid_19 = esi.unwrap.vr %chanOutput_2, %28 : i64
    %rawOutput_20, %valid_21 = esi.unwrap.vr %chanOutput_0, %28 : i64
    %rawOutput_22, %valid_23 = esi.unwrap.vr %chanOutput, %13 : i64
    %chanOutput_24, %ready_25 = esi.wrap.vr %_handshake_memory_0_rdata, %4 : i64
    %chanOutput_26, %ready_27 = esi.wrap.vr %c0_i0, %writeValidBuffer : i0
    %chanOutput_28, %ready_29 = esi.wrap.vr %c0_i0, %writeValidBuffer_34 : i0
    %chanOutput_30, %ready_31 = esi.wrap.vr %c0_i0, %writeValidBuffer_35 : i0
    %chanOutput_32, %ready_33 = esi.wrap.vr %c0_i0, %10 : i0
    %_handshake_memory_0 = seq.hlmem @_handshake_memory_0 %clock, %reset : <3xi64>
    %0 = comb.extract %rawOutput_22 from 0 : (i64) -> i2
    %_handshake_memory_0_rdata = seq.read %_handshake_memory_0[%0] rden %valid_23 {latency = 0 : i64} : !seq.hlmem<3xi64>
    %1 = comb.xor %13, %true : i1
    %2 = comb.and %6, %1 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %2, %clock reset %reset, %false : i1  
    %3 = comb.xor %emitted_0, %true : i1
    %4 = comb.and %3, %valid_23 : i1
    %5 = comb.and %ready_25, %4 : i1
    %6 = comb.or %5, %emitted_0 {sv.namehint = "done0"} : i1
    %7 = comb.xor %13, %true : i1
    %8 = comb.and %12, %7 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %8, %clock reset %reset, %false : i1  
    %9 = comb.xor %emitted_1, %true : i1
    %10 = comb.and %9, %valid_23 : i1
    %11 = comb.and %ready_33, %10 : i1
    %12 = comb.or %11, %emitted_1 {sv.namehint = "done1"} : i1
    %13 = comb.and %6, %12 {sv.namehint = "allDone"} : i1
    %writeValidBuffer = seq.compreg sym @writeValidBuffer %18, %clock reset %reset, %false : i1  
    %14 = comb.and %ready_27, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
    %15 = comb.xor %writeValidBuffer, %true : i1
    %16 = comb.or %15, %14 {sv.namehint = "emptyOrComplete"} : i1
    %17 = comb.and %valid_13, %valid {sv.namehint = "writeValid"} : i1
    %18 = comb.mux %16, %17, %writeValidBuffer : i1
    %19 = comb.extract %rawOutput_12 from 0 : (i64) -> i2
    seq.write %_handshake_memory_0[%19] %rawOutput wren %17 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_34 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %24, %clock reset %reset, %false : i1  
    %20 = comb.and %ready_29, %writeValidBuffer_34 {sv.namehint = "storeCompleted"} : i1
    %21 = comb.xor %writeValidBuffer_34, %true : i1
    %22 = comb.or %21, %20 {sv.namehint = "emptyOrComplete"} : i1
    %23 = comb.and %valid_17, %valid_15 {sv.namehint = "writeValid"} : i1
    %24 = comb.mux %22, %23, %writeValidBuffer_34 : i1
    %25 = comb.extract %rawOutput_16 from 0 : (i64) -> i2
    seq.write %_handshake_memory_0[%25] %rawOutput_14 wren %23 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_35 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %30, %clock reset %reset, %false : i1  
    %26 = comb.and %ready_31, %writeValidBuffer_35 {sv.namehint = "storeCompleted"} : i1
    %27 = comb.xor %writeValidBuffer_35, %true : i1
    %28 = comb.or %27, %26 {sv.namehint = "emptyOrComplete"} : i1
    %29 = comb.and %valid_21, %valid_19 {sv.namehint = "writeValid"} : i1
    %30 = comb.mux %28, %29, %writeValidBuffer_35 : i1
    %31 = comb.extract %rawOutput_20 from 0 : (i64) -> i2
    seq.write %_handshake_memory_0[%31] %rawOutput_18 wren %29 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %rawOutput_36, %valid_37 = esi.unwrap.vr %chanOutput_24, %ldData0_ready : i64
    %rawOutput_38, %valid_39 = esi.unwrap.vr %chanOutput_26, %stDone0_ready : i0
    %rawOutput_40, %valid_41 = esi.unwrap.vr %chanOutput_28, %stDone1_ready : i0
    %rawOutput_42, %valid_43 = esi.unwrap.vr %chanOutput_30, %stDone2_ready : i0
    %rawOutput_44, %valid_45 = esi.unwrap.vr %chanOutput_32, %ldDone0_ready : i0
    hw.output %ready_11, %ready_9, %ready_7, %ready_5, %ready_3, %ready_1, %ready, %rawOutput_36, %valid_37, %rawOutput_38, %valid_39, %rawOutput_40, %valid_41, %rawOutput_42, %valid_43, %rawOutput_44, %valid_45 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_join_7ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %in4 : i0, in %in4_valid : i1, in %in5 : i0, in %in5_valid : i1, in %in6 : i0, in %in6_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out in4_ready : i1, out in5_ready : i1, out in6_ready : i1, out out0 : i0, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in6, %in6_valid : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %in5, %in5_valid : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %in4, %in4_valid : i0
    %chanOutput_4, %ready_5 = esi.wrap.vr %in3, %in3_valid : i0
    %chanOutput_6, %ready_7 = esi.wrap.vr %in2, %in2_valid : i0
    %chanOutput_8, %ready_9 = esi.wrap.vr %in1, %in1_valid : i0
    %chanOutput_10, %ready_11 = esi.wrap.vr %in0, %in0_valid : i0
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_10, %1 : i0
    %rawOutput_12, %valid_13 = esi.unwrap.vr %chanOutput_8, %1 : i0
    %rawOutput_14, %valid_15 = esi.unwrap.vr %chanOutput_6, %1 : i0
    %rawOutput_16, %valid_17 = esi.unwrap.vr %chanOutput_4, %1 : i0
    %rawOutput_18, %valid_19 = esi.unwrap.vr %chanOutput_2, %1 : i0
    %rawOutput_20, %valid_21 = esi.unwrap.vr %chanOutput_0, %1 : i0
    %rawOutput_22, %valid_23 = esi.unwrap.vr %chanOutput, %1 : i0
    %chanOutput_24, %ready_25 = esi.wrap.vr %c0_i0, %0 : i0
    %0 = comb.and %valid, %valid_13, %valid_15, %valid_17, %valid_19, %valid_21, %valid_23 : i1
    %1 = comb.and %ready_25, %0 : i1
    %rawOutput_26, %valid_27 = esi.unwrap.vr %chanOutput_24, %out0_ready : i0
    hw.output %ready_11, %ready_9, %ready_7, %ready_5, %ready_3, %ready_1, %ready, %rawOutput_26, %valid_27 : i1, i1, i1, i1, i1, i1, i1, i0, i1
  }
  hw.module @handshake_constant_c3_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %ctrl, %ctrl_valid : i0
    %c3_i64 = hw.constant 3 : i64
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %ready_1 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %c3_i64, %valid : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput_0, %out0_ready : i64
    hw.output %ready, %rawOutput_2, %valid_3 : i1, i64, i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i64
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %12 : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %3 : i64
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %9 : i64
    %0 = comb.xor %12, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready_1, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %12, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_3, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.and %5, %11 {sv.namehint = "allDone"} : i1
    %rawOutput_4, %valid_5 = esi.unwrap.vr %chanOutput_0, %out0_ready : i64
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput_2, %out1_ready : i64
    hw.output %ready, %rawOutput_4, %valid_5, %rawOutput_6, %valid_7 : i1, i64, i1, i64, i1
  }
  hw.module @handshake_constant_c2_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %ctrl, %ctrl_valid : i0
    %c2_i64 = hw.constant 2 : i64
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %ready_1 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %c2_i64, %valid : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput_0, %out0_ready : i64
    hw.output %ready, %rawOutput_2, %valid_3 : i1, i64, i1
  }
  hw.module @handshake_constant_c1_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %ctrl, %ctrl_valid : i0
    %c1_i64 = hw.constant 1 : i64
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %ready_1 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %c1_i64, %valid : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput_0, %out0_ready : i64
    hw.output %ready, %rawOutput_2, %valid_3 : i1, i64, i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i64
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %18 : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %3 : i64
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %9 : i64
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %15 : i64
    %0 = comb.xor %18, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready_1, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %18, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_3, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %18, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_5, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.and %5, %11, %17 {sv.namehint = "allDone"} : i1
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput_0, %out0_ready : i64
    %rawOutput_8, %valid_9 = esi.unwrap.vr %chanOutput_2, %out1_ready : i64
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput_4, %out2_ready : i64
    hw.output %ready, %rawOutput_6, %valid_7, %rawOutput_8, %valid_9, %rawOutput_10, %valid_11 : i1, i64, i1, i64, i1, i64, i1
  }
  hw.module @handshake_constant_c0_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %ctrl, %ctrl_valid : i0
    %c0_i64 = hw.constant 0 : i64
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %ready_1 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %c0_i64, %valid : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput_0, %out0_ready : i64
    hw.output %ready, %rawOutput_2, %valid_3 : i1, i64, i1
  }
  hw.module @handshake_store_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataIn : i64, in %dataIn_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataToMem_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataIn_ready : i1, out ctrl_ready : i1, out dataToMem : i64, out dataToMem_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %ctrl, %ctrl_valid : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %dataIn, %dataIn_valid : i64
    %chanOutput_2, %ready_3 = esi.wrap.vr %addrIn0, %addrIn0_valid : i64
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_2, %1 : i64
    %rawOutput_4, %valid_5 = esi.unwrap.vr %chanOutput_0, %1 : i64
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput, %1 : i0
    %chanOutput_8, %ready_9 = esi.wrap.vr %rawOutput_4, %0 : i64
    %chanOutput_10, %ready_11 = esi.wrap.vr %rawOutput, %0 : i64
    %0 = comb.and %valid_5, %valid, %valid_7 : i1
    %1 = comb.and %ready_9, %ready_11, %0 : i1
    %rawOutput_12, %valid_13 = esi.unwrap.vr %chanOutput_8, %dataToMem_ready : i64
    %rawOutput_14, %valid_15 = esi.unwrap.vr %chanOutput_10, %addrOut0_ready : i64
    hw.output %ready_3, %ready_1, %ready, %rawOutput_12, %valid_13, %rawOutput_14, %valid_15 : i1, i1, i1, i64, i1, i64, i1
  }
  hw.module @handshake_join_2ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in1, %in1_valid : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %in0, %in0_valid : i0
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_0, %1 : i0
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput, %1 : i0
    %chanOutput_4, %ready_5 = esi.wrap.vr %c0_i0, %0 : i0
    %0 = comb.and %valid, %valid_3 : i1
    %1 = comb.and %ready_5, %0 : i1
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput_4, %out0_ready : i0
    hw.output %ready_1, %ready, %rawOutput_6, %valid_7 : i1, i1, i0, i1
  }
  hw.module @handshake_join_3ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out out0 : i0, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in2, %in2_valid : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %in1, %in1_valid : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %in0, %in0_valid : i0
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_2, %1 : i0
    %rawOutput_4, %valid_5 = esi.unwrap.vr %chanOutput_0, %1 : i0
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput, %1 : i0
    %chanOutput_8, %ready_9 = esi.wrap.vr %c0_i0, %0 : i0
    %0 = comb.and %valid, %valid_5, %valid_7 : i1
    %1 = comb.and %ready_9, %0 : i1
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput_8, %out0_ready : i0
    hw.output %ready_3, %ready_1, %ready, %rawOutput_10, %valid_11 : i1, i1, i1, i0, i1
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i1
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %1 : i1
    %chanOutput_0, %ready_1 = esi.wrap.vr %12, %4 : i1
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %true : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %valid, %valid0_reg : i1
    %3 = comb.mux %1, %rawOutput, %data0_reg : i1
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %false : i1  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %ready_1, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %ready_1, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %15, %clock reset %reset, %false : i1  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i1
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i1
    %14 = comb.xor %9, %true : i1
    %15 = comb.and %14, %13 : i1
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput_0, %out0_ready : i1
    hw.output %ready, %rawOutput_2, %valid_3 : i1, i1, i1
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i1
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %24 : i1
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %3 : i1
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %9 : i1
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %15 : i1
    %chanOutput_6, %ready_7 = esi.wrap.vr %rawOutput, %21 : i1
    %0 = comb.xor %24, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready_1, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %24, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_3, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %24, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_5, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %24, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %valid : i1
    %22 = comb.and %ready_7, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
    %rawOutput_8, %valid_9 = esi.unwrap.vr %chanOutput_0, %out0_ready : i1
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput_2, %out1_ready : i1
    %rawOutput_12, %valid_13 = esi.unwrap.vr %chanOutput_4, %out2_ready : i1
    %rawOutput_14, %valid_15 = esi.unwrap.vr %chanOutput_6, %out3_ready : i1
    hw.output %ready, %rawOutput_8, %valid_9, %rawOutput_10, %valid_11, %rawOutput_12, %valid_13, %rawOutput_14, %valid_15 : i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_2slots_seq(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i1
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %1 : i1
    %chanOutput_0, %ready_1 = esi.wrap.vr %28, %20 : i1
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %valid, %valid0_reg : i1
    %3 = comb.mux %1, %rawOutput, %data0_reg : i1
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %false : i1  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %17, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %17, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %15, %clock reset %reset, %false : i1  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i1
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i1
    %14 = comb.xor %9, %true : i1
    %15 = comb.and %14, %13 : i1
    %valid1_reg = seq.compreg sym @valid1_reg %18, %clock reset %reset, %false : i1  
    %16 = comb.xor %valid1_reg, %true : i1
    %17 = comb.or %16, %21 : i1
    %18 = comb.mux %17, %4, %valid1_reg : i1
    %19 = comb.mux %17, %12, %data1_reg : i1
    %data1_reg = seq.compreg sym @data1_reg %19, %clock reset %reset, %false : i1  
    %ready1_reg = seq.compreg sym @ready1_reg %27, %clock reset %reset, %false : i1  
    %20 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
    %21 = comb.xor %ready1_reg, %true : i1
    %22 = comb.xor %ready_1, %true : i1
    %23 = comb.and %22, %21 : i1
    %24 = comb.mux %23, %valid1_reg, %ready1_reg : i1
    %25 = comb.and %ready_1, %ready1_reg : i1
    %26 = comb.xor %25, %true : i1
    %27 = comb.and %26, %24 : i1
    %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %31, %clock reset %reset, %false : i1  
    %28 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i1
    %29 = comb.mux %23, %data1_reg, %ctrl_data1_reg : i1
    %30 = comb.xor %25, %true : i1
    %31 = comb.and %30, %29 : i1
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput_0, %out0_ready : i1
    hw.output %ready, %rawOutput_2, %valid_3 : i1, i1, i1
  }
  hw.module @handshake_mux_in_ui1_3ins_1outs_ctrl(in %select : i1, in %select_valid : i1, in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in1, %in1_valid : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %in0, %in0_valid : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %select, %select_valid : i1
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_2, %4 : i1
    %rawOutput_4, %valid_5 = esi.unwrap.vr %chanOutput_0, %6 : i0
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput, %8 : i0
    %chanOutput_8, %ready_9 = esi.wrap.vr %9, %3 : i0
    %0 = comb.concat %false, %rawOutput : i1, i1
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = comb.mux %rawOutput, %valid_7, %valid_5 : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %3, %ready_9 : i1
    %5 = comb.extract %1 from 0 : (i2) -> i1
    %6 = comb.and %5, %4 : i1
    %7 = comb.extract %1 from 1 : (i2) -> i1
    %8 = comb.and %7, %4 : i1
    %9 = comb.mux %rawOutput, %rawOutput_6, %rawOutput_4 : i0
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput_8, %out0_ready : i0
    hw.output %ready_3, %ready_1, %ready, %rawOutput_10, %valid_11 : i1, i1, i1, i0, i1
  }
  hw.module @handshake_mux_in_ui1_ui64_ui64_out_ui64(in %select : i1, in %select_valid : i1, in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in1, %in1_valid : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %in0, %in0_valid : i64
    %chanOutput_2, %ready_3 = esi.wrap.vr %select, %select_valid : i1
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_2, %4 : i1
    %rawOutput_4, %valid_5 = esi.unwrap.vr %chanOutput_0, %6 : i64
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput, %8 : i64
    %chanOutput_8, %ready_9 = esi.wrap.vr %9, %3 : i64
    %0 = comb.concat %false, %rawOutput : i1, i1
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = comb.mux %rawOutput, %valid_7, %valid_5 : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %3, %ready_9 : i1
    %5 = comb.extract %1 from 0 : (i2) -> i1
    %6 = comb.and %5, %4 : i1
    %7 = comb.extract %1 from 1 : (i2) -> i1
    %8 = comb.and %7, %4 : i1
    %9 = comb.mux %rawOutput, %rawOutput_6, %rawOutput_4 : i64
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput_8, %out0_ready : i64
    hw.output %ready_3, %ready_1, %ready, %rawOutput_10, %valid_11 : i1, i1, i1, i64, i1
  }
  hw.module @arith_cmpi_in_ui64_ui64_out_ui1_slt(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i1, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in1, %in1_valid : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %in0, %in0_valid : i64
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_0, %1 : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput, %1 : i64
    %chanOutput_4, %ready_5 = esi.wrap.vr %2, %0 : i1
    %0 = comb.and %valid, %valid_3 : i1
    %1 = comb.and %ready_5, %0 : i1
    %2 = comb.icmp slt %rawOutput, %rawOutput_2 : i64
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput_4, %out0_ready : i1
    hw.output %ready_1, %ready, %rawOutput_6, %valid_7 : i1, i1, i1, i1
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1, out out4 : i1, out out4_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i1
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %30 : i1
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %3 : i1
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %9 : i1
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %15 : i1
    %chanOutput_6, %ready_7 = esi.wrap.vr %rawOutput, %21 : i1
    %chanOutput_8, %ready_9 = esi.wrap.vr %rawOutput, %27 : i1
    %0 = comb.xor %30, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready_1, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %30, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_3, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %30, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_5, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %30, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %valid : i1
    %22 = comb.and %ready_7, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.xor %30, %true : i1
    %25 = comb.and %29, %24 : i1
    %emitted_4 = seq.compreg sym @emitted_4 %25, %clock reset %reset, %false : i1  
    %26 = comb.xor %emitted_4, %true : i1
    %27 = comb.and %26, %valid : i1
    %28 = comb.and %ready_9, %27 : i1
    %29 = comb.or %28, %emitted_4 {sv.namehint = "done4"} : i1
    %30 = comb.and %5, %11, %17, %23, %29 {sv.namehint = "allDone"} : i1
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput_0, %out0_ready : i1
    %rawOutput_12, %valid_13 = esi.unwrap.vr %chanOutput_2, %out1_ready : i1
    %rawOutput_14, %valid_15 = esi.unwrap.vr %chanOutput_4, %out2_ready : i1
    %rawOutput_16, %valid_17 = esi.unwrap.vr %chanOutput_6, %out3_ready : i1
    %rawOutput_18, %valid_19 = esi.unwrap.vr %chanOutput_8, %out4_ready : i1
    hw.output %ready, %rawOutput_10, %valid_11, %rawOutput_12, %valid_13, %rawOutput_14, %valid_15, %rawOutput_16, %valid_17, %rawOutput_18, %valid_19 : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(in %cond : i1, in %cond_valid : i1, in %data : i64, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i64, out outTrue_valid : i1, out outFalse : i64, out outFalse_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %data, %data_valid : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %cond, %cond_valid : i1
    %true = hw.constant true
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_0, %5 : i1
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput, %5 : i64
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput_2, %1 : i64
    %chanOutput_6, %ready_7 = esi.wrap.vr %rawOutput_2, %3 : i64
    %0 = comb.and %valid, %valid_3 : i1
    %1 = comb.and %rawOutput, %0 : i1
    %2 = comb.xor %rawOutput, %true : i1
    %3 = comb.and %2, %0 : i1
    %4 = comb.mux %rawOutput, %ready_5, %ready_7 : i1
    %5 = comb.and %4, %0 : i1
    %rawOutput_8, %valid_9 = esi.unwrap.vr %chanOutput_4, %outTrue_ready : i64
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput_6, %outFalse_ready : i64
    hw.output %ready_1, %ready, %rawOutput_8, %valid_9, %rawOutput_10, %valid_11 : i1, i1, i64, i1, i64, i1
  }
  hw.module @handshake_sink_in_ui64(in %in0 : i64, in %in0_valid : i1, out in0_ready : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i64
    %true = hw.constant true
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %true : i64
    hw.output %ready : i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1, out out3 : i64, out out3_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i64
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %24 : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %3 : i64
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %9 : i64
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %15 : i64
    %chanOutput_6, %ready_7 = esi.wrap.vr %rawOutput, %21 : i64
    %0 = comb.xor %24, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready_1, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %24, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_3, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %24, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_5, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %24, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %valid : i1
    %22 = comb.and %ready_7, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
    %rawOutput_8, %valid_9 = esi.unwrap.vr %chanOutput_0, %out0_ready : i64
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput_2, %out1_ready : i64
    %rawOutput_12, %valid_13 = esi.unwrap.vr %chanOutput_4, %out2_ready : i64
    %rawOutput_14, %valid_15 = esi.unwrap.vr %chanOutput_6, %out3_ready : i64
    hw.output %ready, %rawOutput_8, %valid_9, %rawOutput_10, %valid_11, %rawOutput_12, %valid_13, %rawOutput_14, %valid_15 : i1, i64, i1, i64, i1, i64, i1, i64, i1
  }
  hw.module @handshake_cond_br_in_ui1_2ins_2outs_ctrl(in %cond : i1, in %cond_valid : i1, in %data : i0, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i0, out outTrue_valid : i1, out outFalse : i0, out outFalse_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %data, %data_valid : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %cond, %cond_valid : i1
    %true = hw.constant true
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_0, %5 : i1
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput, %5 : i0
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput_2, %1 : i0
    %chanOutput_6, %ready_7 = esi.wrap.vr %rawOutput_2, %3 : i0
    %0 = comb.and %valid, %valid_3 : i1
    %1 = comb.and %rawOutput, %0 : i1
    %2 = comb.xor %rawOutput, %true : i1
    %3 = comb.and %2, %0 : i1
    %4 = comb.mux %rawOutput, %ready_5, %ready_7 : i1
    %5 = comb.and %4, %0 : i1
    %rawOutput_8, %valid_9 = esi.unwrap.vr %chanOutput_4, %outTrue_ready : i0
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput_6, %outFalse_ready : i0
    hw.output %ready_1, %ready, %rawOutput_8, %valid_9, %rawOutput_10, %valid_11 : i1, i1, i0, i1, i0, i1
  }
  hw.module @handshake_fork_1ins_4outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i0
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %24 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %3 : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %9 : i0
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %15 : i0
    %chanOutput_6, %ready_7 = esi.wrap.vr %rawOutput, %21 : i0
    %0 = comb.xor %24, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready_1, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %24, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_3, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %24, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_5, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %24, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %valid : i1
    %22 = comb.and %ready_7, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
    %rawOutput_8, %valid_9 = esi.unwrap.vr %chanOutput_0, %out0_ready : i0
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput_2, %out1_ready : i0
    %rawOutput_12, %valid_13 = esi.unwrap.vr %chanOutput_4, %out2_ready : i0
    %rawOutput_14, %valid_15 = esi.unwrap.vr %chanOutput_6, %out3_ready : i0
    hw.output %ready, %rawOutput_8, %valid_9, %rawOutput_10, %valid_11, %rawOutput_12, %valid_13, %rawOutput_14, %valid_15 : i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_join_4ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out out0 : i0, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in3, %in3_valid : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %in2, %in2_valid : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %in1, %in1_valid : i0
    %chanOutput_4, %ready_5 = esi.wrap.vr %in0, %in0_valid : i0
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_4, %1 : i0
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput_2, %1 : i0
    %rawOutput_8, %valid_9 = esi.unwrap.vr %chanOutput_0, %1 : i0
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput, %1 : i0
    %chanOutput_12, %ready_13 = esi.wrap.vr %c0_i0, %0 : i0
    %0 = comb.and %valid, %valid_7, %valid_9, %valid_11 : i1
    %1 = comb.and %ready_13, %0 : i1
    %rawOutput_14, %valid_15 = esi.unwrap.vr %chanOutput_12, %out0_ready : i0
    hw.output %ready_5, %ready_3, %ready_1, %ready, %rawOutput_14, %valid_15 : i1, i1, i1, i1, i0, i1
  }
  hw.module @handshake_load_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataFromMem : i64, in %dataFromMem_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataOut_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataFromMem_ready : i1, out ctrl_ready : i1, out dataOut : i64, out dataOut_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %ctrl, %ctrl_valid : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %dataFromMem, %dataFromMem_valid : i64
    %chanOutput_2, %ready_3 = esi.wrap.vr %addrIn0, %addrIn0_valid : i64
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_2, %1 : i64
    %rawOutput_4, %valid_5 = esi.unwrap.vr %chanOutput_0, %ready_9 : i64
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput, %1 : i0
    %chanOutput_8, %ready_9 = esi.wrap.vr %rawOutput_4, %valid_5 : i64
    %chanOutput_10, %ready_11 = esi.wrap.vr %rawOutput, %0 : i64
    %0 = comb.and %valid, %valid_7 : i1
    %1 = comb.and %ready_11, %0 : i1
    %rawOutput_12, %valid_13 = esi.unwrap.vr %chanOutput_8, %dataOut_ready : i64
    %rawOutput_14, %valid_15 = esi.unwrap.vr %chanOutput_10, %addrOut0_ready : i64
    hw.output %ready_3, %ready_1, %ready, %rawOutput_12, %valid_13, %rawOutput_14, %valid_15 : i1, i1, i1, i64, i1, i64, i1
  }
  hw.module @arith_addi_in_ui64_ui64_out_ui64(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in1, %in1_valid : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %in0, %in0_valid : i64
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_0, %1 : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput, %1 : i64
    %chanOutput_4, %ready_5 = esi.wrap.vr %2, %0 : i64
    %0 = comb.and %valid, %valid_3 : i1
    %1 = comb.and %ready_5, %0 : i1
    %2 = comb.add %rawOutput, %rawOutput_2 : i64
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput_4, %out0_ready : i64
    hw.output %ready_1, %ready, %rawOutput_6, %valid_7 : i1, i1, i64, i1
  }
  hw.module @main(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i0
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %handshake_buffer0.in0_ready : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %handshake_buffer0.out0, %handshake_buffer0.out0_valid : i0
    %handshake_buffer0.in0_ready, %handshake_buffer0.out0, %handshake_buffer0.out0_valid = hw.instance "handshake_buffer0" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput: i0, in0_valid: %valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_1: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput_0, %handshake_fork0.in0_ready : i0
    %chanOutput_4, %ready_5 = esi.wrap.vr %handshake_fork0.out0, %handshake_fork0.out0_valid : i0
    %chanOutput_6, %ready_7 = esi.wrap.vr %handshake_fork0.out1, %handshake_fork0.out1_valid : i0
    %chanOutput_8, %ready_9 = esi.wrap.vr %handshake_fork0.out2, %handshake_fork0.out2_valid : i0
    %chanOutput_10, %ready_11 = esi.wrap.vr %handshake_fork0.out3, %handshake_fork0.out3_valid : i0
    %chanOutput_12, %ready_13 = esi.wrap.vr %handshake_fork0.out4, %handshake_fork0.out4_valid : i0
    %chanOutput_14, %ready_15 = esi.wrap.vr %handshake_fork0.out5, %handshake_fork0.out5_valid : i0
    %chanOutput_16, %ready_17 = esi.wrap.vr %handshake_fork0.out6, %handshake_fork0.out6_valid : i0
    %chanOutput_18, %ready_19 = esi.wrap.vr %handshake_fork0.out7, %handshake_fork0.out7_valid : i0
    %chanOutput_20, %ready_21 = esi.wrap.vr %handshake_fork0.out8, %handshake_fork0.out8_valid : i0
    %chanOutput_22, %ready_23 = esi.wrap.vr %handshake_fork0.out9, %handshake_fork0.out9_valid : i0
    %chanOutput_24, %ready_25 = esi.wrap.vr %handshake_fork0.out10, %handshake_fork0.out10_valid : i0
    %chanOutput_26, %ready_27 = esi.wrap.vr %handshake_fork0.out11, %handshake_fork0.out11_valid : i0
    %chanOutput_28, %ready_29 = esi.wrap.vr %handshake_fork0.out12, %handshake_fork0.out12_valid : i0
    %chanOutput_30, %ready_31 = esi.wrap.vr %handshake_fork0.out13, %handshake_fork0.out13_valid : i0
    %handshake_fork0.in0_ready, %handshake_fork0.out0, %handshake_fork0.out0_valid, %handshake_fork0.out1, %handshake_fork0.out1_valid, %handshake_fork0.out2, %handshake_fork0.out2_valid, %handshake_fork0.out3, %handshake_fork0.out3_valid, %handshake_fork0.out4, %handshake_fork0.out4_valid, %handshake_fork0.out5, %handshake_fork0.out5_valid, %handshake_fork0.out6, %handshake_fork0.out6_valid, %handshake_fork0.out7, %handshake_fork0.out7_valid, %handshake_fork0.out8, %handshake_fork0.out8_valid, %handshake_fork0.out9, %handshake_fork0.out9_valid, %handshake_fork0.out10, %handshake_fork0.out10_valid, %handshake_fork0.out11, %handshake_fork0.out11_valid, %handshake_fork0.out12, %handshake_fork0.out12_valid, %handshake_fork0.out13, %handshake_fork0.out13_valid = hw.instance "handshake_fork0" @handshake_fork_1ins_14outs_ctrl(in0: %rawOutput_2: i0, in0_valid: %valid_3: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_5: i1, out1_ready: %ready_7: i1, out2_ready: %ready_9: i1, out3_ready: %ready_11: i1, out4_ready: %ready_13: i1, out5_ready: %ready_15: i1, out6_ready: %ready_17: i1, out7_ready: %ready_19: i1, out8_ready: %ready_21: i1, out9_ready: %ready_23: i1, out10_ready: %ready_25: i1, out11_ready: %ready_27: i1, out12_ready: %ready_29: i1, out13_ready: %ready_31: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1, out4: i0, out4_valid: i1, out5: i0, out5_valid: i1, out6: i0, out6_valid: i1, out7: i0, out7_valid: i1, out8: i0, out8_valid: i1, out9: i0, out9_valid: i1, out10: i0, out10_valid: i1, out11: i0, out11_valid: i1, out12: i0, out12_valid: i1, out13: i0, out13_valid: i1)
    %rawOutput_32, %valid_33 = esi.unwrap.vr %chanOutput_30, %handshake_buffer1.in0_ready : i0
    %chanOutput_34, %ready_35 = esi.wrap.vr %handshake_buffer1.out0, %handshake_buffer1.out0_valid : i0
    %handshake_buffer1.in0_ready, %handshake_buffer1.out0, %handshake_buffer1.out0_valid = hw.instance "handshake_buffer1" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_32: i0, in0_valid: %valid_33: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_35: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_36, %valid_37 = esi.unwrap.vr %chanOutput_28, %handshake_buffer2.in0_ready : i0
    %chanOutput_38, %ready_39 = esi.wrap.vr %handshake_buffer2.out0, %handshake_buffer2.out0_valid : i0
    %handshake_buffer2.in0_ready, %handshake_buffer2.out0, %handshake_buffer2.out0_valid = hw.instance "handshake_buffer2" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_36: i0, in0_valid: %valid_37: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_39: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_40, %valid_41 = esi.unwrap.vr %chanOutput_26, %handshake_buffer3.in0_ready : i0
    %chanOutput_42, %ready_43 = esi.wrap.vr %handshake_buffer3.out0, %handshake_buffer3.out0_valid : i0
    %handshake_buffer3.in0_ready, %handshake_buffer3.out0, %handshake_buffer3.out0_valid = hw.instance "handshake_buffer3" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_40: i0, in0_valid: %valid_41: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_43: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_44, %valid_45 = esi.unwrap.vr %chanOutput_24, %handshake_buffer4.in0_ready : i0
    %chanOutput_46, %ready_47 = esi.wrap.vr %handshake_buffer4.out0, %handshake_buffer4.out0_valid : i0
    %handshake_buffer4.in0_ready, %handshake_buffer4.out0, %handshake_buffer4.out0_valid = hw.instance "handshake_buffer4" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_44: i0, in0_valid: %valid_45: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_47: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_48, %valid_49 = esi.unwrap.vr %chanOutput_22, %handshake_buffer5.in0_ready : i0
    %chanOutput_50, %ready_51 = esi.wrap.vr %handshake_buffer5.out0, %handshake_buffer5.out0_valid : i0
    %handshake_buffer5.in0_ready, %handshake_buffer5.out0, %handshake_buffer5.out0_valid = hw.instance "handshake_buffer5" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_48: i0, in0_valid: %valid_49: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_51: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_52, %valid_53 = esi.unwrap.vr %chanOutput_20, %handshake_buffer6.in0_ready : i0
    %chanOutput_54, %ready_55 = esi.wrap.vr %handshake_buffer6.out0, %handshake_buffer6.out0_valid : i0
    %handshake_buffer6.in0_ready, %handshake_buffer6.out0, %handshake_buffer6.out0_valid = hw.instance "handshake_buffer6" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_52: i0, in0_valid: %valid_53: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_55: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_56, %valid_57 = esi.unwrap.vr %chanOutput_18, %handshake_buffer7.in0_ready : i0
    %chanOutput_58, %ready_59 = esi.wrap.vr %handshake_buffer7.out0, %handshake_buffer7.out0_valid : i0
    %handshake_buffer7.in0_ready, %handshake_buffer7.out0, %handshake_buffer7.out0_valid = hw.instance "handshake_buffer7" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_56: i0, in0_valid: %valid_57: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_59: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_60, %valid_61 = esi.unwrap.vr %chanOutput_16, %handshake_buffer8.in0_ready : i0
    %chanOutput_62, %ready_63 = esi.wrap.vr %handshake_buffer8.out0, %handshake_buffer8.out0_valid : i0
    %handshake_buffer8.in0_ready, %handshake_buffer8.out0, %handshake_buffer8.out0_valid = hw.instance "handshake_buffer8" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_60: i0, in0_valid: %valid_61: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_63: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_64, %valid_65 = esi.unwrap.vr %chanOutput_14, %handshake_buffer9.in0_ready : i0
    %chanOutput_66, %ready_67 = esi.wrap.vr %handshake_buffer9.out0, %handshake_buffer9.out0_valid : i0
    %handshake_buffer9.in0_ready, %handshake_buffer9.out0, %handshake_buffer9.out0_valid = hw.instance "handshake_buffer9" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_64: i0, in0_valid: %valid_65: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_67: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_68, %valid_69 = esi.unwrap.vr %chanOutput_12, %handshake_buffer10.in0_ready : i0
    %chanOutput_70, %ready_71 = esi.wrap.vr %handshake_buffer10.out0, %handshake_buffer10.out0_valid : i0
    %handshake_buffer10.in0_ready, %handshake_buffer10.out0, %handshake_buffer10.out0_valid = hw.instance "handshake_buffer10" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_68: i0, in0_valid: %valid_69: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_71: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_72, %valid_73 = esi.unwrap.vr %chanOutput_10, %handshake_buffer11.in0_ready : i0
    %chanOutput_74, %ready_75 = esi.wrap.vr %handshake_buffer11.out0, %handshake_buffer11.out0_valid : i0
    %handshake_buffer11.in0_ready, %handshake_buffer11.out0, %handshake_buffer11.out0_valid = hw.instance "handshake_buffer11" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_72: i0, in0_valid: %valid_73: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_75: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_76, %valid_77 = esi.unwrap.vr %chanOutput_8, %handshake_buffer12.in0_ready : i0
    %chanOutput_78, %ready_79 = esi.wrap.vr %handshake_buffer12.out0, %handshake_buffer12.out0_valid : i0
    %handshake_buffer12.in0_ready, %handshake_buffer12.out0, %handshake_buffer12.out0_valid = hw.instance "handshake_buffer12" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_76: i0, in0_valid: %valid_77: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_79: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_80, %valid_81 = esi.unwrap.vr %chanOutput_6, %handshake_buffer13.in0_ready : i0
    %chanOutput_82, %ready_83 = esi.wrap.vr %handshake_buffer13.out0, %handshake_buffer13.out0_valid : i0
    %handshake_buffer13.in0_ready, %handshake_buffer13.out0, %handshake_buffer13.out0_valid = hw.instance "handshake_buffer13" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_80: i0, in0_valid: %valid_81: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_83: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_84, %valid_85 = esi.unwrap.vr %chanOutput_4, %handshake_buffer14.in0_ready : i0
    %chanOutput_86, %ready_87 = esi.wrap.vr %handshake_buffer14.out0, %handshake_buffer14.out0_valid : i0
    %handshake_buffer14.in0_ready, %handshake_buffer14.out0, %handshake_buffer14.out0_valid = hw.instance "handshake_buffer14" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_84: i0, in0_valid: %valid_85: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_87: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_88, %valid_89 = esi.unwrap.vr %chanOutput_922, %handshake_memory0.stData0_ready : i64
    %rawOutput_90, %valid_91 = esi.unwrap.vr %chanOutput_918, %handshake_memory0.stAddr0_ready : i64
    %chanOutput_92, %ready_93 = esi.wrap.vr %handshake_memory0.stDone0, %handshake_memory0.stDone0_valid : i0
    %handshake_memory0.stData0_ready, %handshake_memory0.stAddr0_ready, %handshake_memory0.stDone0, %handshake_memory0.stDone0_valid = hw.instance "handshake_memory0" @handshake_memory_out_ui64_id2(stData0: %rawOutput_88: i64, stData0_valid: %valid_89: i1, stAddr0: %rawOutput_90: i64, stAddr0_valid: %valid_91: i1, clock: %clock: !seq.clock, reset: %reset: i1, stDone0_ready: %ready_93: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stDone0: i0, stDone0_valid: i1)
    %rawOutput_94, %valid_95 = esi.unwrap.vr %chanOutput_92, %handshake_buffer15.in0_ready : i0
    %chanOutput_96, %ready_97 = esi.wrap.vr %handshake_buffer15.out0, %handshake_buffer15.out0_valid : i0
    %handshake_buffer15.in0_ready, %handshake_buffer15.out0, %handshake_buffer15.out0_valid = hw.instance "handshake_buffer15" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_94: i0, in0_valid: %valid_95: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_97: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_98, %valid_99 = esi.unwrap.vr %chanOutput_518, %handshake_memory1.stData0_ready : i64
    %rawOutput_100, %valid_101 = esi.unwrap.vr %chanOutput_514, %handshake_memory1.stAddr0_ready : i64
    %rawOutput_102, %valid_103 = esi.unwrap.vr %chanOutput_546, %handshake_memory1.stData1_ready : i64
    %rawOutput_104, %valid_105 = esi.unwrap.vr %chanOutput_542, %handshake_memory1.stAddr1_ready : i64
    %rawOutput_106, %valid_107 = esi.unwrap.vr %chanOutput_576, %handshake_memory1.stData2_ready : i64
    %rawOutput_108, %valid_109 = esi.unwrap.vr %chanOutput_572, %handshake_memory1.stAddr2_ready : i64
    %rawOutput_110, %valid_111 = esi.unwrap.vr %chanOutput_890, %handshake_memory1.ldAddr0_ready : i64
    %chanOutput_112, %ready_113 = esi.wrap.vr %handshake_memory1.ldData0, %handshake_memory1.ldData0_valid : i64
    %chanOutput_114, %ready_115 = esi.wrap.vr %handshake_memory1.stDone0, %handshake_memory1.stDone0_valid : i0
    %chanOutput_116, %ready_117 = esi.wrap.vr %handshake_memory1.stDone1, %handshake_memory1.stDone1_valid : i0
    %chanOutput_118, %ready_119 = esi.wrap.vr %handshake_memory1.stDone2, %handshake_memory1.stDone2_valid : i0
    %chanOutput_120, %ready_121 = esi.wrap.vr %handshake_memory1.ldDone0, %handshake_memory1.ldDone0_valid : i0
    %handshake_memory1.stData0_ready, %handshake_memory1.stAddr0_ready, %handshake_memory1.stData1_ready, %handshake_memory1.stAddr1_ready, %handshake_memory1.stData2_ready, %handshake_memory1.stAddr2_ready, %handshake_memory1.ldAddr0_ready, %handshake_memory1.ldData0, %handshake_memory1.ldData0_valid, %handshake_memory1.stDone0, %handshake_memory1.stDone0_valid, %handshake_memory1.stDone1, %handshake_memory1.stDone1_valid, %handshake_memory1.stDone2, %handshake_memory1.stDone2_valid, %handshake_memory1.ldDone0, %handshake_memory1.ldDone0_valid = hw.instance "handshake_memory1" @handshake_memory_out_ui64_id1(stData0: %rawOutput_98: i64, stData0_valid: %valid_99: i1, stAddr0: %rawOutput_100: i64, stAddr0_valid: %valid_101: i1, stData1: %rawOutput_102: i64, stData1_valid: %valid_103: i1, stAddr1: %rawOutput_104: i64, stAddr1_valid: %valid_105: i1, stData2: %rawOutput_106: i64, stData2_valid: %valid_107: i1, stAddr2: %rawOutput_108: i64, stAddr2_valid: %valid_109: i1, ldAddr0: %rawOutput_110: i64, ldAddr0_valid: %valid_111: i1, clock: %clock: !seq.clock, reset: %reset: i1, ldData0_ready: %ready_113: i1, stDone0_ready: %ready_115: i1, stDone1_ready: %ready_117: i1, stDone2_ready: %ready_119: i1, ldDone0_ready: %ready_121: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
    %rawOutput_122, %valid_123 = esi.unwrap.vr %chanOutput_120, %handshake_buffer16.in0_ready : i0
    %chanOutput_124, %ready_125 = esi.wrap.vr %handshake_buffer16.out0, %handshake_buffer16.out0_valid : i0
    %handshake_buffer16.in0_ready, %handshake_buffer16.out0, %handshake_buffer16.out0_valid = hw.instance "handshake_buffer16" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_122: i0, in0_valid: %valid_123: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_125: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_126, %valid_127 = esi.unwrap.vr %chanOutput_118, %handshake_buffer17.in0_ready : i0
    %chanOutput_128, %ready_129 = esi.wrap.vr %handshake_buffer17.out0, %handshake_buffer17.out0_valid : i0
    %handshake_buffer17.in0_ready, %handshake_buffer17.out0, %handshake_buffer17.out0_valid = hw.instance "handshake_buffer17" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_126: i0, in0_valid: %valid_127: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_129: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_130, %valid_131 = esi.unwrap.vr %chanOutput_116, %handshake_buffer18.in0_ready : i0
    %chanOutput_132, %ready_133 = esi.wrap.vr %handshake_buffer18.out0, %handshake_buffer18.out0_valid : i0
    %handshake_buffer18.in0_ready, %handshake_buffer18.out0, %handshake_buffer18.out0_valid = hw.instance "handshake_buffer18" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_130: i0, in0_valid: %valid_131: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_133: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_134, %valid_135 = esi.unwrap.vr %chanOutput_114, %handshake_buffer19.in0_ready : i0
    %chanOutput_136, %ready_137 = esi.wrap.vr %handshake_buffer19.out0, %handshake_buffer19.out0_valid : i0
    %handshake_buffer19.in0_ready, %handshake_buffer19.out0, %handshake_buffer19.out0_valid = hw.instance "handshake_buffer19" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_134: i0, in0_valid: %valid_135: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_137: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_138, %valid_139 = esi.unwrap.vr %chanOutput_112, %handshake_buffer20.in0_ready : i64
    %chanOutput_140, %ready_141 = esi.wrap.vr %handshake_buffer20.out0, %handshake_buffer20.out0_valid : i64
    %handshake_buffer20.in0_ready, %handshake_buffer20.out0, %handshake_buffer20.out0_valid = hw.instance "handshake_buffer20" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_138: i64, in0_valid: %valid_139: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_141: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_142, %valid_143 = esi.unwrap.vr %chanOutput_132, %handshake_fork1.in0_ready : i0
    %chanOutput_144, %ready_145 = esi.wrap.vr %handshake_fork1.out0, %handshake_fork1.out0_valid : i0
    %chanOutput_146, %ready_147 = esi.wrap.vr %handshake_fork1.out1, %handshake_fork1.out1_valid : i0
    %handshake_fork1.in0_ready, %handshake_fork1.out0, %handshake_fork1.out0_valid, %handshake_fork1.out1, %handshake_fork1.out1_valid = hw.instance "handshake_fork1" @handshake_fork_1ins_2outs_ctrl(in0: %rawOutput_142: i0, in0_valid: %valid_143: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_145: i1, out1_ready: %ready_147: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
    %rawOutput_148, %valid_149 = esi.unwrap.vr %chanOutput_146, %handshake_buffer21.in0_ready : i0
    %chanOutput_150, %ready_151 = esi.wrap.vr %handshake_buffer21.out0, %handshake_buffer21.out0_valid : i0
    %handshake_buffer21.in0_ready, %handshake_buffer21.out0, %handshake_buffer21.out0_valid = hw.instance "handshake_buffer21" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_148: i0, in0_valid: %valid_149: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_151: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_152, %valid_153 = esi.unwrap.vr %chanOutput_144, %handshake_buffer22.in0_ready : i0
    %chanOutput_154, %ready_155 = esi.wrap.vr %handshake_buffer22.out0, %handshake_buffer22.out0_valid : i0
    %handshake_buffer22.in0_ready, %handshake_buffer22.out0, %handshake_buffer22.out0_valid = hw.instance "handshake_buffer22" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_152: i0, in0_valid: %valid_153: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_155: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_156, %valid_157 = esi.unwrap.vr %chanOutput_136, %handshake_fork2.in0_ready : i0
    %chanOutput_158, %ready_159 = esi.wrap.vr %handshake_fork2.out0, %handshake_fork2.out0_valid : i0
    %chanOutput_160, %ready_161 = esi.wrap.vr %handshake_fork2.out1, %handshake_fork2.out1_valid : i0
    %chanOutput_162, %ready_163 = esi.wrap.vr %handshake_fork2.out2, %handshake_fork2.out2_valid : i0
    %handshake_fork2.in0_ready, %handshake_fork2.out0, %handshake_fork2.out0_valid, %handshake_fork2.out1, %handshake_fork2.out1_valid, %handshake_fork2.out2, %handshake_fork2.out2_valid = hw.instance "handshake_fork2" @handshake_fork_1ins_3outs_ctrl(in0: %rawOutput_156: i0, in0_valid: %valid_157: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_159: i1, out1_ready: %ready_161: i1, out2_ready: %ready_163: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
    %rawOutput_164, %valid_165 = esi.unwrap.vr %chanOutput_162, %handshake_buffer23.in0_ready : i0
    %chanOutput_166, %ready_167 = esi.wrap.vr %handshake_buffer23.out0, %handshake_buffer23.out0_valid : i0
    %handshake_buffer23.in0_ready, %handshake_buffer23.out0, %handshake_buffer23.out0_valid = hw.instance "handshake_buffer23" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_164: i0, in0_valid: %valid_165: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_167: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_168, %valid_169 = esi.unwrap.vr %chanOutput_160, %handshake_buffer24.in0_ready : i0
    %chanOutput_170, %ready_171 = esi.wrap.vr %handshake_buffer24.out0, %handshake_buffer24.out0_valid : i0
    %handshake_buffer24.in0_ready, %handshake_buffer24.out0, %handshake_buffer24.out0_valid = hw.instance "handshake_buffer24" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_168: i0, in0_valid: %valid_169: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_171: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_172, %valid_173 = esi.unwrap.vr %chanOutput_158, %handshake_buffer25.in0_ready : i0
    %chanOutput_174, %ready_175 = esi.wrap.vr %handshake_buffer25.out0, %handshake_buffer25.out0_valid : i0
    %handshake_buffer25.in0_ready, %handshake_buffer25.out0, %handshake_buffer25.out0_valid = hw.instance "handshake_buffer25" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_172: i0, in0_valid: %valid_173: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_175: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_176, %valid_177 = esi.unwrap.vr %chanOutput_442, %handshake_memory2.stData0_ready : i64
    %rawOutput_178, %valid_179 = esi.unwrap.vr %chanOutput_438, %handshake_memory2.stAddr0_ready : i64
    %rawOutput_180, %valid_181 = esi.unwrap.vr %chanOutput_470, %handshake_memory2.stData1_ready : i64
    %rawOutput_182, %valid_183 = esi.unwrap.vr %chanOutput_466, %handshake_memory2.stAddr1_ready : i64
    %rawOutput_184, %valid_185 = esi.unwrap.vr %chanOutput_500, %handshake_memory2.stData2_ready : i64
    %rawOutput_186, %valid_187 = esi.unwrap.vr %chanOutput_496, %handshake_memory2.stAddr2_ready : i64
    %rawOutput_188, %valid_189 = esi.unwrap.vr %chanOutput_872, %handshake_memory2.ldAddr0_ready : i64
    %chanOutput_190, %ready_191 = esi.wrap.vr %handshake_memory2.ldData0, %handshake_memory2.ldData0_valid : i64
    %chanOutput_192, %ready_193 = esi.wrap.vr %handshake_memory2.stDone0, %handshake_memory2.stDone0_valid : i0
    %chanOutput_194, %ready_195 = esi.wrap.vr %handshake_memory2.stDone1, %handshake_memory2.stDone1_valid : i0
    %chanOutput_196, %ready_197 = esi.wrap.vr %handshake_memory2.stDone2, %handshake_memory2.stDone2_valid : i0
    %chanOutput_198, %ready_199 = esi.wrap.vr %handshake_memory2.ldDone0, %handshake_memory2.ldDone0_valid : i0
    %handshake_memory2.stData0_ready, %handshake_memory2.stAddr0_ready, %handshake_memory2.stData1_ready, %handshake_memory2.stAddr1_ready, %handshake_memory2.stData2_ready, %handshake_memory2.stAddr2_ready, %handshake_memory2.ldAddr0_ready, %handshake_memory2.ldData0, %handshake_memory2.ldData0_valid, %handshake_memory2.stDone0, %handshake_memory2.stDone0_valid, %handshake_memory2.stDone1, %handshake_memory2.stDone1_valid, %handshake_memory2.stDone2, %handshake_memory2.stDone2_valid, %handshake_memory2.ldDone0, %handshake_memory2.ldDone0_valid = hw.instance "handshake_memory2" @handshake_memory_out_ui64_id0(stData0: %rawOutput_176: i64, stData0_valid: %valid_177: i1, stAddr0: %rawOutput_178: i64, stAddr0_valid: %valid_179: i1, stData1: %rawOutput_180: i64, stData1_valid: %valid_181: i1, stAddr1: %rawOutput_182: i64, stAddr1_valid: %valid_183: i1, stData2: %rawOutput_184: i64, stData2_valid: %valid_185: i1, stAddr2: %rawOutput_186: i64, stAddr2_valid: %valid_187: i1, ldAddr0: %rawOutput_188: i64, ldAddr0_valid: %valid_189: i1, clock: %clock: !seq.clock, reset: %reset: i1, ldData0_ready: %ready_191: i1, stDone0_ready: %ready_193: i1, stDone1_ready: %ready_195: i1, stDone2_ready: %ready_197: i1, ldDone0_ready: %ready_199: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
    %rawOutput_200, %valid_201 = esi.unwrap.vr %chanOutput_198, %handshake_buffer26.in0_ready : i0
    %chanOutput_202, %ready_203 = esi.wrap.vr %handshake_buffer26.out0, %handshake_buffer26.out0_valid : i0
    %handshake_buffer26.in0_ready, %handshake_buffer26.out0, %handshake_buffer26.out0_valid = hw.instance "handshake_buffer26" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_200: i0, in0_valid: %valid_201: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_203: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_204, %valid_205 = esi.unwrap.vr %chanOutput_196, %handshake_buffer27.in0_ready : i0
    %chanOutput_206, %ready_207 = esi.wrap.vr %handshake_buffer27.out0, %handshake_buffer27.out0_valid : i0
    %handshake_buffer27.in0_ready, %handshake_buffer27.out0, %handshake_buffer27.out0_valid = hw.instance "handshake_buffer27" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_204: i0, in0_valid: %valid_205: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_207: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_208, %valid_209 = esi.unwrap.vr %chanOutput_194, %handshake_buffer28.in0_ready : i0
    %chanOutput_210, %ready_211 = esi.wrap.vr %handshake_buffer28.out0, %handshake_buffer28.out0_valid : i0
    %handshake_buffer28.in0_ready, %handshake_buffer28.out0, %handshake_buffer28.out0_valid = hw.instance "handshake_buffer28" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_208: i0, in0_valid: %valid_209: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_211: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_212, %valid_213 = esi.unwrap.vr %chanOutput_192, %handshake_buffer29.in0_ready : i0
    %chanOutput_214, %ready_215 = esi.wrap.vr %handshake_buffer29.out0, %handshake_buffer29.out0_valid : i0
    %handshake_buffer29.in0_ready, %handshake_buffer29.out0, %handshake_buffer29.out0_valid = hw.instance "handshake_buffer29" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_212: i0, in0_valid: %valid_213: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_215: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_216, %valid_217 = esi.unwrap.vr %chanOutput_190, %handshake_buffer30.in0_ready : i64
    %chanOutput_218, %ready_219 = esi.wrap.vr %handshake_buffer30.out0, %handshake_buffer30.out0_valid : i64
    %handshake_buffer30.in0_ready, %handshake_buffer30.out0, %handshake_buffer30.out0_valid = hw.instance "handshake_buffer30" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_216: i64, in0_valid: %valid_217: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_219: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_220, %valid_221 = esi.unwrap.vr %chanOutput_210, %handshake_fork3.in0_ready : i0
    %chanOutput_222, %ready_223 = esi.wrap.vr %handshake_fork3.out0, %handshake_fork3.out0_valid : i0
    %chanOutput_224, %ready_225 = esi.wrap.vr %handshake_fork3.out1, %handshake_fork3.out1_valid : i0
    %handshake_fork3.in0_ready, %handshake_fork3.out0, %handshake_fork3.out0_valid, %handshake_fork3.out1, %handshake_fork3.out1_valid = hw.instance "handshake_fork3" @handshake_fork_1ins_2outs_ctrl(in0: %rawOutput_220: i0, in0_valid: %valid_221: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_223: i1, out1_ready: %ready_225: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
    %rawOutput_226, %valid_227 = esi.unwrap.vr %chanOutput_224, %handshake_buffer31.in0_ready : i0
    %chanOutput_228, %ready_229 = esi.wrap.vr %handshake_buffer31.out0, %handshake_buffer31.out0_valid : i0
    %handshake_buffer31.in0_ready, %handshake_buffer31.out0, %handshake_buffer31.out0_valid = hw.instance "handshake_buffer31" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_226: i0, in0_valid: %valid_227: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_229: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_230, %valid_231 = esi.unwrap.vr %chanOutput_222, %handshake_buffer32.in0_ready : i0
    %chanOutput_232, %ready_233 = esi.wrap.vr %handshake_buffer32.out0, %handshake_buffer32.out0_valid : i0
    %handshake_buffer32.in0_ready, %handshake_buffer32.out0, %handshake_buffer32.out0_valid = hw.instance "handshake_buffer32" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_230: i0, in0_valid: %valid_231: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_233: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_234, %valid_235 = esi.unwrap.vr %chanOutput_214, %handshake_fork4.in0_ready : i0
    %chanOutput_236, %ready_237 = esi.wrap.vr %handshake_fork4.out0, %handshake_fork4.out0_valid : i0
    %chanOutput_238, %ready_239 = esi.wrap.vr %handshake_fork4.out1, %handshake_fork4.out1_valid : i0
    %chanOutput_240, %ready_241 = esi.wrap.vr %handshake_fork4.out2, %handshake_fork4.out2_valid : i0
    %handshake_fork4.in0_ready, %handshake_fork4.out0, %handshake_fork4.out0_valid, %handshake_fork4.out1, %handshake_fork4.out1_valid, %handshake_fork4.out2, %handshake_fork4.out2_valid = hw.instance "handshake_fork4" @handshake_fork_1ins_3outs_ctrl(in0: %rawOutput_234: i0, in0_valid: %valid_235: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_237: i1, out1_ready: %ready_239: i1, out2_ready: %ready_241: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
    %rawOutput_242, %valid_243 = esi.unwrap.vr %chanOutput_240, %handshake_buffer33.in0_ready : i0
    %chanOutput_244, %ready_245 = esi.wrap.vr %handshake_buffer33.out0, %handshake_buffer33.out0_valid : i0
    %handshake_buffer33.in0_ready, %handshake_buffer33.out0, %handshake_buffer33.out0_valid = hw.instance "handshake_buffer33" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_242: i0, in0_valid: %valid_243: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_245: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_246, %valid_247 = esi.unwrap.vr %chanOutput_238, %handshake_buffer34.in0_ready : i0
    %chanOutput_248, %ready_249 = esi.wrap.vr %handshake_buffer34.out0, %handshake_buffer34.out0_valid : i0
    %handshake_buffer34.in0_ready, %handshake_buffer34.out0, %handshake_buffer34.out0_valid = hw.instance "handshake_buffer34" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_246: i0, in0_valid: %valid_247: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_249: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_250, %valid_251 = esi.unwrap.vr %chanOutput_236, %handshake_buffer35.in0_ready : i0
    %chanOutput_252, %ready_253 = esi.wrap.vr %handshake_buffer35.out0, %handshake_buffer35.out0_valid : i0
    %handshake_buffer35.in0_ready, %handshake_buffer35.out0, %handshake_buffer35.out0_valid = hw.instance "handshake_buffer35" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_250: i0, in0_valid: %valid_251: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_253: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_254, %valid_255 = esi.unwrap.vr %chanOutput_46, %handshake_join0.in0_ready : i0
    %rawOutput_256, %valid_257 = esi.unwrap.vr %chanOutput_252, %handshake_join0.in1_ready : i0
    %rawOutput_258, %valid_259 = esi.unwrap.vr %chanOutput_232, %handshake_join0.in2_ready : i0
    %rawOutput_260, %valid_261 = esi.unwrap.vr %chanOutput_206, %handshake_join0.in3_ready : i0
    %rawOutput_262, %valid_263 = esi.unwrap.vr %chanOutput_166, %handshake_join0.in4_ready : i0
    %rawOutput_264, %valid_265 = esi.unwrap.vr %chanOutput_150, %handshake_join0.in5_ready : i0
    %rawOutput_266, %valid_267 = esi.unwrap.vr %chanOutput_128, %handshake_join0.in6_ready : i0
    %chanOutput_268, %ready_269 = esi.wrap.vr %handshake_join0.out0, %handshake_join0.out0_valid : i0
    %handshake_join0.in0_ready, %handshake_join0.in1_ready, %handshake_join0.in2_ready, %handshake_join0.in3_ready, %handshake_join0.in4_ready, %handshake_join0.in5_ready, %handshake_join0.in6_ready, %handshake_join0.out0, %handshake_join0.out0_valid = hw.instance "handshake_join0" @handshake_join_7ins_1outs_ctrl(in0: %rawOutput_254: i0, in0_valid: %valid_255: i1, in1: %rawOutput_256: i0, in1_valid: %valid_257: i1, in2: %rawOutput_258: i0, in2_valid: %valid_259: i1, in3: %rawOutput_260: i0, in3_valid: %valid_261: i1, in4: %rawOutput_262: i0, in4_valid: %valid_263: i1, in5: %rawOutput_264: i0, in5_valid: %valid_265: i1, in6: %rawOutput_266: i0, in6_valid: %valid_267: i1, out0_ready: %ready_269: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, in4_ready: i1, in5_ready: i1, in6_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_270, %valid_271 = esi.unwrap.vr %chanOutput_268, %handshake_buffer36.in0_ready : i0
    %chanOutput_272, %ready_273 = esi.wrap.vr %handshake_buffer36.out0, %handshake_buffer36.out0_valid : i0
    %handshake_buffer36.in0_ready, %handshake_buffer36.out0, %handshake_buffer36.out0_valid = hw.instance "handshake_buffer36" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_270: i0, in0_valid: %valid_271: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_273: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_274, %valid_275 = esi.unwrap.vr %chanOutput_86, %handshake_constant0.ctrl_ready : i0
    %chanOutput_276, %ready_277 = esi.wrap.vr %handshake_constant0.out0, %handshake_constant0.out0_valid : i64
    %handshake_constant0.ctrl_ready, %handshake_constant0.out0, %handshake_constant0.out0_valid = hw.instance "handshake_constant0" @handshake_constant_c3_out_ui64(ctrl: %rawOutput_274: i0, ctrl_valid: %valid_275: i1, out0_ready: %ready_277: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_278, %valid_279 = esi.unwrap.vr %chanOutput_276, %handshake_buffer37.in0_ready : i64
    %chanOutput_280, %ready_281 = esi.wrap.vr %handshake_buffer37.out0, %handshake_buffer37.out0_valid : i64
    %handshake_buffer37.in0_ready, %handshake_buffer37.out0, %handshake_buffer37.out0_valid = hw.instance "handshake_buffer37" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_278: i64, in0_valid: %valid_279: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_281: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_282, %valid_283 = esi.unwrap.vr %chanOutput_82, %handshake_constant1.ctrl_ready : i0
    %chanOutput_284, %ready_285 = esi.wrap.vr %handshake_constant1.out0, %handshake_constant1.out0_valid : i64
    %handshake_constant1.ctrl_ready, %handshake_constant1.out0, %handshake_constant1.out0_valid = hw.instance "handshake_constant1" @handshake_constant_c3_out_ui64(ctrl: %rawOutput_282: i0, ctrl_valid: %valid_283: i1, out0_ready: %ready_285: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_286, %valid_287 = esi.unwrap.vr %chanOutput_284, %handshake_buffer38.in0_ready : i64
    %chanOutput_288, %ready_289 = esi.wrap.vr %handshake_buffer38.out0, %handshake_buffer38.out0_valid : i64
    %handshake_buffer38.in0_ready, %handshake_buffer38.out0, %handshake_buffer38.out0_valid = hw.instance "handshake_buffer38" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_286: i64, in0_valid: %valid_287: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_289: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_290, %valid_291 = esi.unwrap.vr %chanOutput_288, %handshake_fork5.in0_ready : i64
    %chanOutput_292, %ready_293 = esi.wrap.vr %handshake_fork5.out0, %handshake_fork5.out0_valid : i64
    %chanOutput_294, %ready_295 = esi.wrap.vr %handshake_fork5.out1, %handshake_fork5.out1_valid : i64
    %handshake_fork5.in0_ready, %handshake_fork5.out0, %handshake_fork5.out0_valid, %handshake_fork5.out1, %handshake_fork5.out1_valid = hw.instance "handshake_fork5" @handshake_fork_in_ui64_out_ui64_ui64(in0: %rawOutput_290: i64, in0_valid: %valid_291: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_293: i1, out1_ready: %ready_295: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %rawOutput_296, %valid_297 = esi.unwrap.vr %chanOutput_294, %handshake_buffer39.in0_ready : i64
    %chanOutput_298, %ready_299 = esi.wrap.vr %handshake_buffer39.out0, %handshake_buffer39.out0_valid : i64
    %handshake_buffer39.in0_ready, %handshake_buffer39.out0, %handshake_buffer39.out0_valid = hw.instance "handshake_buffer39" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_296: i64, in0_valid: %valid_297: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_299: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_300, %valid_301 = esi.unwrap.vr %chanOutput_292, %handshake_buffer40.in0_ready : i64
    %chanOutput_302, %ready_303 = esi.wrap.vr %handshake_buffer40.out0, %handshake_buffer40.out0_valid : i64
    %handshake_buffer40.in0_ready, %handshake_buffer40.out0, %handshake_buffer40.out0_valid = hw.instance "handshake_buffer40" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_300: i64, in0_valid: %valid_301: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_303: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_304, %valid_305 = esi.unwrap.vr %chanOutput_78, %handshake_constant2.ctrl_ready : i0
    %chanOutput_306, %ready_307 = esi.wrap.vr %handshake_constant2.out0, %handshake_constant2.out0_valid : i64
    %handshake_constant2.ctrl_ready, %handshake_constant2.out0, %handshake_constant2.out0_valid = hw.instance "handshake_constant2" @handshake_constant_c2_out_ui64(ctrl: %rawOutput_304: i0, ctrl_valid: %valid_305: i1, out0_ready: %ready_307: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_308, %valid_309 = esi.unwrap.vr %chanOutput_306, %handshake_buffer41.in0_ready : i64
    %chanOutput_310, %ready_311 = esi.wrap.vr %handshake_buffer41.out0, %handshake_buffer41.out0_valid : i64
    %handshake_buffer41.in0_ready, %handshake_buffer41.out0, %handshake_buffer41.out0_valid = hw.instance "handshake_buffer41" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_308: i64, in0_valid: %valid_309: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_311: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_312, %valid_313 = esi.unwrap.vr %chanOutput_310, %handshake_fork6.in0_ready : i64
    %chanOutput_314, %ready_315 = esi.wrap.vr %handshake_fork6.out0, %handshake_fork6.out0_valid : i64
    %chanOutput_316, %ready_317 = esi.wrap.vr %handshake_fork6.out1, %handshake_fork6.out1_valid : i64
    %handshake_fork6.in0_ready, %handshake_fork6.out0, %handshake_fork6.out0_valid, %handshake_fork6.out1, %handshake_fork6.out1_valid = hw.instance "handshake_fork6" @handshake_fork_in_ui64_out_ui64_ui64(in0: %rawOutput_312: i64, in0_valid: %valid_313: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_315: i1, out1_ready: %ready_317: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %rawOutput_318, %valid_319 = esi.unwrap.vr %chanOutput_316, %handshake_buffer42.in0_ready : i64
    %chanOutput_320, %ready_321 = esi.wrap.vr %handshake_buffer42.out0, %handshake_buffer42.out0_valid : i64
    %handshake_buffer42.in0_ready, %handshake_buffer42.out0, %handshake_buffer42.out0_valid = hw.instance "handshake_buffer42" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_318: i64, in0_valid: %valid_319: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_321: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_322, %valid_323 = esi.unwrap.vr %chanOutput_314, %handshake_buffer43.in0_ready : i64
    %chanOutput_324, %ready_325 = esi.wrap.vr %handshake_buffer43.out0, %handshake_buffer43.out0_valid : i64
    %handshake_buffer43.in0_ready, %handshake_buffer43.out0, %handshake_buffer43.out0_valid = hw.instance "handshake_buffer43" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_322: i64, in0_valid: %valid_323: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_325: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_326, %valid_327 = esi.unwrap.vr %chanOutput_74, %handshake_constant3.ctrl_ready : i0
    %chanOutput_328, %ready_329 = esi.wrap.vr %handshake_constant3.out0, %handshake_constant3.out0_valid : i64
    %handshake_constant3.ctrl_ready, %handshake_constant3.out0, %handshake_constant3.out0_valid = hw.instance "handshake_constant3" @handshake_constant_c1_out_ui64(ctrl: %rawOutput_326: i0, ctrl_valid: %valid_327: i1, out0_ready: %ready_329: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_330, %valid_331 = esi.unwrap.vr %chanOutput_328, %handshake_buffer44.in0_ready : i64
    %chanOutput_332, %ready_333 = esi.wrap.vr %handshake_buffer44.out0, %handshake_buffer44.out0_valid : i64
    %handshake_buffer44.in0_ready, %handshake_buffer44.out0, %handshake_buffer44.out0_valid = hw.instance "handshake_buffer44" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_330: i64, in0_valid: %valid_331: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_333: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_334, %valid_335 = esi.unwrap.vr %chanOutput_332, %handshake_fork7.in0_ready : i64
    %chanOutput_336, %ready_337 = esi.wrap.vr %handshake_fork7.out0, %handshake_fork7.out0_valid : i64
    %chanOutput_338, %ready_339 = esi.wrap.vr %handshake_fork7.out1, %handshake_fork7.out1_valid : i64
    %handshake_fork7.in0_ready, %handshake_fork7.out0, %handshake_fork7.out0_valid, %handshake_fork7.out1, %handshake_fork7.out1_valid = hw.instance "handshake_fork7" @handshake_fork_in_ui64_out_ui64_ui64(in0: %rawOutput_334: i64, in0_valid: %valid_335: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_337: i1, out1_ready: %ready_339: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %rawOutput_340, %valid_341 = esi.unwrap.vr %chanOutput_338, %handshake_buffer45.in0_ready : i64
    %chanOutput_342, %ready_343 = esi.wrap.vr %handshake_buffer45.out0, %handshake_buffer45.out0_valid : i64
    %handshake_buffer45.in0_ready, %handshake_buffer45.out0, %handshake_buffer45.out0_valid = hw.instance "handshake_buffer45" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_340: i64, in0_valid: %valid_341: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_343: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_344, %valid_345 = esi.unwrap.vr %chanOutput_336, %handshake_buffer46.in0_ready : i64
    %chanOutput_346, %ready_347 = esi.wrap.vr %handshake_buffer46.out0, %handshake_buffer46.out0_valid : i64
    %handshake_buffer46.in0_ready, %handshake_buffer46.out0, %handshake_buffer46.out0_valid = hw.instance "handshake_buffer46" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_344: i64, in0_valid: %valid_345: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_347: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_348, %valid_349 = esi.unwrap.vr %chanOutput_70, %handshake_constant4.ctrl_ready : i0
    %chanOutput_350, %ready_351 = esi.wrap.vr %handshake_constant4.out0, %handshake_constant4.out0_valid : i64
    %handshake_constant4.ctrl_ready, %handshake_constant4.out0, %handshake_constant4.out0_valid = hw.instance "handshake_constant4" @handshake_constant_c2_out_ui64(ctrl: %rawOutput_348: i0, ctrl_valid: %valid_349: i1, out0_ready: %ready_351: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_352, %valid_353 = esi.unwrap.vr %chanOutput_350, %handshake_buffer47.in0_ready : i64
    %chanOutput_354, %ready_355 = esi.wrap.vr %handshake_buffer47.out0, %handshake_buffer47.out0_valid : i64
    %handshake_buffer47.in0_ready, %handshake_buffer47.out0, %handshake_buffer47.out0_valid = hw.instance "handshake_buffer47" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_352: i64, in0_valid: %valid_353: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_355: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_356, %valid_357 = esi.unwrap.vr %chanOutput_354, %handshake_fork8.in0_ready : i64
    %chanOutput_358, %ready_359 = esi.wrap.vr %handshake_fork8.out0, %handshake_fork8.out0_valid : i64
    %chanOutput_360, %ready_361 = esi.wrap.vr %handshake_fork8.out1, %handshake_fork8.out1_valid : i64
    %handshake_fork8.in0_ready, %handshake_fork8.out0, %handshake_fork8.out0_valid, %handshake_fork8.out1, %handshake_fork8.out1_valid = hw.instance "handshake_fork8" @handshake_fork_in_ui64_out_ui64_ui64(in0: %rawOutput_356: i64, in0_valid: %valid_357: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_359: i1, out1_ready: %ready_361: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %rawOutput_362, %valid_363 = esi.unwrap.vr %chanOutput_360, %handshake_buffer48.in0_ready : i64
    %chanOutput_364, %ready_365 = esi.wrap.vr %handshake_buffer48.out0, %handshake_buffer48.out0_valid : i64
    %handshake_buffer48.in0_ready, %handshake_buffer48.out0, %handshake_buffer48.out0_valid = hw.instance "handshake_buffer48" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_362: i64, in0_valid: %valid_363: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_365: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_366, %valid_367 = esi.unwrap.vr %chanOutput_358, %handshake_buffer49.in0_ready : i64
    %chanOutput_368, %ready_369 = esi.wrap.vr %handshake_buffer49.out0, %handshake_buffer49.out0_valid : i64
    %handshake_buffer49.in0_ready, %handshake_buffer49.out0, %handshake_buffer49.out0_valid = hw.instance "handshake_buffer49" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_366: i64, in0_valid: %valid_367: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_369: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_370, %valid_371 = esi.unwrap.vr %chanOutput_66, %handshake_constant5.ctrl_ready : i0
    %chanOutput_372, %ready_373 = esi.wrap.vr %handshake_constant5.out0, %handshake_constant5.out0_valid : i64
    %handshake_constant5.ctrl_ready, %handshake_constant5.out0, %handshake_constant5.out0_valid = hw.instance "handshake_constant5" @handshake_constant_c1_out_ui64(ctrl: %rawOutput_370: i0, ctrl_valid: %valid_371: i1, out0_ready: %ready_373: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_374, %valid_375 = esi.unwrap.vr %chanOutput_372, %handshake_buffer50.in0_ready : i64
    %chanOutput_376, %ready_377 = esi.wrap.vr %handshake_buffer50.out0, %handshake_buffer50.out0_valid : i64
    %handshake_buffer50.in0_ready, %handshake_buffer50.out0, %handshake_buffer50.out0_valid = hw.instance "handshake_buffer50" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_374: i64, in0_valid: %valid_375: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_377: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_378, %valid_379 = esi.unwrap.vr %chanOutput_376, %handshake_fork9.in0_ready : i64
    %chanOutput_380, %ready_381 = esi.wrap.vr %handshake_fork9.out0, %handshake_fork9.out0_valid : i64
    %chanOutput_382, %ready_383 = esi.wrap.vr %handshake_fork9.out1, %handshake_fork9.out1_valid : i64
    %chanOutput_384, %ready_385 = esi.wrap.vr %handshake_fork9.out2, %handshake_fork9.out2_valid : i64
    %handshake_fork9.in0_ready, %handshake_fork9.out0, %handshake_fork9.out0_valid, %handshake_fork9.out1, %handshake_fork9.out1_valid, %handshake_fork9.out2, %handshake_fork9.out2_valid = hw.instance "handshake_fork9" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %rawOutput_378: i64, in0_valid: %valid_379: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_381: i1, out1_ready: %ready_383: i1, out2_ready: %ready_385: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
    %rawOutput_386, %valid_387 = esi.unwrap.vr %chanOutput_384, %handshake_buffer51.in0_ready : i64
    %chanOutput_388, %ready_389 = esi.wrap.vr %handshake_buffer51.out0, %handshake_buffer51.out0_valid : i64
    %handshake_buffer51.in0_ready, %handshake_buffer51.out0, %handshake_buffer51.out0_valid = hw.instance "handshake_buffer51" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_386: i64, in0_valid: %valid_387: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_389: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_390, %valid_391 = esi.unwrap.vr %chanOutput_382, %handshake_buffer52.in0_ready : i64
    %chanOutput_392, %ready_393 = esi.wrap.vr %handshake_buffer52.out0, %handshake_buffer52.out0_valid : i64
    %handshake_buffer52.in0_ready, %handshake_buffer52.out0, %handshake_buffer52.out0_valid = hw.instance "handshake_buffer52" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_390: i64, in0_valid: %valid_391: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_393: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_394, %valid_395 = esi.unwrap.vr %chanOutput_380, %handshake_buffer53.in0_ready : i64
    %chanOutput_396, %ready_397 = esi.wrap.vr %handshake_buffer53.out0, %handshake_buffer53.out0_valid : i64
    %handshake_buffer53.in0_ready, %handshake_buffer53.out0, %handshake_buffer53.out0_valid = hw.instance "handshake_buffer53" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_394: i64, in0_valid: %valid_395: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_397: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_398, %valid_399 = esi.unwrap.vr %chanOutput_62, %handshake_constant6.ctrl_ready : i0
    %chanOutput_400, %ready_401 = esi.wrap.vr %handshake_constant6.out0, %handshake_constant6.out0_valid : i64
    %handshake_constant6.ctrl_ready, %handshake_constant6.out0, %handshake_constant6.out0_valid = hw.instance "handshake_constant6" @handshake_constant_c0_out_ui64(ctrl: %rawOutput_398: i0, ctrl_valid: %valid_399: i1, out0_ready: %ready_401: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_402, %valid_403 = esi.unwrap.vr %chanOutput_400, %handshake_buffer54.in0_ready : i64
    %chanOutput_404, %ready_405 = esi.wrap.vr %handshake_buffer54.out0, %handshake_buffer54.out0_valid : i64
    %handshake_buffer54.in0_ready, %handshake_buffer54.out0, %handshake_buffer54.out0_valid = hw.instance "handshake_buffer54" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_402: i64, in0_valid: %valid_403: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_405: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_406, %valid_407 = esi.unwrap.vr %chanOutput_404, %handshake_fork10.in0_ready : i64
    %chanOutput_408, %ready_409 = esi.wrap.vr %handshake_fork10.out0, %handshake_fork10.out0_valid : i64
    %chanOutput_410, %ready_411 = esi.wrap.vr %handshake_fork10.out1, %handshake_fork10.out1_valid : i64
    %chanOutput_412, %ready_413 = esi.wrap.vr %handshake_fork10.out2, %handshake_fork10.out2_valid : i64
    %handshake_fork10.in0_ready, %handshake_fork10.out0, %handshake_fork10.out0_valid, %handshake_fork10.out1, %handshake_fork10.out1_valid, %handshake_fork10.out2, %handshake_fork10.out2_valid = hw.instance "handshake_fork10" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %rawOutput_406: i64, in0_valid: %valid_407: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_409: i1, out1_ready: %ready_411: i1, out2_ready: %ready_413: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
    %rawOutput_414, %valid_415 = esi.unwrap.vr %chanOutput_412, %handshake_buffer55.in0_ready : i64
    %chanOutput_416, %ready_417 = esi.wrap.vr %handshake_buffer55.out0, %handshake_buffer55.out0_valid : i64
    %handshake_buffer55.in0_ready, %handshake_buffer55.out0, %handshake_buffer55.out0_valid = hw.instance "handshake_buffer55" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_414: i64, in0_valid: %valid_415: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_417: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_418, %valid_419 = esi.unwrap.vr %chanOutput_410, %handshake_buffer56.in0_ready : i64
    %chanOutput_420, %ready_421 = esi.wrap.vr %handshake_buffer56.out0, %handshake_buffer56.out0_valid : i64
    %handshake_buffer56.in0_ready, %handshake_buffer56.out0, %handshake_buffer56.out0_valid = hw.instance "handshake_buffer56" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_418: i64, in0_valid: %valid_419: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_421: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_422, %valid_423 = esi.unwrap.vr %chanOutput_408, %handshake_buffer57.in0_ready : i64
    %chanOutput_424, %ready_425 = esi.wrap.vr %handshake_buffer57.out0, %handshake_buffer57.out0_valid : i64
    %handshake_buffer57.in0_ready, %handshake_buffer57.out0, %handshake_buffer57.out0_valid = hw.instance "handshake_buffer57" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_422: i64, in0_valid: %valid_423: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_425: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_426, %valid_427 = esi.unwrap.vr %chanOutput_416, %handshake_store0.addrIn0_ready : i64
    %rawOutput_428, %valid_429 = esi.unwrap.vr %chanOutput_342, %handshake_store0.dataIn_ready : i64
    %rawOutput_430, %valid_431 = esi.unwrap.vr %chanOutput_58, %handshake_store0.ctrl_ready : i0
    %chanOutput_432, %ready_433 = esi.wrap.vr %handshake_store0.dataToMem, %handshake_store0.dataToMem_valid : i64
    %chanOutput_434, %ready_435 = esi.wrap.vr %handshake_store0.addrOut0, %handshake_store0.addrOut0_valid : i64
    %handshake_store0.addrIn0_ready, %handshake_store0.dataIn_ready, %handshake_store0.ctrl_ready, %handshake_store0.dataToMem, %handshake_store0.dataToMem_valid, %handshake_store0.addrOut0, %handshake_store0.addrOut0_valid = hw.instance "handshake_store0" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %rawOutput_426: i64, addrIn0_valid: %valid_427: i1, dataIn: %rawOutput_428: i64, dataIn_valid: %valid_429: i1, ctrl: %rawOutput_430: i0, ctrl_valid: %valid_431: i1, dataToMem_ready: %ready_433: i1, addrOut0_ready: %ready_435: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %rawOutput_436, %valid_437 = esi.unwrap.vr %chanOutput_434, %handshake_buffer58.in0_ready : i64
    %chanOutput_438, %ready_439 = esi.wrap.vr %handshake_buffer58.out0, %handshake_buffer58.out0_valid : i64
    %handshake_buffer58.in0_ready, %handshake_buffer58.out0, %handshake_buffer58.out0_valid = hw.instance "handshake_buffer58" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_436: i64, in0_valid: %valid_437: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_439: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_440, %valid_441 = esi.unwrap.vr %chanOutput_432, %handshake_buffer59.in0_ready : i64
    %chanOutput_442, %ready_443 = esi.wrap.vr %handshake_buffer59.out0, %handshake_buffer59.out0_valid : i64
    %handshake_buffer59.in0_ready, %handshake_buffer59.out0, %handshake_buffer59.out0_valid = hw.instance "handshake_buffer59" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_440: i64, in0_valid: %valid_441: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_443: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_444, %valid_445 = esi.unwrap.vr %chanOutput_54, %handshake_join1.in0_ready : i0
    %rawOutput_446, %valid_447 = esi.unwrap.vr %chanOutput_244, %handshake_join1.in1_ready : i0
    %chanOutput_448, %ready_449 = esi.wrap.vr %handshake_join1.out0, %handshake_join1.out0_valid : i0
    %handshake_join1.in0_ready, %handshake_join1.in1_ready, %handshake_join1.out0, %handshake_join1.out0_valid = hw.instance "handshake_join1" @handshake_join_2ins_1outs_ctrl(in0: %rawOutput_444: i0, in0_valid: %valid_445: i1, in1: %rawOutput_446: i0, in1_valid: %valid_447: i1, out0_ready: %ready_449: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_450, %valid_451 = esi.unwrap.vr %chanOutput_448, %handshake_buffer60.in0_ready : i0
    %chanOutput_452, %ready_453 = esi.wrap.vr %handshake_buffer60.out0, %handshake_buffer60.out0_valid : i0
    %handshake_buffer60.in0_ready, %handshake_buffer60.out0, %handshake_buffer60.out0_valid = hw.instance "handshake_buffer60" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_450: i0, in0_valid: %valid_451: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_453: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_454, %valid_455 = esi.unwrap.vr %chanOutput_388, %handshake_store1.addrIn0_ready : i64
    %rawOutput_456, %valid_457 = esi.unwrap.vr %chanOutput_320, %handshake_store1.dataIn_ready : i64
    %rawOutput_458, %valid_459 = esi.unwrap.vr %chanOutput_452, %handshake_store1.ctrl_ready : i0
    %chanOutput_460, %ready_461 = esi.wrap.vr %handshake_store1.dataToMem, %handshake_store1.dataToMem_valid : i64
    %chanOutput_462, %ready_463 = esi.wrap.vr %handshake_store1.addrOut0, %handshake_store1.addrOut0_valid : i64
    %handshake_store1.addrIn0_ready, %handshake_store1.dataIn_ready, %handshake_store1.ctrl_ready, %handshake_store1.dataToMem, %handshake_store1.dataToMem_valid, %handshake_store1.addrOut0, %handshake_store1.addrOut0_valid = hw.instance "handshake_store1" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %rawOutput_454: i64, addrIn0_valid: %valid_455: i1, dataIn: %rawOutput_456: i64, dataIn_valid: %valid_457: i1, ctrl: %rawOutput_458: i0, ctrl_valid: %valid_459: i1, dataToMem_ready: %ready_461: i1, addrOut0_ready: %ready_463: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %rawOutput_464, %valid_465 = esi.unwrap.vr %chanOutput_462, %handshake_buffer61.in0_ready : i64
    %chanOutput_466, %ready_467 = esi.wrap.vr %handshake_buffer61.out0, %handshake_buffer61.out0_valid : i64
    %handshake_buffer61.in0_ready, %handshake_buffer61.out0, %handshake_buffer61.out0_valid = hw.instance "handshake_buffer61" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_464: i64, in0_valid: %valid_465: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_467: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_468, %valid_469 = esi.unwrap.vr %chanOutput_460, %handshake_buffer62.in0_ready : i64
    %chanOutput_470, %ready_471 = esi.wrap.vr %handshake_buffer62.out0, %handshake_buffer62.out0_valid : i64
    %handshake_buffer62.in0_ready, %handshake_buffer62.out0, %handshake_buffer62.out0_valid = hw.instance "handshake_buffer62" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_468: i64, in0_valid: %valid_469: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_471: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_472, %valid_473 = esi.unwrap.vr %chanOutput_50, %handshake_join2.in0_ready : i0
    %rawOutput_474, %valid_475 = esi.unwrap.vr %chanOutput_248, %handshake_join2.in1_ready : i0
    %rawOutput_476, %valid_477 = esi.unwrap.vr %chanOutput_228, %handshake_join2.in2_ready : i0
    %chanOutput_478, %ready_479 = esi.wrap.vr %handshake_join2.out0, %handshake_join2.out0_valid : i0
    %handshake_join2.in0_ready, %handshake_join2.in1_ready, %handshake_join2.in2_ready, %handshake_join2.out0, %handshake_join2.out0_valid = hw.instance "handshake_join2" @handshake_join_3ins_1outs_ctrl(in0: %rawOutput_472: i0, in0_valid: %valid_473: i1, in1: %rawOutput_474: i0, in1_valid: %valid_475: i1, in2: %rawOutput_476: i0, in2_valid: %valid_477: i1, out0_ready: %ready_479: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_480, %valid_481 = esi.unwrap.vr %chanOutput_478, %handshake_buffer63.in0_ready : i0
    %chanOutput_482, %ready_483 = esi.wrap.vr %handshake_buffer63.out0, %handshake_buffer63.out0_valid : i0
    %handshake_buffer63.in0_ready, %handshake_buffer63.out0, %handshake_buffer63.out0_valid = hw.instance "handshake_buffer63" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_480: i0, in0_valid: %valid_481: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_483: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_484, %valid_485 = esi.unwrap.vr %chanOutput_364, %handshake_store2.addrIn0_ready : i64
    %rawOutput_486, %valid_487 = esi.unwrap.vr %chanOutput_298, %handshake_store2.dataIn_ready : i64
    %rawOutput_488, %valid_489 = esi.unwrap.vr %chanOutput_482, %handshake_store2.ctrl_ready : i0
    %chanOutput_490, %ready_491 = esi.wrap.vr %handshake_store2.dataToMem, %handshake_store2.dataToMem_valid : i64
    %chanOutput_492, %ready_493 = esi.wrap.vr %handshake_store2.addrOut0, %handshake_store2.addrOut0_valid : i64
    %handshake_store2.addrIn0_ready, %handshake_store2.dataIn_ready, %handshake_store2.ctrl_ready, %handshake_store2.dataToMem, %handshake_store2.dataToMem_valid, %handshake_store2.addrOut0, %handshake_store2.addrOut0_valid = hw.instance "handshake_store2" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %rawOutput_484: i64, addrIn0_valid: %valid_485: i1, dataIn: %rawOutput_486: i64, dataIn_valid: %valid_487: i1, ctrl: %rawOutput_488: i0, ctrl_valid: %valid_489: i1, dataToMem_ready: %ready_491: i1, addrOut0_ready: %ready_493: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %rawOutput_494, %valid_495 = esi.unwrap.vr %chanOutput_492, %handshake_buffer64.in0_ready : i64
    %chanOutput_496, %ready_497 = esi.wrap.vr %handshake_buffer64.out0, %handshake_buffer64.out0_valid : i64
    %handshake_buffer64.in0_ready, %handshake_buffer64.out0, %handshake_buffer64.out0_valid = hw.instance "handshake_buffer64" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_494: i64, in0_valid: %valid_495: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_497: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_498, %valid_499 = esi.unwrap.vr %chanOutput_490, %handshake_buffer65.in0_ready : i64
    %chanOutput_500, %ready_501 = esi.wrap.vr %handshake_buffer65.out0, %handshake_buffer65.out0_valid : i64
    %handshake_buffer65.in0_ready, %handshake_buffer65.out0, %handshake_buffer65.out0_valid = hw.instance "handshake_buffer65" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_498: i64, in0_valid: %valid_499: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_501: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_502, %valid_503 = esi.unwrap.vr %chanOutput_420, %handshake_store3.addrIn0_ready : i64
    %rawOutput_504, %valid_505 = esi.unwrap.vr %chanOutput_346, %handshake_store3.dataIn_ready : i64
    %rawOutput_506, %valid_507 = esi.unwrap.vr %chanOutput_42, %handshake_store3.ctrl_ready : i0
    %chanOutput_508, %ready_509 = esi.wrap.vr %handshake_store3.dataToMem, %handshake_store3.dataToMem_valid : i64
    %chanOutput_510, %ready_511 = esi.wrap.vr %handshake_store3.addrOut0, %handshake_store3.addrOut0_valid : i64
    %handshake_store3.addrIn0_ready, %handshake_store3.dataIn_ready, %handshake_store3.ctrl_ready, %handshake_store3.dataToMem, %handshake_store3.dataToMem_valid, %handshake_store3.addrOut0, %handshake_store3.addrOut0_valid = hw.instance "handshake_store3" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %rawOutput_502: i64, addrIn0_valid: %valid_503: i1, dataIn: %rawOutput_504: i64, dataIn_valid: %valid_505: i1, ctrl: %rawOutput_506: i0, ctrl_valid: %valid_507: i1, dataToMem_ready: %ready_509: i1, addrOut0_ready: %ready_511: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %rawOutput_512, %valid_513 = esi.unwrap.vr %chanOutput_510, %handshake_buffer66.in0_ready : i64
    %chanOutput_514, %ready_515 = esi.wrap.vr %handshake_buffer66.out0, %handshake_buffer66.out0_valid : i64
    %handshake_buffer66.in0_ready, %handshake_buffer66.out0, %handshake_buffer66.out0_valid = hw.instance "handshake_buffer66" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_512: i64, in0_valid: %valid_513: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_515: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_516, %valid_517 = esi.unwrap.vr %chanOutput_508, %handshake_buffer67.in0_ready : i64
    %chanOutput_518, %ready_519 = esi.wrap.vr %handshake_buffer67.out0, %handshake_buffer67.out0_valid : i64
    %handshake_buffer67.in0_ready, %handshake_buffer67.out0, %handshake_buffer67.out0_valid = hw.instance "handshake_buffer67" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_516: i64, in0_valid: %valid_517: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_519: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_520, %valid_521 = esi.unwrap.vr %chanOutput_38, %handshake_join3.in0_ready : i0
    %rawOutput_522, %valid_523 = esi.unwrap.vr %chanOutput_170, %handshake_join3.in1_ready : i0
    %chanOutput_524, %ready_525 = esi.wrap.vr %handshake_join3.out0, %handshake_join3.out0_valid : i0
    %handshake_join3.in0_ready, %handshake_join3.in1_ready, %handshake_join3.out0, %handshake_join3.out0_valid = hw.instance "handshake_join3" @handshake_join_2ins_1outs_ctrl(in0: %rawOutput_520: i0, in0_valid: %valid_521: i1, in1: %rawOutput_522: i0, in1_valid: %valid_523: i1, out0_ready: %ready_525: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_526, %valid_527 = esi.unwrap.vr %chanOutput_524, %handshake_buffer68.in0_ready : i0
    %chanOutput_528, %ready_529 = esi.wrap.vr %handshake_buffer68.out0, %handshake_buffer68.out0_valid : i0
    %handshake_buffer68.in0_ready, %handshake_buffer68.out0, %handshake_buffer68.out0_valid = hw.instance "handshake_buffer68" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_526: i0, in0_valid: %valid_527: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_529: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_530, %valid_531 = esi.unwrap.vr %chanOutput_392, %handshake_store4.addrIn0_ready : i64
    %rawOutput_532, %valid_533 = esi.unwrap.vr %chanOutput_324, %handshake_store4.dataIn_ready : i64
    %rawOutput_534, %valid_535 = esi.unwrap.vr %chanOutput_528, %handshake_store4.ctrl_ready : i0
    %chanOutput_536, %ready_537 = esi.wrap.vr %handshake_store4.dataToMem, %handshake_store4.dataToMem_valid : i64
    %chanOutput_538, %ready_539 = esi.wrap.vr %handshake_store4.addrOut0, %handshake_store4.addrOut0_valid : i64
    %handshake_store4.addrIn0_ready, %handshake_store4.dataIn_ready, %handshake_store4.ctrl_ready, %handshake_store4.dataToMem, %handshake_store4.dataToMem_valid, %handshake_store4.addrOut0, %handshake_store4.addrOut0_valid = hw.instance "handshake_store4" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %rawOutput_530: i64, addrIn0_valid: %valid_531: i1, dataIn: %rawOutput_532: i64, dataIn_valid: %valid_533: i1, ctrl: %rawOutput_534: i0, ctrl_valid: %valid_535: i1, dataToMem_ready: %ready_537: i1, addrOut0_ready: %ready_539: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %rawOutput_540, %valid_541 = esi.unwrap.vr %chanOutput_538, %handshake_buffer69.in0_ready : i64
    %chanOutput_542, %ready_543 = esi.wrap.vr %handshake_buffer69.out0, %handshake_buffer69.out0_valid : i64
    %handshake_buffer69.in0_ready, %handshake_buffer69.out0, %handshake_buffer69.out0_valid = hw.instance "handshake_buffer69" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_540: i64, in0_valid: %valid_541: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_543: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_544, %valid_545 = esi.unwrap.vr %chanOutput_536, %handshake_buffer70.in0_ready : i64
    %chanOutput_546, %ready_547 = esi.wrap.vr %handshake_buffer70.out0, %handshake_buffer70.out0_valid : i64
    %handshake_buffer70.in0_ready, %handshake_buffer70.out0, %handshake_buffer70.out0_valid = hw.instance "handshake_buffer70" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_544: i64, in0_valid: %valid_545: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_547: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_548, %valid_549 = esi.unwrap.vr %chanOutput_34, %handshake_join4.in0_ready : i0
    %rawOutput_550, %valid_551 = esi.unwrap.vr %chanOutput_174, %handshake_join4.in1_ready : i0
    %rawOutput_552, %valid_553 = esi.unwrap.vr %chanOutput_154, %handshake_join4.in2_ready : i0
    %chanOutput_554, %ready_555 = esi.wrap.vr %handshake_join4.out0, %handshake_join4.out0_valid : i0
    %handshake_join4.in0_ready, %handshake_join4.in1_ready, %handshake_join4.in2_ready, %handshake_join4.out0, %handshake_join4.out0_valid = hw.instance "handshake_join4" @handshake_join_3ins_1outs_ctrl(in0: %rawOutput_548: i0, in0_valid: %valid_549: i1, in1: %rawOutput_550: i0, in1_valid: %valid_551: i1, in2: %rawOutput_552: i0, in2_valid: %valid_553: i1, out0_ready: %ready_555: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_556, %valid_557 = esi.unwrap.vr %chanOutput_554, %handshake_buffer71.in0_ready : i0
    %chanOutput_558, %ready_559 = esi.wrap.vr %handshake_buffer71.out0, %handshake_buffer71.out0_valid : i0
    %handshake_buffer71.in0_ready, %handshake_buffer71.out0, %handshake_buffer71.out0_valid = hw.instance "handshake_buffer71" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_556: i0, in0_valid: %valid_557: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_559: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_560, %valid_561 = esi.unwrap.vr %chanOutput_368, %handshake_store5.addrIn0_ready : i64
    %rawOutput_562, %valid_563 = esi.unwrap.vr %chanOutput_302, %handshake_store5.dataIn_ready : i64
    %rawOutput_564, %valid_565 = esi.unwrap.vr %chanOutput_558, %handshake_store5.ctrl_ready : i0
    %chanOutput_566, %ready_567 = esi.wrap.vr %handshake_store5.dataToMem, %handshake_store5.dataToMem_valid : i64
    %chanOutput_568, %ready_569 = esi.wrap.vr %handshake_store5.addrOut0, %handshake_store5.addrOut0_valid : i64
    %handshake_store5.addrIn0_ready, %handshake_store5.dataIn_ready, %handshake_store5.ctrl_ready, %handshake_store5.dataToMem, %handshake_store5.dataToMem_valid, %handshake_store5.addrOut0, %handshake_store5.addrOut0_valid = hw.instance "handshake_store5" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %rawOutput_560: i64, addrIn0_valid: %valid_561: i1, dataIn: %rawOutput_562: i64, dataIn_valid: %valid_563: i1, ctrl: %rawOutput_564: i0, ctrl_valid: %valid_565: i1, dataToMem_ready: %ready_567: i1, addrOut0_ready: %ready_569: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %rawOutput_570, %valid_571 = esi.unwrap.vr %chanOutput_568, %handshake_buffer72.in0_ready : i64
    %chanOutput_572, %ready_573 = esi.wrap.vr %handshake_buffer72.out0, %handshake_buffer72.out0_valid : i64
    %handshake_buffer72.in0_ready, %handshake_buffer72.out0, %handshake_buffer72.out0_valid = hw.instance "handshake_buffer72" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_570: i64, in0_valid: %valid_571: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_573: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_574, %valid_575 = esi.unwrap.vr %chanOutput_566, %handshake_buffer73.in0_ready : i64
    %chanOutput_576, %ready_577 = esi.wrap.vr %handshake_buffer73.out0, %handshake_buffer73.out0_valid : i64
    %handshake_buffer73.in0_ready, %handshake_buffer73.out0, %handshake_buffer73.out0_valid = hw.instance "handshake_buffer73" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_574: i64, in0_valid: %valid_575: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_577: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_578, %valid_579 = esi.unwrap.vr %chanOutput_696, %handshake_buffer74.in0_ready : i1
    %chanOutput_580, %ready_581 = esi.wrap.vr %handshake_buffer74.out0, %handshake_buffer74.out0_valid : i1
    %handshake_buffer74.in0_ready, %handshake_buffer74.out0, %handshake_buffer74.out0_valid = hw.instance "handshake_buffer74" @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in0: %rawOutput_578: i1, in0_valid: %valid_579: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_581: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %rawOutput_582, %valid_583 = esi.unwrap.vr %chanOutput_580, %handshake_fork11.in0_ready : i1
    %chanOutput_584, %ready_585 = esi.wrap.vr %handshake_fork11.out0, %handshake_fork11.out0_valid : i1
    %chanOutput_586, %ready_587 = esi.wrap.vr %handshake_fork11.out1, %handshake_fork11.out1_valid : i1
    %chanOutput_588, %ready_589 = esi.wrap.vr %handshake_fork11.out2, %handshake_fork11.out2_valid : i1
    %chanOutput_590, %ready_591 = esi.wrap.vr %handshake_fork11.out3, %handshake_fork11.out3_valid : i1
    %handshake_fork11.in0_ready, %handshake_fork11.out0, %handshake_fork11.out0_valid, %handshake_fork11.out1, %handshake_fork11.out1_valid, %handshake_fork11.out2, %handshake_fork11.out2_valid, %handshake_fork11.out3, %handshake_fork11.out3_valid = hw.instance "handshake_fork11" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in0: %rawOutput_582: i1, in0_valid: %valid_583: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_585: i1, out1_ready: %ready_587: i1, out2_ready: %ready_589: i1, out3_ready: %ready_591: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1)
    %rawOutput_592, %valid_593 = esi.unwrap.vr %chanOutput_590, %handshake_buffer75.in0_ready : i1
    %chanOutput_594, %ready_595 = esi.wrap.vr %handshake_buffer75.out0, %handshake_buffer75.out0_valid : i1
    %handshake_buffer75.in0_ready, %handshake_buffer75.out0, %handshake_buffer75.out0_valid = hw.instance "handshake_buffer75" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %rawOutput_592: i1, in0_valid: %valid_593: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_595: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %rawOutput_596, %valid_597 = esi.unwrap.vr %chanOutput_588, %handshake_buffer76.in0_ready : i1
    %chanOutput_598, %ready_599 = esi.wrap.vr %handshake_buffer76.out0, %handshake_buffer76.out0_valid : i1
    %handshake_buffer76.in0_ready, %handshake_buffer76.out0, %handshake_buffer76.out0_valid = hw.instance "handshake_buffer76" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %rawOutput_596: i1, in0_valid: %valid_597: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_599: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %rawOutput_600, %valid_601 = esi.unwrap.vr %chanOutput_586, %handshake_buffer77.in0_ready : i1
    %chanOutput_602, %ready_603 = esi.wrap.vr %handshake_buffer77.out0, %handshake_buffer77.out0_valid : i1
    %handshake_buffer77.in0_ready, %handshake_buffer77.out0, %handshake_buffer77.out0_valid = hw.instance "handshake_buffer77" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %rawOutput_600: i1, in0_valid: %valid_601: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_603: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %rawOutput_604, %valid_605 = esi.unwrap.vr %chanOutput_584, %handshake_buffer78.in0_ready : i1
    %chanOutput_606, %ready_607 = esi.wrap.vr %handshake_buffer78.out0, %handshake_buffer78.out0_valid : i1
    %handshake_buffer78.in0_ready, %handshake_buffer78.out0, %handshake_buffer78.out0_valid = hw.instance "handshake_buffer78" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %rawOutput_604: i1, in0_valid: %valid_605: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_607: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %rawOutput_608, %valid_609 = esi.unwrap.vr %chanOutput_594, %handshake_mux0.select_ready : i1
    %rawOutput_610, %valid_611 = esi.unwrap.vr %chanOutput_272, %handshake_mux0.in0_ready : i0
    %rawOutput_612, %valid_613 = esi.unwrap.vr %chanOutput_858, %handshake_mux0.in1_ready : i0
    %chanOutput_614, %ready_615 = esi.wrap.vr %handshake_mux0.out0, %handshake_mux0.out0_valid : i0
    %handshake_mux0.select_ready, %handshake_mux0.in0_ready, %handshake_mux0.in1_ready, %handshake_mux0.out0, %handshake_mux0.out0_valid = hw.instance "handshake_mux0" @handshake_mux_in_ui1_3ins_1outs_ctrl(select: %rawOutput_608: i1, select_valid: %valid_609: i1, in0: %rawOutput_610: i0, in0_valid: %valid_611: i1, in1: %rawOutput_612: i0, in1_valid: %valid_613: i1, out0_ready: %ready_615: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_616, %valid_617 = esi.unwrap.vr %chanOutput_614, %handshake_buffer79.in0_ready : i0
    %chanOutput_618, %ready_619 = esi.wrap.vr %handshake_buffer79.out0, %handshake_buffer79.out0_valid : i0
    %handshake_buffer79.in0_ready, %handshake_buffer79.out0, %handshake_buffer79.out0_valid = hw.instance "handshake_buffer79" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_616: i0, in0_valid: %valid_617: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_619: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_620, %valid_621 = esi.unwrap.vr %chanOutput_598, %handshake_mux1.select_ready : i1
    %rawOutput_622, %valid_623 = esi.unwrap.vr %chanOutput_424, %handshake_mux1.in0_ready : i64
    %rawOutput_624, %valid_625 = esi.unwrap.vr %chanOutput_932, %handshake_mux1.in1_ready : i64
    %chanOutput_626, %ready_627 = esi.wrap.vr %handshake_mux1.out0, %handshake_mux1.out0_valid : i64
    %handshake_mux1.select_ready, %handshake_mux1.in0_ready, %handshake_mux1.in1_ready, %handshake_mux1.out0, %handshake_mux1.out0_valid = hw.instance "handshake_mux1" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %rawOutput_620: i1, select_valid: %valid_621: i1, in0: %rawOutput_622: i64, in0_valid: %valid_623: i1, in1: %rawOutput_624: i64, in1_valid: %valid_625: i1, out0_ready: %ready_627: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_628, %valid_629 = esi.unwrap.vr %chanOutput_626, %handshake_buffer80.in0_ready : i64
    %chanOutput_630, %ready_631 = esi.wrap.vr %handshake_buffer80.out0, %handshake_buffer80.out0_valid : i64
    %handshake_buffer80.in0_ready, %handshake_buffer80.out0, %handshake_buffer80.out0_valid = hw.instance "handshake_buffer80" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_628: i64, in0_valid: %valid_629: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_631: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_632, %valid_633 = esi.unwrap.vr %chanOutput_630, %handshake_fork12.in0_ready : i64
    %chanOutput_634, %ready_635 = esi.wrap.vr %handshake_fork12.out0, %handshake_fork12.out0_valid : i64
    %chanOutput_636, %ready_637 = esi.wrap.vr %handshake_fork12.out1, %handshake_fork12.out1_valid : i64
    %handshake_fork12.in0_ready, %handshake_fork12.out0, %handshake_fork12.out0_valid, %handshake_fork12.out1, %handshake_fork12.out1_valid = hw.instance "handshake_fork12" @handshake_fork_in_ui64_out_ui64_ui64(in0: %rawOutput_632: i64, in0_valid: %valid_633: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_635: i1, out1_ready: %ready_637: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %rawOutput_638, %valid_639 = esi.unwrap.vr %chanOutput_636, %handshake_buffer81.in0_ready : i64
    %chanOutput_640, %ready_641 = esi.wrap.vr %handshake_buffer81.out0, %handshake_buffer81.out0_valid : i64
    %handshake_buffer81.in0_ready, %handshake_buffer81.out0, %handshake_buffer81.out0_valid = hw.instance "handshake_buffer81" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_638: i64, in0_valid: %valid_639: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_641: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_642, %valid_643 = esi.unwrap.vr %chanOutput_634, %handshake_buffer82.in0_ready : i64
    %chanOutput_644, %ready_645 = esi.wrap.vr %handshake_buffer82.out0, %handshake_buffer82.out0_valid : i64
    %handshake_buffer82.in0_ready, %handshake_buffer82.out0, %handshake_buffer82.out0_valid = hw.instance "handshake_buffer82" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_642: i64, in0_valid: %valid_643: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_645: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_646, %valid_647 = esi.unwrap.vr %chanOutput_602, %handshake_mux2.select_ready : i1
    %rawOutput_648, %valid_649 = esi.unwrap.vr %chanOutput_280, %handshake_mux2.in0_ready : i64
    %rawOutput_650, %valid_651 = esi.unwrap.vr %chanOutput_772, %handshake_mux2.in1_ready : i64
    %chanOutput_652, %ready_653 = esi.wrap.vr %handshake_mux2.out0, %handshake_mux2.out0_valid : i64
    %handshake_mux2.select_ready, %handshake_mux2.in0_ready, %handshake_mux2.in1_ready, %handshake_mux2.out0, %handshake_mux2.out0_valid = hw.instance "handshake_mux2" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %rawOutput_646: i1, select_valid: %valid_647: i1, in0: %rawOutput_648: i64, in0_valid: %valid_649: i1, in1: %rawOutput_650: i64, in1_valid: %valid_651: i1, out0_ready: %ready_653: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_654, %valid_655 = esi.unwrap.vr %chanOutput_652, %handshake_buffer83.in0_ready : i64
    %chanOutput_656, %ready_657 = esi.wrap.vr %handshake_buffer83.out0, %handshake_buffer83.out0_valid : i64
    %handshake_buffer83.in0_ready, %handshake_buffer83.out0, %handshake_buffer83.out0_valid = hw.instance "handshake_buffer83" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_654: i64, in0_valid: %valid_655: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_657: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_658, %valid_659 = esi.unwrap.vr %chanOutput_656, %handshake_fork13.in0_ready : i64
    %chanOutput_660, %ready_661 = esi.wrap.vr %handshake_fork13.out0, %handshake_fork13.out0_valid : i64
    %chanOutput_662, %ready_663 = esi.wrap.vr %handshake_fork13.out1, %handshake_fork13.out1_valid : i64
    %handshake_fork13.in0_ready, %handshake_fork13.out0, %handshake_fork13.out0_valid, %handshake_fork13.out1, %handshake_fork13.out1_valid = hw.instance "handshake_fork13" @handshake_fork_in_ui64_out_ui64_ui64(in0: %rawOutput_658: i64, in0_valid: %valid_659: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_661: i1, out1_ready: %ready_663: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %rawOutput_664, %valid_665 = esi.unwrap.vr %chanOutput_662, %handshake_buffer84.in0_ready : i64
    %chanOutput_666, %ready_667 = esi.wrap.vr %handshake_buffer84.out0, %handshake_buffer84.out0_valid : i64
    %handshake_buffer84.in0_ready, %handshake_buffer84.out0, %handshake_buffer84.out0_valid = hw.instance "handshake_buffer84" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_664: i64, in0_valid: %valid_665: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_667: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_668, %valid_669 = esi.unwrap.vr %chanOutput_660, %handshake_buffer85.in0_ready : i64
    %chanOutput_670, %ready_671 = esi.wrap.vr %handshake_buffer85.out0, %handshake_buffer85.out0_valid : i64
    %handshake_buffer85.in0_ready, %handshake_buffer85.out0, %handshake_buffer85.out0_valid = hw.instance "handshake_buffer85" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_668: i64, in0_valid: %valid_669: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_671: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_672, %valid_673 = esi.unwrap.vr %chanOutput_606, %handshake_mux3.select_ready : i1
    %rawOutput_674, %valid_675 = esi.unwrap.vr %chanOutput_396, %handshake_mux3.in0_ready : i64
    %rawOutput_676, %valid_677 = esi.unwrap.vr %chanOutput_802, %handshake_mux3.in1_ready : i64
    %chanOutput_678, %ready_679 = esi.wrap.vr %handshake_mux3.out0, %handshake_mux3.out0_valid : i64
    %handshake_mux3.select_ready, %handshake_mux3.in0_ready, %handshake_mux3.in1_ready, %handshake_mux3.out0, %handshake_mux3.out0_valid = hw.instance "handshake_mux3" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %rawOutput_672: i1, select_valid: %valid_673: i1, in0: %rawOutput_674: i64, in0_valid: %valid_675: i1, in1: %rawOutput_676: i64, in1_valid: %valid_677: i1, out0_ready: %ready_679: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_680, %valid_681 = esi.unwrap.vr %chanOutput_678, %handshake_buffer86.in0_ready : i64
    %chanOutput_682, %ready_683 = esi.wrap.vr %handshake_buffer86.out0, %handshake_buffer86.out0_valid : i64
    %handshake_buffer86.in0_ready, %handshake_buffer86.out0, %handshake_buffer86.out0_valid = hw.instance "handshake_buffer86" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_680: i64, in0_valid: %valid_681: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_683: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_684, %valid_685 = esi.unwrap.vr %chanOutput_644, %arith_cmpi0.in0_ready : i64
    %rawOutput_686, %valid_687 = esi.unwrap.vr %chanOutput_670, %arith_cmpi0.in1_ready : i64
    %chanOutput_688, %ready_689 = esi.wrap.vr %arith_cmpi0.out0, %arith_cmpi0.out0_valid : i1
    %arith_cmpi0.in0_ready, %arith_cmpi0.in1_ready, %arith_cmpi0.out0, %arith_cmpi0.out0_valid = hw.instance "arith_cmpi0" @arith_cmpi_in_ui64_ui64_out_ui1_slt(in0: %rawOutput_684: i64, in0_valid: %valid_685: i1, in1: %rawOutput_686: i64, in1_valid: %valid_687: i1, out0_ready: %ready_689: i1) -> (in0_ready: i1, in1_ready: i1, out0: i1, out0_valid: i1)
    %rawOutput_690, %valid_691 = esi.unwrap.vr %chanOutput_688, %handshake_buffer87.in0_ready : i1
    %chanOutput_692, %ready_693 = esi.wrap.vr %handshake_buffer87.out0, %handshake_buffer87.out0_valid : i1
    %handshake_buffer87.in0_ready, %handshake_buffer87.out0, %handshake_buffer87.out0_valid = hw.instance "handshake_buffer87" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %rawOutput_690: i1, in0_valid: %valid_691: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_693: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %rawOutput_694, %valid_695 = esi.unwrap.vr %chanOutput_692, %handshake_fork14.in0_ready : i1
    %chanOutput_696, %ready_697 = esi.wrap.vr %handshake_fork14.out0, %handshake_fork14.out0_valid : i1
    %chanOutput_698, %ready_699 = esi.wrap.vr %handshake_fork14.out1, %handshake_fork14.out1_valid : i1
    %chanOutput_700, %ready_701 = esi.wrap.vr %handshake_fork14.out2, %handshake_fork14.out2_valid : i1
    %chanOutput_702, %ready_703 = esi.wrap.vr %handshake_fork14.out3, %handshake_fork14.out3_valid : i1
    %chanOutput_704, %ready_705 = esi.wrap.vr %handshake_fork14.out4, %handshake_fork14.out4_valid : i1
    %handshake_fork14.in0_ready, %handshake_fork14.out0, %handshake_fork14.out0_valid, %handshake_fork14.out1, %handshake_fork14.out1_valid, %handshake_fork14.out2, %handshake_fork14.out2_valid, %handshake_fork14.out3, %handshake_fork14.out3_valid, %handshake_fork14.out4, %handshake_fork14.out4_valid = hw.instance "handshake_fork14" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in0: %rawOutput_694: i1, in0_valid: %valid_695: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_697: i1, out1_ready: %ready_699: i1, out2_ready: %ready_701: i1, out3_ready: %ready_703: i1, out4_ready: %ready_705: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1, out4: i1, out4_valid: i1)
    %rawOutput_706, %valid_707 = esi.unwrap.vr %chanOutput_704, %handshake_buffer88.in0_ready : i1
    %chanOutput_708, %ready_709 = esi.wrap.vr %handshake_buffer88.out0, %handshake_buffer88.out0_valid : i1
    %handshake_buffer88.in0_ready, %handshake_buffer88.out0, %handshake_buffer88.out0_valid = hw.instance "handshake_buffer88" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %rawOutput_706: i1, in0_valid: %valid_707: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_709: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %rawOutput_710, %valid_711 = esi.unwrap.vr %chanOutput_702, %handshake_buffer89.in0_ready : i1
    %chanOutput_712, %ready_713 = esi.wrap.vr %handshake_buffer89.out0, %handshake_buffer89.out0_valid : i1
    %handshake_buffer89.in0_ready, %handshake_buffer89.out0, %handshake_buffer89.out0_valid = hw.instance "handshake_buffer89" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %rawOutput_710: i1, in0_valid: %valid_711: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_713: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %rawOutput_714, %valid_715 = esi.unwrap.vr %chanOutput_700, %handshake_buffer90.in0_ready : i1
    %chanOutput_716, %ready_717 = esi.wrap.vr %handshake_buffer90.out0, %handshake_buffer90.out0_valid : i1
    %handshake_buffer90.in0_ready, %handshake_buffer90.out0, %handshake_buffer90.out0_valid = hw.instance "handshake_buffer90" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %rawOutput_714: i1, in0_valid: %valid_715: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_717: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %rawOutput_718, %valid_719 = esi.unwrap.vr %chanOutput_698, %handshake_buffer91.in0_ready : i1
    %chanOutput_720, %ready_721 = esi.wrap.vr %handshake_buffer91.out0, %handshake_buffer91.out0_valid : i1
    %handshake_buffer91.in0_ready, %handshake_buffer91.out0, %handshake_buffer91.out0_valid = hw.instance "handshake_buffer91" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %rawOutput_718: i1, in0_valid: %valid_719: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_721: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %rawOutput_722, %valid_723 = esi.unwrap.vr %chanOutput_708, %handshake_cond_br0.cond_ready : i1
    %rawOutput_724, %valid_725 = esi.unwrap.vr %chanOutput_640, %handshake_cond_br0.data_ready : i64
    %chanOutput_726, %ready_727 = esi.wrap.vr %handshake_cond_br0.outTrue, %handshake_cond_br0.outTrue_valid : i64
    %chanOutput_728, %ready_729 = esi.wrap.vr %handshake_cond_br0.outFalse, %handshake_cond_br0.outFalse_valid : i64
    %handshake_cond_br0.cond_ready, %handshake_cond_br0.data_ready, %handshake_cond_br0.outTrue, %handshake_cond_br0.outTrue_valid, %handshake_cond_br0.outFalse, %handshake_cond_br0.outFalse_valid = hw.instance "handshake_cond_br0" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %rawOutput_722: i1, cond_valid: %valid_723: i1, data: %rawOutput_724: i64, data_valid: %valid_725: i1, outTrue_ready: %ready_727: i1, outFalse_ready: %ready_729: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %rawOutput_730, %valid_731 = esi.unwrap.vr %chanOutput_726, %handshake_buffer92.in0_ready : i64
    %chanOutput_732, %ready_733 = esi.wrap.vr %handshake_buffer92.out0, %handshake_buffer92.out0_valid : i64
    %handshake_buffer92.in0_ready, %handshake_buffer92.out0, %handshake_buffer92.out0_valid = hw.instance "handshake_buffer92" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_730: i64, in0_valid: %valid_731: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_733: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_734, %valid_735 = esi.unwrap.vr %chanOutput_728, %handshake_sink0.in0_ready : i64
    %handshake_sink0.in0_ready = hw.instance "handshake_sink0" @handshake_sink_in_ui64(in0: %rawOutput_734: i64, in0_valid: %valid_735: i1) -> (in0_ready: i1)
    %rawOutput_736, %valid_737 = esi.unwrap.vr %chanOutput_732, %handshake_fork15.in0_ready : i64
    %chanOutput_738, %ready_739 = esi.wrap.vr %handshake_fork15.out0, %handshake_fork15.out0_valid : i64
    %chanOutput_740, %ready_741 = esi.wrap.vr %handshake_fork15.out1, %handshake_fork15.out1_valid : i64
    %chanOutput_742, %ready_743 = esi.wrap.vr %handshake_fork15.out2, %handshake_fork15.out2_valid : i64
    %chanOutput_744, %ready_745 = esi.wrap.vr %handshake_fork15.out3, %handshake_fork15.out3_valid : i64
    %handshake_fork15.in0_ready, %handshake_fork15.out0, %handshake_fork15.out0_valid, %handshake_fork15.out1, %handshake_fork15.out1_valid, %handshake_fork15.out2, %handshake_fork15.out2_valid, %handshake_fork15.out3, %handshake_fork15.out3_valid = hw.instance "handshake_fork15" @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in0: %rawOutput_736: i64, in0_valid: %valid_737: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_739: i1, out1_ready: %ready_741: i1, out2_ready: %ready_743: i1, out3_ready: %ready_745: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1, out3: i64, out3_valid: i1)
    %rawOutput_746, %valid_747 = esi.unwrap.vr %chanOutput_744, %handshake_buffer93.in0_ready : i64
    %chanOutput_748, %ready_749 = esi.wrap.vr %handshake_buffer93.out0, %handshake_buffer93.out0_valid : i64
    %handshake_buffer93.in0_ready, %handshake_buffer93.out0, %handshake_buffer93.out0_valid = hw.instance "handshake_buffer93" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_746: i64, in0_valid: %valid_747: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_749: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_750, %valid_751 = esi.unwrap.vr %chanOutput_742, %handshake_buffer94.in0_ready : i64
    %chanOutput_752, %ready_753 = esi.wrap.vr %handshake_buffer94.out0, %handshake_buffer94.out0_valid : i64
    %handshake_buffer94.in0_ready, %handshake_buffer94.out0, %handshake_buffer94.out0_valid = hw.instance "handshake_buffer94" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_750: i64, in0_valid: %valid_751: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_753: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_754, %valid_755 = esi.unwrap.vr %chanOutput_740, %handshake_buffer95.in0_ready : i64
    %chanOutput_756, %ready_757 = esi.wrap.vr %handshake_buffer95.out0, %handshake_buffer95.out0_valid : i64
    %handshake_buffer95.in0_ready, %handshake_buffer95.out0, %handshake_buffer95.out0_valid = hw.instance "handshake_buffer95" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_754: i64, in0_valid: %valid_755: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_757: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_758, %valid_759 = esi.unwrap.vr %chanOutput_738, %handshake_buffer96.in0_ready : i64
    %chanOutput_760, %ready_761 = esi.wrap.vr %handshake_buffer96.out0, %handshake_buffer96.out0_valid : i64
    %handshake_buffer96.in0_ready, %handshake_buffer96.out0, %handshake_buffer96.out0_valid = hw.instance "handshake_buffer96" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_758: i64, in0_valid: %valid_759: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_761: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_762, %valid_763 = esi.unwrap.vr %chanOutput_712, %handshake_cond_br1.cond_ready : i1
    %rawOutput_764, %valid_765 = esi.unwrap.vr %chanOutput_666, %handshake_cond_br1.data_ready : i64
    %chanOutput_766, %ready_767 = esi.wrap.vr %handshake_cond_br1.outTrue, %handshake_cond_br1.outTrue_valid : i64
    %chanOutput_768, %ready_769 = esi.wrap.vr %handshake_cond_br1.outFalse, %handshake_cond_br1.outFalse_valid : i64
    %handshake_cond_br1.cond_ready, %handshake_cond_br1.data_ready, %handshake_cond_br1.outTrue, %handshake_cond_br1.outTrue_valid, %handshake_cond_br1.outFalse, %handshake_cond_br1.outFalse_valid = hw.instance "handshake_cond_br1" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %rawOutput_762: i1, cond_valid: %valid_763: i1, data: %rawOutput_764: i64, data_valid: %valid_765: i1, outTrue_ready: %ready_767: i1, outFalse_ready: %ready_769: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %rawOutput_770, %valid_771 = esi.unwrap.vr %chanOutput_766, %handshake_buffer97.in0_ready : i64
    %chanOutput_772, %ready_773 = esi.wrap.vr %handshake_buffer97.out0, %handshake_buffer97.out0_valid : i64
    %handshake_buffer97.in0_ready, %handshake_buffer97.out0, %handshake_buffer97.out0_valid = hw.instance "handshake_buffer97" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_770: i64, in0_valid: %valid_771: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_773: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_774, %valid_775 = esi.unwrap.vr %chanOutput_768, %handshake_sink1.in0_ready : i64
    %handshake_sink1.in0_ready = hw.instance "handshake_sink1" @handshake_sink_in_ui64(in0: %rawOutput_774: i64, in0_valid: %valid_775: i1) -> (in0_ready: i1)
    %rawOutput_776, %valid_777 = esi.unwrap.vr %chanOutput_716, %handshake_cond_br2.cond_ready : i1
    %rawOutput_778, %valid_779 = esi.unwrap.vr %chanOutput_682, %handshake_cond_br2.data_ready : i64
    %chanOutput_780, %ready_781 = esi.wrap.vr %handshake_cond_br2.outTrue, %handshake_cond_br2.outTrue_valid : i64
    %chanOutput_782, %ready_783 = esi.wrap.vr %handshake_cond_br2.outFalse, %handshake_cond_br2.outFalse_valid : i64
    %handshake_cond_br2.cond_ready, %handshake_cond_br2.data_ready, %handshake_cond_br2.outTrue, %handshake_cond_br2.outTrue_valid, %handshake_cond_br2.outFalse, %handshake_cond_br2.outFalse_valid = hw.instance "handshake_cond_br2" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %rawOutput_776: i1, cond_valid: %valid_777: i1, data: %rawOutput_778: i64, data_valid: %valid_779: i1, outTrue_ready: %ready_781: i1, outFalse_ready: %ready_783: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %rawOutput_784, %valid_785 = esi.unwrap.vr %chanOutput_780, %handshake_buffer98.in0_ready : i64
    %chanOutput_786, %ready_787 = esi.wrap.vr %handshake_buffer98.out0, %handshake_buffer98.out0_valid : i64
    %handshake_buffer98.in0_ready, %handshake_buffer98.out0, %handshake_buffer98.out0_valid = hw.instance "handshake_buffer98" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_784: i64, in0_valid: %valid_785: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_787: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_788, %valid_789 = esi.unwrap.vr %chanOutput_782, %handshake_sink2.in0_ready : i64
    %handshake_sink2.in0_ready = hw.instance "handshake_sink2" @handshake_sink_in_ui64(in0: %rawOutput_788: i64, in0_valid: %valid_789: i1) -> (in0_ready: i1)
    %rawOutput_790, %valid_791 = esi.unwrap.vr %chanOutput_786, %handshake_fork16.in0_ready : i64
    %chanOutput_792, %ready_793 = esi.wrap.vr %handshake_fork16.out0, %handshake_fork16.out0_valid : i64
    %chanOutput_794, %ready_795 = esi.wrap.vr %handshake_fork16.out1, %handshake_fork16.out1_valid : i64
    %handshake_fork16.in0_ready, %handshake_fork16.out0, %handshake_fork16.out0_valid, %handshake_fork16.out1, %handshake_fork16.out1_valid = hw.instance "handshake_fork16" @handshake_fork_in_ui64_out_ui64_ui64(in0: %rawOutput_790: i64, in0_valid: %valid_791: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_793: i1, out1_ready: %ready_795: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %rawOutput_796, %valid_797 = esi.unwrap.vr %chanOutput_794, %handshake_buffer99.in0_ready : i64
    %chanOutput_798, %ready_799 = esi.wrap.vr %handshake_buffer99.out0, %handshake_buffer99.out0_valid : i64
    %handshake_buffer99.in0_ready, %handshake_buffer99.out0, %handshake_buffer99.out0_valid = hw.instance "handshake_buffer99" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_796: i64, in0_valid: %valid_797: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_799: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_800, %valid_801 = esi.unwrap.vr %chanOutput_792, %handshake_buffer100.in0_ready : i64
    %chanOutput_802, %ready_803 = esi.wrap.vr %handshake_buffer100.out0, %handshake_buffer100.out0_valid : i64
    %handshake_buffer100.in0_ready, %handshake_buffer100.out0, %handshake_buffer100.out0_valid = hw.instance "handshake_buffer100" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_800: i64, in0_valid: %valid_801: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_803: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_804, %valid_805 = esi.unwrap.vr %chanOutput_720, %handshake_cond_br3.cond_ready : i1
    %rawOutput_806, %valid_807 = esi.unwrap.vr %chanOutput_618, %handshake_cond_br3.data_ready : i0
    %chanOutput_808, %ready_809 = esi.wrap.vr %handshake_cond_br3.outTrue, %handshake_cond_br3.outTrue_valid : i0
    %chanOutput_810, %ready_811 = esi.wrap.vr %handshake_cond_br3.outFalse, %handshake_cond_br3.outFalse_valid : i0
    %handshake_cond_br3.cond_ready, %handshake_cond_br3.data_ready, %handshake_cond_br3.outTrue, %handshake_cond_br3.outTrue_valid, %handshake_cond_br3.outFalse, %handshake_cond_br3.outFalse_valid = hw.instance "handshake_cond_br3" @handshake_cond_br_in_ui1_2ins_2outs_ctrl(cond: %rawOutput_804: i1, cond_valid: %valid_805: i1, data: %rawOutput_806: i0, data_valid: %valid_807: i1, outTrue_ready: %ready_809: i1, outFalse_ready: %ready_811: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i0, outTrue_valid: i1, outFalse: i0, outFalse_valid: i1)
    %rawOutput_812, %valid_813 = esi.unwrap.vr %chanOutput_810, %handshake_buffer101.in0_ready : i0
    %chanOutput_814, %ready_815 = esi.wrap.vr %handshake_buffer101.out0, %handshake_buffer101.out0_valid : i0
    %handshake_buffer101.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid = hw.instance "handshake_buffer101" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_812: i0, in0_valid: %valid_813: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_815: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_816, %valid_817 = esi.unwrap.vr %chanOutput_808, %handshake_buffer102.in0_ready : i0
    %chanOutput_818, %ready_819 = esi.wrap.vr %handshake_buffer102.out0, %handshake_buffer102.out0_valid : i0
    %handshake_buffer102.in0_ready, %handshake_buffer102.out0, %handshake_buffer102.out0_valid = hw.instance "handshake_buffer102" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_816: i0, in0_valid: %valid_817: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_819: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_820, %valid_821 = esi.unwrap.vr %chanOutput_818, %handshake_fork17.in0_ready : i0
    %chanOutput_822, %ready_823 = esi.wrap.vr %handshake_fork17.out0, %handshake_fork17.out0_valid : i0
    %chanOutput_824, %ready_825 = esi.wrap.vr %handshake_fork17.out1, %handshake_fork17.out1_valid : i0
    %chanOutput_826, %ready_827 = esi.wrap.vr %handshake_fork17.out2, %handshake_fork17.out2_valid : i0
    %chanOutput_828, %ready_829 = esi.wrap.vr %handshake_fork17.out3, %handshake_fork17.out3_valid : i0
    %handshake_fork17.in0_ready, %handshake_fork17.out0, %handshake_fork17.out0_valid, %handshake_fork17.out1, %handshake_fork17.out1_valid, %handshake_fork17.out2, %handshake_fork17.out2_valid, %handshake_fork17.out3, %handshake_fork17.out3_valid = hw.instance "handshake_fork17" @handshake_fork_1ins_4outs_ctrl(in0: %rawOutput_820: i0, in0_valid: %valid_821: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_823: i1, out1_ready: %ready_825: i1, out2_ready: %ready_827: i1, out3_ready: %ready_829: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1)
    %rawOutput_830, %valid_831 = esi.unwrap.vr %chanOutput_828, %handshake_buffer103.in0_ready : i0
    %chanOutput_832, %ready_833 = esi.wrap.vr %handshake_buffer103.out0, %handshake_buffer103.out0_valid : i0
    %handshake_buffer103.in0_ready, %handshake_buffer103.out0, %handshake_buffer103.out0_valid = hw.instance "handshake_buffer103" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_830: i0, in0_valid: %valid_831: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_833: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_834, %valid_835 = esi.unwrap.vr %chanOutput_826, %handshake_buffer104.in0_ready : i0
    %chanOutput_836, %ready_837 = esi.wrap.vr %handshake_buffer104.out0, %handshake_buffer104.out0_valid : i0
    %handshake_buffer104.in0_ready, %handshake_buffer104.out0, %handshake_buffer104.out0_valid = hw.instance "handshake_buffer104" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_834: i0, in0_valid: %valid_835: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_837: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_838, %valid_839 = esi.unwrap.vr %chanOutput_824, %handshake_buffer105.in0_ready : i0
    %chanOutput_840, %ready_841 = esi.wrap.vr %handshake_buffer105.out0, %handshake_buffer105.out0_valid : i0
    %handshake_buffer105.in0_ready, %handshake_buffer105.out0, %handshake_buffer105.out0_valid = hw.instance "handshake_buffer105" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_838: i0, in0_valid: %valid_839: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_841: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_842, %valid_843 = esi.unwrap.vr %chanOutput_822, %handshake_buffer106.in0_ready : i0
    %chanOutput_844, %ready_845 = esi.wrap.vr %handshake_buffer106.out0, %handshake_buffer106.out0_valid : i0
    %handshake_buffer106.in0_ready, %handshake_buffer106.out0, %handshake_buffer106.out0_valid = hw.instance "handshake_buffer106" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_842: i0, in0_valid: %valid_843: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_845: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_846, %valid_847 = esi.unwrap.vr %chanOutput_840, %handshake_join5.in0_ready : i0
    %rawOutput_848, %valid_849 = esi.unwrap.vr %chanOutput_202, %handshake_join5.in1_ready : i0
    %rawOutput_850, %valid_851 = esi.unwrap.vr %chanOutput_124, %handshake_join5.in2_ready : i0
    %rawOutput_852, %valid_853 = esi.unwrap.vr %chanOutput_96, %handshake_join5.in3_ready : i0
    %chanOutput_854, %ready_855 = esi.wrap.vr %handshake_join5.out0, %handshake_join5.out0_valid : i0
    %handshake_join5.in0_ready, %handshake_join5.in1_ready, %handshake_join5.in2_ready, %handshake_join5.in3_ready, %handshake_join5.out0, %handshake_join5.out0_valid = hw.instance "handshake_join5" @handshake_join_4ins_1outs_ctrl(in0: %rawOutput_846: i0, in0_valid: %valid_847: i1, in1: %rawOutput_848: i0, in1_valid: %valid_849: i1, in2: %rawOutput_850: i0, in2_valid: %valid_851: i1, in3: %rawOutput_852: i0, in3_valid: %valid_853: i1, out0_ready: %ready_855: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_856, %valid_857 = esi.unwrap.vr %chanOutput_854, %handshake_buffer107.in0_ready : i0
    %chanOutput_858, %ready_859 = esi.wrap.vr %handshake_buffer107.out0, %handshake_buffer107.out0_valid : i0
    %handshake_buffer107.in0_ready, %handshake_buffer107.out0, %handshake_buffer107.out0_valid = hw.instance "handshake_buffer107" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_856: i0, in0_valid: %valid_857: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_859: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_860, %valid_861 = esi.unwrap.vr %chanOutput_756, %handshake_load0.addrIn0_ready : i64
    %rawOutput_862, %valid_863 = esi.unwrap.vr %chanOutput_218, %handshake_load0.dataFromMem_ready : i64
    %rawOutput_864, %valid_865 = esi.unwrap.vr %chanOutput_832, %handshake_load0.ctrl_ready : i0
    %chanOutput_866, %ready_867 = esi.wrap.vr %handshake_load0.dataOut, %handshake_load0.dataOut_valid : i64
    %chanOutput_868, %ready_869 = esi.wrap.vr %handshake_load0.addrOut0, %handshake_load0.addrOut0_valid : i64
    %handshake_load0.addrIn0_ready, %handshake_load0.dataFromMem_ready, %handshake_load0.ctrl_ready, %handshake_load0.dataOut, %handshake_load0.dataOut_valid, %handshake_load0.addrOut0, %handshake_load0.addrOut0_valid = hw.instance "handshake_load0" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %rawOutput_860: i64, addrIn0_valid: %valid_861: i1, dataFromMem: %rawOutput_862: i64, dataFromMem_valid: %valid_863: i1, ctrl: %rawOutput_864: i0, ctrl_valid: %valid_865: i1, dataOut_ready: %ready_867: i1, addrOut0_ready: %ready_869: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %rawOutput_870, %valid_871 = esi.unwrap.vr %chanOutput_868, %handshake_buffer108.in0_ready : i64
    %chanOutput_872, %ready_873 = esi.wrap.vr %handshake_buffer108.out0, %handshake_buffer108.out0_valid : i64
    %handshake_buffer108.in0_ready, %handshake_buffer108.out0, %handshake_buffer108.out0_valid = hw.instance "handshake_buffer108" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_870: i64, in0_valid: %valid_871: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_873: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_874, %valid_875 = esi.unwrap.vr %chanOutput_866, %handshake_buffer109.in0_ready : i64
    %chanOutput_876, %ready_877 = esi.wrap.vr %handshake_buffer109.out0, %handshake_buffer109.out0_valid : i64
    %handshake_buffer109.in0_ready, %handshake_buffer109.out0, %handshake_buffer109.out0_valid = hw.instance "handshake_buffer109" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_874: i64, in0_valid: %valid_875: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_877: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_878, %valid_879 = esi.unwrap.vr %chanOutput_752, %handshake_load1.addrIn0_ready : i64
    %rawOutput_880, %valid_881 = esi.unwrap.vr %chanOutput_140, %handshake_load1.dataFromMem_ready : i64
    %rawOutput_882, %valid_883 = esi.unwrap.vr %chanOutput_836, %handshake_load1.ctrl_ready : i0
    %chanOutput_884, %ready_885 = esi.wrap.vr %handshake_load1.dataOut, %handshake_load1.dataOut_valid : i64
    %chanOutput_886, %ready_887 = esi.wrap.vr %handshake_load1.addrOut0, %handshake_load1.addrOut0_valid : i64
    %handshake_load1.addrIn0_ready, %handshake_load1.dataFromMem_ready, %handshake_load1.ctrl_ready, %handshake_load1.dataOut, %handshake_load1.dataOut_valid, %handshake_load1.addrOut0, %handshake_load1.addrOut0_valid = hw.instance "handshake_load1" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %rawOutput_878: i64, addrIn0_valid: %valid_879: i1, dataFromMem: %rawOutput_880: i64, dataFromMem_valid: %valid_881: i1, ctrl: %rawOutput_882: i0, ctrl_valid: %valid_883: i1, dataOut_ready: %ready_885: i1, addrOut0_ready: %ready_887: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %rawOutput_888, %valid_889 = esi.unwrap.vr %chanOutput_886, %handshake_buffer110.in0_ready : i64
    %chanOutput_890, %ready_891 = esi.wrap.vr %handshake_buffer110.out0, %handshake_buffer110.out0_valid : i64
    %handshake_buffer110.in0_ready, %handshake_buffer110.out0, %handshake_buffer110.out0_valid = hw.instance "handshake_buffer110" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_888: i64, in0_valid: %valid_889: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_891: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_892, %valid_893 = esi.unwrap.vr %chanOutput_884, %handshake_buffer111.in0_ready : i64
    %chanOutput_894, %ready_895 = esi.wrap.vr %handshake_buffer111.out0, %handshake_buffer111.out0_valid : i64
    %handshake_buffer111.in0_ready, %handshake_buffer111.out0, %handshake_buffer111.out0_valid = hw.instance "handshake_buffer111" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_892: i64, in0_valid: %valid_893: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_895: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_896, %valid_897 = esi.unwrap.vr %chanOutput_876, %arith_addi0.in0_ready : i64
    %rawOutput_898, %valid_899 = esi.unwrap.vr %chanOutput_894, %arith_addi0.in1_ready : i64
    %chanOutput_900, %ready_901 = esi.wrap.vr %arith_addi0.out0, %arith_addi0.out0_valid : i64
    %arith_addi0.in0_ready, %arith_addi0.in1_ready, %arith_addi0.out0, %arith_addi0.out0_valid = hw.instance "arith_addi0" @arith_addi_in_ui64_ui64_out_ui64(in0: %rawOutput_896: i64, in0_valid: %valid_897: i1, in1: %rawOutput_898: i64, in1_valid: %valid_899: i1, out0_ready: %ready_901: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_902, %valid_903 = esi.unwrap.vr %chanOutput_900, %handshake_buffer112.in0_ready : i64
    %chanOutput_904, %ready_905 = esi.wrap.vr %handshake_buffer112.out0, %handshake_buffer112.out0_valid : i64
    %handshake_buffer112.in0_ready, %handshake_buffer112.out0, %handshake_buffer112.out0_valid = hw.instance "handshake_buffer112" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_902: i64, in0_valid: %valid_903: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_905: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_906, %valid_907 = esi.unwrap.vr %chanOutput_748, %handshake_store6.addrIn0_ready : i64
    %rawOutput_908, %valid_909 = esi.unwrap.vr %chanOutput_904, %handshake_store6.dataIn_ready : i64
    %rawOutput_910, %valid_911 = esi.unwrap.vr %chanOutput_844, %handshake_store6.ctrl_ready : i0
    %chanOutput_912, %ready_913 = esi.wrap.vr %handshake_store6.dataToMem, %handshake_store6.dataToMem_valid : i64
    %chanOutput_914, %ready_915 = esi.wrap.vr %handshake_store6.addrOut0, %handshake_store6.addrOut0_valid : i64
    %handshake_store6.addrIn0_ready, %handshake_store6.dataIn_ready, %handshake_store6.ctrl_ready, %handshake_store6.dataToMem, %handshake_store6.dataToMem_valid, %handshake_store6.addrOut0, %handshake_store6.addrOut0_valid = hw.instance "handshake_store6" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %rawOutput_906: i64, addrIn0_valid: %valid_907: i1, dataIn: %rawOutput_908: i64, dataIn_valid: %valid_909: i1, ctrl: %rawOutput_910: i0, ctrl_valid: %valid_911: i1, dataToMem_ready: %ready_913: i1, addrOut0_ready: %ready_915: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %rawOutput_916, %valid_917 = esi.unwrap.vr %chanOutput_914, %handshake_buffer113.in0_ready : i64
    %chanOutput_918, %ready_919 = esi.wrap.vr %handshake_buffer113.out0, %handshake_buffer113.out0_valid : i64
    %handshake_buffer113.in0_ready, %handshake_buffer113.out0, %handshake_buffer113.out0_valid = hw.instance "handshake_buffer113" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_916: i64, in0_valid: %valid_917: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_919: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_920, %valid_921 = esi.unwrap.vr %chanOutput_912, %handshake_buffer114.in0_ready : i64
    %chanOutput_922, %ready_923 = esi.wrap.vr %handshake_buffer114.out0, %handshake_buffer114.out0_valid : i64
    %handshake_buffer114.in0_ready, %handshake_buffer114.out0, %handshake_buffer114.out0_valid = hw.instance "handshake_buffer114" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_920: i64, in0_valid: %valid_921: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_923: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_924, %valid_925 = esi.unwrap.vr %chanOutput_760, %arith_addi1.in0_ready : i64
    %rawOutput_926, %valid_927 = esi.unwrap.vr %chanOutput_798, %arith_addi1.in1_ready : i64
    %chanOutput_928, %ready_929 = esi.wrap.vr %arith_addi1.out0, %arith_addi1.out0_valid : i64
    %arith_addi1.in0_ready, %arith_addi1.in1_ready, %arith_addi1.out0, %arith_addi1.out0_valid = hw.instance "arith_addi1" @arith_addi_in_ui64_ui64_out_ui64(in0: %rawOutput_924: i64, in0_valid: %valid_925: i1, in1: %rawOutput_926: i64, in1_valid: %valid_927: i1, out0_ready: %ready_929: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_930, %valid_931 = esi.unwrap.vr %chanOutput_928, %handshake_buffer115.in0_ready : i64
    %chanOutput_932, %ready_933 = esi.wrap.vr %handshake_buffer115.out0, %handshake_buffer115.out0_valid : i64
    %handshake_buffer115.in0_ready, %handshake_buffer115.out0, %handshake_buffer115.out0_valid = hw.instance "handshake_buffer115" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_930: i64, in0_valid: %valid_931: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_933: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_934, %valid_935 = esi.unwrap.vr %chanOutput_814, %out0_ready : i0
    hw.output %ready, %rawOutput_934, %valid_935 : i1, i0, i1
  }
}


// -----// IR Dump After LowerESIToPhysical (lower-esi-to-physical) //----- //
module {
  hw.module @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i0
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %1 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %27, %19 : i0
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %valid, %valid0_reg : i1
    %3 = comb.mux %1, %rawOutput, %data0_reg : i0
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %c0_i0 : i0  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %16, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %16, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %14, %clock reset %reset, %c0_i0 : i0  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i0
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i0
    %14 = comb.mux %9, %c0_i0, %13 : i0
    %valid1_reg = seq.compreg sym @valid1_reg %17, %clock reset %reset, %false : i1  
    %15 = comb.xor %valid1_reg, %true : i1
    %16 = comb.or %15, %20 : i1
    %17 = comb.mux %16, %4, %valid1_reg : i1
    %18 = comb.mux %16, %12, %data1_reg : i0
    %data1_reg = seq.compreg sym @data1_reg %18, %clock reset %reset, %c0_i0 : i0  
    %ready1_reg = seq.compreg sym @ready1_reg %26, %clock reset %reset, %false : i1  
    %19 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
    %20 = comb.xor %ready1_reg, %true : i1
    %21 = comb.xor %ready_1, %true : i1
    %22 = comb.and %21, %20 : i1
    %23 = comb.mux %22, %valid1_reg, %ready1_reg : i1
    %24 = comb.and %ready_1, %ready1_reg : i1
    %25 = comb.xor %24, %true : i1
    %26 = comb.and %25, %23 : i1
    %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %29, %clock reset %reset, %c0_i0 : i0  
    %27 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i0
    %28 = comb.mux %22, %data1_reg, %ctrl_data1_reg : i0
    %29 = comb.mux %24, %c0_i0, %28 : i0
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput_0, %out0_ready : i0
    hw.output %ready, %rawOutput_2, %valid_3 : i1, i0, i1
  }
  hw.module @handshake_fork_1ins_14outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, in %out5_ready : i1, in %out6_ready : i1, in %out7_ready : i1, in %out8_ready : i1, in %out9_ready : i1, in %out10_ready : i1, in %out11_ready : i1, in %out12_ready : i1, in %out13_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1, out out4 : i0, out out4_valid : i1, out out5 : i0, out out5_valid : i1, out out6 : i0, out out6_valid : i1, out out7 : i0, out out7_valid : i1, out out8 : i0, out out8_valid : i1, out out9 : i0, out out9_valid : i1, out out10 : i0, out out10_valid : i1, out out11 : i0, out out11_valid : i1, out out12 : i0, out out12_valid : i1, out out13 : i0, out out13_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i0
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %84 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %3 : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %9 : i0
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %15 : i0
    %chanOutput_6, %ready_7 = esi.wrap.vr %rawOutput, %21 : i0
    %chanOutput_8, %ready_9 = esi.wrap.vr %rawOutput, %27 : i0
    %chanOutput_10, %ready_11 = esi.wrap.vr %rawOutput, %33 : i0
    %chanOutput_12, %ready_13 = esi.wrap.vr %rawOutput, %39 : i0
    %chanOutput_14, %ready_15 = esi.wrap.vr %rawOutput, %45 : i0
    %chanOutput_16, %ready_17 = esi.wrap.vr %rawOutput, %51 : i0
    %chanOutput_18, %ready_19 = esi.wrap.vr %rawOutput, %57 : i0
    %chanOutput_20, %ready_21 = esi.wrap.vr %rawOutput, %63 : i0
    %chanOutput_22, %ready_23 = esi.wrap.vr %rawOutput, %69 : i0
    %chanOutput_24, %ready_25 = esi.wrap.vr %rawOutput, %75 : i0
    %chanOutput_26, %ready_27 = esi.wrap.vr %rawOutput, %81 : i0
    %0 = comb.xor %84, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready_1, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %84, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_3, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %84, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_5, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %84, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %valid : i1
    %22 = comb.and %ready_7, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.xor %84, %true : i1
    %25 = comb.and %29, %24 : i1
    %emitted_4 = seq.compreg sym @emitted_4 %25, %clock reset %reset, %false : i1  
    %26 = comb.xor %emitted_4, %true : i1
    %27 = comb.and %26, %valid : i1
    %28 = comb.and %ready_9, %27 : i1
    %29 = comb.or %28, %emitted_4 {sv.namehint = "done4"} : i1
    %30 = comb.xor %84, %true : i1
    %31 = comb.and %35, %30 : i1
    %emitted_5 = seq.compreg sym @emitted_5 %31, %clock reset %reset, %false : i1  
    %32 = comb.xor %emitted_5, %true : i1
    %33 = comb.and %32, %valid : i1
    %34 = comb.and %ready_11, %33 : i1
    %35 = comb.or %34, %emitted_5 {sv.namehint = "done5"} : i1
    %36 = comb.xor %84, %true : i1
    %37 = comb.and %41, %36 : i1
    %emitted_6 = seq.compreg sym @emitted_6 %37, %clock reset %reset, %false : i1  
    %38 = comb.xor %emitted_6, %true : i1
    %39 = comb.and %38, %valid : i1
    %40 = comb.and %ready_13, %39 : i1
    %41 = comb.or %40, %emitted_6 {sv.namehint = "done6"} : i1
    %42 = comb.xor %84, %true : i1
    %43 = comb.and %47, %42 : i1
    %emitted_7 = seq.compreg sym @emitted_7 %43, %clock reset %reset, %false : i1  
    %44 = comb.xor %emitted_7, %true : i1
    %45 = comb.and %44, %valid : i1
    %46 = comb.and %ready_15, %45 : i1
    %47 = comb.or %46, %emitted_7 {sv.namehint = "done7"} : i1
    %48 = comb.xor %84, %true : i1
    %49 = comb.and %53, %48 : i1
    %emitted_8 = seq.compreg sym @emitted_8 %49, %clock reset %reset, %false : i1  
    %50 = comb.xor %emitted_8, %true : i1
    %51 = comb.and %50, %valid : i1
    %52 = comb.and %ready_17, %51 : i1
    %53 = comb.or %52, %emitted_8 {sv.namehint = "done8"} : i1
    %54 = comb.xor %84, %true : i1
    %55 = comb.and %59, %54 : i1
    %emitted_9 = seq.compreg sym @emitted_9 %55, %clock reset %reset, %false : i1  
    %56 = comb.xor %emitted_9, %true : i1
    %57 = comb.and %56, %valid : i1
    %58 = comb.and %ready_19, %57 : i1
    %59 = comb.or %58, %emitted_9 {sv.namehint = "done9"} : i1
    %60 = comb.xor %84, %true : i1
    %61 = comb.and %65, %60 : i1
    %emitted_10 = seq.compreg sym @emitted_10 %61, %clock reset %reset, %false : i1  
    %62 = comb.xor %emitted_10, %true : i1
    %63 = comb.and %62, %valid : i1
    %64 = comb.and %ready_21, %63 : i1
    %65 = comb.or %64, %emitted_10 {sv.namehint = "done10"} : i1
    %66 = comb.xor %84, %true : i1
    %67 = comb.and %71, %66 : i1
    %emitted_11 = seq.compreg sym @emitted_11 %67, %clock reset %reset, %false : i1  
    %68 = comb.xor %emitted_11, %true : i1
    %69 = comb.and %68, %valid : i1
    %70 = comb.and %ready_23, %69 : i1
    %71 = comb.or %70, %emitted_11 {sv.namehint = "done11"} : i1
    %72 = comb.xor %84, %true : i1
    %73 = comb.and %77, %72 : i1
    %emitted_12 = seq.compreg sym @emitted_12 %73, %clock reset %reset, %false : i1  
    %74 = comb.xor %emitted_12, %true : i1
    %75 = comb.and %74, %valid : i1
    %76 = comb.and %ready_25, %75 : i1
    %77 = comb.or %76, %emitted_12 {sv.namehint = "done12"} : i1
    %78 = comb.xor %84, %true : i1
    %79 = comb.and %83, %78 : i1
    %emitted_13 = seq.compreg sym @emitted_13 %79, %clock reset %reset, %false : i1  
    %80 = comb.xor %emitted_13, %true : i1
    %81 = comb.and %80, %valid : i1
    %82 = comb.and %ready_27, %81 : i1
    %83 = comb.or %82, %emitted_13 {sv.namehint = "done13"} : i1
    %84 = comb.and %5, %11, %17, %23, %29, %35, %41, %47, %53, %59, %65, %71, %77, %83 {sv.namehint = "allDone"} : i1
    %rawOutput_28, %valid_29 = esi.unwrap.vr %chanOutput_0, %out0_ready : i0
    %rawOutput_30, %valid_31 = esi.unwrap.vr %chanOutput_2, %out1_ready : i0
    %rawOutput_32, %valid_33 = esi.unwrap.vr %chanOutput_4, %out2_ready : i0
    %rawOutput_34, %valid_35 = esi.unwrap.vr %chanOutput_6, %out3_ready : i0
    %rawOutput_36, %valid_37 = esi.unwrap.vr %chanOutput_8, %out4_ready : i0
    %rawOutput_38, %valid_39 = esi.unwrap.vr %chanOutput_10, %out5_ready : i0
    %rawOutput_40, %valid_41 = esi.unwrap.vr %chanOutput_12, %out6_ready : i0
    %rawOutput_42, %valid_43 = esi.unwrap.vr %chanOutput_14, %out7_ready : i0
    %rawOutput_44, %valid_45 = esi.unwrap.vr %chanOutput_16, %out8_ready : i0
    %rawOutput_46, %valid_47 = esi.unwrap.vr %chanOutput_18, %out9_ready : i0
    %rawOutput_48, %valid_49 = esi.unwrap.vr %chanOutput_20, %out10_ready : i0
    %rawOutput_50, %valid_51 = esi.unwrap.vr %chanOutput_22, %out11_ready : i0
    %rawOutput_52, %valid_53 = esi.unwrap.vr %chanOutput_24, %out12_ready : i0
    %rawOutput_54, %valid_55 = esi.unwrap.vr %chanOutput_26, %out13_ready : i0
    hw.output %ready, %rawOutput_28, %valid_29, %rawOutput_30, %valid_31, %rawOutput_32, %valid_33, %rawOutput_34, %valid_35, %rawOutput_36, %valid_37, %rawOutput_38, %valid_39, %rawOutput_40, %valid_41, %rawOutput_42, %valid_43, %rawOutput_44, %valid_45, %rawOutput_46, %valid_47, %rawOutput_48, %valid_49, %rawOutput_50, %valid_51, %rawOutput_52, %valid_53, %rawOutput_54, %valid_55 : i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id2(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %stDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stDone0 : i0, out stDone0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %stAddr0, %stAddr0_valid : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %stData0, %stData0_valid : i64
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_0, %2 : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput, %2 : i64
    %chanOutput_4, %ready_5 = esi.wrap.vr %c0_i0, %writeValidBuffer : i0
    %_handshake_memory_2 = seq.hlmem @_handshake_memory_2 %clock, %reset : <3xi64>
    %writeValidBuffer = seq.compreg sym @writeValidBuffer %4, %clock reset %reset, %false : i1  
    %0 = comb.and %ready_5, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
    %1 = comb.xor %writeValidBuffer, %true : i1
    %2 = comb.or %1, %0 {sv.namehint = "emptyOrComplete"} : i1
    %3 = comb.and %valid_3, %valid {sv.namehint = "writeValid"} : i1
    %4 = comb.mux %2, %3, %writeValidBuffer : i1
    %5 = comb.extract %rawOutput_2 from 0 : (i64) -> i2
    seq.write %_handshake_memory_2[%5] %rawOutput wren %3 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput_4, %stDone0_ready : i0
    hw.output %ready_1, %ready, %rawOutput_6, %valid_7 : i1, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id1(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %ldAddr0, %ldAddr0_valid : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %stAddr2, %stAddr2_valid : i64
    %chanOutput_2, %ready_3 = esi.wrap.vr %stData2, %stData2_valid : i64
    %chanOutput_4, %ready_5 = esi.wrap.vr %stAddr1, %stAddr1_valid : i64
    %chanOutput_6, %ready_7 = esi.wrap.vr %stData1, %stData1_valid : i64
    %chanOutput_8, %ready_9 = esi.wrap.vr %stAddr0, %stAddr0_valid : i64
    %chanOutput_10, %ready_11 = esi.wrap.vr %stData0, %stData0_valid : i64
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_10, %16 : i64
    %rawOutput_12, %valid_13 = esi.unwrap.vr %chanOutput_8, %16 : i64
    %rawOutput_14, %valid_15 = esi.unwrap.vr %chanOutput_6, %22 : i64
    %rawOutput_16, %valid_17 = esi.unwrap.vr %chanOutput_4, %22 : i64
    %rawOutput_18, %valid_19 = esi.unwrap.vr %chanOutput_2, %28 : i64
    %rawOutput_20, %valid_21 = esi.unwrap.vr %chanOutput_0, %28 : i64
    %rawOutput_22, %valid_23 = esi.unwrap.vr %chanOutput, %13 : i64
    %chanOutput_24, %ready_25 = esi.wrap.vr %_handshake_memory_1_rdata, %4 : i64
    %chanOutput_26, %ready_27 = esi.wrap.vr %c0_i0, %writeValidBuffer : i0
    %chanOutput_28, %ready_29 = esi.wrap.vr %c0_i0, %writeValidBuffer_34 : i0
    %chanOutput_30, %ready_31 = esi.wrap.vr %c0_i0, %writeValidBuffer_35 : i0
    %chanOutput_32, %ready_33 = esi.wrap.vr %c0_i0, %10 : i0
    %_handshake_memory_1 = seq.hlmem @_handshake_memory_1 %clock, %reset : <3xi64>
    %0 = comb.extract %rawOutput_22 from 0 : (i64) -> i2
    %_handshake_memory_1_rdata = seq.read %_handshake_memory_1[%0] rden %valid_23 {latency = 0 : i64} : !seq.hlmem<3xi64>
    %1 = comb.xor %13, %true : i1
    %2 = comb.and %6, %1 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %2, %clock reset %reset, %false : i1  
    %3 = comb.xor %emitted_0, %true : i1
    %4 = comb.and %3, %valid_23 : i1
    %5 = comb.and %ready_25, %4 : i1
    %6 = comb.or %5, %emitted_0 {sv.namehint = "done0"} : i1
    %7 = comb.xor %13, %true : i1
    %8 = comb.and %12, %7 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %8, %clock reset %reset, %false : i1  
    %9 = comb.xor %emitted_1, %true : i1
    %10 = comb.and %9, %valid_23 : i1
    %11 = comb.and %ready_33, %10 : i1
    %12 = comb.or %11, %emitted_1 {sv.namehint = "done1"} : i1
    %13 = comb.and %6, %12 {sv.namehint = "allDone"} : i1
    %writeValidBuffer = seq.compreg sym @writeValidBuffer %18, %clock reset %reset, %false : i1  
    %14 = comb.and %ready_27, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
    %15 = comb.xor %writeValidBuffer, %true : i1
    %16 = comb.or %15, %14 {sv.namehint = "emptyOrComplete"} : i1
    %17 = comb.and %valid_13, %valid {sv.namehint = "writeValid"} : i1
    %18 = comb.mux %16, %17, %writeValidBuffer : i1
    %19 = comb.extract %rawOutput_12 from 0 : (i64) -> i2
    seq.write %_handshake_memory_1[%19] %rawOutput wren %17 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_34 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %24, %clock reset %reset, %false : i1  
    %20 = comb.and %ready_29, %writeValidBuffer_34 {sv.namehint = "storeCompleted"} : i1
    %21 = comb.xor %writeValidBuffer_34, %true : i1
    %22 = comb.or %21, %20 {sv.namehint = "emptyOrComplete"} : i1
    %23 = comb.and %valid_17, %valid_15 {sv.namehint = "writeValid"} : i1
    %24 = comb.mux %22, %23, %writeValidBuffer_34 : i1
    %25 = comb.extract %rawOutput_16 from 0 : (i64) -> i2
    seq.write %_handshake_memory_1[%25] %rawOutput_14 wren %23 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_35 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %30, %clock reset %reset, %false : i1  
    %26 = comb.and %ready_31, %writeValidBuffer_35 {sv.namehint = "storeCompleted"} : i1
    %27 = comb.xor %writeValidBuffer_35, %true : i1
    %28 = comb.or %27, %26 {sv.namehint = "emptyOrComplete"} : i1
    %29 = comb.and %valid_21, %valid_19 {sv.namehint = "writeValid"} : i1
    %30 = comb.mux %28, %29, %writeValidBuffer_35 : i1
    %31 = comb.extract %rawOutput_20 from 0 : (i64) -> i2
    seq.write %_handshake_memory_1[%31] %rawOutput_18 wren %29 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %rawOutput_36, %valid_37 = esi.unwrap.vr %chanOutput_24, %ldData0_ready : i64
    %rawOutput_38, %valid_39 = esi.unwrap.vr %chanOutput_26, %stDone0_ready : i0
    %rawOutput_40, %valid_41 = esi.unwrap.vr %chanOutput_28, %stDone1_ready : i0
    %rawOutput_42, %valid_43 = esi.unwrap.vr %chanOutput_30, %stDone2_ready : i0
    %rawOutput_44, %valid_45 = esi.unwrap.vr %chanOutput_32, %ldDone0_ready : i0
    hw.output %ready_11, %ready_9, %ready_7, %ready_5, %ready_3, %ready_1, %ready, %rawOutput_36, %valid_37, %rawOutput_38, %valid_39, %rawOutput_40, %valid_41, %rawOutput_42, %valid_43, %rawOutput_44, %valid_45 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_buffer_in_ui64_out_ui64_2slots_seq(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i64
    %true = hw.constant true
    %false = hw.constant false
    %c0_i64 = hw.constant 0 : i64
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %1 : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %27, %19 : i64
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %valid, %valid0_reg : i1
    %3 = comb.mux %1, %rawOutput, %data0_reg : i64
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %c0_i64 : i64  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %16, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %16, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %14, %clock reset %reset, %c0_i64 : i64  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i64
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i64
    %14 = comb.mux %9, %c0_i64, %13 : i64
    %valid1_reg = seq.compreg sym @valid1_reg %17, %clock reset %reset, %false : i1  
    %15 = comb.xor %valid1_reg, %true : i1
    %16 = comb.or %15, %20 : i1
    %17 = comb.mux %16, %4, %valid1_reg : i1
    %18 = comb.mux %16, %12, %data1_reg : i64
    %data1_reg = seq.compreg sym @data1_reg %18, %clock reset %reset, %c0_i64 : i64  
    %ready1_reg = seq.compreg sym @ready1_reg %26, %clock reset %reset, %false : i1  
    %19 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
    %20 = comb.xor %ready1_reg, %true : i1
    %21 = comb.xor %ready_1, %true : i1
    %22 = comb.and %21, %20 : i1
    %23 = comb.mux %22, %valid1_reg, %ready1_reg : i1
    %24 = comb.and %ready_1, %ready1_reg : i1
    %25 = comb.xor %24, %true : i1
    %26 = comb.and %25, %23 : i1
    %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %29, %clock reset %reset, %c0_i64 : i64  
    %27 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i64
    %28 = comb.mux %22, %data1_reg, %ctrl_data1_reg : i64
    %29 = comb.mux %24, %c0_i64, %28 : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput_0, %out0_ready : i64
    hw.output %ready, %rawOutput_2, %valid_3 : i1, i64, i1
  }
  hw.module @handshake_fork_1ins_2outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i0
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %12 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %3 : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %9 : i0
    %0 = comb.xor %12, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready_1, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %12, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_3, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.and %5, %11 {sv.namehint = "allDone"} : i1
    %rawOutput_4, %valid_5 = esi.unwrap.vr %chanOutput_0, %out0_ready : i0
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput_2, %out1_ready : i0
    hw.output %ready, %rawOutput_4, %valid_5, %rawOutput_6, %valid_7 : i1, i0, i1, i0, i1
  }
  hw.module @handshake_fork_1ins_3outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i0
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %18 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %3 : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %9 : i0
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %15 : i0
    %0 = comb.xor %18, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready_1, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %18, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_3, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %18, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_5, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.and %5, %11, %17 {sv.namehint = "allDone"} : i1
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput_0, %out0_ready : i0
    %rawOutput_8, %valid_9 = esi.unwrap.vr %chanOutput_2, %out1_ready : i0
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput_4, %out2_ready : i0
    hw.output %ready, %rawOutput_6, %valid_7, %rawOutput_8, %valid_9, %rawOutput_10, %valid_11 : i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id0(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %ldAddr0, %ldAddr0_valid : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %stAddr2, %stAddr2_valid : i64
    %chanOutput_2, %ready_3 = esi.wrap.vr %stData2, %stData2_valid : i64
    %chanOutput_4, %ready_5 = esi.wrap.vr %stAddr1, %stAddr1_valid : i64
    %chanOutput_6, %ready_7 = esi.wrap.vr %stData1, %stData1_valid : i64
    %chanOutput_8, %ready_9 = esi.wrap.vr %stAddr0, %stAddr0_valid : i64
    %chanOutput_10, %ready_11 = esi.wrap.vr %stData0, %stData0_valid : i64
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_10, %16 : i64
    %rawOutput_12, %valid_13 = esi.unwrap.vr %chanOutput_8, %16 : i64
    %rawOutput_14, %valid_15 = esi.unwrap.vr %chanOutput_6, %22 : i64
    %rawOutput_16, %valid_17 = esi.unwrap.vr %chanOutput_4, %22 : i64
    %rawOutput_18, %valid_19 = esi.unwrap.vr %chanOutput_2, %28 : i64
    %rawOutput_20, %valid_21 = esi.unwrap.vr %chanOutput_0, %28 : i64
    %rawOutput_22, %valid_23 = esi.unwrap.vr %chanOutput, %13 : i64
    %chanOutput_24, %ready_25 = esi.wrap.vr %_handshake_memory_0_rdata, %4 : i64
    %chanOutput_26, %ready_27 = esi.wrap.vr %c0_i0, %writeValidBuffer : i0
    %chanOutput_28, %ready_29 = esi.wrap.vr %c0_i0, %writeValidBuffer_34 : i0
    %chanOutput_30, %ready_31 = esi.wrap.vr %c0_i0, %writeValidBuffer_35 : i0
    %chanOutput_32, %ready_33 = esi.wrap.vr %c0_i0, %10 : i0
    %_handshake_memory_0 = seq.hlmem @_handshake_memory_0 %clock, %reset : <3xi64>
    %0 = comb.extract %rawOutput_22 from 0 : (i64) -> i2
    %_handshake_memory_0_rdata = seq.read %_handshake_memory_0[%0] rden %valid_23 {latency = 0 : i64} : !seq.hlmem<3xi64>
    %1 = comb.xor %13, %true : i1
    %2 = comb.and %6, %1 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %2, %clock reset %reset, %false : i1  
    %3 = comb.xor %emitted_0, %true : i1
    %4 = comb.and %3, %valid_23 : i1
    %5 = comb.and %ready_25, %4 : i1
    %6 = comb.or %5, %emitted_0 {sv.namehint = "done0"} : i1
    %7 = comb.xor %13, %true : i1
    %8 = comb.and %12, %7 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %8, %clock reset %reset, %false : i1  
    %9 = comb.xor %emitted_1, %true : i1
    %10 = comb.and %9, %valid_23 : i1
    %11 = comb.and %ready_33, %10 : i1
    %12 = comb.or %11, %emitted_1 {sv.namehint = "done1"} : i1
    %13 = comb.and %6, %12 {sv.namehint = "allDone"} : i1
    %writeValidBuffer = seq.compreg sym @writeValidBuffer %18, %clock reset %reset, %false : i1  
    %14 = comb.and %ready_27, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
    %15 = comb.xor %writeValidBuffer, %true : i1
    %16 = comb.or %15, %14 {sv.namehint = "emptyOrComplete"} : i1
    %17 = comb.and %valid_13, %valid {sv.namehint = "writeValid"} : i1
    %18 = comb.mux %16, %17, %writeValidBuffer : i1
    %19 = comb.extract %rawOutput_12 from 0 : (i64) -> i2
    seq.write %_handshake_memory_0[%19] %rawOutput wren %17 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_34 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %24, %clock reset %reset, %false : i1  
    %20 = comb.and %ready_29, %writeValidBuffer_34 {sv.namehint = "storeCompleted"} : i1
    %21 = comb.xor %writeValidBuffer_34, %true : i1
    %22 = comb.or %21, %20 {sv.namehint = "emptyOrComplete"} : i1
    %23 = comb.and %valid_17, %valid_15 {sv.namehint = "writeValid"} : i1
    %24 = comb.mux %22, %23, %writeValidBuffer_34 : i1
    %25 = comb.extract %rawOutput_16 from 0 : (i64) -> i2
    seq.write %_handshake_memory_0[%25] %rawOutput_14 wren %23 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_35 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %30, %clock reset %reset, %false : i1  
    %26 = comb.and %ready_31, %writeValidBuffer_35 {sv.namehint = "storeCompleted"} : i1
    %27 = comb.xor %writeValidBuffer_35, %true : i1
    %28 = comb.or %27, %26 {sv.namehint = "emptyOrComplete"} : i1
    %29 = comb.and %valid_21, %valid_19 {sv.namehint = "writeValid"} : i1
    %30 = comb.mux %28, %29, %writeValidBuffer_35 : i1
    %31 = comb.extract %rawOutput_20 from 0 : (i64) -> i2
    seq.write %_handshake_memory_0[%31] %rawOutput_18 wren %29 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %rawOutput_36, %valid_37 = esi.unwrap.vr %chanOutput_24, %ldData0_ready : i64
    %rawOutput_38, %valid_39 = esi.unwrap.vr %chanOutput_26, %stDone0_ready : i0
    %rawOutput_40, %valid_41 = esi.unwrap.vr %chanOutput_28, %stDone1_ready : i0
    %rawOutput_42, %valid_43 = esi.unwrap.vr %chanOutput_30, %stDone2_ready : i0
    %rawOutput_44, %valid_45 = esi.unwrap.vr %chanOutput_32, %ldDone0_ready : i0
    hw.output %ready_11, %ready_9, %ready_7, %ready_5, %ready_3, %ready_1, %ready, %rawOutput_36, %valid_37, %rawOutput_38, %valid_39, %rawOutput_40, %valid_41, %rawOutput_42, %valid_43, %rawOutput_44, %valid_45 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_join_7ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %in4 : i0, in %in4_valid : i1, in %in5 : i0, in %in5_valid : i1, in %in6 : i0, in %in6_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out in4_ready : i1, out in5_ready : i1, out in6_ready : i1, out out0 : i0, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in6, %in6_valid : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %in5, %in5_valid : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %in4, %in4_valid : i0
    %chanOutput_4, %ready_5 = esi.wrap.vr %in3, %in3_valid : i0
    %chanOutput_6, %ready_7 = esi.wrap.vr %in2, %in2_valid : i0
    %chanOutput_8, %ready_9 = esi.wrap.vr %in1, %in1_valid : i0
    %chanOutput_10, %ready_11 = esi.wrap.vr %in0, %in0_valid : i0
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_10, %1 : i0
    %rawOutput_12, %valid_13 = esi.unwrap.vr %chanOutput_8, %1 : i0
    %rawOutput_14, %valid_15 = esi.unwrap.vr %chanOutput_6, %1 : i0
    %rawOutput_16, %valid_17 = esi.unwrap.vr %chanOutput_4, %1 : i0
    %rawOutput_18, %valid_19 = esi.unwrap.vr %chanOutput_2, %1 : i0
    %rawOutput_20, %valid_21 = esi.unwrap.vr %chanOutput_0, %1 : i0
    %rawOutput_22, %valid_23 = esi.unwrap.vr %chanOutput, %1 : i0
    %chanOutput_24, %ready_25 = esi.wrap.vr %c0_i0, %0 : i0
    %0 = comb.and %valid, %valid_13, %valid_15, %valid_17, %valid_19, %valid_21, %valid_23 : i1
    %1 = comb.and %ready_25, %0 : i1
    %rawOutput_26, %valid_27 = esi.unwrap.vr %chanOutput_24, %out0_ready : i0
    hw.output %ready_11, %ready_9, %ready_7, %ready_5, %ready_3, %ready_1, %ready, %rawOutput_26, %valid_27 : i1, i1, i1, i1, i1, i1, i1, i0, i1
  }
  hw.module @handshake_constant_c3_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %ctrl, %ctrl_valid : i0
    %c3_i64 = hw.constant 3 : i64
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %ready_1 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %c3_i64, %valid : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput_0, %out0_ready : i64
    hw.output %ready, %rawOutput_2, %valid_3 : i1, i64, i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i64
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %12 : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %3 : i64
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %9 : i64
    %0 = comb.xor %12, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready_1, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %12, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_3, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.and %5, %11 {sv.namehint = "allDone"} : i1
    %rawOutput_4, %valid_5 = esi.unwrap.vr %chanOutput_0, %out0_ready : i64
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput_2, %out1_ready : i64
    hw.output %ready, %rawOutput_4, %valid_5, %rawOutput_6, %valid_7 : i1, i64, i1, i64, i1
  }
  hw.module @handshake_constant_c2_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %ctrl, %ctrl_valid : i0
    %c2_i64 = hw.constant 2 : i64
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %ready_1 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %c2_i64, %valid : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput_0, %out0_ready : i64
    hw.output %ready, %rawOutput_2, %valid_3 : i1, i64, i1
  }
  hw.module @handshake_constant_c1_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %ctrl, %ctrl_valid : i0
    %c1_i64 = hw.constant 1 : i64
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %ready_1 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %c1_i64, %valid : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput_0, %out0_ready : i64
    hw.output %ready, %rawOutput_2, %valid_3 : i1, i64, i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i64
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %18 : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %3 : i64
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %9 : i64
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %15 : i64
    %0 = comb.xor %18, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready_1, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %18, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_3, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %18, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_5, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.and %5, %11, %17 {sv.namehint = "allDone"} : i1
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput_0, %out0_ready : i64
    %rawOutput_8, %valid_9 = esi.unwrap.vr %chanOutput_2, %out1_ready : i64
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput_4, %out2_ready : i64
    hw.output %ready, %rawOutput_6, %valid_7, %rawOutput_8, %valid_9, %rawOutput_10, %valid_11 : i1, i64, i1, i64, i1, i64, i1
  }
  hw.module @handshake_constant_c0_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %ctrl, %ctrl_valid : i0
    %c0_i64 = hw.constant 0 : i64
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %ready_1 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %c0_i64, %valid : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput_0, %out0_ready : i64
    hw.output %ready, %rawOutput_2, %valid_3 : i1, i64, i1
  }
  hw.module @handshake_store_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataIn : i64, in %dataIn_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataToMem_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataIn_ready : i1, out ctrl_ready : i1, out dataToMem : i64, out dataToMem_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %ctrl, %ctrl_valid : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %dataIn, %dataIn_valid : i64
    %chanOutput_2, %ready_3 = esi.wrap.vr %addrIn0, %addrIn0_valid : i64
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_2, %1 : i64
    %rawOutput_4, %valid_5 = esi.unwrap.vr %chanOutput_0, %1 : i64
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput, %1 : i0
    %chanOutput_8, %ready_9 = esi.wrap.vr %rawOutput_4, %0 : i64
    %chanOutput_10, %ready_11 = esi.wrap.vr %rawOutput, %0 : i64
    %0 = comb.and %valid_5, %valid, %valid_7 : i1
    %1 = comb.and %ready_9, %ready_11, %0 : i1
    %rawOutput_12, %valid_13 = esi.unwrap.vr %chanOutput_8, %dataToMem_ready : i64
    %rawOutput_14, %valid_15 = esi.unwrap.vr %chanOutput_10, %addrOut0_ready : i64
    hw.output %ready_3, %ready_1, %ready, %rawOutput_12, %valid_13, %rawOutput_14, %valid_15 : i1, i1, i1, i64, i1, i64, i1
  }
  hw.module @handshake_join_2ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in1, %in1_valid : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %in0, %in0_valid : i0
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_0, %1 : i0
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput, %1 : i0
    %chanOutput_4, %ready_5 = esi.wrap.vr %c0_i0, %0 : i0
    %0 = comb.and %valid, %valid_3 : i1
    %1 = comb.and %ready_5, %0 : i1
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput_4, %out0_ready : i0
    hw.output %ready_1, %ready, %rawOutput_6, %valid_7 : i1, i1, i0, i1
  }
  hw.module @handshake_join_3ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out out0 : i0, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in2, %in2_valid : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %in1, %in1_valid : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %in0, %in0_valid : i0
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_2, %1 : i0
    %rawOutput_4, %valid_5 = esi.unwrap.vr %chanOutput_0, %1 : i0
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput, %1 : i0
    %chanOutput_8, %ready_9 = esi.wrap.vr %c0_i0, %0 : i0
    %0 = comb.and %valid, %valid_5, %valid_7 : i1
    %1 = comb.and %ready_9, %0 : i1
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput_8, %out0_ready : i0
    hw.output %ready_3, %ready_1, %ready, %rawOutput_10, %valid_11 : i1, i1, i1, i0, i1
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i1
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %1 : i1
    %chanOutput_0, %ready_1 = esi.wrap.vr %12, %4 : i1
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %true : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %valid, %valid0_reg : i1
    %3 = comb.mux %1, %rawOutput, %data0_reg : i1
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %false : i1  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %ready_1, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %ready_1, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %15, %clock reset %reset, %false : i1  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i1
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i1
    %14 = comb.xor %9, %true : i1
    %15 = comb.and %14, %13 : i1
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput_0, %out0_ready : i1
    hw.output %ready, %rawOutput_2, %valid_3 : i1, i1, i1
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i1
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %24 : i1
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %3 : i1
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %9 : i1
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %15 : i1
    %chanOutput_6, %ready_7 = esi.wrap.vr %rawOutput, %21 : i1
    %0 = comb.xor %24, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready_1, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %24, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_3, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %24, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_5, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %24, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %valid : i1
    %22 = comb.and %ready_7, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
    %rawOutput_8, %valid_9 = esi.unwrap.vr %chanOutput_0, %out0_ready : i1
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput_2, %out1_ready : i1
    %rawOutput_12, %valid_13 = esi.unwrap.vr %chanOutput_4, %out2_ready : i1
    %rawOutput_14, %valid_15 = esi.unwrap.vr %chanOutput_6, %out3_ready : i1
    hw.output %ready, %rawOutput_8, %valid_9, %rawOutput_10, %valid_11, %rawOutput_12, %valid_13, %rawOutput_14, %valid_15 : i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_2slots_seq(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i1
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %1 : i1
    %chanOutput_0, %ready_1 = esi.wrap.vr %28, %20 : i1
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %valid, %valid0_reg : i1
    %3 = comb.mux %1, %rawOutput, %data0_reg : i1
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %false : i1  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %17, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %17, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %15, %clock reset %reset, %false : i1  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i1
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i1
    %14 = comb.xor %9, %true : i1
    %15 = comb.and %14, %13 : i1
    %valid1_reg = seq.compreg sym @valid1_reg %18, %clock reset %reset, %false : i1  
    %16 = comb.xor %valid1_reg, %true : i1
    %17 = comb.or %16, %21 : i1
    %18 = comb.mux %17, %4, %valid1_reg : i1
    %19 = comb.mux %17, %12, %data1_reg : i1
    %data1_reg = seq.compreg sym @data1_reg %19, %clock reset %reset, %false : i1  
    %ready1_reg = seq.compreg sym @ready1_reg %27, %clock reset %reset, %false : i1  
    %20 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
    %21 = comb.xor %ready1_reg, %true : i1
    %22 = comb.xor %ready_1, %true : i1
    %23 = comb.and %22, %21 : i1
    %24 = comb.mux %23, %valid1_reg, %ready1_reg : i1
    %25 = comb.and %ready_1, %ready1_reg : i1
    %26 = comb.xor %25, %true : i1
    %27 = comb.and %26, %24 : i1
    %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %31, %clock reset %reset, %false : i1  
    %28 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i1
    %29 = comb.mux %23, %data1_reg, %ctrl_data1_reg : i1
    %30 = comb.xor %25, %true : i1
    %31 = comb.and %30, %29 : i1
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput_0, %out0_ready : i1
    hw.output %ready, %rawOutput_2, %valid_3 : i1, i1, i1
  }
  hw.module @handshake_mux_in_ui1_3ins_1outs_ctrl(in %select : i1, in %select_valid : i1, in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in1, %in1_valid : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %in0, %in0_valid : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %select, %select_valid : i1
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_2, %4 : i1
    %rawOutput_4, %valid_5 = esi.unwrap.vr %chanOutput_0, %6 : i0
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput, %8 : i0
    %chanOutput_8, %ready_9 = esi.wrap.vr %9, %3 : i0
    %0 = comb.concat %false, %rawOutput : i1, i1
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = comb.mux %rawOutput, %valid_7, %valid_5 : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %3, %ready_9 : i1
    %5 = comb.extract %1 from 0 : (i2) -> i1
    %6 = comb.and %5, %4 : i1
    %7 = comb.extract %1 from 1 : (i2) -> i1
    %8 = comb.and %7, %4 : i1
    %9 = comb.mux %rawOutput, %rawOutput_6, %rawOutput_4 : i0
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput_8, %out0_ready : i0
    hw.output %ready_3, %ready_1, %ready, %rawOutput_10, %valid_11 : i1, i1, i1, i0, i1
  }
  hw.module @handshake_mux_in_ui1_ui64_ui64_out_ui64(in %select : i1, in %select_valid : i1, in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in1, %in1_valid : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %in0, %in0_valid : i64
    %chanOutput_2, %ready_3 = esi.wrap.vr %select, %select_valid : i1
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_2, %4 : i1
    %rawOutput_4, %valid_5 = esi.unwrap.vr %chanOutput_0, %6 : i64
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput, %8 : i64
    %chanOutput_8, %ready_9 = esi.wrap.vr %9, %3 : i64
    %0 = comb.concat %false, %rawOutput : i1, i1
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = comb.mux %rawOutput, %valid_7, %valid_5 : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %3, %ready_9 : i1
    %5 = comb.extract %1 from 0 : (i2) -> i1
    %6 = comb.and %5, %4 : i1
    %7 = comb.extract %1 from 1 : (i2) -> i1
    %8 = comb.and %7, %4 : i1
    %9 = comb.mux %rawOutput, %rawOutput_6, %rawOutput_4 : i64
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput_8, %out0_ready : i64
    hw.output %ready_3, %ready_1, %ready, %rawOutput_10, %valid_11 : i1, i1, i1, i64, i1
  }
  hw.module @arith_cmpi_in_ui64_ui64_out_ui1_slt(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i1, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in1, %in1_valid : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %in0, %in0_valid : i64
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_0, %1 : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput, %1 : i64
    %chanOutput_4, %ready_5 = esi.wrap.vr %2, %0 : i1
    %0 = comb.and %valid, %valid_3 : i1
    %1 = comb.and %ready_5, %0 : i1
    %2 = comb.icmp slt %rawOutput, %rawOutput_2 : i64
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput_4, %out0_ready : i1
    hw.output %ready_1, %ready, %rawOutput_6, %valid_7 : i1, i1, i1, i1
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1, out out4 : i1, out out4_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i1
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %30 : i1
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %3 : i1
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %9 : i1
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %15 : i1
    %chanOutput_6, %ready_7 = esi.wrap.vr %rawOutput, %21 : i1
    %chanOutput_8, %ready_9 = esi.wrap.vr %rawOutput, %27 : i1
    %0 = comb.xor %30, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready_1, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %30, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_3, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %30, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_5, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %30, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %valid : i1
    %22 = comb.and %ready_7, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.xor %30, %true : i1
    %25 = comb.and %29, %24 : i1
    %emitted_4 = seq.compreg sym @emitted_4 %25, %clock reset %reset, %false : i1  
    %26 = comb.xor %emitted_4, %true : i1
    %27 = comb.and %26, %valid : i1
    %28 = comb.and %ready_9, %27 : i1
    %29 = comb.or %28, %emitted_4 {sv.namehint = "done4"} : i1
    %30 = comb.and %5, %11, %17, %23, %29 {sv.namehint = "allDone"} : i1
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput_0, %out0_ready : i1
    %rawOutput_12, %valid_13 = esi.unwrap.vr %chanOutput_2, %out1_ready : i1
    %rawOutput_14, %valid_15 = esi.unwrap.vr %chanOutput_4, %out2_ready : i1
    %rawOutput_16, %valid_17 = esi.unwrap.vr %chanOutput_6, %out3_ready : i1
    %rawOutput_18, %valid_19 = esi.unwrap.vr %chanOutput_8, %out4_ready : i1
    hw.output %ready, %rawOutput_10, %valid_11, %rawOutput_12, %valid_13, %rawOutput_14, %valid_15, %rawOutput_16, %valid_17, %rawOutput_18, %valid_19 : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(in %cond : i1, in %cond_valid : i1, in %data : i64, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i64, out outTrue_valid : i1, out outFalse : i64, out outFalse_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %data, %data_valid : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %cond, %cond_valid : i1
    %true = hw.constant true
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_0, %5 : i1
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput, %5 : i64
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput_2, %1 : i64
    %chanOutput_6, %ready_7 = esi.wrap.vr %rawOutput_2, %3 : i64
    %0 = comb.and %valid, %valid_3 : i1
    %1 = comb.and %rawOutput, %0 : i1
    %2 = comb.xor %rawOutput, %true : i1
    %3 = comb.and %2, %0 : i1
    %4 = comb.mux %rawOutput, %ready_5, %ready_7 : i1
    %5 = comb.and %4, %0 : i1
    %rawOutput_8, %valid_9 = esi.unwrap.vr %chanOutput_4, %outTrue_ready : i64
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput_6, %outFalse_ready : i64
    hw.output %ready_1, %ready, %rawOutput_8, %valid_9, %rawOutput_10, %valid_11 : i1, i1, i64, i1, i64, i1
  }
  hw.module @handshake_sink_in_ui64(in %in0 : i64, in %in0_valid : i1, out in0_ready : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i64
    %true = hw.constant true
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %true : i64
    hw.output %ready : i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1, out out3 : i64, out out3_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i64
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %24 : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %3 : i64
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %9 : i64
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %15 : i64
    %chanOutput_6, %ready_7 = esi.wrap.vr %rawOutput, %21 : i64
    %0 = comb.xor %24, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready_1, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %24, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_3, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %24, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_5, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %24, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %valid : i1
    %22 = comb.and %ready_7, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
    %rawOutput_8, %valid_9 = esi.unwrap.vr %chanOutput_0, %out0_ready : i64
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput_2, %out1_ready : i64
    %rawOutput_12, %valid_13 = esi.unwrap.vr %chanOutput_4, %out2_ready : i64
    %rawOutput_14, %valid_15 = esi.unwrap.vr %chanOutput_6, %out3_ready : i64
    hw.output %ready, %rawOutput_8, %valid_9, %rawOutput_10, %valid_11, %rawOutput_12, %valid_13, %rawOutput_14, %valid_15 : i1, i64, i1, i64, i1, i64, i1, i64, i1
  }
  hw.module @handshake_cond_br_in_ui1_2ins_2outs_ctrl(in %cond : i1, in %cond_valid : i1, in %data : i0, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i0, out outTrue_valid : i1, out outFalse : i0, out outFalse_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %data, %data_valid : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %cond, %cond_valid : i1
    %true = hw.constant true
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_0, %5 : i1
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput, %5 : i0
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput_2, %1 : i0
    %chanOutput_6, %ready_7 = esi.wrap.vr %rawOutput_2, %3 : i0
    %0 = comb.and %valid, %valid_3 : i1
    %1 = comb.and %rawOutput, %0 : i1
    %2 = comb.xor %rawOutput, %true : i1
    %3 = comb.and %2, %0 : i1
    %4 = comb.mux %rawOutput, %ready_5, %ready_7 : i1
    %5 = comb.and %4, %0 : i1
    %rawOutput_8, %valid_9 = esi.unwrap.vr %chanOutput_4, %outTrue_ready : i0
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput_6, %outFalse_ready : i0
    hw.output %ready_1, %ready, %rawOutput_8, %valid_9, %rawOutput_10, %valid_11 : i1, i1, i0, i1, i0, i1
  }
  hw.module @handshake_fork_1ins_4outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i0
    %true = hw.constant true
    %false = hw.constant false
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %24 : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %rawOutput, %3 : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %rawOutput, %9 : i0
    %chanOutput_4, %ready_5 = esi.wrap.vr %rawOutput, %15 : i0
    %chanOutput_6, %ready_7 = esi.wrap.vr %rawOutput, %21 : i0
    %0 = comb.xor %24, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %valid : i1
    %4 = comb.and %ready_1, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %24, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %valid : i1
    %10 = comb.and %ready_3, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %24, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %valid : i1
    %16 = comb.and %ready_5, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %24, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %valid : i1
    %22 = comb.and %ready_7, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
    %rawOutput_8, %valid_9 = esi.unwrap.vr %chanOutput_0, %out0_ready : i0
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput_2, %out1_ready : i0
    %rawOutput_12, %valid_13 = esi.unwrap.vr %chanOutput_4, %out2_ready : i0
    %rawOutput_14, %valid_15 = esi.unwrap.vr %chanOutput_6, %out3_ready : i0
    hw.output %ready, %rawOutput_8, %valid_9, %rawOutput_10, %valid_11, %rawOutput_12, %valid_13, %rawOutput_14, %valid_15 : i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_join_4ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out out0 : i0, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in3, %in3_valid : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %in2, %in2_valid : i0
    %chanOutput_2, %ready_3 = esi.wrap.vr %in1, %in1_valid : i0
    %chanOutput_4, %ready_5 = esi.wrap.vr %in0, %in0_valid : i0
    %c0_i0 = hw.constant 0 : i0
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_4, %1 : i0
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput_2, %1 : i0
    %rawOutput_8, %valid_9 = esi.unwrap.vr %chanOutput_0, %1 : i0
    %rawOutput_10, %valid_11 = esi.unwrap.vr %chanOutput, %1 : i0
    %chanOutput_12, %ready_13 = esi.wrap.vr %c0_i0, %0 : i0
    %0 = comb.and %valid, %valid_7, %valid_9, %valid_11 : i1
    %1 = comb.and %ready_13, %0 : i1
    %rawOutput_14, %valid_15 = esi.unwrap.vr %chanOutput_12, %out0_ready : i0
    hw.output %ready_5, %ready_3, %ready_1, %ready, %rawOutput_14, %valid_15 : i1, i1, i1, i1, i0, i1
  }
  hw.module @handshake_load_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataFromMem : i64, in %dataFromMem_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataOut_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataFromMem_ready : i1, out ctrl_ready : i1, out dataOut : i64, out dataOut_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %ctrl, %ctrl_valid : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %dataFromMem, %dataFromMem_valid : i64
    %chanOutput_2, %ready_3 = esi.wrap.vr %addrIn0, %addrIn0_valid : i64
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_2, %1 : i64
    %rawOutput_4, %valid_5 = esi.unwrap.vr %chanOutput_0, %ready_9 : i64
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput, %1 : i0
    %chanOutput_8, %ready_9 = esi.wrap.vr %rawOutput_4, %valid_5 : i64
    %chanOutput_10, %ready_11 = esi.wrap.vr %rawOutput, %0 : i64
    %0 = comb.and %valid, %valid_7 : i1
    %1 = comb.and %ready_11, %0 : i1
    %rawOutput_12, %valid_13 = esi.unwrap.vr %chanOutput_8, %dataOut_ready : i64
    %rawOutput_14, %valid_15 = esi.unwrap.vr %chanOutput_10, %addrOut0_ready : i64
    hw.output %ready_3, %ready_1, %ready, %rawOutput_12, %valid_13, %rawOutput_14, %valid_15 : i1, i1, i1, i64, i1, i64, i1
  }
  hw.module @arith_addi_in_ui64_ui64_out_ui64(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in1, %in1_valid : i64
    %chanOutput_0, %ready_1 = esi.wrap.vr %in0, %in0_valid : i64
    %rawOutput, %valid = esi.unwrap.vr %chanOutput_0, %1 : i64
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput, %1 : i64
    %chanOutput_4, %ready_5 = esi.wrap.vr %2, %0 : i64
    %0 = comb.and %valid, %valid_3 : i1
    %1 = comb.and %ready_5, %0 : i1
    %2 = comb.add %rawOutput, %rawOutput_2 : i64
    %rawOutput_6, %valid_7 = esi.unwrap.vr %chanOutput_4, %out0_ready : i64
    hw.output %ready_1, %ready, %rawOutput_6, %valid_7 : i1, i1, i64, i1
  }
  hw.module @main(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
    %chanOutput, %ready = esi.wrap.vr %in0, %in0_valid : i0
    %rawOutput, %valid = esi.unwrap.vr %chanOutput, %handshake_buffer0.in0_ready : i0
    %chanOutput_0, %ready_1 = esi.wrap.vr %handshake_buffer0.out0, %handshake_buffer0.out0_valid : i0
    %handshake_buffer0.in0_ready, %handshake_buffer0.out0, %handshake_buffer0.out0_valid = hw.instance "handshake_buffer0" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput: i0, in0_valid: %valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_1: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_2, %valid_3 = esi.unwrap.vr %chanOutput_0, %handshake_fork0.in0_ready : i0
    %chanOutput_4, %ready_5 = esi.wrap.vr %handshake_fork0.out0, %handshake_fork0.out0_valid : i0
    %chanOutput_6, %ready_7 = esi.wrap.vr %handshake_fork0.out1, %handshake_fork0.out1_valid : i0
    %chanOutput_8, %ready_9 = esi.wrap.vr %handshake_fork0.out2, %handshake_fork0.out2_valid : i0
    %chanOutput_10, %ready_11 = esi.wrap.vr %handshake_fork0.out3, %handshake_fork0.out3_valid : i0
    %chanOutput_12, %ready_13 = esi.wrap.vr %handshake_fork0.out4, %handshake_fork0.out4_valid : i0
    %chanOutput_14, %ready_15 = esi.wrap.vr %handshake_fork0.out5, %handshake_fork0.out5_valid : i0
    %chanOutput_16, %ready_17 = esi.wrap.vr %handshake_fork0.out6, %handshake_fork0.out6_valid : i0
    %chanOutput_18, %ready_19 = esi.wrap.vr %handshake_fork0.out7, %handshake_fork0.out7_valid : i0
    %chanOutput_20, %ready_21 = esi.wrap.vr %handshake_fork0.out8, %handshake_fork0.out8_valid : i0
    %chanOutput_22, %ready_23 = esi.wrap.vr %handshake_fork0.out9, %handshake_fork0.out9_valid : i0
    %chanOutput_24, %ready_25 = esi.wrap.vr %handshake_fork0.out10, %handshake_fork0.out10_valid : i0
    %chanOutput_26, %ready_27 = esi.wrap.vr %handshake_fork0.out11, %handshake_fork0.out11_valid : i0
    %chanOutput_28, %ready_29 = esi.wrap.vr %handshake_fork0.out12, %handshake_fork0.out12_valid : i0
    %chanOutput_30, %ready_31 = esi.wrap.vr %handshake_fork0.out13, %handshake_fork0.out13_valid : i0
    %handshake_fork0.in0_ready, %handshake_fork0.out0, %handshake_fork0.out0_valid, %handshake_fork0.out1, %handshake_fork0.out1_valid, %handshake_fork0.out2, %handshake_fork0.out2_valid, %handshake_fork0.out3, %handshake_fork0.out3_valid, %handshake_fork0.out4, %handshake_fork0.out4_valid, %handshake_fork0.out5, %handshake_fork0.out5_valid, %handshake_fork0.out6, %handshake_fork0.out6_valid, %handshake_fork0.out7, %handshake_fork0.out7_valid, %handshake_fork0.out8, %handshake_fork0.out8_valid, %handshake_fork0.out9, %handshake_fork0.out9_valid, %handshake_fork0.out10, %handshake_fork0.out10_valid, %handshake_fork0.out11, %handshake_fork0.out11_valid, %handshake_fork0.out12, %handshake_fork0.out12_valid, %handshake_fork0.out13, %handshake_fork0.out13_valid = hw.instance "handshake_fork0" @handshake_fork_1ins_14outs_ctrl(in0: %rawOutput_2: i0, in0_valid: %valid_3: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_5: i1, out1_ready: %ready_7: i1, out2_ready: %ready_9: i1, out3_ready: %ready_11: i1, out4_ready: %ready_13: i1, out5_ready: %ready_15: i1, out6_ready: %ready_17: i1, out7_ready: %ready_19: i1, out8_ready: %ready_21: i1, out9_ready: %ready_23: i1, out10_ready: %ready_25: i1, out11_ready: %ready_27: i1, out12_ready: %ready_29: i1, out13_ready: %ready_31: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1, out4: i0, out4_valid: i1, out5: i0, out5_valid: i1, out6: i0, out6_valid: i1, out7: i0, out7_valid: i1, out8: i0, out8_valid: i1, out9: i0, out9_valid: i1, out10: i0, out10_valid: i1, out11: i0, out11_valid: i1, out12: i0, out12_valid: i1, out13: i0, out13_valid: i1)
    %rawOutput_32, %valid_33 = esi.unwrap.vr %chanOutput_30, %handshake_buffer1.in0_ready : i0
    %chanOutput_34, %ready_35 = esi.wrap.vr %handshake_buffer1.out0, %handshake_buffer1.out0_valid : i0
    %handshake_buffer1.in0_ready, %handshake_buffer1.out0, %handshake_buffer1.out0_valid = hw.instance "handshake_buffer1" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_32: i0, in0_valid: %valid_33: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_35: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_36, %valid_37 = esi.unwrap.vr %chanOutput_28, %handshake_buffer2.in0_ready : i0
    %chanOutput_38, %ready_39 = esi.wrap.vr %handshake_buffer2.out0, %handshake_buffer2.out0_valid : i0
    %handshake_buffer2.in0_ready, %handshake_buffer2.out0, %handshake_buffer2.out0_valid = hw.instance "handshake_buffer2" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_36: i0, in0_valid: %valid_37: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_39: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_40, %valid_41 = esi.unwrap.vr %chanOutput_26, %handshake_buffer3.in0_ready : i0
    %chanOutput_42, %ready_43 = esi.wrap.vr %handshake_buffer3.out0, %handshake_buffer3.out0_valid : i0
    %handshake_buffer3.in0_ready, %handshake_buffer3.out0, %handshake_buffer3.out0_valid = hw.instance "handshake_buffer3" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_40: i0, in0_valid: %valid_41: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_43: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_44, %valid_45 = esi.unwrap.vr %chanOutput_24, %handshake_buffer4.in0_ready : i0
    %chanOutput_46, %ready_47 = esi.wrap.vr %handshake_buffer4.out0, %handshake_buffer4.out0_valid : i0
    %handshake_buffer4.in0_ready, %handshake_buffer4.out0, %handshake_buffer4.out0_valid = hw.instance "handshake_buffer4" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_44: i0, in0_valid: %valid_45: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_47: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_48, %valid_49 = esi.unwrap.vr %chanOutput_22, %handshake_buffer5.in0_ready : i0
    %chanOutput_50, %ready_51 = esi.wrap.vr %handshake_buffer5.out0, %handshake_buffer5.out0_valid : i0
    %handshake_buffer5.in0_ready, %handshake_buffer5.out0, %handshake_buffer5.out0_valid = hw.instance "handshake_buffer5" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_48: i0, in0_valid: %valid_49: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_51: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_52, %valid_53 = esi.unwrap.vr %chanOutput_20, %handshake_buffer6.in0_ready : i0
    %chanOutput_54, %ready_55 = esi.wrap.vr %handshake_buffer6.out0, %handshake_buffer6.out0_valid : i0
    %handshake_buffer6.in0_ready, %handshake_buffer6.out0, %handshake_buffer6.out0_valid = hw.instance "handshake_buffer6" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_52: i0, in0_valid: %valid_53: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_55: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_56, %valid_57 = esi.unwrap.vr %chanOutput_18, %handshake_buffer7.in0_ready : i0
    %chanOutput_58, %ready_59 = esi.wrap.vr %handshake_buffer7.out0, %handshake_buffer7.out0_valid : i0
    %handshake_buffer7.in0_ready, %handshake_buffer7.out0, %handshake_buffer7.out0_valid = hw.instance "handshake_buffer7" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_56: i0, in0_valid: %valid_57: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_59: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_60, %valid_61 = esi.unwrap.vr %chanOutput_16, %handshake_buffer8.in0_ready : i0
    %chanOutput_62, %ready_63 = esi.wrap.vr %handshake_buffer8.out0, %handshake_buffer8.out0_valid : i0
    %handshake_buffer8.in0_ready, %handshake_buffer8.out0, %handshake_buffer8.out0_valid = hw.instance "handshake_buffer8" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_60: i0, in0_valid: %valid_61: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_63: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_64, %valid_65 = esi.unwrap.vr %chanOutput_14, %handshake_buffer9.in0_ready : i0
    %chanOutput_66, %ready_67 = esi.wrap.vr %handshake_buffer9.out0, %handshake_buffer9.out0_valid : i0
    %handshake_buffer9.in0_ready, %handshake_buffer9.out0, %handshake_buffer9.out0_valid = hw.instance "handshake_buffer9" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_64: i0, in0_valid: %valid_65: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_67: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_68, %valid_69 = esi.unwrap.vr %chanOutput_12, %handshake_buffer10.in0_ready : i0
    %chanOutput_70, %ready_71 = esi.wrap.vr %handshake_buffer10.out0, %handshake_buffer10.out0_valid : i0
    %handshake_buffer10.in0_ready, %handshake_buffer10.out0, %handshake_buffer10.out0_valid = hw.instance "handshake_buffer10" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_68: i0, in0_valid: %valid_69: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_71: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_72, %valid_73 = esi.unwrap.vr %chanOutput_10, %handshake_buffer11.in0_ready : i0
    %chanOutput_74, %ready_75 = esi.wrap.vr %handshake_buffer11.out0, %handshake_buffer11.out0_valid : i0
    %handshake_buffer11.in0_ready, %handshake_buffer11.out0, %handshake_buffer11.out0_valid = hw.instance "handshake_buffer11" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_72: i0, in0_valid: %valid_73: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_75: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_76, %valid_77 = esi.unwrap.vr %chanOutput_8, %handshake_buffer12.in0_ready : i0
    %chanOutput_78, %ready_79 = esi.wrap.vr %handshake_buffer12.out0, %handshake_buffer12.out0_valid : i0
    %handshake_buffer12.in0_ready, %handshake_buffer12.out0, %handshake_buffer12.out0_valid = hw.instance "handshake_buffer12" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_76: i0, in0_valid: %valid_77: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_79: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_80, %valid_81 = esi.unwrap.vr %chanOutput_6, %handshake_buffer13.in0_ready : i0
    %chanOutput_82, %ready_83 = esi.wrap.vr %handshake_buffer13.out0, %handshake_buffer13.out0_valid : i0
    %handshake_buffer13.in0_ready, %handshake_buffer13.out0, %handshake_buffer13.out0_valid = hw.instance "handshake_buffer13" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_80: i0, in0_valid: %valid_81: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_83: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_84, %valid_85 = esi.unwrap.vr %chanOutput_4, %handshake_buffer14.in0_ready : i0
    %chanOutput_86, %ready_87 = esi.wrap.vr %handshake_buffer14.out0, %handshake_buffer14.out0_valid : i0
    %handshake_buffer14.in0_ready, %handshake_buffer14.out0, %handshake_buffer14.out0_valid = hw.instance "handshake_buffer14" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_84: i0, in0_valid: %valid_85: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_87: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_88, %valid_89 = esi.unwrap.vr %chanOutput_922, %handshake_memory0.stData0_ready : i64
    %rawOutput_90, %valid_91 = esi.unwrap.vr %chanOutput_918, %handshake_memory0.stAddr0_ready : i64
    %chanOutput_92, %ready_93 = esi.wrap.vr %handshake_memory0.stDone0, %handshake_memory0.stDone0_valid : i0
    %handshake_memory0.stData0_ready, %handshake_memory0.stAddr0_ready, %handshake_memory0.stDone0, %handshake_memory0.stDone0_valid = hw.instance "handshake_memory0" @handshake_memory_out_ui64_id2(stData0: %rawOutput_88: i64, stData0_valid: %valid_89: i1, stAddr0: %rawOutput_90: i64, stAddr0_valid: %valid_91: i1, clock: %clock: !seq.clock, reset: %reset: i1, stDone0_ready: %ready_93: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stDone0: i0, stDone0_valid: i1)
    %rawOutput_94, %valid_95 = esi.unwrap.vr %chanOutput_92, %handshake_buffer15.in0_ready : i0
    %chanOutput_96, %ready_97 = esi.wrap.vr %handshake_buffer15.out0, %handshake_buffer15.out0_valid : i0
    %handshake_buffer15.in0_ready, %handshake_buffer15.out0, %handshake_buffer15.out0_valid = hw.instance "handshake_buffer15" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_94: i0, in0_valid: %valid_95: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_97: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_98, %valid_99 = esi.unwrap.vr %chanOutput_518, %handshake_memory1.stData0_ready : i64
    %rawOutput_100, %valid_101 = esi.unwrap.vr %chanOutput_514, %handshake_memory1.stAddr0_ready : i64
    %rawOutput_102, %valid_103 = esi.unwrap.vr %chanOutput_546, %handshake_memory1.stData1_ready : i64
    %rawOutput_104, %valid_105 = esi.unwrap.vr %chanOutput_542, %handshake_memory1.stAddr1_ready : i64
    %rawOutput_106, %valid_107 = esi.unwrap.vr %chanOutput_576, %handshake_memory1.stData2_ready : i64
    %rawOutput_108, %valid_109 = esi.unwrap.vr %chanOutput_572, %handshake_memory1.stAddr2_ready : i64
    %rawOutput_110, %valid_111 = esi.unwrap.vr %chanOutput_890, %handshake_memory1.ldAddr0_ready : i64
    %chanOutput_112, %ready_113 = esi.wrap.vr %handshake_memory1.ldData0, %handshake_memory1.ldData0_valid : i64
    %chanOutput_114, %ready_115 = esi.wrap.vr %handshake_memory1.stDone0, %handshake_memory1.stDone0_valid : i0
    %chanOutput_116, %ready_117 = esi.wrap.vr %handshake_memory1.stDone1, %handshake_memory1.stDone1_valid : i0
    %chanOutput_118, %ready_119 = esi.wrap.vr %handshake_memory1.stDone2, %handshake_memory1.stDone2_valid : i0
    %chanOutput_120, %ready_121 = esi.wrap.vr %handshake_memory1.ldDone0, %handshake_memory1.ldDone0_valid : i0
    %handshake_memory1.stData0_ready, %handshake_memory1.stAddr0_ready, %handshake_memory1.stData1_ready, %handshake_memory1.stAddr1_ready, %handshake_memory1.stData2_ready, %handshake_memory1.stAddr2_ready, %handshake_memory1.ldAddr0_ready, %handshake_memory1.ldData0, %handshake_memory1.ldData0_valid, %handshake_memory1.stDone0, %handshake_memory1.stDone0_valid, %handshake_memory1.stDone1, %handshake_memory1.stDone1_valid, %handshake_memory1.stDone2, %handshake_memory1.stDone2_valid, %handshake_memory1.ldDone0, %handshake_memory1.ldDone0_valid = hw.instance "handshake_memory1" @handshake_memory_out_ui64_id1(stData0: %rawOutput_98: i64, stData0_valid: %valid_99: i1, stAddr0: %rawOutput_100: i64, stAddr0_valid: %valid_101: i1, stData1: %rawOutput_102: i64, stData1_valid: %valid_103: i1, stAddr1: %rawOutput_104: i64, stAddr1_valid: %valid_105: i1, stData2: %rawOutput_106: i64, stData2_valid: %valid_107: i1, stAddr2: %rawOutput_108: i64, stAddr2_valid: %valid_109: i1, ldAddr0: %rawOutput_110: i64, ldAddr0_valid: %valid_111: i1, clock: %clock: !seq.clock, reset: %reset: i1, ldData0_ready: %ready_113: i1, stDone0_ready: %ready_115: i1, stDone1_ready: %ready_117: i1, stDone2_ready: %ready_119: i1, ldDone0_ready: %ready_121: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
    %rawOutput_122, %valid_123 = esi.unwrap.vr %chanOutput_120, %handshake_buffer16.in0_ready : i0
    %chanOutput_124, %ready_125 = esi.wrap.vr %handshake_buffer16.out0, %handshake_buffer16.out0_valid : i0
    %handshake_buffer16.in0_ready, %handshake_buffer16.out0, %handshake_buffer16.out0_valid = hw.instance "handshake_buffer16" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_122: i0, in0_valid: %valid_123: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_125: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_126, %valid_127 = esi.unwrap.vr %chanOutput_118, %handshake_buffer17.in0_ready : i0
    %chanOutput_128, %ready_129 = esi.wrap.vr %handshake_buffer17.out0, %handshake_buffer17.out0_valid : i0
    %handshake_buffer17.in0_ready, %handshake_buffer17.out0, %handshake_buffer17.out0_valid = hw.instance "handshake_buffer17" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_126: i0, in0_valid: %valid_127: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_129: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_130, %valid_131 = esi.unwrap.vr %chanOutput_116, %handshake_buffer18.in0_ready : i0
    %chanOutput_132, %ready_133 = esi.wrap.vr %handshake_buffer18.out0, %handshake_buffer18.out0_valid : i0
    %handshake_buffer18.in0_ready, %handshake_buffer18.out0, %handshake_buffer18.out0_valid = hw.instance "handshake_buffer18" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_130: i0, in0_valid: %valid_131: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_133: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_134, %valid_135 = esi.unwrap.vr %chanOutput_114, %handshake_buffer19.in0_ready : i0
    %chanOutput_136, %ready_137 = esi.wrap.vr %handshake_buffer19.out0, %handshake_buffer19.out0_valid : i0
    %handshake_buffer19.in0_ready, %handshake_buffer19.out0, %handshake_buffer19.out0_valid = hw.instance "handshake_buffer19" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_134: i0, in0_valid: %valid_135: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_137: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_138, %valid_139 = esi.unwrap.vr %chanOutput_112, %handshake_buffer20.in0_ready : i64
    %chanOutput_140, %ready_141 = esi.wrap.vr %handshake_buffer20.out0, %handshake_buffer20.out0_valid : i64
    %handshake_buffer20.in0_ready, %handshake_buffer20.out0, %handshake_buffer20.out0_valid = hw.instance "handshake_buffer20" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_138: i64, in0_valid: %valid_139: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_141: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_142, %valid_143 = esi.unwrap.vr %chanOutput_132, %handshake_fork1.in0_ready : i0
    %chanOutput_144, %ready_145 = esi.wrap.vr %handshake_fork1.out0, %handshake_fork1.out0_valid : i0
    %chanOutput_146, %ready_147 = esi.wrap.vr %handshake_fork1.out1, %handshake_fork1.out1_valid : i0
    %handshake_fork1.in0_ready, %handshake_fork1.out0, %handshake_fork1.out0_valid, %handshake_fork1.out1, %handshake_fork1.out1_valid = hw.instance "handshake_fork1" @handshake_fork_1ins_2outs_ctrl(in0: %rawOutput_142: i0, in0_valid: %valid_143: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_145: i1, out1_ready: %ready_147: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
    %rawOutput_148, %valid_149 = esi.unwrap.vr %chanOutput_146, %handshake_buffer21.in0_ready : i0
    %chanOutput_150, %ready_151 = esi.wrap.vr %handshake_buffer21.out0, %handshake_buffer21.out0_valid : i0
    %handshake_buffer21.in0_ready, %handshake_buffer21.out0, %handshake_buffer21.out0_valid = hw.instance "handshake_buffer21" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_148: i0, in0_valid: %valid_149: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_151: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_152, %valid_153 = esi.unwrap.vr %chanOutput_144, %handshake_buffer22.in0_ready : i0
    %chanOutput_154, %ready_155 = esi.wrap.vr %handshake_buffer22.out0, %handshake_buffer22.out0_valid : i0
    %handshake_buffer22.in0_ready, %handshake_buffer22.out0, %handshake_buffer22.out0_valid = hw.instance "handshake_buffer22" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_152: i0, in0_valid: %valid_153: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_155: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_156, %valid_157 = esi.unwrap.vr %chanOutput_136, %handshake_fork2.in0_ready : i0
    %chanOutput_158, %ready_159 = esi.wrap.vr %handshake_fork2.out0, %handshake_fork2.out0_valid : i0
    %chanOutput_160, %ready_161 = esi.wrap.vr %handshake_fork2.out1, %handshake_fork2.out1_valid : i0
    %chanOutput_162, %ready_163 = esi.wrap.vr %handshake_fork2.out2, %handshake_fork2.out2_valid : i0
    %handshake_fork2.in0_ready, %handshake_fork2.out0, %handshake_fork2.out0_valid, %handshake_fork2.out1, %handshake_fork2.out1_valid, %handshake_fork2.out2, %handshake_fork2.out2_valid = hw.instance "handshake_fork2" @handshake_fork_1ins_3outs_ctrl(in0: %rawOutput_156: i0, in0_valid: %valid_157: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_159: i1, out1_ready: %ready_161: i1, out2_ready: %ready_163: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
    %rawOutput_164, %valid_165 = esi.unwrap.vr %chanOutput_162, %handshake_buffer23.in0_ready : i0
    %chanOutput_166, %ready_167 = esi.wrap.vr %handshake_buffer23.out0, %handshake_buffer23.out0_valid : i0
    %handshake_buffer23.in0_ready, %handshake_buffer23.out0, %handshake_buffer23.out0_valid = hw.instance "handshake_buffer23" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_164: i0, in0_valid: %valid_165: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_167: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_168, %valid_169 = esi.unwrap.vr %chanOutput_160, %handshake_buffer24.in0_ready : i0
    %chanOutput_170, %ready_171 = esi.wrap.vr %handshake_buffer24.out0, %handshake_buffer24.out0_valid : i0
    %handshake_buffer24.in0_ready, %handshake_buffer24.out0, %handshake_buffer24.out0_valid = hw.instance "handshake_buffer24" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_168: i0, in0_valid: %valid_169: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_171: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_172, %valid_173 = esi.unwrap.vr %chanOutput_158, %handshake_buffer25.in0_ready : i0
    %chanOutput_174, %ready_175 = esi.wrap.vr %handshake_buffer25.out0, %handshake_buffer25.out0_valid : i0
    %handshake_buffer25.in0_ready, %handshake_buffer25.out0, %handshake_buffer25.out0_valid = hw.instance "handshake_buffer25" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_172: i0, in0_valid: %valid_173: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_175: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_176, %valid_177 = esi.unwrap.vr %chanOutput_442, %handshake_memory2.stData0_ready : i64
    %rawOutput_178, %valid_179 = esi.unwrap.vr %chanOutput_438, %handshake_memory2.stAddr0_ready : i64
    %rawOutput_180, %valid_181 = esi.unwrap.vr %chanOutput_470, %handshake_memory2.stData1_ready : i64
    %rawOutput_182, %valid_183 = esi.unwrap.vr %chanOutput_466, %handshake_memory2.stAddr1_ready : i64
    %rawOutput_184, %valid_185 = esi.unwrap.vr %chanOutput_500, %handshake_memory2.stData2_ready : i64
    %rawOutput_186, %valid_187 = esi.unwrap.vr %chanOutput_496, %handshake_memory2.stAddr2_ready : i64
    %rawOutput_188, %valid_189 = esi.unwrap.vr %chanOutput_872, %handshake_memory2.ldAddr0_ready : i64
    %chanOutput_190, %ready_191 = esi.wrap.vr %handshake_memory2.ldData0, %handshake_memory2.ldData0_valid : i64
    %chanOutput_192, %ready_193 = esi.wrap.vr %handshake_memory2.stDone0, %handshake_memory2.stDone0_valid : i0
    %chanOutput_194, %ready_195 = esi.wrap.vr %handshake_memory2.stDone1, %handshake_memory2.stDone1_valid : i0
    %chanOutput_196, %ready_197 = esi.wrap.vr %handshake_memory2.stDone2, %handshake_memory2.stDone2_valid : i0
    %chanOutput_198, %ready_199 = esi.wrap.vr %handshake_memory2.ldDone0, %handshake_memory2.ldDone0_valid : i0
    %handshake_memory2.stData0_ready, %handshake_memory2.stAddr0_ready, %handshake_memory2.stData1_ready, %handshake_memory2.stAddr1_ready, %handshake_memory2.stData2_ready, %handshake_memory2.stAddr2_ready, %handshake_memory2.ldAddr0_ready, %handshake_memory2.ldData0, %handshake_memory2.ldData0_valid, %handshake_memory2.stDone0, %handshake_memory2.stDone0_valid, %handshake_memory2.stDone1, %handshake_memory2.stDone1_valid, %handshake_memory2.stDone2, %handshake_memory2.stDone2_valid, %handshake_memory2.ldDone0, %handshake_memory2.ldDone0_valid = hw.instance "handshake_memory2" @handshake_memory_out_ui64_id0(stData0: %rawOutput_176: i64, stData0_valid: %valid_177: i1, stAddr0: %rawOutput_178: i64, stAddr0_valid: %valid_179: i1, stData1: %rawOutput_180: i64, stData1_valid: %valid_181: i1, stAddr1: %rawOutput_182: i64, stAddr1_valid: %valid_183: i1, stData2: %rawOutput_184: i64, stData2_valid: %valid_185: i1, stAddr2: %rawOutput_186: i64, stAddr2_valid: %valid_187: i1, ldAddr0: %rawOutput_188: i64, ldAddr0_valid: %valid_189: i1, clock: %clock: !seq.clock, reset: %reset: i1, ldData0_ready: %ready_191: i1, stDone0_ready: %ready_193: i1, stDone1_ready: %ready_195: i1, stDone2_ready: %ready_197: i1, ldDone0_ready: %ready_199: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
    %rawOutput_200, %valid_201 = esi.unwrap.vr %chanOutput_198, %handshake_buffer26.in0_ready : i0
    %chanOutput_202, %ready_203 = esi.wrap.vr %handshake_buffer26.out0, %handshake_buffer26.out0_valid : i0
    %handshake_buffer26.in0_ready, %handshake_buffer26.out0, %handshake_buffer26.out0_valid = hw.instance "handshake_buffer26" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_200: i0, in0_valid: %valid_201: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_203: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_204, %valid_205 = esi.unwrap.vr %chanOutput_196, %handshake_buffer27.in0_ready : i0
    %chanOutput_206, %ready_207 = esi.wrap.vr %handshake_buffer27.out0, %handshake_buffer27.out0_valid : i0
    %handshake_buffer27.in0_ready, %handshake_buffer27.out0, %handshake_buffer27.out0_valid = hw.instance "handshake_buffer27" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_204: i0, in0_valid: %valid_205: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_207: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_208, %valid_209 = esi.unwrap.vr %chanOutput_194, %handshake_buffer28.in0_ready : i0
    %chanOutput_210, %ready_211 = esi.wrap.vr %handshake_buffer28.out0, %handshake_buffer28.out0_valid : i0
    %handshake_buffer28.in0_ready, %handshake_buffer28.out0, %handshake_buffer28.out0_valid = hw.instance "handshake_buffer28" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_208: i0, in0_valid: %valid_209: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_211: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_212, %valid_213 = esi.unwrap.vr %chanOutput_192, %handshake_buffer29.in0_ready : i0
    %chanOutput_214, %ready_215 = esi.wrap.vr %handshake_buffer29.out0, %handshake_buffer29.out0_valid : i0
    %handshake_buffer29.in0_ready, %handshake_buffer29.out0, %handshake_buffer29.out0_valid = hw.instance "handshake_buffer29" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_212: i0, in0_valid: %valid_213: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_215: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_216, %valid_217 = esi.unwrap.vr %chanOutput_190, %handshake_buffer30.in0_ready : i64
    %chanOutput_218, %ready_219 = esi.wrap.vr %handshake_buffer30.out0, %handshake_buffer30.out0_valid : i64
    %handshake_buffer30.in0_ready, %handshake_buffer30.out0, %handshake_buffer30.out0_valid = hw.instance "handshake_buffer30" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_216: i64, in0_valid: %valid_217: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_219: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_220, %valid_221 = esi.unwrap.vr %chanOutput_210, %handshake_fork3.in0_ready : i0
    %chanOutput_222, %ready_223 = esi.wrap.vr %handshake_fork3.out0, %handshake_fork3.out0_valid : i0
    %chanOutput_224, %ready_225 = esi.wrap.vr %handshake_fork3.out1, %handshake_fork3.out1_valid : i0
    %handshake_fork3.in0_ready, %handshake_fork3.out0, %handshake_fork3.out0_valid, %handshake_fork3.out1, %handshake_fork3.out1_valid = hw.instance "handshake_fork3" @handshake_fork_1ins_2outs_ctrl(in0: %rawOutput_220: i0, in0_valid: %valid_221: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_223: i1, out1_ready: %ready_225: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
    %rawOutput_226, %valid_227 = esi.unwrap.vr %chanOutput_224, %handshake_buffer31.in0_ready : i0
    %chanOutput_228, %ready_229 = esi.wrap.vr %handshake_buffer31.out0, %handshake_buffer31.out0_valid : i0
    %handshake_buffer31.in0_ready, %handshake_buffer31.out0, %handshake_buffer31.out0_valid = hw.instance "handshake_buffer31" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_226: i0, in0_valid: %valid_227: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_229: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_230, %valid_231 = esi.unwrap.vr %chanOutput_222, %handshake_buffer32.in0_ready : i0
    %chanOutput_232, %ready_233 = esi.wrap.vr %handshake_buffer32.out0, %handshake_buffer32.out0_valid : i0
    %handshake_buffer32.in0_ready, %handshake_buffer32.out0, %handshake_buffer32.out0_valid = hw.instance "handshake_buffer32" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_230: i0, in0_valid: %valid_231: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_233: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_234, %valid_235 = esi.unwrap.vr %chanOutput_214, %handshake_fork4.in0_ready : i0
    %chanOutput_236, %ready_237 = esi.wrap.vr %handshake_fork4.out0, %handshake_fork4.out0_valid : i0
    %chanOutput_238, %ready_239 = esi.wrap.vr %handshake_fork4.out1, %handshake_fork4.out1_valid : i0
    %chanOutput_240, %ready_241 = esi.wrap.vr %handshake_fork4.out2, %handshake_fork4.out2_valid : i0
    %handshake_fork4.in0_ready, %handshake_fork4.out0, %handshake_fork4.out0_valid, %handshake_fork4.out1, %handshake_fork4.out1_valid, %handshake_fork4.out2, %handshake_fork4.out2_valid = hw.instance "handshake_fork4" @handshake_fork_1ins_3outs_ctrl(in0: %rawOutput_234: i0, in0_valid: %valid_235: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_237: i1, out1_ready: %ready_239: i1, out2_ready: %ready_241: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
    %rawOutput_242, %valid_243 = esi.unwrap.vr %chanOutput_240, %handshake_buffer33.in0_ready : i0
    %chanOutput_244, %ready_245 = esi.wrap.vr %handshake_buffer33.out0, %handshake_buffer33.out0_valid : i0
    %handshake_buffer33.in0_ready, %handshake_buffer33.out0, %handshake_buffer33.out0_valid = hw.instance "handshake_buffer33" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_242: i0, in0_valid: %valid_243: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_245: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_246, %valid_247 = esi.unwrap.vr %chanOutput_238, %handshake_buffer34.in0_ready : i0
    %chanOutput_248, %ready_249 = esi.wrap.vr %handshake_buffer34.out0, %handshake_buffer34.out0_valid : i0
    %handshake_buffer34.in0_ready, %handshake_buffer34.out0, %handshake_buffer34.out0_valid = hw.instance "handshake_buffer34" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_246: i0, in0_valid: %valid_247: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_249: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_250, %valid_251 = esi.unwrap.vr %chanOutput_236, %handshake_buffer35.in0_ready : i0
    %chanOutput_252, %ready_253 = esi.wrap.vr %handshake_buffer35.out0, %handshake_buffer35.out0_valid : i0
    %handshake_buffer35.in0_ready, %handshake_buffer35.out0, %handshake_buffer35.out0_valid = hw.instance "handshake_buffer35" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_250: i0, in0_valid: %valid_251: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_253: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_254, %valid_255 = esi.unwrap.vr %chanOutput_46, %handshake_join0.in0_ready : i0
    %rawOutput_256, %valid_257 = esi.unwrap.vr %chanOutput_252, %handshake_join0.in1_ready : i0
    %rawOutput_258, %valid_259 = esi.unwrap.vr %chanOutput_232, %handshake_join0.in2_ready : i0
    %rawOutput_260, %valid_261 = esi.unwrap.vr %chanOutput_206, %handshake_join0.in3_ready : i0
    %rawOutput_262, %valid_263 = esi.unwrap.vr %chanOutput_166, %handshake_join0.in4_ready : i0
    %rawOutput_264, %valid_265 = esi.unwrap.vr %chanOutput_150, %handshake_join0.in5_ready : i0
    %rawOutput_266, %valid_267 = esi.unwrap.vr %chanOutput_128, %handshake_join0.in6_ready : i0
    %chanOutput_268, %ready_269 = esi.wrap.vr %handshake_join0.out0, %handshake_join0.out0_valid : i0
    %handshake_join0.in0_ready, %handshake_join0.in1_ready, %handshake_join0.in2_ready, %handshake_join0.in3_ready, %handshake_join0.in4_ready, %handshake_join0.in5_ready, %handshake_join0.in6_ready, %handshake_join0.out0, %handshake_join0.out0_valid = hw.instance "handshake_join0" @handshake_join_7ins_1outs_ctrl(in0: %rawOutput_254: i0, in0_valid: %valid_255: i1, in1: %rawOutput_256: i0, in1_valid: %valid_257: i1, in2: %rawOutput_258: i0, in2_valid: %valid_259: i1, in3: %rawOutput_260: i0, in3_valid: %valid_261: i1, in4: %rawOutput_262: i0, in4_valid: %valid_263: i1, in5: %rawOutput_264: i0, in5_valid: %valid_265: i1, in6: %rawOutput_266: i0, in6_valid: %valid_267: i1, out0_ready: %ready_269: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, in4_ready: i1, in5_ready: i1, in6_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_270, %valid_271 = esi.unwrap.vr %chanOutput_268, %handshake_buffer36.in0_ready : i0
    %chanOutput_272, %ready_273 = esi.wrap.vr %handshake_buffer36.out0, %handshake_buffer36.out0_valid : i0
    %handshake_buffer36.in0_ready, %handshake_buffer36.out0, %handshake_buffer36.out0_valid = hw.instance "handshake_buffer36" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_270: i0, in0_valid: %valid_271: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_273: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_274, %valid_275 = esi.unwrap.vr %chanOutput_86, %handshake_constant0.ctrl_ready : i0
    %chanOutput_276, %ready_277 = esi.wrap.vr %handshake_constant0.out0, %handshake_constant0.out0_valid : i64
    %handshake_constant0.ctrl_ready, %handshake_constant0.out0, %handshake_constant0.out0_valid = hw.instance "handshake_constant0" @handshake_constant_c3_out_ui64(ctrl: %rawOutput_274: i0, ctrl_valid: %valid_275: i1, out0_ready: %ready_277: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_278, %valid_279 = esi.unwrap.vr %chanOutput_276, %handshake_buffer37.in0_ready : i64
    %chanOutput_280, %ready_281 = esi.wrap.vr %handshake_buffer37.out0, %handshake_buffer37.out0_valid : i64
    %handshake_buffer37.in0_ready, %handshake_buffer37.out0, %handshake_buffer37.out0_valid = hw.instance "handshake_buffer37" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_278: i64, in0_valid: %valid_279: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_281: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_282, %valid_283 = esi.unwrap.vr %chanOutput_82, %handshake_constant1.ctrl_ready : i0
    %chanOutput_284, %ready_285 = esi.wrap.vr %handshake_constant1.out0, %handshake_constant1.out0_valid : i64
    %handshake_constant1.ctrl_ready, %handshake_constant1.out0, %handshake_constant1.out0_valid = hw.instance "handshake_constant1" @handshake_constant_c3_out_ui64(ctrl: %rawOutput_282: i0, ctrl_valid: %valid_283: i1, out0_ready: %ready_285: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_286, %valid_287 = esi.unwrap.vr %chanOutput_284, %handshake_buffer38.in0_ready : i64
    %chanOutput_288, %ready_289 = esi.wrap.vr %handshake_buffer38.out0, %handshake_buffer38.out0_valid : i64
    %handshake_buffer38.in0_ready, %handshake_buffer38.out0, %handshake_buffer38.out0_valid = hw.instance "handshake_buffer38" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_286: i64, in0_valid: %valid_287: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_289: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_290, %valid_291 = esi.unwrap.vr %chanOutput_288, %handshake_fork5.in0_ready : i64
    %chanOutput_292, %ready_293 = esi.wrap.vr %handshake_fork5.out0, %handshake_fork5.out0_valid : i64
    %chanOutput_294, %ready_295 = esi.wrap.vr %handshake_fork5.out1, %handshake_fork5.out1_valid : i64
    %handshake_fork5.in0_ready, %handshake_fork5.out0, %handshake_fork5.out0_valid, %handshake_fork5.out1, %handshake_fork5.out1_valid = hw.instance "handshake_fork5" @handshake_fork_in_ui64_out_ui64_ui64(in0: %rawOutput_290: i64, in0_valid: %valid_291: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_293: i1, out1_ready: %ready_295: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %rawOutput_296, %valid_297 = esi.unwrap.vr %chanOutput_294, %handshake_buffer39.in0_ready : i64
    %chanOutput_298, %ready_299 = esi.wrap.vr %handshake_buffer39.out0, %handshake_buffer39.out0_valid : i64
    %handshake_buffer39.in0_ready, %handshake_buffer39.out0, %handshake_buffer39.out0_valid = hw.instance "handshake_buffer39" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_296: i64, in0_valid: %valid_297: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_299: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_300, %valid_301 = esi.unwrap.vr %chanOutput_292, %handshake_buffer40.in0_ready : i64
    %chanOutput_302, %ready_303 = esi.wrap.vr %handshake_buffer40.out0, %handshake_buffer40.out0_valid : i64
    %handshake_buffer40.in0_ready, %handshake_buffer40.out0, %handshake_buffer40.out0_valid = hw.instance "handshake_buffer40" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_300: i64, in0_valid: %valid_301: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_303: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_304, %valid_305 = esi.unwrap.vr %chanOutput_78, %handshake_constant2.ctrl_ready : i0
    %chanOutput_306, %ready_307 = esi.wrap.vr %handshake_constant2.out0, %handshake_constant2.out0_valid : i64
    %handshake_constant2.ctrl_ready, %handshake_constant2.out0, %handshake_constant2.out0_valid = hw.instance "handshake_constant2" @handshake_constant_c2_out_ui64(ctrl: %rawOutput_304: i0, ctrl_valid: %valid_305: i1, out0_ready: %ready_307: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_308, %valid_309 = esi.unwrap.vr %chanOutput_306, %handshake_buffer41.in0_ready : i64
    %chanOutput_310, %ready_311 = esi.wrap.vr %handshake_buffer41.out0, %handshake_buffer41.out0_valid : i64
    %handshake_buffer41.in0_ready, %handshake_buffer41.out0, %handshake_buffer41.out0_valid = hw.instance "handshake_buffer41" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_308: i64, in0_valid: %valid_309: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_311: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_312, %valid_313 = esi.unwrap.vr %chanOutput_310, %handshake_fork6.in0_ready : i64
    %chanOutput_314, %ready_315 = esi.wrap.vr %handshake_fork6.out0, %handshake_fork6.out0_valid : i64
    %chanOutput_316, %ready_317 = esi.wrap.vr %handshake_fork6.out1, %handshake_fork6.out1_valid : i64
    %handshake_fork6.in0_ready, %handshake_fork6.out0, %handshake_fork6.out0_valid, %handshake_fork6.out1, %handshake_fork6.out1_valid = hw.instance "handshake_fork6" @handshake_fork_in_ui64_out_ui64_ui64(in0: %rawOutput_312: i64, in0_valid: %valid_313: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_315: i1, out1_ready: %ready_317: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %rawOutput_318, %valid_319 = esi.unwrap.vr %chanOutput_316, %handshake_buffer42.in0_ready : i64
    %chanOutput_320, %ready_321 = esi.wrap.vr %handshake_buffer42.out0, %handshake_buffer42.out0_valid : i64
    %handshake_buffer42.in0_ready, %handshake_buffer42.out0, %handshake_buffer42.out0_valid = hw.instance "handshake_buffer42" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_318: i64, in0_valid: %valid_319: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_321: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_322, %valid_323 = esi.unwrap.vr %chanOutput_314, %handshake_buffer43.in0_ready : i64
    %chanOutput_324, %ready_325 = esi.wrap.vr %handshake_buffer43.out0, %handshake_buffer43.out0_valid : i64
    %handshake_buffer43.in0_ready, %handshake_buffer43.out0, %handshake_buffer43.out0_valid = hw.instance "handshake_buffer43" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_322: i64, in0_valid: %valid_323: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_325: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_326, %valid_327 = esi.unwrap.vr %chanOutput_74, %handshake_constant3.ctrl_ready : i0
    %chanOutput_328, %ready_329 = esi.wrap.vr %handshake_constant3.out0, %handshake_constant3.out0_valid : i64
    %handshake_constant3.ctrl_ready, %handshake_constant3.out0, %handshake_constant3.out0_valid = hw.instance "handshake_constant3" @handshake_constant_c1_out_ui64(ctrl: %rawOutput_326: i0, ctrl_valid: %valid_327: i1, out0_ready: %ready_329: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_330, %valid_331 = esi.unwrap.vr %chanOutput_328, %handshake_buffer44.in0_ready : i64
    %chanOutput_332, %ready_333 = esi.wrap.vr %handshake_buffer44.out0, %handshake_buffer44.out0_valid : i64
    %handshake_buffer44.in0_ready, %handshake_buffer44.out0, %handshake_buffer44.out0_valid = hw.instance "handshake_buffer44" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_330: i64, in0_valid: %valid_331: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_333: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_334, %valid_335 = esi.unwrap.vr %chanOutput_332, %handshake_fork7.in0_ready : i64
    %chanOutput_336, %ready_337 = esi.wrap.vr %handshake_fork7.out0, %handshake_fork7.out0_valid : i64
    %chanOutput_338, %ready_339 = esi.wrap.vr %handshake_fork7.out1, %handshake_fork7.out1_valid : i64
    %handshake_fork7.in0_ready, %handshake_fork7.out0, %handshake_fork7.out0_valid, %handshake_fork7.out1, %handshake_fork7.out1_valid = hw.instance "handshake_fork7" @handshake_fork_in_ui64_out_ui64_ui64(in0: %rawOutput_334: i64, in0_valid: %valid_335: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_337: i1, out1_ready: %ready_339: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %rawOutput_340, %valid_341 = esi.unwrap.vr %chanOutput_338, %handshake_buffer45.in0_ready : i64
    %chanOutput_342, %ready_343 = esi.wrap.vr %handshake_buffer45.out0, %handshake_buffer45.out0_valid : i64
    %handshake_buffer45.in0_ready, %handshake_buffer45.out0, %handshake_buffer45.out0_valid = hw.instance "handshake_buffer45" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_340: i64, in0_valid: %valid_341: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_343: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_344, %valid_345 = esi.unwrap.vr %chanOutput_336, %handshake_buffer46.in0_ready : i64
    %chanOutput_346, %ready_347 = esi.wrap.vr %handshake_buffer46.out0, %handshake_buffer46.out0_valid : i64
    %handshake_buffer46.in0_ready, %handshake_buffer46.out0, %handshake_buffer46.out0_valid = hw.instance "handshake_buffer46" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_344: i64, in0_valid: %valid_345: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_347: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_348, %valid_349 = esi.unwrap.vr %chanOutput_70, %handshake_constant4.ctrl_ready : i0
    %chanOutput_350, %ready_351 = esi.wrap.vr %handshake_constant4.out0, %handshake_constant4.out0_valid : i64
    %handshake_constant4.ctrl_ready, %handshake_constant4.out0, %handshake_constant4.out0_valid = hw.instance "handshake_constant4" @handshake_constant_c2_out_ui64(ctrl: %rawOutput_348: i0, ctrl_valid: %valid_349: i1, out0_ready: %ready_351: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_352, %valid_353 = esi.unwrap.vr %chanOutput_350, %handshake_buffer47.in0_ready : i64
    %chanOutput_354, %ready_355 = esi.wrap.vr %handshake_buffer47.out0, %handshake_buffer47.out0_valid : i64
    %handshake_buffer47.in0_ready, %handshake_buffer47.out0, %handshake_buffer47.out0_valid = hw.instance "handshake_buffer47" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_352: i64, in0_valid: %valid_353: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_355: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_356, %valid_357 = esi.unwrap.vr %chanOutput_354, %handshake_fork8.in0_ready : i64
    %chanOutput_358, %ready_359 = esi.wrap.vr %handshake_fork8.out0, %handshake_fork8.out0_valid : i64
    %chanOutput_360, %ready_361 = esi.wrap.vr %handshake_fork8.out1, %handshake_fork8.out1_valid : i64
    %handshake_fork8.in0_ready, %handshake_fork8.out0, %handshake_fork8.out0_valid, %handshake_fork8.out1, %handshake_fork8.out1_valid = hw.instance "handshake_fork8" @handshake_fork_in_ui64_out_ui64_ui64(in0: %rawOutput_356: i64, in0_valid: %valid_357: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_359: i1, out1_ready: %ready_361: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %rawOutput_362, %valid_363 = esi.unwrap.vr %chanOutput_360, %handshake_buffer48.in0_ready : i64
    %chanOutput_364, %ready_365 = esi.wrap.vr %handshake_buffer48.out0, %handshake_buffer48.out0_valid : i64
    %handshake_buffer48.in0_ready, %handshake_buffer48.out0, %handshake_buffer48.out0_valid = hw.instance "handshake_buffer48" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_362: i64, in0_valid: %valid_363: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_365: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_366, %valid_367 = esi.unwrap.vr %chanOutput_358, %handshake_buffer49.in0_ready : i64
    %chanOutput_368, %ready_369 = esi.wrap.vr %handshake_buffer49.out0, %handshake_buffer49.out0_valid : i64
    %handshake_buffer49.in0_ready, %handshake_buffer49.out0, %handshake_buffer49.out0_valid = hw.instance "handshake_buffer49" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_366: i64, in0_valid: %valid_367: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_369: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_370, %valid_371 = esi.unwrap.vr %chanOutput_66, %handshake_constant5.ctrl_ready : i0
    %chanOutput_372, %ready_373 = esi.wrap.vr %handshake_constant5.out0, %handshake_constant5.out0_valid : i64
    %handshake_constant5.ctrl_ready, %handshake_constant5.out0, %handshake_constant5.out0_valid = hw.instance "handshake_constant5" @handshake_constant_c1_out_ui64(ctrl: %rawOutput_370: i0, ctrl_valid: %valid_371: i1, out0_ready: %ready_373: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_374, %valid_375 = esi.unwrap.vr %chanOutput_372, %handshake_buffer50.in0_ready : i64
    %chanOutput_376, %ready_377 = esi.wrap.vr %handshake_buffer50.out0, %handshake_buffer50.out0_valid : i64
    %handshake_buffer50.in0_ready, %handshake_buffer50.out0, %handshake_buffer50.out0_valid = hw.instance "handshake_buffer50" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_374: i64, in0_valid: %valid_375: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_377: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_378, %valid_379 = esi.unwrap.vr %chanOutput_376, %handshake_fork9.in0_ready : i64
    %chanOutput_380, %ready_381 = esi.wrap.vr %handshake_fork9.out0, %handshake_fork9.out0_valid : i64
    %chanOutput_382, %ready_383 = esi.wrap.vr %handshake_fork9.out1, %handshake_fork9.out1_valid : i64
    %chanOutput_384, %ready_385 = esi.wrap.vr %handshake_fork9.out2, %handshake_fork9.out2_valid : i64
    %handshake_fork9.in0_ready, %handshake_fork9.out0, %handshake_fork9.out0_valid, %handshake_fork9.out1, %handshake_fork9.out1_valid, %handshake_fork9.out2, %handshake_fork9.out2_valid = hw.instance "handshake_fork9" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %rawOutput_378: i64, in0_valid: %valid_379: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_381: i1, out1_ready: %ready_383: i1, out2_ready: %ready_385: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
    %rawOutput_386, %valid_387 = esi.unwrap.vr %chanOutput_384, %handshake_buffer51.in0_ready : i64
    %chanOutput_388, %ready_389 = esi.wrap.vr %handshake_buffer51.out0, %handshake_buffer51.out0_valid : i64
    %handshake_buffer51.in0_ready, %handshake_buffer51.out0, %handshake_buffer51.out0_valid = hw.instance "handshake_buffer51" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_386: i64, in0_valid: %valid_387: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_389: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_390, %valid_391 = esi.unwrap.vr %chanOutput_382, %handshake_buffer52.in0_ready : i64
    %chanOutput_392, %ready_393 = esi.wrap.vr %handshake_buffer52.out0, %handshake_buffer52.out0_valid : i64
    %handshake_buffer52.in0_ready, %handshake_buffer52.out0, %handshake_buffer52.out0_valid = hw.instance "handshake_buffer52" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_390: i64, in0_valid: %valid_391: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_393: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_394, %valid_395 = esi.unwrap.vr %chanOutput_380, %handshake_buffer53.in0_ready : i64
    %chanOutput_396, %ready_397 = esi.wrap.vr %handshake_buffer53.out0, %handshake_buffer53.out0_valid : i64
    %handshake_buffer53.in0_ready, %handshake_buffer53.out0, %handshake_buffer53.out0_valid = hw.instance "handshake_buffer53" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_394: i64, in0_valid: %valid_395: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_397: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_398, %valid_399 = esi.unwrap.vr %chanOutput_62, %handshake_constant6.ctrl_ready : i0
    %chanOutput_400, %ready_401 = esi.wrap.vr %handshake_constant6.out0, %handshake_constant6.out0_valid : i64
    %handshake_constant6.ctrl_ready, %handshake_constant6.out0, %handshake_constant6.out0_valid = hw.instance "handshake_constant6" @handshake_constant_c0_out_ui64(ctrl: %rawOutput_398: i0, ctrl_valid: %valid_399: i1, out0_ready: %ready_401: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_402, %valid_403 = esi.unwrap.vr %chanOutput_400, %handshake_buffer54.in0_ready : i64
    %chanOutput_404, %ready_405 = esi.wrap.vr %handshake_buffer54.out0, %handshake_buffer54.out0_valid : i64
    %handshake_buffer54.in0_ready, %handshake_buffer54.out0, %handshake_buffer54.out0_valid = hw.instance "handshake_buffer54" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_402: i64, in0_valid: %valid_403: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_405: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_406, %valid_407 = esi.unwrap.vr %chanOutput_404, %handshake_fork10.in0_ready : i64
    %chanOutput_408, %ready_409 = esi.wrap.vr %handshake_fork10.out0, %handshake_fork10.out0_valid : i64
    %chanOutput_410, %ready_411 = esi.wrap.vr %handshake_fork10.out1, %handshake_fork10.out1_valid : i64
    %chanOutput_412, %ready_413 = esi.wrap.vr %handshake_fork10.out2, %handshake_fork10.out2_valid : i64
    %handshake_fork10.in0_ready, %handshake_fork10.out0, %handshake_fork10.out0_valid, %handshake_fork10.out1, %handshake_fork10.out1_valid, %handshake_fork10.out2, %handshake_fork10.out2_valid = hw.instance "handshake_fork10" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %rawOutput_406: i64, in0_valid: %valid_407: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_409: i1, out1_ready: %ready_411: i1, out2_ready: %ready_413: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
    %rawOutput_414, %valid_415 = esi.unwrap.vr %chanOutput_412, %handshake_buffer55.in0_ready : i64
    %chanOutput_416, %ready_417 = esi.wrap.vr %handshake_buffer55.out0, %handshake_buffer55.out0_valid : i64
    %handshake_buffer55.in0_ready, %handshake_buffer55.out0, %handshake_buffer55.out0_valid = hw.instance "handshake_buffer55" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_414: i64, in0_valid: %valid_415: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_417: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_418, %valid_419 = esi.unwrap.vr %chanOutput_410, %handshake_buffer56.in0_ready : i64
    %chanOutput_420, %ready_421 = esi.wrap.vr %handshake_buffer56.out0, %handshake_buffer56.out0_valid : i64
    %handshake_buffer56.in0_ready, %handshake_buffer56.out0, %handshake_buffer56.out0_valid = hw.instance "handshake_buffer56" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_418: i64, in0_valid: %valid_419: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_421: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_422, %valid_423 = esi.unwrap.vr %chanOutput_408, %handshake_buffer57.in0_ready : i64
    %chanOutput_424, %ready_425 = esi.wrap.vr %handshake_buffer57.out0, %handshake_buffer57.out0_valid : i64
    %handshake_buffer57.in0_ready, %handshake_buffer57.out0, %handshake_buffer57.out0_valid = hw.instance "handshake_buffer57" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_422: i64, in0_valid: %valid_423: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_425: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_426, %valid_427 = esi.unwrap.vr %chanOutput_416, %handshake_store0.addrIn0_ready : i64
    %rawOutput_428, %valid_429 = esi.unwrap.vr %chanOutput_342, %handshake_store0.dataIn_ready : i64
    %rawOutput_430, %valid_431 = esi.unwrap.vr %chanOutput_58, %handshake_store0.ctrl_ready : i0
    %chanOutput_432, %ready_433 = esi.wrap.vr %handshake_store0.dataToMem, %handshake_store0.dataToMem_valid : i64
    %chanOutput_434, %ready_435 = esi.wrap.vr %handshake_store0.addrOut0, %handshake_store0.addrOut0_valid : i64
    %handshake_store0.addrIn0_ready, %handshake_store0.dataIn_ready, %handshake_store0.ctrl_ready, %handshake_store0.dataToMem, %handshake_store0.dataToMem_valid, %handshake_store0.addrOut0, %handshake_store0.addrOut0_valid = hw.instance "handshake_store0" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %rawOutput_426: i64, addrIn0_valid: %valid_427: i1, dataIn: %rawOutput_428: i64, dataIn_valid: %valid_429: i1, ctrl: %rawOutput_430: i0, ctrl_valid: %valid_431: i1, dataToMem_ready: %ready_433: i1, addrOut0_ready: %ready_435: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %rawOutput_436, %valid_437 = esi.unwrap.vr %chanOutput_434, %handshake_buffer58.in0_ready : i64
    %chanOutput_438, %ready_439 = esi.wrap.vr %handshake_buffer58.out0, %handshake_buffer58.out0_valid : i64
    %handshake_buffer58.in0_ready, %handshake_buffer58.out0, %handshake_buffer58.out0_valid = hw.instance "handshake_buffer58" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_436: i64, in0_valid: %valid_437: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_439: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_440, %valid_441 = esi.unwrap.vr %chanOutput_432, %handshake_buffer59.in0_ready : i64
    %chanOutput_442, %ready_443 = esi.wrap.vr %handshake_buffer59.out0, %handshake_buffer59.out0_valid : i64
    %handshake_buffer59.in0_ready, %handshake_buffer59.out0, %handshake_buffer59.out0_valid = hw.instance "handshake_buffer59" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_440: i64, in0_valid: %valid_441: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_443: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_444, %valid_445 = esi.unwrap.vr %chanOutput_54, %handshake_join1.in0_ready : i0
    %rawOutput_446, %valid_447 = esi.unwrap.vr %chanOutput_244, %handshake_join1.in1_ready : i0
    %chanOutput_448, %ready_449 = esi.wrap.vr %handshake_join1.out0, %handshake_join1.out0_valid : i0
    %handshake_join1.in0_ready, %handshake_join1.in1_ready, %handshake_join1.out0, %handshake_join1.out0_valid = hw.instance "handshake_join1" @handshake_join_2ins_1outs_ctrl(in0: %rawOutput_444: i0, in0_valid: %valid_445: i1, in1: %rawOutput_446: i0, in1_valid: %valid_447: i1, out0_ready: %ready_449: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_450, %valid_451 = esi.unwrap.vr %chanOutput_448, %handshake_buffer60.in0_ready : i0
    %chanOutput_452, %ready_453 = esi.wrap.vr %handshake_buffer60.out0, %handshake_buffer60.out0_valid : i0
    %handshake_buffer60.in0_ready, %handshake_buffer60.out0, %handshake_buffer60.out0_valid = hw.instance "handshake_buffer60" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_450: i0, in0_valid: %valid_451: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_453: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_454, %valid_455 = esi.unwrap.vr %chanOutput_388, %handshake_store1.addrIn0_ready : i64
    %rawOutput_456, %valid_457 = esi.unwrap.vr %chanOutput_320, %handshake_store1.dataIn_ready : i64
    %rawOutput_458, %valid_459 = esi.unwrap.vr %chanOutput_452, %handshake_store1.ctrl_ready : i0
    %chanOutput_460, %ready_461 = esi.wrap.vr %handshake_store1.dataToMem, %handshake_store1.dataToMem_valid : i64
    %chanOutput_462, %ready_463 = esi.wrap.vr %handshake_store1.addrOut0, %handshake_store1.addrOut0_valid : i64
    %handshake_store1.addrIn0_ready, %handshake_store1.dataIn_ready, %handshake_store1.ctrl_ready, %handshake_store1.dataToMem, %handshake_store1.dataToMem_valid, %handshake_store1.addrOut0, %handshake_store1.addrOut0_valid = hw.instance "handshake_store1" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %rawOutput_454: i64, addrIn0_valid: %valid_455: i1, dataIn: %rawOutput_456: i64, dataIn_valid: %valid_457: i1, ctrl: %rawOutput_458: i0, ctrl_valid: %valid_459: i1, dataToMem_ready: %ready_461: i1, addrOut0_ready: %ready_463: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %rawOutput_464, %valid_465 = esi.unwrap.vr %chanOutput_462, %handshake_buffer61.in0_ready : i64
    %chanOutput_466, %ready_467 = esi.wrap.vr %handshake_buffer61.out0, %handshake_buffer61.out0_valid : i64
    %handshake_buffer61.in0_ready, %handshake_buffer61.out0, %handshake_buffer61.out0_valid = hw.instance "handshake_buffer61" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_464: i64, in0_valid: %valid_465: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_467: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_468, %valid_469 = esi.unwrap.vr %chanOutput_460, %handshake_buffer62.in0_ready : i64
    %chanOutput_470, %ready_471 = esi.wrap.vr %handshake_buffer62.out0, %handshake_buffer62.out0_valid : i64
    %handshake_buffer62.in0_ready, %handshake_buffer62.out0, %handshake_buffer62.out0_valid = hw.instance "handshake_buffer62" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_468: i64, in0_valid: %valid_469: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_471: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_472, %valid_473 = esi.unwrap.vr %chanOutput_50, %handshake_join2.in0_ready : i0
    %rawOutput_474, %valid_475 = esi.unwrap.vr %chanOutput_248, %handshake_join2.in1_ready : i0
    %rawOutput_476, %valid_477 = esi.unwrap.vr %chanOutput_228, %handshake_join2.in2_ready : i0
    %chanOutput_478, %ready_479 = esi.wrap.vr %handshake_join2.out0, %handshake_join2.out0_valid : i0
    %handshake_join2.in0_ready, %handshake_join2.in1_ready, %handshake_join2.in2_ready, %handshake_join2.out0, %handshake_join2.out0_valid = hw.instance "handshake_join2" @handshake_join_3ins_1outs_ctrl(in0: %rawOutput_472: i0, in0_valid: %valid_473: i1, in1: %rawOutput_474: i0, in1_valid: %valid_475: i1, in2: %rawOutput_476: i0, in2_valid: %valid_477: i1, out0_ready: %ready_479: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_480, %valid_481 = esi.unwrap.vr %chanOutput_478, %handshake_buffer63.in0_ready : i0
    %chanOutput_482, %ready_483 = esi.wrap.vr %handshake_buffer63.out0, %handshake_buffer63.out0_valid : i0
    %handshake_buffer63.in0_ready, %handshake_buffer63.out0, %handshake_buffer63.out0_valid = hw.instance "handshake_buffer63" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_480: i0, in0_valid: %valid_481: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_483: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_484, %valid_485 = esi.unwrap.vr %chanOutput_364, %handshake_store2.addrIn0_ready : i64
    %rawOutput_486, %valid_487 = esi.unwrap.vr %chanOutput_298, %handshake_store2.dataIn_ready : i64
    %rawOutput_488, %valid_489 = esi.unwrap.vr %chanOutput_482, %handshake_store2.ctrl_ready : i0
    %chanOutput_490, %ready_491 = esi.wrap.vr %handshake_store2.dataToMem, %handshake_store2.dataToMem_valid : i64
    %chanOutput_492, %ready_493 = esi.wrap.vr %handshake_store2.addrOut0, %handshake_store2.addrOut0_valid : i64
    %handshake_store2.addrIn0_ready, %handshake_store2.dataIn_ready, %handshake_store2.ctrl_ready, %handshake_store2.dataToMem, %handshake_store2.dataToMem_valid, %handshake_store2.addrOut0, %handshake_store2.addrOut0_valid = hw.instance "handshake_store2" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %rawOutput_484: i64, addrIn0_valid: %valid_485: i1, dataIn: %rawOutput_486: i64, dataIn_valid: %valid_487: i1, ctrl: %rawOutput_488: i0, ctrl_valid: %valid_489: i1, dataToMem_ready: %ready_491: i1, addrOut0_ready: %ready_493: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %rawOutput_494, %valid_495 = esi.unwrap.vr %chanOutput_492, %handshake_buffer64.in0_ready : i64
    %chanOutput_496, %ready_497 = esi.wrap.vr %handshake_buffer64.out0, %handshake_buffer64.out0_valid : i64
    %handshake_buffer64.in0_ready, %handshake_buffer64.out0, %handshake_buffer64.out0_valid = hw.instance "handshake_buffer64" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_494: i64, in0_valid: %valid_495: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_497: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_498, %valid_499 = esi.unwrap.vr %chanOutput_490, %handshake_buffer65.in0_ready : i64
    %chanOutput_500, %ready_501 = esi.wrap.vr %handshake_buffer65.out0, %handshake_buffer65.out0_valid : i64
    %handshake_buffer65.in0_ready, %handshake_buffer65.out0, %handshake_buffer65.out0_valid = hw.instance "handshake_buffer65" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_498: i64, in0_valid: %valid_499: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_501: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_502, %valid_503 = esi.unwrap.vr %chanOutput_420, %handshake_store3.addrIn0_ready : i64
    %rawOutput_504, %valid_505 = esi.unwrap.vr %chanOutput_346, %handshake_store3.dataIn_ready : i64
    %rawOutput_506, %valid_507 = esi.unwrap.vr %chanOutput_42, %handshake_store3.ctrl_ready : i0
    %chanOutput_508, %ready_509 = esi.wrap.vr %handshake_store3.dataToMem, %handshake_store3.dataToMem_valid : i64
    %chanOutput_510, %ready_511 = esi.wrap.vr %handshake_store3.addrOut0, %handshake_store3.addrOut0_valid : i64
    %handshake_store3.addrIn0_ready, %handshake_store3.dataIn_ready, %handshake_store3.ctrl_ready, %handshake_store3.dataToMem, %handshake_store3.dataToMem_valid, %handshake_store3.addrOut0, %handshake_store3.addrOut0_valid = hw.instance "handshake_store3" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %rawOutput_502: i64, addrIn0_valid: %valid_503: i1, dataIn: %rawOutput_504: i64, dataIn_valid: %valid_505: i1, ctrl: %rawOutput_506: i0, ctrl_valid: %valid_507: i1, dataToMem_ready: %ready_509: i1, addrOut0_ready: %ready_511: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %rawOutput_512, %valid_513 = esi.unwrap.vr %chanOutput_510, %handshake_buffer66.in0_ready : i64
    %chanOutput_514, %ready_515 = esi.wrap.vr %handshake_buffer66.out0, %handshake_buffer66.out0_valid : i64
    %handshake_buffer66.in0_ready, %handshake_buffer66.out0, %handshake_buffer66.out0_valid = hw.instance "handshake_buffer66" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_512: i64, in0_valid: %valid_513: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_515: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_516, %valid_517 = esi.unwrap.vr %chanOutput_508, %handshake_buffer67.in0_ready : i64
    %chanOutput_518, %ready_519 = esi.wrap.vr %handshake_buffer67.out0, %handshake_buffer67.out0_valid : i64
    %handshake_buffer67.in0_ready, %handshake_buffer67.out0, %handshake_buffer67.out0_valid = hw.instance "handshake_buffer67" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_516: i64, in0_valid: %valid_517: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_519: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_520, %valid_521 = esi.unwrap.vr %chanOutput_38, %handshake_join3.in0_ready : i0
    %rawOutput_522, %valid_523 = esi.unwrap.vr %chanOutput_170, %handshake_join3.in1_ready : i0
    %chanOutput_524, %ready_525 = esi.wrap.vr %handshake_join3.out0, %handshake_join3.out0_valid : i0
    %handshake_join3.in0_ready, %handshake_join3.in1_ready, %handshake_join3.out0, %handshake_join3.out0_valid = hw.instance "handshake_join3" @handshake_join_2ins_1outs_ctrl(in0: %rawOutput_520: i0, in0_valid: %valid_521: i1, in1: %rawOutput_522: i0, in1_valid: %valid_523: i1, out0_ready: %ready_525: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_526, %valid_527 = esi.unwrap.vr %chanOutput_524, %handshake_buffer68.in0_ready : i0
    %chanOutput_528, %ready_529 = esi.wrap.vr %handshake_buffer68.out0, %handshake_buffer68.out0_valid : i0
    %handshake_buffer68.in0_ready, %handshake_buffer68.out0, %handshake_buffer68.out0_valid = hw.instance "handshake_buffer68" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_526: i0, in0_valid: %valid_527: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_529: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_530, %valid_531 = esi.unwrap.vr %chanOutput_392, %handshake_store4.addrIn0_ready : i64
    %rawOutput_532, %valid_533 = esi.unwrap.vr %chanOutput_324, %handshake_store4.dataIn_ready : i64
    %rawOutput_534, %valid_535 = esi.unwrap.vr %chanOutput_528, %handshake_store4.ctrl_ready : i0
    %chanOutput_536, %ready_537 = esi.wrap.vr %handshake_store4.dataToMem, %handshake_store4.dataToMem_valid : i64
    %chanOutput_538, %ready_539 = esi.wrap.vr %handshake_store4.addrOut0, %handshake_store4.addrOut0_valid : i64
    %handshake_store4.addrIn0_ready, %handshake_store4.dataIn_ready, %handshake_store4.ctrl_ready, %handshake_store4.dataToMem, %handshake_store4.dataToMem_valid, %handshake_store4.addrOut0, %handshake_store4.addrOut0_valid = hw.instance "handshake_store4" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %rawOutput_530: i64, addrIn0_valid: %valid_531: i1, dataIn: %rawOutput_532: i64, dataIn_valid: %valid_533: i1, ctrl: %rawOutput_534: i0, ctrl_valid: %valid_535: i1, dataToMem_ready: %ready_537: i1, addrOut0_ready: %ready_539: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %rawOutput_540, %valid_541 = esi.unwrap.vr %chanOutput_538, %handshake_buffer69.in0_ready : i64
    %chanOutput_542, %ready_543 = esi.wrap.vr %handshake_buffer69.out0, %handshake_buffer69.out0_valid : i64
    %handshake_buffer69.in0_ready, %handshake_buffer69.out0, %handshake_buffer69.out0_valid = hw.instance "handshake_buffer69" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_540: i64, in0_valid: %valid_541: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_543: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_544, %valid_545 = esi.unwrap.vr %chanOutput_536, %handshake_buffer70.in0_ready : i64
    %chanOutput_546, %ready_547 = esi.wrap.vr %handshake_buffer70.out0, %handshake_buffer70.out0_valid : i64
    %handshake_buffer70.in0_ready, %handshake_buffer70.out0, %handshake_buffer70.out0_valid = hw.instance "handshake_buffer70" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_544: i64, in0_valid: %valid_545: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_547: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_548, %valid_549 = esi.unwrap.vr %chanOutput_34, %handshake_join4.in0_ready : i0
    %rawOutput_550, %valid_551 = esi.unwrap.vr %chanOutput_174, %handshake_join4.in1_ready : i0
    %rawOutput_552, %valid_553 = esi.unwrap.vr %chanOutput_154, %handshake_join4.in2_ready : i0
    %chanOutput_554, %ready_555 = esi.wrap.vr %handshake_join4.out0, %handshake_join4.out0_valid : i0
    %handshake_join4.in0_ready, %handshake_join4.in1_ready, %handshake_join4.in2_ready, %handshake_join4.out0, %handshake_join4.out0_valid = hw.instance "handshake_join4" @handshake_join_3ins_1outs_ctrl(in0: %rawOutput_548: i0, in0_valid: %valid_549: i1, in1: %rawOutput_550: i0, in1_valid: %valid_551: i1, in2: %rawOutput_552: i0, in2_valid: %valid_553: i1, out0_ready: %ready_555: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_556, %valid_557 = esi.unwrap.vr %chanOutput_554, %handshake_buffer71.in0_ready : i0
    %chanOutput_558, %ready_559 = esi.wrap.vr %handshake_buffer71.out0, %handshake_buffer71.out0_valid : i0
    %handshake_buffer71.in0_ready, %handshake_buffer71.out0, %handshake_buffer71.out0_valid = hw.instance "handshake_buffer71" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_556: i0, in0_valid: %valid_557: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_559: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_560, %valid_561 = esi.unwrap.vr %chanOutput_368, %handshake_store5.addrIn0_ready : i64
    %rawOutput_562, %valid_563 = esi.unwrap.vr %chanOutput_302, %handshake_store5.dataIn_ready : i64
    %rawOutput_564, %valid_565 = esi.unwrap.vr %chanOutput_558, %handshake_store5.ctrl_ready : i0
    %chanOutput_566, %ready_567 = esi.wrap.vr %handshake_store5.dataToMem, %handshake_store5.dataToMem_valid : i64
    %chanOutput_568, %ready_569 = esi.wrap.vr %handshake_store5.addrOut0, %handshake_store5.addrOut0_valid : i64
    %handshake_store5.addrIn0_ready, %handshake_store5.dataIn_ready, %handshake_store5.ctrl_ready, %handshake_store5.dataToMem, %handshake_store5.dataToMem_valid, %handshake_store5.addrOut0, %handshake_store5.addrOut0_valid = hw.instance "handshake_store5" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %rawOutput_560: i64, addrIn0_valid: %valid_561: i1, dataIn: %rawOutput_562: i64, dataIn_valid: %valid_563: i1, ctrl: %rawOutput_564: i0, ctrl_valid: %valid_565: i1, dataToMem_ready: %ready_567: i1, addrOut0_ready: %ready_569: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %rawOutput_570, %valid_571 = esi.unwrap.vr %chanOutput_568, %handshake_buffer72.in0_ready : i64
    %chanOutput_572, %ready_573 = esi.wrap.vr %handshake_buffer72.out0, %handshake_buffer72.out0_valid : i64
    %handshake_buffer72.in0_ready, %handshake_buffer72.out0, %handshake_buffer72.out0_valid = hw.instance "handshake_buffer72" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_570: i64, in0_valid: %valid_571: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_573: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_574, %valid_575 = esi.unwrap.vr %chanOutput_566, %handshake_buffer73.in0_ready : i64
    %chanOutput_576, %ready_577 = esi.wrap.vr %handshake_buffer73.out0, %handshake_buffer73.out0_valid : i64
    %handshake_buffer73.in0_ready, %handshake_buffer73.out0, %handshake_buffer73.out0_valid = hw.instance "handshake_buffer73" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_574: i64, in0_valid: %valid_575: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_577: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_578, %valid_579 = esi.unwrap.vr %chanOutput_696, %handshake_buffer74.in0_ready : i1
    %chanOutput_580, %ready_581 = esi.wrap.vr %handshake_buffer74.out0, %handshake_buffer74.out0_valid : i1
    %handshake_buffer74.in0_ready, %handshake_buffer74.out0, %handshake_buffer74.out0_valid = hw.instance "handshake_buffer74" @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in0: %rawOutput_578: i1, in0_valid: %valid_579: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_581: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %rawOutput_582, %valid_583 = esi.unwrap.vr %chanOutput_580, %handshake_fork11.in0_ready : i1
    %chanOutput_584, %ready_585 = esi.wrap.vr %handshake_fork11.out0, %handshake_fork11.out0_valid : i1
    %chanOutput_586, %ready_587 = esi.wrap.vr %handshake_fork11.out1, %handshake_fork11.out1_valid : i1
    %chanOutput_588, %ready_589 = esi.wrap.vr %handshake_fork11.out2, %handshake_fork11.out2_valid : i1
    %chanOutput_590, %ready_591 = esi.wrap.vr %handshake_fork11.out3, %handshake_fork11.out3_valid : i1
    %handshake_fork11.in0_ready, %handshake_fork11.out0, %handshake_fork11.out0_valid, %handshake_fork11.out1, %handshake_fork11.out1_valid, %handshake_fork11.out2, %handshake_fork11.out2_valid, %handshake_fork11.out3, %handshake_fork11.out3_valid = hw.instance "handshake_fork11" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in0: %rawOutput_582: i1, in0_valid: %valid_583: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_585: i1, out1_ready: %ready_587: i1, out2_ready: %ready_589: i1, out3_ready: %ready_591: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1)
    %rawOutput_592, %valid_593 = esi.unwrap.vr %chanOutput_590, %handshake_buffer75.in0_ready : i1
    %chanOutput_594, %ready_595 = esi.wrap.vr %handshake_buffer75.out0, %handshake_buffer75.out0_valid : i1
    %handshake_buffer75.in0_ready, %handshake_buffer75.out0, %handshake_buffer75.out0_valid = hw.instance "handshake_buffer75" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %rawOutput_592: i1, in0_valid: %valid_593: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_595: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %rawOutput_596, %valid_597 = esi.unwrap.vr %chanOutput_588, %handshake_buffer76.in0_ready : i1
    %chanOutput_598, %ready_599 = esi.wrap.vr %handshake_buffer76.out0, %handshake_buffer76.out0_valid : i1
    %handshake_buffer76.in0_ready, %handshake_buffer76.out0, %handshake_buffer76.out0_valid = hw.instance "handshake_buffer76" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %rawOutput_596: i1, in0_valid: %valid_597: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_599: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %rawOutput_600, %valid_601 = esi.unwrap.vr %chanOutput_586, %handshake_buffer77.in0_ready : i1
    %chanOutput_602, %ready_603 = esi.wrap.vr %handshake_buffer77.out0, %handshake_buffer77.out0_valid : i1
    %handshake_buffer77.in0_ready, %handshake_buffer77.out0, %handshake_buffer77.out0_valid = hw.instance "handshake_buffer77" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %rawOutput_600: i1, in0_valid: %valid_601: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_603: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %rawOutput_604, %valid_605 = esi.unwrap.vr %chanOutput_584, %handshake_buffer78.in0_ready : i1
    %chanOutput_606, %ready_607 = esi.wrap.vr %handshake_buffer78.out0, %handshake_buffer78.out0_valid : i1
    %handshake_buffer78.in0_ready, %handshake_buffer78.out0, %handshake_buffer78.out0_valid = hw.instance "handshake_buffer78" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %rawOutput_604: i1, in0_valid: %valid_605: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_607: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %rawOutput_608, %valid_609 = esi.unwrap.vr %chanOutput_594, %handshake_mux0.select_ready : i1
    %rawOutput_610, %valid_611 = esi.unwrap.vr %chanOutput_272, %handshake_mux0.in0_ready : i0
    %rawOutput_612, %valid_613 = esi.unwrap.vr %chanOutput_858, %handshake_mux0.in1_ready : i0
    %chanOutput_614, %ready_615 = esi.wrap.vr %handshake_mux0.out0, %handshake_mux0.out0_valid : i0
    %handshake_mux0.select_ready, %handshake_mux0.in0_ready, %handshake_mux0.in1_ready, %handshake_mux0.out0, %handshake_mux0.out0_valid = hw.instance "handshake_mux0" @handshake_mux_in_ui1_3ins_1outs_ctrl(select: %rawOutput_608: i1, select_valid: %valid_609: i1, in0: %rawOutput_610: i0, in0_valid: %valid_611: i1, in1: %rawOutput_612: i0, in1_valid: %valid_613: i1, out0_ready: %ready_615: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_616, %valid_617 = esi.unwrap.vr %chanOutput_614, %handshake_buffer79.in0_ready : i0
    %chanOutput_618, %ready_619 = esi.wrap.vr %handshake_buffer79.out0, %handshake_buffer79.out0_valid : i0
    %handshake_buffer79.in0_ready, %handshake_buffer79.out0, %handshake_buffer79.out0_valid = hw.instance "handshake_buffer79" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_616: i0, in0_valid: %valid_617: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_619: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_620, %valid_621 = esi.unwrap.vr %chanOutput_598, %handshake_mux1.select_ready : i1
    %rawOutput_622, %valid_623 = esi.unwrap.vr %chanOutput_424, %handshake_mux1.in0_ready : i64
    %rawOutput_624, %valid_625 = esi.unwrap.vr %chanOutput_932, %handshake_mux1.in1_ready : i64
    %chanOutput_626, %ready_627 = esi.wrap.vr %handshake_mux1.out0, %handshake_mux1.out0_valid : i64
    %handshake_mux1.select_ready, %handshake_mux1.in0_ready, %handshake_mux1.in1_ready, %handshake_mux1.out0, %handshake_mux1.out0_valid = hw.instance "handshake_mux1" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %rawOutput_620: i1, select_valid: %valid_621: i1, in0: %rawOutput_622: i64, in0_valid: %valid_623: i1, in1: %rawOutput_624: i64, in1_valid: %valid_625: i1, out0_ready: %ready_627: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_628, %valid_629 = esi.unwrap.vr %chanOutput_626, %handshake_buffer80.in0_ready : i64
    %chanOutput_630, %ready_631 = esi.wrap.vr %handshake_buffer80.out0, %handshake_buffer80.out0_valid : i64
    %handshake_buffer80.in0_ready, %handshake_buffer80.out0, %handshake_buffer80.out0_valid = hw.instance "handshake_buffer80" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_628: i64, in0_valid: %valid_629: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_631: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_632, %valid_633 = esi.unwrap.vr %chanOutput_630, %handshake_fork12.in0_ready : i64
    %chanOutput_634, %ready_635 = esi.wrap.vr %handshake_fork12.out0, %handshake_fork12.out0_valid : i64
    %chanOutput_636, %ready_637 = esi.wrap.vr %handshake_fork12.out1, %handshake_fork12.out1_valid : i64
    %handshake_fork12.in0_ready, %handshake_fork12.out0, %handshake_fork12.out0_valid, %handshake_fork12.out1, %handshake_fork12.out1_valid = hw.instance "handshake_fork12" @handshake_fork_in_ui64_out_ui64_ui64(in0: %rawOutput_632: i64, in0_valid: %valid_633: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_635: i1, out1_ready: %ready_637: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %rawOutput_638, %valid_639 = esi.unwrap.vr %chanOutput_636, %handshake_buffer81.in0_ready : i64
    %chanOutput_640, %ready_641 = esi.wrap.vr %handshake_buffer81.out0, %handshake_buffer81.out0_valid : i64
    %handshake_buffer81.in0_ready, %handshake_buffer81.out0, %handshake_buffer81.out0_valid = hw.instance "handshake_buffer81" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_638: i64, in0_valid: %valid_639: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_641: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_642, %valid_643 = esi.unwrap.vr %chanOutput_634, %handshake_buffer82.in0_ready : i64
    %chanOutput_644, %ready_645 = esi.wrap.vr %handshake_buffer82.out0, %handshake_buffer82.out0_valid : i64
    %handshake_buffer82.in0_ready, %handshake_buffer82.out0, %handshake_buffer82.out0_valid = hw.instance "handshake_buffer82" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_642: i64, in0_valid: %valid_643: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_645: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_646, %valid_647 = esi.unwrap.vr %chanOutput_602, %handshake_mux2.select_ready : i1
    %rawOutput_648, %valid_649 = esi.unwrap.vr %chanOutput_280, %handshake_mux2.in0_ready : i64
    %rawOutput_650, %valid_651 = esi.unwrap.vr %chanOutput_772, %handshake_mux2.in1_ready : i64
    %chanOutput_652, %ready_653 = esi.wrap.vr %handshake_mux2.out0, %handshake_mux2.out0_valid : i64
    %handshake_mux2.select_ready, %handshake_mux2.in0_ready, %handshake_mux2.in1_ready, %handshake_mux2.out0, %handshake_mux2.out0_valid = hw.instance "handshake_mux2" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %rawOutput_646: i1, select_valid: %valid_647: i1, in0: %rawOutput_648: i64, in0_valid: %valid_649: i1, in1: %rawOutput_650: i64, in1_valid: %valid_651: i1, out0_ready: %ready_653: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_654, %valid_655 = esi.unwrap.vr %chanOutput_652, %handshake_buffer83.in0_ready : i64
    %chanOutput_656, %ready_657 = esi.wrap.vr %handshake_buffer83.out0, %handshake_buffer83.out0_valid : i64
    %handshake_buffer83.in0_ready, %handshake_buffer83.out0, %handshake_buffer83.out0_valid = hw.instance "handshake_buffer83" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_654: i64, in0_valid: %valid_655: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_657: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_658, %valid_659 = esi.unwrap.vr %chanOutput_656, %handshake_fork13.in0_ready : i64
    %chanOutput_660, %ready_661 = esi.wrap.vr %handshake_fork13.out0, %handshake_fork13.out0_valid : i64
    %chanOutput_662, %ready_663 = esi.wrap.vr %handshake_fork13.out1, %handshake_fork13.out1_valid : i64
    %handshake_fork13.in0_ready, %handshake_fork13.out0, %handshake_fork13.out0_valid, %handshake_fork13.out1, %handshake_fork13.out1_valid = hw.instance "handshake_fork13" @handshake_fork_in_ui64_out_ui64_ui64(in0: %rawOutput_658: i64, in0_valid: %valid_659: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_661: i1, out1_ready: %ready_663: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %rawOutput_664, %valid_665 = esi.unwrap.vr %chanOutput_662, %handshake_buffer84.in0_ready : i64
    %chanOutput_666, %ready_667 = esi.wrap.vr %handshake_buffer84.out0, %handshake_buffer84.out0_valid : i64
    %handshake_buffer84.in0_ready, %handshake_buffer84.out0, %handshake_buffer84.out0_valid = hw.instance "handshake_buffer84" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_664: i64, in0_valid: %valid_665: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_667: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_668, %valid_669 = esi.unwrap.vr %chanOutput_660, %handshake_buffer85.in0_ready : i64
    %chanOutput_670, %ready_671 = esi.wrap.vr %handshake_buffer85.out0, %handshake_buffer85.out0_valid : i64
    %handshake_buffer85.in0_ready, %handshake_buffer85.out0, %handshake_buffer85.out0_valid = hw.instance "handshake_buffer85" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_668: i64, in0_valid: %valid_669: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_671: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_672, %valid_673 = esi.unwrap.vr %chanOutput_606, %handshake_mux3.select_ready : i1
    %rawOutput_674, %valid_675 = esi.unwrap.vr %chanOutput_396, %handshake_mux3.in0_ready : i64
    %rawOutput_676, %valid_677 = esi.unwrap.vr %chanOutput_802, %handshake_mux3.in1_ready : i64
    %chanOutput_678, %ready_679 = esi.wrap.vr %handshake_mux3.out0, %handshake_mux3.out0_valid : i64
    %handshake_mux3.select_ready, %handshake_mux3.in0_ready, %handshake_mux3.in1_ready, %handshake_mux3.out0, %handshake_mux3.out0_valid = hw.instance "handshake_mux3" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %rawOutput_672: i1, select_valid: %valid_673: i1, in0: %rawOutput_674: i64, in0_valid: %valid_675: i1, in1: %rawOutput_676: i64, in1_valid: %valid_677: i1, out0_ready: %ready_679: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_680, %valid_681 = esi.unwrap.vr %chanOutput_678, %handshake_buffer86.in0_ready : i64
    %chanOutput_682, %ready_683 = esi.wrap.vr %handshake_buffer86.out0, %handshake_buffer86.out0_valid : i64
    %handshake_buffer86.in0_ready, %handshake_buffer86.out0, %handshake_buffer86.out0_valid = hw.instance "handshake_buffer86" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_680: i64, in0_valid: %valid_681: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_683: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_684, %valid_685 = esi.unwrap.vr %chanOutput_644, %arith_cmpi0.in0_ready : i64
    %rawOutput_686, %valid_687 = esi.unwrap.vr %chanOutput_670, %arith_cmpi0.in1_ready : i64
    %chanOutput_688, %ready_689 = esi.wrap.vr %arith_cmpi0.out0, %arith_cmpi0.out0_valid : i1
    %arith_cmpi0.in0_ready, %arith_cmpi0.in1_ready, %arith_cmpi0.out0, %arith_cmpi0.out0_valid = hw.instance "arith_cmpi0" @arith_cmpi_in_ui64_ui64_out_ui1_slt(in0: %rawOutput_684: i64, in0_valid: %valid_685: i1, in1: %rawOutput_686: i64, in1_valid: %valid_687: i1, out0_ready: %ready_689: i1) -> (in0_ready: i1, in1_ready: i1, out0: i1, out0_valid: i1)
    %rawOutput_690, %valid_691 = esi.unwrap.vr %chanOutput_688, %handshake_buffer87.in0_ready : i1
    %chanOutput_692, %ready_693 = esi.wrap.vr %handshake_buffer87.out0, %handshake_buffer87.out0_valid : i1
    %handshake_buffer87.in0_ready, %handshake_buffer87.out0, %handshake_buffer87.out0_valid = hw.instance "handshake_buffer87" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %rawOutput_690: i1, in0_valid: %valid_691: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_693: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %rawOutput_694, %valid_695 = esi.unwrap.vr %chanOutput_692, %handshake_fork14.in0_ready : i1
    %chanOutput_696, %ready_697 = esi.wrap.vr %handshake_fork14.out0, %handshake_fork14.out0_valid : i1
    %chanOutput_698, %ready_699 = esi.wrap.vr %handshake_fork14.out1, %handshake_fork14.out1_valid : i1
    %chanOutput_700, %ready_701 = esi.wrap.vr %handshake_fork14.out2, %handshake_fork14.out2_valid : i1
    %chanOutput_702, %ready_703 = esi.wrap.vr %handshake_fork14.out3, %handshake_fork14.out3_valid : i1
    %chanOutput_704, %ready_705 = esi.wrap.vr %handshake_fork14.out4, %handshake_fork14.out4_valid : i1
    %handshake_fork14.in0_ready, %handshake_fork14.out0, %handshake_fork14.out0_valid, %handshake_fork14.out1, %handshake_fork14.out1_valid, %handshake_fork14.out2, %handshake_fork14.out2_valid, %handshake_fork14.out3, %handshake_fork14.out3_valid, %handshake_fork14.out4, %handshake_fork14.out4_valid = hw.instance "handshake_fork14" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in0: %rawOutput_694: i1, in0_valid: %valid_695: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_697: i1, out1_ready: %ready_699: i1, out2_ready: %ready_701: i1, out3_ready: %ready_703: i1, out4_ready: %ready_705: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1, out4: i1, out4_valid: i1)
    %rawOutput_706, %valid_707 = esi.unwrap.vr %chanOutput_704, %handshake_buffer88.in0_ready : i1
    %chanOutput_708, %ready_709 = esi.wrap.vr %handshake_buffer88.out0, %handshake_buffer88.out0_valid : i1
    %handshake_buffer88.in0_ready, %handshake_buffer88.out0, %handshake_buffer88.out0_valid = hw.instance "handshake_buffer88" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %rawOutput_706: i1, in0_valid: %valid_707: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_709: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %rawOutput_710, %valid_711 = esi.unwrap.vr %chanOutput_702, %handshake_buffer89.in0_ready : i1
    %chanOutput_712, %ready_713 = esi.wrap.vr %handshake_buffer89.out0, %handshake_buffer89.out0_valid : i1
    %handshake_buffer89.in0_ready, %handshake_buffer89.out0, %handshake_buffer89.out0_valid = hw.instance "handshake_buffer89" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %rawOutput_710: i1, in0_valid: %valid_711: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_713: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %rawOutput_714, %valid_715 = esi.unwrap.vr %chanOutput_700, %handshake_buffer90.in0_ready : i1
    %chanOutput_716, %ready_717 = esi.wrap.vr %handshake_buffer90.out0, %handshake_buffer90.out0_valid : i1
    %handshake_buffer90.in0_ready, %handshake_buffer90.out0, %handshake_buffer90.out0_valid = hw.instance "handshake_buffer90" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %rawOutput_714: i1, in0_valid: %valid_715: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_717: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %rawOutput_718, %valid_719 = esi.unwrap.vr %chanOutput_698, %handshake_buffer91.in0_ready : i1
    %chanOutput_720, %ready_721 = esi.wrap.vr %handshake_buffer91.out0, %handshake_buffer91.out0_valid : i1
    %handshake_buffer91.in0_ready, %handshake_buffer91.out0, %handshake_buffer91.out0_valid = hw.instance "handshake_buffer91" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %rawOutput_718: i1, in0_valid: %valid_719: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_721: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %rawOutput_722, %valid_723 = esi.unwrap.vr %chanOutput_708, %handshake_cond_br0.cond_ready : i1
    %rawOutput_724, %valid_725 = esi.unwrap.vr %chanOutput_640, %handshake_cond_br0.data_ready : i64
    %chanOutput_726, %ready_727 = esi.wrap.vr %handshake_cond_br0.outTrue, %handshake_cond_br0.outTrue_valid : i64
    %chanOutput_728, %ready_729 = esi.wrap.vr %handshake_cond_br0.outFalse, %handshake_cond_br0.outFalse_valid : i64
    %handshake_cond_br0.cond_ready, %handshake_cond_br0.data_ready, %handshake_cond_br0.outTrue, %handshake_cond_br0.outTrue_valid, %handshake_cond_br0.outFalse, %handshake_cond_br0.outFalse_valid = hw.instance "handshake_cond_br0" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %rawOutput_722: i1, cond_valid: %valid_723: i1, data: %rawOutput_724: i64, data_valid: %valid_725: i1, outTrue_ready: %ready_727: i1, outFalse_ready: %ready_729: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %rawOutput_730, %valid_731 = esi.unwrap.vr %chanOutput_726, %handshake_buffer92.in0_ready : i64
    %chanOutput_732, %ready_733 = esi.wrap.vr %handshake_buffer92.out0, %handshake_buffer92.out0_valid : i64
    %handshake_buffer92.in0_ready, %handshake_buffer92.out0, %handshake_buffer92.out0_valid = hw.instance "handshake_buffer92" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_730: i64, in0_valid: %valid_731: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_733: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_734, %valid_735 = esi.unwrap.vr %chanOutput_728, %handshake_sink0.in0_ready : i64
    %handshake_sink0.in0_ready = hw.instance "handshake_sink0" @handshake_sink_in_ui64(in0: %rawOutput_734: i64, in0_valid: %valid_735: i1) -> (in0_ready: i1)
    %rawOutput_736, %valid_737 = esi.unwrap.vr %chanOutput_732, %handshake_fork15.in0_ready : i64
    %chanOutput_738, %ready_739 = esi.wrap.vr %handshake_fork15.out0, %handshake_fork15.out0_valid : i64
    %chanOutput_740, %ready_741 = esi.wrap.vr %handshake_fork15.out1, %handshake_fork15.out1_valid : i64
    %chanOutput_742, %ready_743 = esi.wrap.vr %handshake_fork15.out2, %handshake_fork15.out2_valid : i64
    %chanOutput_744, %ready_745 = esi.wrap.vr %handshake_fork15.out3, %handshake_fork15.out3_valid : i64
    %handshake_fork15.in0_ready, %handshake_fork15.out0, %handshake_fork15.out0_valid, %handshake_fork15.out1, %handshake_fork15.out1_valid, %handshake_fork15.out2, %handshake_fork15.out2_valid, %handshake_fork15.out3, %handshake_fork15.out3_valid = hw.instance "handshake_fork15" @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in0: %rawOutput_736: i64, in0_valid: %valid_737: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_739: i1, out1_ready: %ready_741: i1, out2_ready: %ready_743: i1, out3_ready: %ready_745: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1, out3: i64, out3_valid: i1)
    %rawOutput_746, %valid_747 = esi.unwrap.vr %chanOutput_744, %handshake_buffer93.in0_ready : i64
    %chanOutput_748, %ready_749 = esi.wrap.vr %handshake_buffer93.out0, %handshake_buffer93.out0_valid : i64
    %handshake_buffer93.in0_ready, %handshake_buffer93.out0, %handshake_buffer93.out0_valid = hw.instance "handshake_buffer93" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_746: i64, in0_valid: %valid_747: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_749: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_750, %valid_751 = esi.unwrap.vr %chanOutput_742, %handshake_buffer94.in0_ready : i64
    %chanOutput_752, %ready_753 = esi.wrap.vr %handshake_buffer94.out0, %handshake_buffer94.out0_valid : i64
    %handshake_buffer94.in0_ready, %handshake_buffer94.out0, %handshake_buffer94.out0_valid = hw.instance "handshake_buffer94" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_750: i64, in0_valid: %valid_751: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_753: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_754, %valid_755 = esi.unwrap.vr %chanOutput_740, %handshake_buffer95.in0_ready : i64
    %chanOutput_756, %ready_757 = esi.wrap.vr %handshake_buffer95.out0, %handshake_buffer95.out0_valid : i64
    %handshake_buffer95.in0_ready, %handshake_buffer95.out0, %handshake_buffer95.out0_valid = hw.instance "handshake_buffer95" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_754: i64, in0_valid: %valid_755: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_757: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_758, %valid_759 = esi.unwrap.vr %chanOutput_738, %handshake_buffer96.in0_ready : i64
    %chanOutput_760, %ready_761 = esi.wrap.vr %handshake_buffer96.out0, %handshake_buffer96.out0_valid : i64
    %handshake_buffer96.in0_ready, %handshake_buffer96.out0, %handshake_buffer96.out0_valid = hw.instance "handshake_buffer96" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_758: i64, in0_valid: %valid_759: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_761: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_762, %valid_763 = esi.unwrap.vr %chanOutput_712, %handshake_cond_br1.cond_ready : i1
    %rawOutput_764, %valid_765 = esi.unwrap.vr %chanOutput_666, %handshake_cond_br1.data_ready : i64
    %chanOutput_766, %ready_767 = esi.wrap.vr %handshake_cond_br1.outTrue, %handshake_cond_br1.outTrue_valid : i64
    %chanOutput_768, %ready_769 = esi.wrap.vr %handshake_cond_br1.outFalse, %handshake_cond_br1.outFalse_valid : i64
    %handshake_cond_br1.cond_ready, %handshake_cond_br1.data_ready, %handshake_cond_br1.outTrue, %handshake_cond_br1.outTrue_valid, %handshake_cond_br1.outFalse, %handshake_cond_br1.outFalse_valid = hw.instance "handshake_cond_br1" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %rawOutput_762: i1, cond_valid: %valid_763: i1, data: %rawOutput_764: i64, data_valid: %valid_765: i1, outTrue_ready: %ready_767: i1, outFalse_ready: %ready_769: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %rawOutput_770, %valid_771 = esi.unwrap.vr %chanOutput_766, %handshake_buffer97.in0_ready : i64
    %chanOutput_772, %ready_773 = esi.wrap.vr %handshake_buffer97.out0, %handshake_buffer97.out0_valid : i64
    %handshake_buffer97.in0_ready, %handshake_buffer97.out0, %handshake_buffer97.out0_valid = hw.instance "handshake_buffer97" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_770: i64, in0_valid: %valid_771: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_773: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_774, %valid_775 = esi.unwrap.vr %chanOutput_768, %handshake_sink1.in0_ready : i64
    %handshake_sink1.in0_ready = hw.instance "handshake_sink1" @handshake_sink_in_ui64(in0: %rawOutput_774: i64, in0_valid: %valid_775: i1) -> (in0_ready: i1)
    %rawOutput_776, %valid_777 = esi.unwrap.vr %chanOutput_716, %handshake_cond_br2.cond_ready : i1
    %rawOutput_778, %valid_779 = esi.unwrap.vr %chanOutput_682, %handshake_cond_br2.data_ready : i64
    %chanOutput_780, %ready_781 = esi.wrap.vr %handshake_cond_br2.outTrue, %handshake_cond_br2.outTrue_valid : i64
    %chanOutput_782, %ready_783 = esi.wrap.vr %handshake_cond_br2.outFalse, %handshake_cond_br2.outFalse_valid : i64
    %handshake_cond_br2.cond_ready, %handshake_cond_br2.data_ready, %handshake_cond_br2.outTrue, %handshake_cond_br2.outTrue_valid, %handshake_cond_br2.outFalse, %handshake_cond_br2.outFalse_valid = hw.instance "handshake_cond_br2" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %rawOutput_776: i1, cond_valid: %valid_777: i1, data: %rawOutput_778: i64, data_valid: %valid_779: i1, outTrue_ready: %ready_781: i1, outFalse_ready: %ready_783: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %rawOutput_784, %valid_785 = esi.unwrap.vr %chanOutput_780, %handshake_buffer98.in0_ready : i64
    %chanOutput_786, %ready_787 = esi.wrap.vr %handshake_buffer98.out0, %handshake_buffer98.out0_valid : i64
    %handshake_buffer98.in0_ready, %handshake_buffer98.out0, %handshake_buffer98.out0_valid = hw.instance "handshake_buffer98" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_784: i64, in0_valid: %valid_785: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_787: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_788, %valid_789 = esi.unwrap.vr %chanOutput_782, %handshake_sink2.in0_ready : i64
    %handshake_sink2.in0_ready = hw.instance "handshake_sink2" @handshake_sink_in_ui64(in0: %rawOutput_788: i64, in0_valid: %valid_789: i1) -> (in0_ready: i1)
    %rawOutput_790, %valid_791 = esi.unwrap.vr %chanOutput_786, %handshake_fork16.in0_ready : i64
    %chanOutput_792, %ready_793 = esi.wrap.vr %handshake_fork16.out0, %handshake_fork16.out0_valid : i64
    %chanOutput_794, %ready_795 = esi.wrap.vr %handshake_fork16.out1, %handshake_fork16.out1_valid : i64
    %handshake_fork16.in0_ready, %handshake_fork16.out0, %handshake_fork16.out0_valid, %handshake_fork16.out1, %handshake_fork16.out1_valid = hw.instance "handshake_fork16" @handshake_fork_in_ui64_out_ui64_ui64(in0: %rawOutput_790: i64, in0_valid: %valid_791: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_793: i1, out1_ready: %ready_795: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %rawOutput_796, %valid_797 = esi.unwrap.vr %chanOutput_794, %handshake_buffer99.in0_ready : i64
    %chanOutput_798, %ready_799 = esi.wrap.vr %handshake_buffer99.out0, %handshake_buffer99.out0_valid : i64
    %handshake_buffer99.in0_ready, %handshake_buffer99.out0, %handshake_buffer99.out0_valid = hw.instance "handshake_buffer99" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_796: i64, in0_valid: %valid_797: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_799: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_800, %valid_801 = esi.unwrap.vr %chanOutput_792, %handshake_buffer100.in0_ready : i64
    %chanOutput_802, %ready_803 = esi.wrap.vr %handshake_buffer100.out0, %handshake_buffer100.out0_valid : i64
    %handshake_buffer100.in0_ready, %handshake_buffer100.out0, %handshake_buffer100.out0_valid = hw.instance "handshake_buffer100" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_800: i64, in0_valid: %valid_801: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_803: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_804, %valid_805 = esi.unwrap.vr %chanOutput_720, %handshake_cond_br3.cond_ready : i1
    %rawOutput_806, %valid_807 = esi.unwrap.vr %chanOutput_618, %handshake_cond_br3.data_ready : i0
    %chanOutput_808, %ready_809 = esi.wrap.vr %handshake_cond_br3.outTrue, %handshake_cond_br3.outTrue_valid : i0
    %chanOutput_810, %ready_811 = esi.wrap.vr %handshake_cond_br3.outFalse, %handshake_cond_br3.outFalse_valid : i0
    %handshake_cond_br3.cond_ready, %handshake_cond_br3.data_ready, %handshake_cond_br3.outTrue, %handshake_cond_br3.outTrue_valid, %handshake_cond_br3.outFalse, %handshake_cond_br3.outFalse_valid = hw.instance "handshake_cond_br3" @handshake_cond_br_in_ui1_2ins_2outs_ctrl(cond: %rawOutput_804: i1, cond_valid: %valid_805: i1, data: %rawOutput_806: i0, data_valid: %valid_807: i1, outTrue_ready: %ready_809: i1, outFalse_ready: %ready_811: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i0, outTrue_valid: i1, outFalse: i0, outFalse_valid: i1)
    %rawOutput_812, %valid_813 = esi.unwrap.vr %chanOutput_810, %handshake_buffer101.in0_ready : i0
    %chanOutput_814, %ready_815 = esi.wrap.vr %handshake_buffer101.out0, %handshake_buffer101.out0_valid : i0
    %handshake_buffer101.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid = hw.instance "handshake_buffer101" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_812: i0, in0_valid: %valid_813: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_815: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_816, %valid_817 = esi.unwrap.vr %chanOutput_808, %handshake_buffer102.in0_ready : i0
    %chanOutput_818, %ready_819 = esi.wrap.vr %handshake_buffer102.out0, %handshake_buffer102.out0_valid : i0
    %handshake_buffer102.in0_ready, %handshake_buffer102.out0, %handshake_buffer102.out0_valid = hw.instance "handshake_buffer102" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_816: i0, in0_valid: %valid_817: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_819: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_820, %valid_821 = esi.unwrap.vr %chanOutput_818, %handshake_fork17.in0_ready : i0
    %chanOutput_822, %ready_823 = esi.wrap.vr %handshake_fork17.out0, %handshake_fork17.out0_valid : i0
    %chanOutput_824, %ready_825 = esi.wrap.vr %handshake_fork17.out1, %handshake_fork17.out1_valid : i0
    %chanOutput_826, %ready_827 = esi.wrap.vr %handshake_fork17.out2, %handshake_fork17.out2_valid : i0
    %chanOutput_828, %ready_829 = esi.wrap.vr %handshake_fork17.out3, %handshake_fork17.out3_valid : i0
    %handshake_fork17.in0_ready, %handshake_fork17.out0, %handshake_fork17.out0_valid, %handshake_fork17.out1, %handshake_fork17.out1_valid, %handshake_fork17.out2, %handshake_fork17.out2_valid, %handshake_fork17.out3, %handshake_fork17.out3_valid = hw.instance "handshake_fork17" @handshake_fork_1ins_4outs_ctrl(in0: %rawOutput_820: i0, in0_valid: %valid_821: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_823: i1, out1_ready: %ready_825: i1, out2_ready: %ready_827: i1, out3_ready: %ready_829: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1)
    %rawOutput_830, %valid_831 = esi.unwrap.vr %chanOutput_828, %handshake_buffer103.in0_ready : i0
    %chanOutput_832, %ready_833 = esi.wrap.vr %handshake_buffer103.out0, %handshake_buffer103.out0_valid : i0
    %handshake_buffer103.in0_ready, %handshake_buffer103.out0, %handshake_buffer103.out0_valid = hw.instance "handshake_buffer103" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_830: i0, in0_valid: %valid_831: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_833: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_834, %valid_835 = esi.unwrap.vr %chanOutput_826, %handshake_buffer104.in0_ready : i0
    %chanOutput_836, %ready_837 = esi.wrap.vr %handshake_buffer104.out0, %handshake_buffer104.out0_valid : i0
    %handshake_buffer104.in0_ready, %handshake_buffer104.out0, %handshake_buffer104.out0_valid = hw.instance "handshake_buffer104" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_834: i0, in0_valid: %valid_835: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_837: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_838, %valid_839 = esi.unwrap.vr %chanOutput_824, %handshake_buffer105.in0_ready : i0
    %chanOutput_840, %ready_841 = esi.wrap.vr %handshake_buffer105.out0, %handshake_buffer105.out0_valid : i0
    %handshake_buffer105.in0_ready, %handshake_buffer105.out0, %handshake_buffer105.out0_valid = hw.instance "handshake_buffer105" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_838: i0, in0_valid: %valid_839: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_841: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_842, %valid_843 = esi.unwrap.vr %chanOutput_822, %handshake_buffer106.in0_ready : i0
    %chanOutput_844, %ready_845 = esi.wrap.vr %handshake_buffer106.out0, %handshake_buffer106.out0_valid : i0
    %handshake_buffer106.in0_ready, %handshake_buffer106.out0, %handshake_buffer106.out0_valid = hw.instance "handshake_buffer106" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_842: i0, in0_valid: %valid_843: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_845: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_846, %valid_847 = esi.unwrap.vr %chanOutput_840, %handshake_join5.in0_ready : i0
    %rawOutput_848, %valid_849 = esi.unwrap.vr %chanOutput_202, %handshake_join5.in1_ready : i0
    %rawOutput_850, %valid_851 = esi.unwrap.vr %chanOutput_124, %handshake_join5.in2_ready : i0
    %rawOutput_852, %valid_853 = esi.unwrap.vr %chanOutput_96, %handshake_join5.in3_ready : i0
    %chanOutput_854, %ready_855 = esi.wrap.vr %handshake_join5.out0, %handshake_join5.out0_valid : i0
    %handshake_join5.in0_ready, %handshake_join5.in1_ready, %handshake_join5.in2_ready, %handshake_join5.in3_ready, %handshake_join5.out0, %handshake_join5.out0_valid = hw.instance "handshake_join5" @handshake_join_4ins_1outs_ctrl(in0: %rawOutput_846: i0, in0_valid: %valid_847: i1, in1: %rawOutput_848: i0, in1_valid: %valid_849: i1, in2: %rawOutput_850: i0, in2_valid: %valid_851: i1, in3: %rawOutput_852: i0, in3_valid: %valid_853: i1, out0_ready: %ready_855: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_856, %valid_857 = esi.unwrap.vr %chanOutput_854, %handshake_buffer107.in0_ready : i0
    %chanOutput_858, %ready_859 = esi.wrap.vr %handshake_buffer107.out0, %handshake_buffer107.out0_valid : i0
    %handshake_buffer107.in0_ready, %handshake_buffer107.out0, %handshake_buffer107.out0_valid = hw.instance "handshake_buffer107" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %rawOutput_856: i0, in0_valid: %valid_857: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_859: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %rawOutput_860, %valid_861 = esi.unwrap.vr %chanOutput_756, %handshake_load0.addrIn0_ready : i64
    %rawOutput_862, %valid_863 = esi.unwrap.vr %chanOutput_218, %handshake_load0.dataFromMem_ready : i64
    %rawOutput_864, %valid_865 = esi.unwrap.vr %chanOutput_832, %handshake_load0.ctrl_ready : i0
    %chanOutput_866, %ready_867 = esi.wrap.vr %handshake_load0.dataOut, %handshake_load0.dataOut_valid : i64
    %chanOutput_868, %ready_869 = esi.wrap.vr %handshake_load0.addrOut0, %handshake_load0.addrOut0_valid : i64
    %handshake_load0.addrIn0_ready, %handshake_load0.dataFromMem_ready, %handshake_load0.ctrl_ready, %handshake_load0.dataOut, %handshake_load0.dataOut_valid, %handshake_load0.addrOut0, %handshake_load0.addrOut0_valid = hw.instance "handshake_load0" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %rawOutput_860: i64, addrIn0_valid: %valid_861: i1, dataFromMem: %rawOutput_862: i64, dataFromMem_valid: %valid_863: i1, ctrl: %rawOutput_864: i0, ctrl_valid: %valid_865: i1, dataOut_ready: %ready_867: i1, addrOut0_ready: %ready_869: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %rawOutput_870, %valid_871 = esi.unwrap.vr %chanOutput_868, %handshake_buffer108.in0_ready : i64
    %chanOutput_872, %ready_873 = esi.wrap.vr %handshake_buffer108.out0, %handshake_buffer108.out0_valid : i64
    %handshake_buffer108.in0_ready, %handshake_buffer108.out0, %handshake_buffer108.out0_valid = hw.instance "handshake_buffer108" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_870: i64, in0_valid: %valid_871: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_873: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_874, %valid_875 = esi.unwrap.vr %chanOutput_866, %handshake_buffer109.in0_ready : i64
    %chanOutput_876, %ready_877 = esi.wrap.vr %handshake_buffer109.out0, %handshake_buffer109.out0_valid : i64
    %handshake_buffer109.in0_ready, %handshake_buffer109.out0, %handshake_buffer109.out0_valid = hw.instance "handshake_buffer109" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_874: i64, in0_valid: %valid_875: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_877: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_878, %valid_879 = esi.unwrap.vr %chanOutput_752, %handshake_load1.addrIn0_ready : i64
    %rawOutput_880, %valid_881 = esi.unwrap.vr %chanOutput_140, %handshake_load1.dataFromMem_ready : i64
    %rawOutput_882, %valid_883 = esi.unwrap.vr %chanOutput_836, %handshake_load1.ctrl_ready : i0
    %chanOutput_884, %ready_885 = esi.wrap.vr %handshake_load1.dataOut, %handshake_load1.dataOut_valid : i64
    %chanOutput_886, %ready_887 = esi.wrap.vr %handshake_load1.addrOut0, %handshake_load1.addrOut0_valid : i64
    %handshake_load1.addrIn0_ready, %handshake_load1.dataFromMem_ready, %handshake_load1.ctrl_ready, %handshake_load1.dataOut, %handshake_load1.dataOut_valid, %handshake_load1.addrOut0, %handshake_load1.addrOut0_valid = hw.instance "handshake_load1" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %rawOutput_878: i64, addrIn0_valid: %valid_879: i1, dataFromMem: %rawOutput_880: i64, dataFromMem_valid: %valid_881: i1, ctrl: %rawOutput_882: i0, ctrl_valid: %valid_883: i1, dataOut_ready: %ready_885: i1, addrOut0_ready: %ready_887: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %rawOutput_888, %valid_889 = esi.unwrap.vr %chanOutput_886, %handshake_buffer110.in0_ready : i64
    %chanOutput_890, %ready_891 = esi.wrap.vr %handshake_buffer110.out0, %handshake_buffer110.out0_valid : i64
    %handshake_buffer110.in0_ready, %handshake_buffer110.out0, %handshake_buffer110.out0_valid = hw.instance "handshake_buffer110" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_888: i64, in0_valid: %valid_889: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_891: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_892, %valid_893 = esi.unwrap.vr %chanOutput_884, %handshake_buffer111.in0_ready : i64
    %chanOutput_894, %ready_895 = esi.wrap.vr %handshake_buffer111.out0, %handshake_buffer111.out0_valid : i64
    %handshake_buffer111.in0_ready, %handshake_buffer111.out0, %handshake_buffer111.out0_valid = hw.instance "handshake_buffer111" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_892: i64, in0_valid: %valid_893: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_895: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_896, %valid_897 = esi.unwrap.vr %chanOutput_876, %arith_addi0.in0_ready : i64
    %rawOutput_898, %valid_899 = esi.unwrap.vr %chanOutput_894, %arith_addi0.in1_ready : i64
    %chanOutput_900, %ready_901 = esi.wrap.vr %arith_addi0.out0, %arith_addi0.out0_valid : i64
    %arith_addi0.in0_ready, %arith_addi0.in1_ready, %arith_addi0.out0, %arith_addi0.out0_valid = hw.instance "arith_addi0" @arith_addi_in_ui64_ui64_out_ui64(in0: %rawOutput_896: i64, in0_valid: %valid_897: i1, in1: %rawOutput_898: i64, in1_valid: %valid_899: i1, out0_ready: %ready_901: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_902, %valid_903 = esi.unwrap.vr %chanOutput_900, %handshake_buffer112.in0_ready : i64
    %chanOutput_904, %ready_905 = esi.wrap.vr %handshake_buffer112.out0, %handshake_buffer112.out0_valid : i64
    %handshake_buffer112.in0_ready, %handshake_buffer112.out0, %handshake_buffer112.out0_valid = hw.instance "handshake_buffer112" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_902: i64, in0_valid: %valid_903: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_905: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_906, %valid_907 = esi.unwrap.vr %chanOutput_748, %handshake_store6.addrIn0_ready : i64
    %rawOutput_908, %valid_909 = esi.unwrap.vr %chanOutput_904, %handshake_store6.dataIn_ready : i64
    %rawOutput_910, %valid_911 = esi.unwrap.vr %chanOutput_844, %handshake_store6.ctrl_ready : i0
    %chanOutput_912, %ready_913 = esi.wrap.vr %handshake_store6.dataToMem, %handshake_store6.dataToMem_valid : i64
    %chanOutput_914, %ready_915 = esi.wrap.vr %handshake_store6.addrOut0, %handshake_store6.addrOut0_valid : i64
    %handshake_store6.addrIn0_ready, %handshake_store6.dataIn_ready, %handshake_store6.ctrl_ready, %handshake_store6.dataToMem, %handshake_store6.dataToMem_valid, %handshake_store6.addrOut0, %handshake_store6.addrOut0_valid = hw.instance "handshake_store6" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %rawOutput_906: i64, addrIn0_valid: %valid_907: i1, dataIn: %rawOutput_908: i64, dataIn_valid: %valid_909: i1, ctrl: %rawOutput_910: i0, ctrl_valid: %valid_911: i1, dataToMem_ready: %ready_913: i1, addrOut0_ready: %ready_915: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %rawOutput_916, %valid_917 = esi.unwrap.vr %chanOutput_914, %handshake_buffer113.in0_ready : i64
    %chanOutput_918, %ready_919 = esi.wrap.vr %handshake_buffer113.out0, %handshake_buffer113.out0_valid : i64
    %handshake_buffer113.in0_ready, %handshake_buffer113.out0, %handshake_buffer113.out0_valid = hw.instance "handshake_buffer113" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_916: i64, in0_valid: %valid_917: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_919: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_920, %valid_921 = esi.unwrap.vr %chanOutput_912, %handshake_buffer114.in0_ready : i64
    %chanOutput_922, %ready_923 = esi.wrap.vr %handshake_buffer114.out0, %handshake_buffer114.out0_valid : i64
    %handshake_buffer114.in0_ready, %handshake_buffer114.out0, %handshake_buffer114.out0_valid = hw.instance "handshake_buffer114" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_920: i64, in0_valid: %valid_921: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_923: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_924, %valid_925 = esi.unwrap.vr %chanOutput_760, %arith_addi1.in0_ready : i64
    %rawOutput_926, %valid_927 = esi.unwrap.vr %chanOutput_798, %arith_addi1.in1_ready : i64
    %chanOutput_928, %ready_929 = esi.wrap.vr %arith_addi1.out0, %arith_addi1.out0_valid : i64
    %arith_addi1.in0_ready, %arith_addi1.in1_ready, %arith_addi1.out0, %arith_addi1.out0_valid = hw.instance "arith_addi1" @arith_addi_in_ui64_ui64_out_ui64(in0: %rawOutput_924: i64, in0_valid: %valid_925: i1, in1: %rawOutput_926: i64, in1_valid: %valid_927: i1, out0_ready: %ready_929: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_930, %valid_931 = esi.unwrap.vr %chanOutput_928, %handshake_buffer115.in0_ready : i64
    %chanOutput_932, %ready_933 = esi.wrap.vr %handshake_buffer115.out0, %handshake_buffer115.out0_valid : i64
    %handshake_buffer115.in0_ready, %handshake_buffer115.out0, %handshake_buffer115.out0_valid = hw.instance "handshake_buffer115" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %rawOutput_930: i64, in0_valid: %valid_931: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %ready_933: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %rawOutput_934, %valid_935 = esi.unwrap.vr %chanOutput_814, %out0_ready : i0
    hw.output %ready, %rawOutput_934, %valid_935 : i1, i0, i1
  }
}


// -----// IR Dump After LowerESItoHW (lower-esi-to-hw) //----- //
module {
  hw.module @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %in0_valid, %valid0_reg : i1
    %3 = comb.mux %1, %in0, %data0_reg : i0
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %c0_i0 : i0  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %16, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %16, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %14, %clock reset %reset, %c0_i0 : i0  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i0
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i0
    %14 = comb.mux %9, %c0_i0, %13 : i0
    %valid1_reg = seq.compreg sym @valid1_reg %17, %clock reset %reset, %false : i1  
    %15 = comb.xor %valid1_reg, %true : i1
    %16 = comb.or %15, %20 : i1
    %17 = comb.mux %16, %4, %valid1_reg : i1
    %18 = comb.mux %16, %12, %data1_reg : i0
    %data1_reg = seq.compreg sym @data1_reg %18, %clock reset %reset, %c0_i0 : i0  
    %ready1_reg = seq.compreg sym @ready1_reg %26, %clock reset %reset, %false : i1  
    %19 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
    %20 = comb.xor %ready1_reg, %true : i1
    %21 = comb.xor %out0_ready, %true : i1
    %22 = comb.and %21, %20 : i1
    %23 = comb.mux %22, %valid1_reg, %ready1_reg : i1
    %24 = comb.and %out0_ready, %ready1_reg : i1
    %25 = comb.xor %24, %true : i1
    %26 = comb.and %25, %23 : i1
    %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %29, %clock reset %reset, %c0_i0 : i0  
    %27 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i0
    %28 = comb.mux %22, %data1_reg, %ctrl_data1_reg : i0
    %29 = comb.mux %24, %c0_i0, %28 : i0
    hw.output %1, %27, %19 : i1, i0, i1
  }
  hw.module @handshake_fork_1ins_14outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, in %out5_ready : i1, in %out6_ready : i1, in %out7_ready : i1, in %out8_ready : i1, in %out9_ready : i1, in %out10_ready : i1, in %out11_ready : i1, in %out12_ready : i1, in %out13_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1, out out4 : i0, out out4_valid : i1, out out5 : i0, out out5_valid : i1, out out6 : i0, out out6_valid : i1, out out7 : i0, out out7_valid : i1, out out8 : i0, out out8_valid : i1, out out9 : i0, out out9_valid : i1, out out10 : i0, out out10_valid : i1, out out11 : i0, out out11_valid : i1, out out12 : i0, out out12_valid : i1, out out13 : i0, out out13_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %84, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %84, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %84, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %in0_valid : i1
    %16 = comb.and %out2_ready, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %84, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %in0_valid : i1
    %22 = comb.and %out3_ready, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.xor %84, %true : i1
    %25 = comb.and %29, %24 : i1
    %emitted_4 = seq.compreg sym @emitted_4 %25, %clock reset %reset, %false : i1  
    %26 = comb.xor %emitted_4, %true : i1
    %27 = comb.and %26, %in0_valid : i1
    %28 = comb.and %out4_ready, %27 : i1
    %29 = comb.or %28, %emitted_4 {sv.namehint = "done4"} : i1
    %30 = comb.xor %84, %true : i1
    %31 = comb.and %35, %30 : i1
    %emitted_5 = seq.compreg sym @emitted_5 %31, %clock reset %reset, %false : i1  
    %32 = comb.xor %emitted_5, %true : i1
    %33 = comb.and %32, %in0_valid : i1
    %34 = comb.and %out5_ready, %33 : i1
    %35 = comb.or %34, %emitted_5 {sv.namehint = "done5"} : i1
    %36 = comb.xor %84, %true : i1
    %37 = comb.and %41, %36 : i1
    %emitted_6 = seq.compreg sym @emitted_6 %37, %clock reset %reset, %false : i1  
    %38 = comb.xor %emitted_6, %true : i1
    %39 = comb.and %38, %in0_valid : i1
    %40 = comb.and %out6_ready, %39 : i1
    %41 = comb.or %40, %emitted_6 {sv.namehint = "done6"} : i1
    %42 = comb.xor %84, %true : i1
    %43 = comb.and %47, %42 : i1
    %emitted_7 = seq.compreg sym @emitted_7 %43, %clock reset %reset, %false : i1  
    %44 = comb.xor %emitted_7, %true : i1
    %45 = comb.and %44, %in0_valid : i1
    %46 = comb.and %out7_ready, %45 : i1
    %47 = comb.or %46, %emitted_7 {sv.namehint = "done7"} : i1
    %48 = comb.xor %84, %true : i1
    %49 = comb.and %53, %48 : i1
    %emitted_8 = seq.compreg sym @emitted_8 %49, %clock reset %reset, %false : i1  
    %50 = comb.xor %emitted_8, %true : i1
    %51 = comb.and %50, %in0_valid : i1
    %52 = comb.and %out8_ready, %51 : i1
    %53 = comb.or %52, %emitted_8 {sv.namehint = "done8"} : i1
    %54 = comb.xor %84, %true : i1
    %55 = comb.and %59, %54 : i1
    %emitted_9 = seq.compreg sym @emitted_9 %55, %clock reset %reset, %false : i1  
    %56 = comb.xor %emitted_9, %true : i1
    %57 = comb.and %56, %in0_valid : i1
    %58 = comb.and %out9_ready, %57 : i1
    %59 = comb.or %58, %emitted_9 {sv.namehint = "done9"} : i1
    %60 = comb.xor %84, %true : i1
    %61 = comb.and %65, %60 : i1
    %emitted_10 = seq.compreg sym @emitted_10 %61, %clock reset %reset, %false : i1  
    %62 = comb.xor %emitted_10, %true : i1
    %63 = comb.and %62, %in0_valid : i1
    %64 = comb.and %out10_ready, %63 : i1
    %65 = comb.or %64, %emitted_10 {sv.namehint = "done10"} : i1
    %66 = comb.xor %84, %true : i1
    %67 = comb.and %71, %66 : i1
    %emitted_11 = seq.compreg sym @emitted_11 %67, %clock reset %reset, %false : i1  
    %68 = comb.xor %emitted_11, %true : i1
    %69 = comb.and %68, %in0_valid : i1
    %70 = comb.and %out11_ready, %69 : i1
    %71 = comb.or %70, %emitted_11 {sv.namehint = "done11"} : i1
    %72 = comb.xor %84, %true : i1
    %73 = comb.and %77, %72 : i1
    %emitted_12 = seq.compreg sym @emitted_12 %73, %clock reset %reset, %false : i1  
    %74 = comb.xor %emitted_12, %true : i1
    %75 = comb.and %74, %in0_valid : i1
    %76 = comb.and %out12_ready, %75 : i1
    %77 = comb.or %76, %emitted_12 {sv.namehint = "done12"} : i1
    %78 = comb.xor %84, %true : i1
    %79 = comb.and %83, %78 : i1
    %emitted_13 = seq.compreg sym @emitted_13 %79, %clock reset %reset, %false : i1  
    %80 = comb.xor %emitted_13, %true : i1
    %81 = comb.and %80, %in0_valid : i1
    %82 = comb.and %out13_ready, %81 : i1
    %83 = comb.or %82, %emitted_13 {sv.namehint = "done13"} : i1
    %84 = comb.and %5, %11, %17, %23, %29, %35, %41, %47, %53, %59, %65, %71, %77, %83 {sv.namehint = "allDone"} : i1
    hw.output %84, %in0, %3, %in0, %9, %in0, %15, %in0, %21, %in0, %27, %in0, %33, %in0, %39, %in0, %45, %in0, %51, %in0, %57, %in0, %63, %in0, %69, %in0, %75, %in0, %81 : i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id2(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %stDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stDone0 : i0, out stDone0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_2 = seq.hlmem @_handshake_memory_2 %clock, %reset : <3xi64>
    %writeValidBuffer = seq.compreg sym @writeValidBuffer %4, %clock reset %reset, %false : i1  
    %0 = comb.and %stDone0_ready, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
    %1 = comb.xor %writeValidBuffer, %true : i1
    %2 = comb.or %1, %0 {sv.namehint = "emptyOrComplete"} : i1
    %3 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
    %4 = comb.mux %2, %3, %writeValidBuffer : i1
    %5 = comb.extract %stAddr0 from 0 : (i64) -> i2
    seq.write %_handshake_memory_2[%5] %stData0 wren %3 {latency = 1 : i64} : !seq.hlmem<3xi64>
    hw.output %2, %2, %c0_i0, %writeValidBuffer : i1, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id1(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_1 = seq.hlmem @_handshake_memory_1 %clock, %reset : <3xi64>
    %0 = comb.extract %ldAddr0 from 0 : (i64) -> i2
    %_handshake_memory_1_rdata = seq.read %_handshake_memory_1[%0] rden %ldAddr0_valid {latency = 0 : i64} : !seq.hlmem<3xi64>
    %1 = comb.xor %13, %true : i1
    %2 = comb.and %6, %1 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %2, %clock reset %reset, %false : i1  
    %3 = comb.xor %emitted_0, %true : i1
    %4 = comb.and %3, %ldAddr0_valid : i1
    %5 = comb.and %ldData0_ready, %4 : i1
    %6 = comb.or %5, %emitted_0 {sv.namehint = "done0"} : i1
    %7 = comb.xor %13, %true : i1
    %8 = comb.and %12, %7 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %8, %clock reset %reset, %false : i1  
    %9 = comb.xor %emitted_1, %true : i1
    %10 = comb.and %9, %ldAddr0_valid : i1
    %11 = comb.and %ldDone0_ready, %10 : i1
    %12 = comb.or %11, %emitted_1 {sv.namehint = "done1"} : i1
    %13 = comb.and %6, %12 {sv.namehint = "allDone"} : i1
    %writeValidBuffer = seq.compreg sym @writeValidBuffer %18, %clock reset %reset, %false : i1  
    %14 = comb.and %stDone0_ready, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
    %15 = comb.xor %writeValidBuffer, %true : i1
    %16 = comb.or %15, %14 {sv.namehint = "emptyOrComplete"} : i1
    %17 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
    %18 = comb.mux %16, %17, %writeValidBuffer : i1
    %19 = comb.extract %stAddr0 from 0 : (i64) -> i2
    seq.write %_handshake_memory_1[%19] %stData0 wren %17 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_0 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %24, %clock reset %reset, %false : i1  
    %20 = comb.and %stDone1_ready, %writeValidBuffer_0 {sv.namehint = "storeCompleted"} : i1
    %21 = comb.xor %writeValidBuffer_0, %true : i1
    %22 = comb.or %21, %20 {sv.namehint = "emptyOrComplete"} : i1
    %23 = comb.and %stAddr1_valid, %stData1_valid {sv.namehint = "writeValid"} : i1
    %24 = comb.mux %22, %23, %writeValidBuffer_0 : i1
    %25 = comb.extract %stAddr1 from 0 : (i64) -> i2
    seq.write %_handshake_memory_1[%25] %stData1 wren %23 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_1 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %30, %clock reset %reset, %false : i1  
    %26 = comb.and %stDone2_ready, %writeValidBuffer_1 {sv.namehint = "storeCompleted"} : i1
    %27 = comb.xor %writeValidBuffer_1, %true : i1
    %28 = comb.or %27, %26 {sv.namehint = "emptyOrComplete"} : i1
    %29 = comb.and %stAddr2_valid, %stData2_valid {sv.namehint = "writeValid"} : i1
    %30 = comb.mux %28, %29, %writeValidBuffer_1 : i1
    %31 = comb.extract %stAddr2 from 0 : (i64) -> i2
    seq.write %_handshake_memory_1[%31] %stData2 wren %29 {latency = 1 : i64} : !seq.hlmem<3xi64>
    hw.output %16, %16, %22, %22, %28, %28, %13, %_handshake_memory_1_rdata, %4, %c0_i0, %writeValidBuffer, %c0_i0, %writeValidBuffer_0, %c0_i0, %writeValidBuffer_1, %c0_i0, %10 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_buffer_in_ui64_out_ui64_2slots_seq(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i64 = hw.constant 0 : i64
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %in0_valid, %valid0_reg : i1
    %3 = comb.mux %1, %in0, %data0_reg : i64
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %c0_i64 : i64  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %16, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %16, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %14, %clock reset %reset, %c0_i64 : i64  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i64
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i64
    %14 = comb.mux %9, %c0_i64, %13 : i64
    %valid1_reg = seq.compreg sym @valid1_reg %17, %clock reset %reset, %false : i1  
    %15 = comb.xor %valid1_reg, %true : i1
    %16 = comb.or %15, %20 : i1
    %17 = comb.mux %16, %4, %valid1_reg : i1
    %18 = comb.mux %16, %12, %data1_reg : i64
    %data1_reg = seq.compreg sym @data1_reg %18, %clock reset %reset, %c0_i64 : i64  
    %ready1_reg = seq.compreg sym @ready1_reg %26, %clock reset %reset, %false : i1  
    %19 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
    %20 = comb.xor %ready1_reg, %true : i1
    %21 = comb.xor %out0_ready, %true : i1
    %22 = comb.and %21, %20 : i1
    %23 = comb.mux %22, %valid1_reg, %ready1_reg : i1
    %24 = comb.and %out0_ready, %ready1_reg : i1
    %25 = comb.xor %24, %true : i1
    %26 = comb.and %25, %23 : i1
    %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %29, %clock reset %reset, %c0_i64 : i64  
    %27 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i64
    %28 = comb.mux %22, %data1_reg, %ctrl_data1_reg : i64
    %29 = comb.mux %24, %c0_i64, %28 : i64
    hw.output %1, %27, %19 : i1, i64, i1
  }
  hw.module @handshake_fork_1ins_2outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %12, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %12, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.and %5, %11 {sv.namehint = "allDone"} : i1
    hw.output %12, %in0, %3, %in0, %9 : i1, i0, i1, i0, i1
  }
  hw.module @handshake_fork_1ins_3outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %18, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %18, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %18, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %in0_valid : i1
    %16 = comb.and %out2_ready, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.and %5, %11, %17 {sv.namehint = "allDone"} : i1
    hw.output %18, %in0, %3, %in0, %9, %in0, %15 : i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id0(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_0 = seq.hlmem @_handshake_memory_0 %clock, %reset : <3xi64>
    %0 = comb.extract %ldAddr0 from 0 : (i64) -> i2
    %_handshake_memory_0_rdata = seq.read %_handshake_memory_0[%0] rden %ldAddr0_valid {latency = 0 : i64} : !seq.hlmem<3xi64>
    %1 = comb.xor %13, %true : i1
    %2 = comb.and %6, %1 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %2, %clock reset %reset, %false : i1  
    %3 = comb.xor %emitted_0, %true : i1
    %4 = comb.and %3, %ldAddr0_valid : i1
    %5 = comb.and %ldData0_ready, %4 : i1
    %6 = comb.or %5, %emitted_0 {sv.namehint = "done0"} : i1
    %7 = comb.xor %13, %true : i1
    %8 = comb.and %12, %7 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %8, %clock reset %reset, %false : i1  
    %9 = comb.xor %emitted_1, %true : i1
    %10 = comb.and %9, %ldAddr0_valid : i1
    %11 = comb.and %ldDone0_ready, %10 : i1
    %12 = comb.or %11, %emitted_1 {sv.namehint = "done1"} : i1
    %13 = comb.and %6, %12 {sv.namehint = "allDone"} : i1
    %writeValidBuffer = seq.compreg sym @writeValidBuffer %18, %clock reset %reset, %false : i1  
    %14 = comb.and %stDone0_ready, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
    %15 = comb.xor %writeValidBuffer, %true : i1
    %16 = comb.or %15, %14 {sv.namehint = "emptyOrComplete"} : i1
    %17 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
    %18 = comb.mux %16, %17, %writeValidBuffer : i1
    %19 = comb.extract %stAddr0 from 0 : (i64) -> i2
    seq.write %_handshake_memory_0[%19] %stData0 wren %17 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_0 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %24, %clock reset %reset, %false : i1  
    %20 = comb.and %stDone1_ready, %writeValidBuffer_0 {sv.namehint = "storeCompleted"} : i1
    %21 = comb.xor %writeValidBuffer_0, %true : i1
    %22 = comb.or %21, %20 {sv.namehint = "emptyOrComplete"} : i1
    %23 = comb.and %stAddr1_valid, %stData1_valid {sv.namehint = "writeValid"} : i1
    %24 = comb.mux %22, %23, %writeValidBuffer_0 : i1
    %25 = comb.extract %stAddr1 from 0 : (i64) -> i2
    seq.write %_handshake_memory_0[%25] %stData1 wren %23 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_1 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %30, %clock reset %reset, %false : i1  
    %26 = comb.and %stDone2_ready, %writeValidBuffer_1 {sv.namehint = "storeCompleted"} : i1
    %27 = comb.xor %writeValidBuffer_1, %true : i1
    %28 = comb.or %27, %26 {sv.namehint = "emptyOrComplete"} : i1
    %29 = comb.and %stAddr2_valid, %stData2_valid {sv.namehint = "writeValid"} : i1
    %30 = comb.mux %28, %29, %writeValidBuffer_1 : i1
    %31 = comb.extract %stAddr2 from 0 : (i64) -> i2
    seq.write %_handshake_memory_0[%31] %stData2 wren %29 {latency = 1 : i64} : !seq.hlmem<3xi64>
    hw.output %16, %16, %22, %22, %28, %28, %13, %_handshake_memory_0_rdata, %4, %c0_i0, %writeValidBuffer, %c0_i0, %writeValidBuffer_0, %c0_i0, %writeValidBuffer_1, %c0_i0, %10 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_join_7ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %in4 : i0, in %in4_valid : i1, in %in5 : i0, in %in5_valid : i1, in %in6 : i0, in %in6_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out in4_ready : i1, out in5_ready : i1, out in6_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid, %in2_valid, %in3_valid, %in4_valid, %in5_valid, %in6_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %1, %1, %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i1, i1, i1, i1, i0, i1
  }
  hw.module @handshake_constant_c3_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c3_i64 = hw.constant 3 : i64
    hw.output %out0_ready, %c3_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %12, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %12, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.and %5, %11 {sv.namehint = "allDone"} : i1
    hw.output %12, %in0, %3, %in0, %9 : i1, i64, i1, i64, i1
  }
  hw.module @handshake_constant_c2_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c2_i64 = hw.constant 2 : i64
    hw.output %out0_ready, %c2_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_constant_c1_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c1_i64 = hw.constant 1 : i64
    hw.output %out0_ready, %c1_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %18, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %18, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %18, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %in0_valid : i1
    %16 = comb.and %out2_ready, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.and %5, %11, %17 {sv.namehint = "allDone"} : i1
    hw.output %18, %in0, %3, %in0, %9, %in0, %15 : i1, i64, i1, i64, i1, i64, i1
  }
  hw.module @handshake_constant_c0_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c0_i64 = hw.constant 0 : i64
    hw.output %out0_ready, %c0_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_store_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataIn : i64, in %dataIn_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataToMem_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataIn_ready : i1, out ctrl_ready : i1, out dataToMem : i64, out dataToMem_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
    %0 = comb.and %dataIn_valid, %addrIn0_valid, %ctrl_valid : i1
    %1 = comb.and %dataToMem_ready, %addrOut0_ready, %0 : i1
    hw.output %1, %1, %1, %dataIn, %0, %addrIn0, %0 : i1, i1, i1, i64, i1, i64, i1
  }
  hw.module @handshake_join_2ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %c0_i0, %0 : i1, i1, i0, i1
  }
  hw.module @handshake_join_3ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid, %in2_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i0, i1
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %true : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %in0_valid, %valid0_reg : i1
    %3 = comb.mux %1, %in0, %data0_reg : i1
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %false : i1  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %out0_ready, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %out0_ready, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %15, %clock reset %reset, %false : i1  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i1
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i1
    %14 = comb.xor %9, %true : i1
    %15 = comb.and %14, %13 : i1
    hw.output %1, %12, %4 : i1, i1, i1
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %24, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %24, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %24, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %in0_valid : i1
    %16 = comb.and %out2_ready, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %24, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %in0_valid : i1
    %22 = comb.and %out3_ready, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
    hw.output %24, %in0, %3, %in0, %9, %in0, %15, %in0, %21 : i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_2slots_seq(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %in0_valid, %valid0_reg : i1
    %3 = comb.mux %1, %in0, %data0_reg : i1
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %false : i1  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %17, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %17, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %15, %clock reset %reset, %false : i1  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i1
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i1
    %14 = comb.xor %9, %true : i1
    %15 = comb.and %14, %13 : i1
    %valid1_reg = seq.compreg sym @valid1_reg %18, %clock reset %reset, %false : i1  
    %16 = comb.xor %valid1_reg, %true : i1
    %17 = comb.or %16, %21 : i1
    %18 = comb.mux %17, %4, %valid1_reg : i1
    %19 = comb.mux %17, %12, %data1_reg : i1
    %data1_reg = seq.compreg sym @data1_reg %19, %clock reset %reset, %false : i1  
    %ready1_reg = seq.compreg sym @ready1_reg %27, %clock reset %reset, %false : i1  
    %20 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
    %21 = comb.xor %ready1_reg, %true : i1
    %22 = comb.xor %out0_ready, %true : i1
    %23 = comb.and %22, %21 : i1
    %24 = comb.mux %23, %valid1_reg, %ready1_reg : i1
    %25 = comb.and %out0_ready, %ready1_reg : i1
    %26 = comb.xor %25, %true : i1
    %27 = comb.and %26, %24 : i1
    %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %31, %clock reset %reset, %false : i1  
    %28 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i1
    %29 = comb.mux %23, %data1_reg, %ctrl_data1_reg : i1
    %30 = comb.xor %25, %true : i1
    %31 = comb.and %30, %29 : i1
    hw.output %1, %28, %20 : i1, i1, i1
  }
  hw.module @handshake_mux_in_ui1_3ins_1outs_ctrl(in %select : i1, in %select_valid : i1, in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %0 = comb.concat %false, %select : i1, i1
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = comb.mux %select, %in1_valid, %in0_valid : i1
    %3 = comb.and %2, %select_valid : i1
    %4 = comb.and %3, %out0_ready : i1
    %5 = comb.extract %1 from 0 : (i2) -> i1
    %6 = comb.and %5, %4 : i1
    %7 = comb.extract %1 from 1 : (i2) -> i1
    %8 = comb.and %7, %4 : i1
    %9 = comb.mux %select, %in1, %in0 : i0
    hw.output %4, %6, %8, %9, %3 : i1, i1, i1, i0, i1
  }
  hw.module @handshake_mux_in_ui1_ui64_ui64_out_ui64(in %select : i1, in %select_valid : i1, in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %0 = comb.concat %false, %select : i1, i1
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = comb.mux %select, %in1_valid, %in0_valid : i1
    %3 = comb.and %2, %select_valid : i1
    %4 = comb.and %3, %out0_ready : i1
    %5 = comb.extract %1 from 0 : (i2) -> i1
    %6 = comb.and %5, %4 : i1
    %7 = comb.extract %1 from 1 : (i2) -> i1
    %8 = comb.and %7, %4 : i1
    %9 = comb.mux %select, %in1, %in0 : i64
    hw.output %4, %6, %8, %9, %3 : i1, i1, i1, i64, i1
  }
  hw.module @arith_cmpi_in_ui64_ui64_out_ui1_slt(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i1, out out0_valid : i1) {
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    %2 = comb.icmp slt %in0, %in1 : i64
    hw.output %1, %1, %2, %0 : i1, i1, i1, i1
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1, out out4 : i1, out out4_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %30, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %30, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %30, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %in0_valid : i1
    %16 = comb.and %out2_ready, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %30, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %in0_valid : i1
    %22 = comb.and %out3_ready, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.xor %30, %true : i1
    %25 = comb.and %29, %24 : i1
    %emitted_4 = seq.compreg sym @emitted_4 %25, %clock reset %reset, %false : i1  
    %26 = comb.xor %emitted_4, %true : i1
    %27 = comb.and %26, %in0_valid : i1
    %28 = comb.and %out4_ready, %27 : i1
    %29 = comb.or %28, %emitted_4 {sv.namehint = "done4"} : i1
    %30 = comb.and %5, %11, %17, %23, %29 {sv.namehint = "allDone"} : i1
    hw.output %30, %in0, %3, %in0, %9, %in0, %15, %in0, %21, %in0, %27 : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(in %cond : i1, in %cond_valid : i1, in %data : i64, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i64, out outTrue_valid : i1, out outFalse : i64, out outFalse_valid : i1) {
    %true = hw.constant true
    %0 = comb.and %cond_valid, %data_valid : i1
    %1 = comb.and %cond, %0 : i1
    %2 = comb.xor %cond, %true : i1
    %3 = comb.and %2, %0 : i1
    %4 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
    %5 = comb.and %4, %0 : i1
    hw.output %5, %5, %data, %1, %data, %3 : i1, i1, i64, i1, i64, i1
  }
  hw.module @handshake_sink_in_ui64(in %in0 : i64, in %in0_valid : i1, out in0_ready : i1) {
    %true = hw.constant true
    hw.output %true : i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1, out out3 : i64, out out3_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %24, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %24, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %24, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %in0_valid : i1
    %16 = comb.and %out2_ready, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %24, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %in0_valid : i1
    %22 = comb.and %out3_ready, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
    hw.output %24, %in0, %3, %in0, %9, %in0, %15, %in0, %21 : i1, i64, i1, i64, i1, i64, i1, i64, i1
  }
  hw.module @handshake_cond_br_in_ui1_2ins_2outs_ctrl(in %cond : i1, in %cond_valid : i1, in %data : i0, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i0, out outTrue_valid : i1, out outFalse : i0, out outFalse_valid : i1) {
    %true = hw.constant true
    %0 = comb.and %cond_valid, %data_valid : i1
    %1 = comb.and %cond, %0 : i1
    %2 = comb.xor %cond, %true : i1
    %3 = comb.and %2, %0 : i1
    %4 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
    %5 = comb.and %4, %0 : i1
    hw.output %5, %5, %data, %1, %data, %3 : i1, i1, i0, i1, i0, i1
  }
  hw.module @handshake_fork_1ins_4outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %24, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %24, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %24, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %in0_valid : i1
    %16 = comb.and %out2_ready, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %24, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %in0_valid : i1
    %22 = comb.and %out3_ready, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
    hw.output %24, %in0, %3, %in0, %9, %in0, %15, %in0, %21 : i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_join_4ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid, %in2_valid, %in3_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i1, i0, i1
  }
  hw.module @handshake_load_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataFromMem : i64, in %dataFromMem_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataOut_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataFromMem_ready : i1, out ctrl_ready : i1, out dataOut : i64, out dataOut_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
    %0 = comb.and %addrIn0_valid, %ctrl_valid : i1
    %1 = comb.and %addrOut0_ready, %0 : i1
    hw.output %1, %dataOut_ready, %1, %dataFromMem, %dataFromMem_valid, %addrIn0, %0 : i1, i1, i1, i64, i1, i64, i1
  }
  hw.module @arith_addi_in_ui64_ui64_out_ui64(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    %2 = comb.add %in0, %in1 : i64
    hw.output %1, %1, %2, %0 : i1, i1, i64, i1
  }
  hw.module @main(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
    %handshake_buffer0.in0_ready, %handshake_buffer0.out0, %handshake_buffer0.out0_valid = hw.instance "handshake_buffer0" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %in0: i0, in0_valid: %in0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork0.in0_ready, %handshake_fork0.out0, %handshake_fork0.out0_valid, %handshake_fork0.out1, %handshake_fork0.out1_valid, %handshake_fork0.out2, %handshake_fork0.out2_valid, %handshake_fork0.out3, %handshake_fork0.out3_valid, %handshake_fork0.out4, %handshake_fork0.out4_valid, %handshake_fork0.out5, %handshake_fork0.out5_valid, %handshake_fork0.out6, %handshake_fork0.out6_valid, %handshake_fork0.out7, %handshake_fork0.out7_valid, %handshake_fork0.out8, %handshake_fork0.out8_valid, %handshake_fork0.out9, %handshake_fork0.out9_valid, %handshake_fork0.out10, %handshake_fork0.out10_valid, %handshake_fork0.out11, %handshake_fork0.out11_valid, %handshake_fork0.out12, %handshake_fork0.out12_valid, %handshake_fork0.out13, %handshake_fork0.out13_valid = hw.instance "handshake_fork0" @handshake_fork_1ins_14outs_ctrl(in0: %handshake_buffer0.out0: i0, in0_valid: %handshake_buffer0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer14.in0_ready: i1, out1_ready: %handshake_buffer13.in0_ready: i1, out2_ready: %handshake_buffer12.in0_ready: i1, out3_ready: %handshake_buffer11.in0_ready: i1, out4_ready: %handshake_buffer10.in0_ready: i1, out5_ready: %handshake_buffer9.in0_ready: i1, out6_ready: %handshake_buffer8.in0_ready: i1, out7_ready: %handshake_buffer7.in0_ready: i1, out8_ready: %handshake_buffer6.in0_ready: i1, out9_ready: %handshake_buffer5.in0_ready: i1, out10_ready: %handshake_buffer4.in0_ready: i1, out11_ready: %handshake_buffer3.in0_ready: i1, out12_ready: %handshake_buffer2.in0_ready: i1, out13_ready: %handshake_buffer1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1, out4: i0, out4_valid: i1, out5: i0, out5_valid: i1, out6: i0, out6_valid: i1, out7: i0, out7_valid: i1, out8: i0, out8_valid: i1, out9: i0, out9_valid: i1, out10: i0, out10_valid: i1, out11: i0, out11_valid: i1, out12: i0, out12_valid: i1, out13: i0, out13_valid: i1)
    %handshake_buffer1.in0_ready, %handshake_buffer1.out0, %handshake_buffer1.out0_valid = hw.instance "handshake_buffer1" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out13: i0, in0_valid: %handshake_fork0.out13_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join4.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer2.in0_ready, %handshake_buffer2.out0, %handshake_buffer2.out0_valid = hw.instance "handshake_buffer2" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out12: i0, in0_valid: %handshake_fork0.out12_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join3.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer3.in0_ready, %handshake_buffer3.out0, %handshake_buffer3.out0_valid = hw.instance "handshake_buffer3" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out11: i0, in0_valid: %handshake_fork0.out11_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store3.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer4.in0_ready, %handshake_buffer4.out0, %handshake_buffer4.out0_valid = hw.instance "handshake_buffer4" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out10: i0, in0_valid: %handshake_fork0.out10_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer5.in0_ready, %handshake_buffer5.out0, %handshake_buffer5.out0_valid = hw.instance "handshake_buffer5" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out9: i0, in0_valid: %handshake_fork0.out9_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join2.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer6.in0_ready, %handshake_buffer6.out0, %handshake_buffer6.out0_valid = hw.instance "handshake_buffer6" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out8: i0, in0_valid: %handshake_fork0.out8_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer7.in0_ready, %handshake_buffer7.out0, %handshake_buffer7.out0_valid = hw.instance "handshake_buffer7" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out7: i0, in0_valid: %handshake_fork0.out7_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer8.in0_ready, %handshake_buffer8.out0, %handshake_buffer8.out0_valid = hw.instance "handshake_buffer8" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out6: i0, in0_valid: %handshake_fork0.out6_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant6.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer9.in0_ready, %handshake_buffer9.out0, %handshake_buffer9.out0_valid = hw.instance "handshake_buffer9" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out5: i0, in0_valid: %handshake_fork0.out5_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant5.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer10.in0_ready, %handshake_buffer10.out0, %handshake_buffer10.out0_valid = hw.instance "handshake_buffer10" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out4: i0, in0_valid: %handshake_fork0.out4_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant4.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer11.in0_ready, %handshake_buffer11.out0, %handshake_buffer11.out0_valid = hw.instance "handshake_buffer11" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out3: i0, in0_valid: %handshake_fork0.out3_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant3.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer12.in0_ready, %handshake_buffer12.out0, %handshake_buffer12.out0_valid = hw.instance "handshake_buffer12" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out2: i0, in0_valid: %handshake_fork0.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant2.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer13.in0_ready, %handshake_buffer13.out0, %handshake_buffer13.out0_valid = hw.instance "handshake_buffer13" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out1: i0, in0_valid: %handshake_fork0.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer14.in0_ready, %handshake_buffer14.out0, %handshake_buffer14.out0_valid = hw.instance "handshake_buffer14" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out0: i0, in0_valid: %handshake_fork0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_memory0.stData0_ready, %handshake_memory0.stAddr0_ready, %handshake_memory0.stDone0, %handshake_memory0.stDone0_valid = hw.instance "handshake_memory0" @handshake_memory_out_ui64_id2(stData0: %handshake_buffer114.out0: i64, stData0_valid: %handshake_buffer114.out0_valid: i1, stAddr0: %handshake_buffer113.out0: i64, stAddr0_valid: %handshake_buffer113.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, stDone0_ready: %handshake_buffer15.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stDone0: i0, stDone0_valid: i1)
    %handshake_buffer15.in0_ready, %handshake_buffer15.out0, %handshake_buffer15.out0_valid = hw.instance "handshake_buffer15" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory0.stDone0: i0, in0_valid: %handshake_memory0.stDone0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join5.in3_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_memory1.stData0_ready, %handshake_memory1.stAddr0_ready, %handshake_memory1.stData1_ready, %handshake_memory1.stAddr1_ready, %handshake_memory1.stData2_ready, %handshake_memory1.stAddr2_ready, %handshake_memory1.ldAddr0_ready, %handshake_memory1.ldData0, %handshake_memory1.ldData0_valid, %handshake_memory1.stDone0, %handshake_memory1.stDone0_valid, %handshake_memory1.stDone1, %handshake_memory1.stDone1_valid, %handshake_memory1.stDone2, %handshake_memory1.stDone2_valid, %handshake_memory1.ldDone0, %handshake_memory1.ldDone0_valid = hw.instance "handshake_memory1" @handshake_memory_out_ui64_id1(stData0: %handshake_buffer67.out0: i64, stData0_valid: %handshake_buffer67.out0_valid: i1, stAddr0: %handshake_buffer66.out0: i64, stAddr0_valid: %handshake_buffer66.out0_valid: i1, stData1: %handshake_buffer70.out0: i64, stData1_valid: %handshake_buffer70.out0_valid: i1, stAddr1: %handshake_buffer69.out0: i64, stAddr1_valid: %handshake_buffer69.out0_valid: i1, stData2: %handshake_buffer73.out0: i64, stData2_valid: %handshake_buffer73.out0_valid: i1, stAddr2: %handshake_buffer72.out0: i64, stAddr2_valid: %handshake_buffer72.out0_valid: i1, ldAddr0: %handshake_buffer110.out0: i64, ldAddr0_valid: %handshake_buffer110.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, ldData0_ready: %handshake_buffer20.in0_ready: i1, stDone0_ready: %handshake_buffer19.in0_ready: i1, stDone1_ready: %handshake_buffer18.in0_ready: i1, stDone2_ready: %handshake_buffer17.in0_ready: i1, ldDone0_ready: %handshake_buffer16.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
    %handshake_buffer16.in0_ready, %handshake_buffer16.out0, %handshake_buffer16.out0_valid = hw.instance "handshake_buffer16" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.ldDone0: i0, in0_valid: %handshake_memory1.ldDone0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join5.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer17.in0_ready, %handshake_buffer17.out0, %handshake_buffer17.out0_valid = hw.instance "handshake_buffer17" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone2: i0, in0_valid: %handshake_memory1.stDone2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in6_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer18.in0_ready, %handshake_buffer18.out0, %handshake_buffer18.out0_valid = hw.instance "handshake_buffer18" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone1: i0, in0_valid: %handshake_memory1.stDone1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer19.in0_ready, %handshake_buffer19.out0, %handshake_buffer19.out0_valid = hw.instance "handshake_buffer19" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone0: i0, in0_valid: %handshake_memory1.stDone0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork2.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer20.in0_ready, %handshake_buffer20.out0, %handshake_buffer20.out0_valid = hw.instance "handshake_buffer20" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory1.ldData0: i64, in0_valid: %handshake_memory1.ldData0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load1.dataFromMem_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork1.in0_ready, %handshake_fork1.out0, %handshake_fork1.out0_valid, %handshake_fork1.out1, %handshake_fork1.out1_valid = hw.instance "handshake_fork1" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer18.out0: i0, in0_valid: %handshake_buffer18.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer22.in0_ready: i1, out1_ready: %handshake_buffer21.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
    %handshake_buffer21.in0_ready, %handshake_buffer21.out0, %handshake_buffer21.out0_valid = hw.instance "handshake_buffer21" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out1: i0, in0_valid: %handshake_fork1.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in5_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer22.in0_ready, %handshake_buffer22.out0, %handshake_buffer22.out0_valid = hw.instance "handshake_buffer22" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out0: i0, in0_valid: %handshake_fork1.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join4.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork2.in0_ready, %handshake_fork2.out0, %handshake_fork2.out0_valid, %handshake_fork2.out1, %handshake_fork2.out1_valid, %handshake_fork2.out2, %handshake_fork2.out2_valid = hw.instance "handshake_fork2" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer19.out0: i0, in0_valid: %handshake_buffer19.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer25.in0_ready: i1, out1_ready: %handshake_buffer24.in0_ready: i1, out2_ready: %handshake_buffer23.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
    %handshake_buffer23.in0_ready, %handshake_buffer23.out0, %handshake_buffer23.out0_valid = hw.instance "handshake_buffer23" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out2: i0, in0_valid: %handshake_fork2.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in4_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer24.in0_ready, %handshake_buffer24.out0, %handshake_buffer24.out0_valid = hw.instance "handshake_buffer24" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out1: i0, in0_valid: %handshake_fork2.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join3.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer25.in0_ready, %handshake_buffer25.out0, %handshake_buffer25.out0_valid = hw.instance "handshake_buffer25" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out0: i0, in0_valid: %handshake_fork2.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join4.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_memory2.stData0_ready, %handshake_memory2.stAddr0_ready, %handshake_memory2.stData1_ready, %handshake_memory2.stAddr1_ready, %handshake_memory2.stData2_ready, %handshake_memory2.stAddr2_ready, %handshake_memory2.ldAddr0_ready, %handshake_memory2.ldData0, %handshake_memory2.ldData0_valid, %handshake_memory2.stDone0, %handshake_memory2.stDone0_valid, %handshake_memory2.stDone1, %handshake_memory2.stDone1_valid, %handshake_memory2.stDone2, %handshake_memory2.stDone2_valid, %handshake_memory2.ldDone0, %handshake_memory2.ldDone0_valid = hw.instance "handshake_memory2" @handshake_memory_out_ui64_id0(stData0: %handshake_buffer59.out0: i64, stData0_valid: %handshake_buffer59.out0_valid: i1, stAddr0: %handshake_buffer58.out0: i64, stAddr0_valid: %handshake_buffer58.out0_valid: i1, stData1: %handshake_buffer62.out0: i64, stData1_valid: %handshake_buffer62.out0_valid: i1, stAddr1: %handshake_buffer61.out0: i64, stAddr1_valid: %handshake_buffer61.out0_valid: i1, stData2: %handshake_buffer65.out0: i64, stData2_valid: %handshake_buffer65.out0_valid: i1, stAddr2: %handshake_buffer64.out0: i64, stAddr2_valid: %handshake_buffer64.out0_valid: i1, ldAddr0: %handshake_buffer108.out0: i64, ldAddr0_valid: %handshake_buffer108.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, ldData0_ready: %handshake_buffer30.in0_ready: i1, stDone0_ready: %handshake_buffer29.in0_ready: i1, stDone1_ready: %handshake_buffer28.in0_ready: i1, stDone2_ready: %handshake_buffer27.in0_ready: i1, ldDone0_ready: %handshake_buffer26.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
    %handshake_buffer26.in0_ready, %handshake_buffer26.out0, %handshake_buffer26.out0_valid = hw.instance "handshake_buffer26" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.ldDone0: i0, in0_valid: %handshake_memory2.ldDone0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join5.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer27.in0_ready, %handshake_buffer27.out0, %handshake_buffer27.out0_valid = hw.instance "handshake_buffer27" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone2: i0, in0_valid: %handshake_memory2.stDone2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in3_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer28.in0_ready, %handshake_buffer28.out0, %handshake_buffer28.out0_valid = hw.instance "handshake_buffer28" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone1: i0, in0_valid: %handshake_memory2.stDone1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork3.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer29.in0_ready, %handshake_buffer29.out0, %handshake_buffer29.out0_valid = hw.instance "handshake_buffer29" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone0: i0, in0_valid: %handshake_memory2.stDone0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork4.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer30.in0_ready, %handshake_buffer30.out0, %handshake_buffer30.out0_valid = hw.instance "handshake_buffer30" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory2.ldData0: i64, in0_valid: %handshake_memory2.ldData0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load0.dataFromMem_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork3.in0_ready, %handshake_fork3.out0, %handshake_fork3.out0_valid, %handshake_fork3.out1, %handshake_fork3.out1_valid = hw.instance "handshake_fork3" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer28.out0: i0, in0_valid: %handshake_buffer28.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer32.in0_ready: i1, out1_ready: %handshake_buffer31.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
    %handshake_buffer31.in0_ready, %handshake_buffer31.out0, %handshake_buffer31.out0_valid = hw.instance "handshake_buffer31" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out1: i0, in0_valid: %handshake_fork3.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join2.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer32.in0_ready, %handshake_buffer32.out0, %handshake_buffer32.out0_valid = hw.instance "handshake_buffer32" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out0: i0, in0_valid: %handshake_fork3.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork4.in0_ready, %handshake_fork4.out0, %handshake_fork4.out0_valid, %handshake_fork4.out1, %handshake_fork4.out1_valid, %handshake_fork4.out2, %handshake_fork4.out2_valid = hw.instance "handshake_fork4" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer29.out0: i0, in0_valid: %handshake_buffer29.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer35.in0_ready: i1, out1_ready: %handshake_buffer34.in0_ready: i1, out2_ready: %handshake_buffer33.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
    %handshake_buffer33.in0_ready, %handshake_buffer33.out0, %handshake_buffer33.out0_valid = hw.instance "handshake_buffer33" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out2: i0, in0_valid: %handshake_fork4.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join1.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer34.in0_ready, %handshake_buffer34.out0, %handshake_buffer34.out0_valid = hw.instance "handshake_buffer34" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out1: i0, in0_valid: %handshake_fork4.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join2.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer35.in0_ready, %handshake_buffer35.out0, %handshake_buffer35.out0_valid = hw.instance "handshake_buffer35" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out0: i0, in0_valid: %handshake_fork4.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_join0.in0_ready, %handshake_join0.in1_ready, %handshake_join0.in2_ready, %handshake_join0.in3_ready, %handshake_join0.in4_ready, %handshake_join0.in5_ready, %handshake_join0.in6_ready, %handshake_join0.out0, %handshake_join0.out0_valid = hw.instance "handshake_join0" @handshake_join_7ins_1outs_ctrl(in0: %handshake_buffer4.out0: i0, in0_valid: %handshake_buffer4.out0_valid: i1, in1: %handshake_buffer35.out0: i0, in1_valid: %handshake_buffer35.out0_valid: i1, in2: %handshake_buffer32.out0: i0, in2_valid: %handshake_buffer32.out0_valid: i1, in3: %handshake_buffer27.out0: i0, in3_valid: %handshake_buffer27.out0_valid: i1, in4: %handshake_buffer23.out0: i0, in4_valid: %handshake_buffer23.out0_valid: i1, in5: %handshake_buffer21.out0: i0, in5_valid: %handshake_buffer21.out0_valid: i1, in6: %handshake_buffer17.out0: i0, in6_valid: %handshake_buffer17.out0_valid: i1, out0_ready: %handshake_buffer36.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, in4_ready: i1, in5_ready: i1, in6_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer36.in0_ready, %handshake_buffer36.out0, %handshake_buffer36.out0_valid = hw.instance "handshake_buffer36" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join0.out0: i0, in0_valid: %handshake_join0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_constant0.ctrl_ready, %handshake_constant0.out0, %handshake_constant0.out0_valid = hw.instance "handshake_constant0" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer14.out0: i0, ctrl_valid: %handshake_buffer14.out0_valid: i1, out0_ready: %handshake_buffer37.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer37.in0_ready, %handshake_buffer37.out0, %handshake_buffer37.out0_valid = hw.instance "handshake_buffer37" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant0.out0: i64, in0_valid: %handshake_constant0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux2.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant1.ctrl_ready, %handshake_constant1.out0, %handshake_constant1.out0_valid = hw.instance "handshake_constant1" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer13.out0: i0, ctrl_valid: %handshake_buffer13.out0_valid: i1, out0_ready: %handshake_buffer38.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer38.in0_ready, %handshake_buffer38.out0, %handshake_buffer38.out0_valid = hw.instance "handshake_buffer38" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant1.out0: i64, in0_valid: %handshake_constant1.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork5.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork5.in0_ready, %handshake_fork5.out0, %handshake_fork5.out0_valid, %handshake_fork5.out1, %handshake_fork5.out1_valid = hw.instance "handshake_fork5" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer38.out0: i64, in0_valid: %handshake_buffer38.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer40.in0_ready: i1, out1_ready: %handshake_buffer39.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer39.in0_ready, %handshake_buffer39.out0, %handshake_buffer39.out0_valid = hw.instance "handshake_buffer39" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out1: i64, in0_valid: %handshake_fork5.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store2.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer40.in0_ready, %handshake_buffer40.out0, %handshake_buffer40.out0_valid = hw.instance "handshake_buffer40" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out0: i64, in0_valid: %handshake_fork5.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store5.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant2.ctrl_ready, %handshake_constant2.out0, %handshake_constant2.out0_valid = hw.instance "handshake_constant2" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer12.out0: i0, ctrl_valid: %handshake_buffer12.out0_valid: i1, out0_ready: %handshake_buffer41.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer41.in0_ready, %handshake_buffer41.out0, %handshake_buffer41.out0_valid = hw.instance "handshake_buffer41" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant2.out0: i64, in0_valid: %handshake_constant2.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork6.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork6.in0_ready, %handshake_fork6.out0, %handshake_fork6.out0_valid, %handshake_fork6.out1, %handshake_fork6.out1_valid = hw.instance "handshake_fork6" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer41.out0: i64, in0_valid: %handshake_buffer41.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer43.in0_ready: i1, out1_ready: %handshake_buffer42.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer42.in0_ready, %handshake_buffer42.out0, %handshake_buffer42.out0_valid = hw.instance "handshake_buffer42" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out1: i64, in0_valid: %handshake_fork6.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store1.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer43.in0_ready, %handshake_buffer43.out0, %handshake_buffer43.out0_valid = hw.instance "handshake_buffer43" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out0: i64, in0_valid: %handshake_fork6.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store4.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant3.ctrl_ready, %handshake_constant3.out0, %handshake_constant3.out0_valid = hw.instance "handshake_constant3" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer11.out0: i0, ctrl_valid: %handshake_buffer11.out0_valid: i1, out0_ready: %handshake_buffer44.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer44.in0_ready, %handshake_buffer44.out0, %handshake_buffer44.out0_valid = hw.instance "handshake_buffer44" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant3.out0: i64, in0_valid: %handshake_constant3.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork7.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork7.in0_ready, %handshake_fork7.out0, %handshake_fork7.out0_valid, %handshake_fork7.out1, %handshake_fork7.out1_valid = hw.instance "handshake_fork7" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer44.out0: i64, in0_valid: %handshake_buffer44.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer46.in0_ready: i1, out1_ready: %handshake_buffer45.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer45.in0_ready, %handshake_buffer45.out0, %handshake_buffer45.out0_valid = hw.instance "handshake_buffer45" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out1: i64, in0_valid: %handshake_fork7.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store0.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer46.in0_ready, %handshake_buffer46.out0, %handshake_buffer46.out0_valid = hw.instance "handshake_buffer46" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out0: i64, in0_valid: %handshake_fork7.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store3.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant4.ctrl_ready, %handshake_constant4.out0, %handshake_constant4.out0_valid = hw.instance "handshake_constant4" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer10.out0: i0, ctrl_valid: %handshake_buffer10.out0_valid: i1, out0_ready: %handshake_buffer47.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer47.in0_ready, %handshake_buffer47.out0, %handshake_buffer47.out0_valid = hw.instance "handshake_buffer47" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant4.out0: i64, in0_valid: %handshake_constant4.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork8.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork8.in0_ready, %handshake_fork8.out0, %handshake_fork8.out0_valid, %handshake_fork8.out1, %handshake_fork8.out1_valid = hw.instance "handshake_fork8" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer47.out0: i64, in0_valid: %handshake_buffer47.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer49.in0_ready: i1, out1_ready: %handshake_buffer48.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer48.in0_ready, %handshake_buffer48.out0, %handshake_buffer48.out0_valid = hw.instance "handshake_buffer48" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out1: i64, in0_valid: %handshake_fork8.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store2.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer49.in0_ready, %handshake_buffer49.out0, %handshake_buffer49.out0_valid = hw.instance "handshake_buffer49" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out0: i64, in0_valid: %handshake_fork8.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store5.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant5.ctrl_ready, %handshake_constant5.out0, %handshake_constant5.out0_valid = hw.instance "handshake_constant5" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer9.out0: i0, ctrl_valid: %handshake_buffer9.out0_valid: i1, out0_ready: %handshake_buffer50.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer50.in0_ready, %handshake_buffer50.out0, %handshake_buffer50.out0_valid = hw.instance "handshake_buffer50" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant5.out0: i64, in0_valid: %handshake_constant5.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork9.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork9.in0_ready, %handshake_fork9.out0, %handshake_fork9.out0_valid, %handshake_fork9.out1, %handshake_fork9.out1_valid, %handshake_fork9.out2, %handshake_fork9.out2_valid = hw.instance "handshake_fork9" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer50.out0: i64, in0_valid: %handshake_buffer50.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer53.in0_ready: i1, out1_ready: %handshake_buffer52.in0_ready: i1, out2_ready: %handshake_buffer51.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
    %handshake_buffer51.in0_ready, %handshake_buffer51.out0, %handshake_buffer51.out0_valid = hw.instance "handshake_buffer51" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out2: i64, in0_valid: %handshake_fork9.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store1.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer52.in0_ready, %handshake_buffer52.out0, %handshake_buffer52.out0_valid = hw.instance "handshake_buffer52" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out1: i64, in0_valid: %handshake_fork9.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store4.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer53.in0_ready, %handshake_buffer53.out0, %handshake_buffer53.out0_valid = hw.instance "handshake_buffer53" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out0: i64, in0_valid: %handshake_fork9.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux3.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant6.ctrl_ready, %handshake_constant6.out0, %handshake_constant6.out0_valid = hw.instance "handshake_constant6" @handshake_constant_c0_out_ui64(ctrl: %handshake_buffer8.out0: i0, ctrl_valid: %handshake_buffer8.out0_valid: i1, out0_ready: %handshake_buffer54.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer54.in0_ready, %handshake_buffer54.out0, %handshake_buffer54.out0_valid = hw.instance "handshake_buffer54" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant6.out0: i64, in0_valid: %handshake_constant6.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork10.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork10.in0_ready, %handshake_fork10.out0, %handshake_fork10.out0_valid, %handshake_fork10.out1, %handshake_fork10.out1_valid, %handshake_fork10.out2, %handshake_fork10.out2_valid = hw.instance "handshake_fork10" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer54.out0: i64, in0_valid: %handshake_buffer54.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer57.in0_ready: i1, out1_ready: %handshake_buffer56.in0_ready: i1, out2_ready: %handshake_buffer55.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
    %handshake_buffer55.in0_ready, %handshake_buffer55.out0, %handshake_buffer55.out0_valid = hw.instance "handshake_buffer55" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out2: i64, in0_valid: %handshake_fork10.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store0.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer56.in0_ready, %handshake_buffer56.out0, %handshake_buffer56.out0_valid = hw.instance "handshake_buffer56" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out1: i64, in0_valid: %handshake_fork10.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store3.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer57.in0_ready, %handshake_buffer57.out0, %handshake_buffer57.out0_valid = hw.instance "handshake_buffer57" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out0: i64, in0_valid: %handshake_fork10.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux1.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_store0.addrIn0_ready, %handshake_store0.dataIn_ready, %handshake_store0.ctrl_ready, %handshake_store0.dataToMem, %handshake_store0.dataToMem_valid, %handshake_store0.addrOut0, %handshake_store0.addrOut0_valid = hw.instance "handshake_store0" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer55.out0: i64, addrIn0_valid: %handshake_buffer55.out0_valid: i1, dataIn: %handshake_buffer45.out0: i64, dataIn_valid: %handshake_buffer45.out0_valid: i1, ctrl: %handshake_buffer7.out0: i0, ctrl_valid: %handshake_buffer7.out0_valid: i1, dataToMem_ready: %handshake_buffer59.in0_ready: i1, addrOut0_ready: %handshake_buffer58.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer58.in0_ready, %handshake_buffer58.out0, %handshake_buffer58.out0_valid = hw.instance "handshake_buffer58" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.addrOut0: i64, in0_valid: %handshake_store0.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer59.in0_ready, %handshake_buffer59.out0, %handshake_buffer59.out0_valid = hw.instance "handshake_buffer59" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.dataToMem: i64, in0_valid: %handshake_store0.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join1.in0_ready, %handshake_join1.in1_ready, %handshake_join1.out0, %handshake_join1.out0_valid = hw.instance "handshake_join1" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer6.out0: i0, in0_valid: %handshake_buffer6.out0_valid: i1, in1: %handshake_buffer33.out0: i0, in1_valid: %handshake_buffer33.out0_valid: i1, out0_ready: %handshake_buffer60.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer60.in0_ready, %handshake_buffer60.out0, %handshake_buffer60.out0_valid = hw.instance "handshake_buffer60" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join1.out0: i0, in0_valid: %handshake_join1.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store1.addrIn0_ready, %handshake_store1.dataIn_ready, %handshake_store1.ctrl_ready, %handshake_store1.dataToMem, %handshake_store1.dataToMem_valid, %handshake_store1.addrOut0, %handshake_store1.addrOut0_valid = hw.instance "handshake_store1" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer51.out0: i64, addrIn0_valid: %handshake_buffer51.out0_valid: i1, dataIn: %handshake_buffer42.out0: i64, dataIn_valid: %handshake_buffer42.out0_valid: i1, ctrl: %handshake_buffer60.out0: i0, ctrl_valid: %handshake_buffer60.out0_valid: i1, dataToMem_ready: %handshake_buffer62.in0_ready: i1, addrOut0_ready: %handshake_buffer61.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer61.in0_ready, %handshake_buffer61.out0, %handshake_buffer61.out0_valid = hw.instance "handshake_buffer61" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.addrOut0: i64, in0_valid: %handshake_store1.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer62.in0_ready, %handshake_buffer62.out0, %handshake_buffer62.out0_valid = hw.instance "handshake_buffer62" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.dataToMem: i64, in0_valid: %handshake_store1.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stData1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join2.in0_ready, %handshake_join2.in1_ready, %handshake_join2.in2_ready, %handshake_join2.out0, %handshake_join2.out0_valid = hw.instance "handshake_join2" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer5.out0: i0, in0_valid: %handshake_buffer5.out0_valid: i1, in1: %handshake_buffer34.out0: i0, in1_valid: %handshake_buffer34.out0_valid: i1, in2: %handshake_buffer31.out0: i0, in2_valid: %handshake_buffer31.out0_valid: i1, out0_ready: %handshake_buffer63.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer63.in0_ready, %handshake_buffer63.out0, %handshake_buffer63.out0_valid = hw.instance "handshake_buffer63" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join2.out0: i0, in0_valid: %handshake_join2.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store2.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store2.addrIn0_ready, %handshake_store2.dataIn_ready, %handshake_store2.ctrl_ready, %handshake_store2.dataToMem, %handshake_store2.dataToMem_valid, %handshake_store2.addrOut0, %handshake_store2.addrOut0_valid = hw.instance "handshake_store2" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer48.out0: i64, addrIn0_valid: %handshake_buffer48.out0_valid: i1, dataIn: %handshake_buffer39.out0: i64, dataIn_valid: %handshake_buffer39.out0_valid: i1, ctrl: %handshake_buffer63.out0: i0, ctrl_valid: %handshake_buffer63.out0_valid: i1, dataToMem_ready: %handshake_buffer65.in0_ready: i1, addrOut0_ready: %handshake_buffer64.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer64.in0_ready, %handshake_buffer64.out0, %handshake_buffer64.out0_valid = hw.instance "handshake_buffer64" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.addrOut0: i64, in0_valid: %handshake_store2.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer65.in0_ready, %handshake_buffer65.out0, %handshake_buffer65.out0_valid = hw.instance "handshake_buffer65" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.dataToMem: i64, in0_valid: %handshake_store2.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stData2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_store3.addrIn0_ready, %handshake_store3.dataIn_ready, %handshake_store3.ctrl_ready, %handshake_store3.dataToMem, %handshake_store3.dataToMem_valid, %handshake_store3.addrOut0, %handshake_store3.addrOut0_valid = hw.instance "handshake_store3" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer56.out0: i64, addrIn0_valid: %handshake_buffer56.out0_valid: i1, dataIn: %handshake_buffer46.out0: i64, dataIn_valid: %handshake_buffer46.out0_valid: i1, ctrl: %handshake_buffer3.out0: i0, ctrl_valid: %handshake_buffer3.out0_valid: i1, dataToMem_ready: %handshake_buffer67.in0_ready: i1, addrOut0_ready: %handshake_buffer66.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer66.in0_ready, %handshake_buffer66.out0, %handshake_buffer66.out0_valid = hw.instance "handshake_buffer66" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.addrOut0: i64, in0_valid: %handshake_store3.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer67.in0_ready, %handshake_buffer67.out0, %handshake_buffer67.out0_valid = hw.instance "handshake_buffer67" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.dataToMem: i64, in0_valid: %handshake_store3.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join3.in0_ready, %handshake_join3.in1_ready, %handshake_join3.out0, %handshake_join3.out0_valid = hw.instance "handshake_join3" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer2.out0: i0, in0_valid: %handshake_buffer2.out0_valid: i1, in1: %handshake_buffer24.out0: i0, in1_valid: %handshake_buffer24.out0_valid: i1, out0_ready: %handshake_buffer68.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer68.in0_ready, %handshake_buffer68.out0, %handshake_buffer68.out0_valid = hw.instance "handshake_buffer68" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join3.out0: i0, in0_valid: %handshake_join3.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store4.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store4.addrIn0_ready, %handshake_store4.dataIn_ready, %handshake_store4.ctrl_ready, %handshake_store4.dataToMem, %handshake_store4.dataToMem_valid, %handshake_store4.addrOut0, %handshake_store4.addrOut0_valid = hw.instance "handshake_store4" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer52.out0: i64, addrIn0_valid: %handshake_buffer52.out0_valid: i1, dataIn: %handshake_buffer43.out0: i64, dataIn_valid: %handshake_buffer43.out0_valid: i1, ctrl: %handshake_buffer68.out0: i0, ctrl_valid: %handshake_buffer68.out0_valid: i1, dataToMem_ready: %handshake_buffer70.in0_ready: i1, addrOut0_ready: %handshake_buffer69.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer69.in0_ready, %handshake_buffer69.out0, %handshake_buffer69.out0_valid = hw.instance "handshake_buffer69" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.addrOut0: i64, in0_valid: %handshake_store4.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer70.in0_ready, %handshake_buffer70.out0, %handshake_buffer70.out0_valid = hw.instance "handshake_buffer70" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.dataToMem: i64, in0_valid: %handshake_store4.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stData1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join4.in0_ready, %handshake_join4.in1_ready, %handshake_join4.in2_ready, %handshake_join4.out0, %handshake_join4.out0_valid = hw.instance "handshake_join4" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer1.out0: i0, in0_valid: %handshake_buffer1.out0_valid: i1, in1: %handshake_buffer25.out0: i0, in1_valid: %handshake_buffer25.out0_valid: i1, in2: %handshake_buffer22.out0: i0, in2_valid: %handshake_buffer22.out0_valid: i1, out0_ready: %handshake_buffer71.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer71.in0_ready, %handshake_buffer71.out0, %handshake_buffer71.out0_valid = hw.instance "handshake_buffer71" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join4.out0: i0, in0_valid: %handshake_join4.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store5.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store5.addrIn0_ready, %handshake_store5.dataIn_ready, %handshake_store5.ctrl_ready, %handshake_store5.dataToMem, %handshake_store5.dataToMem_valid, %handshake_store5.addrOut0, %handshake_store5.addrOut0_valid = hw.instance "handshake_store5" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer49.out0: i64, addrIn0_valid: %handshake_buffer49.out0_valid: i1, dataIn: %handshake_buffer40.out0: i64, dataIn_valid: %handshake_buffer40.out0_valid: i1, ctrl: %handshake_buffer71.out0: i0, ctrl_valid: %handshake_buffer71.out0_valid: i1, dataToMem_ready: %handshake_buffer73.in0_ready: i1, addrOut0_ready: %handshake_buffer72.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer72.in0_ready, %handshake_buffer72.out0, %handshake_buffer72.out0_valid = hw.instance "handshake_buffer72" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.addrOut0: i64, in0_valid: %handshake_store5.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer73.in0_ready, %handshake_buffer73.out0, %handshake_buffer73.out0_valid = hw.instance "handshake_buffer73" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.dataToMem: i64, in0_valid: %handshake_store5.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stData2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer74.in0_ready, %handshake_buffer74.out0, %handshake_buffer74.out0_valid = hw.instance "handshake_buffer74" @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in0: %handshake_fork14.out0: i1, in0_valid: %handshake_fork14.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork11.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_fork11.in0_ready, %handshake_fork11.out0, %handshake_fork11.out0_valid, %handshake_fork11.out1, %handshake_fork11.out1_valid, %handshake_fork11.out2, %handshake_fork11.out2_valid, %handshake_fork11.out3, %handshake_fork11.out3_valid = hw.instance "handshake_fork11" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in0: %handshake_buffer74.out0: i1, in0_valid: %handshake_buffer74.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer78.in0_ready: i1, out1_ready: %handshake_buffer77.in0_ready: i1, out2_ready: %handshake_buffer76.in0_ready: i1, out3_ready: %handshake_buffer75.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1)
    %handshake_buffer75.in0_ready, %handshake_buffer75.out0, %handshake_buffer75.out0_valid = hw.instance "handshake_buffer75" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out3: i1, in0_valid: %handshake_fork11.out3_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux0.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer76.in0_ready, %handshake_buffer76.out0, %handshake_buffer76.out0_valid = hw.instance "handshake_buffer76" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out2: i1, in0_valid: %handshake_fork11.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux1.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer77.in0_ready, %handshake_buffer77.out0, %handshake_buffer77.out0_valid = hw.instance "handshake_buffer77" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out1: i1, in0_valid: %handshake_fork11.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux2.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer78.in0_ready, %handshake_buffer78.out0, %handshake_buffer78.out0_valid = hw.instance "handshake_buffer78" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out0: i1, in0_valid: %handshake_fork11.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux3.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_mux0.select_ready, %handshake_mux0.in0_ready, %handshake_mux0.in1_ready, %handshake_mux0.out0, %handshake_mux0.out0_valid = hw.instance "handshake_mux0" @handshake_mux_in_ui1_3ins_1outs_ctrl(select: %handshake_buffer75.out0: i1, select_valid: %handshake_buffer75.out0_valid: i1, in0: %handshake_buffer36.out0: i0, in0_valid: %handshake_buffer36.out0_valid: i1, in1: %handshake_buffer107.out0: i0, in1_valid: %handshake_buffer107.out0_valid: i1, out0_ready: %handshake_buffer79.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer79.in0_ready, %handshake_buffer79.out0, %handshake_buffer79.out0_valid = hw.instance "handshake_buffer79" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_mux0.out0: i0, in0_valid: %handshake_mux0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br3.data_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_mux1.select_ready, %handshake_mux1.in0_ready, %handshake_mux1.in1_ready, %handshake_mux1.out0, %handshake_mux1.out0_valid = hw.instance "handshake_mux1" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer76.out0: i1, select_valid: %handshake_buffer76.out0_valid: i1, in0: %handshake_buffer57.out0: i64, in0_valid: %handshake_buffer57.out0_valid: i1, in1: %handshake_buffer115.out0: i64, in1_valid: %handshake_buffer115.out0_valid: i1, out0_ready: %handshake_buffer80.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer80.in0_ready, %handshake_buffer80.out0, %handshake_buffer80.out0_valid = hw.instance "handshake_buffer80" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux1.out0: i64, in0_valid: %handshake_mux1.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork12.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork12.in0_ready, %handshake_fork12.out0, %handshake_fork12.out0_valid, %handshake_fork12.out1, %handshake_fork12.out1_valid = hw.instance "handshake_fork12" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer80.out0: i64, in0_valid: %handshake_buffer80.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer82.in0_ready: i1, out1_ready: %handshake_buffer81.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer81.in0_ready, %handshake_buffer81.out0, %handshake_buffer81.out0_valid = hw.instance "handshake_buffer81" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out1: i64, in0_valid: %handshake_fork12.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br0.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer82.in0_ready, %handshake_buffer82.out0, %handshake_buffer82.out0_valid = hw.instance "handshake_buffer82" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out0: i64, in0_valid: %handshake_fork12.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_cmpi0.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_mux2.select_ready, %handshake_mux2.in0_ready, %handshake_mux2.in1_ready, %handshake_mux2.out0, %handshake_mux2.out0_valid = hw.instance "handshake_mux2" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer77.out0: i1, select_valid: %handshake_buffer77.out0_valid: i1, in0: %handshake_buffer37.out0: i64, in0_valid: %handshake_buffer37.out0_valid: i1, in1: %handshake_buffer97.out0: i64, in1_valid: %handshake_buffer97.out0_valid: i1, out0_ready: %handshake_buffer83.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer83.in0_ready, %handshake_buffer83.out0, %handshake_buffer83.out0_valid = hw.instance "handshake_buffer83" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux2.out0: i64, in0_valid: %handshake_mux2.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork13.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork13.in0_ready, %handshake_fork13.out0, %handshake_fork13.out0_valid, %handshake_fork13.out1, %handshake_fork13.out1_valid = hw.instance "handshake_fork13" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer83.out0: i64, in0_valid: %handshake_buffer83.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer85.in0_ready: i1, out1_ready: %handshake_buffer84.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer84.in0_ready, %handshake_buffer84.out0, %handshake_buffer84.out0_valid = hw.instance "handshake_buffer84" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out1: i64, in0_valid: %handshake_fork13.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br1.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer85.in0_ready, %handshake_buffer85.out0, %handshake_buffer85.out0_valid = hw.instance "handshake_buffer85" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out0: i64, in0_valid: %handshake_fork13.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_cmpi0.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_mux3.select_ready, %handshake_mux3.in0_ready, %handshake_mux3.in1_ready, %handshake_mux3.out0, %handshake_mux3.out0_valid = hw.instance "handshake_mux3" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer78.out0: i1, select_valid: %handshake_buffer78.out0_valid: i1, in0: %handshake_buffer53.out0: i64, in0_valid: %handshake_buffer53.out0_valid: i1, in1: %handshake_buffer100.out0: i64, in1_valid: %handshake_buffer100.out0_valid: i1, out0_ready: %handshake_buffer86.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer86.in0_ready, %handshake_buffer86.out0, %handshake_buffer86.out0_valid = hw.instance "handshake_buffer86" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux3.out0: i64, in0_valid: %handshake_mux3.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br2.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %arith_cmpi0.in0_ready, %arith_cmpi0.in1_ready, %arith_cmpi0.out0, %arith_cmpi0.out0_valid = hw.instance "arith_cmpi0" @arith_cmpi_in_ui64_ui64_out_ui1_slt(in0: %handshake_buffer82.out0: i64, in0_valid: %handshake_buffer82.out0_valid: i1, in1: %handshake_buffer85.out0: i64, in1_valid: %handshake_buffer85.out0_valid: i1, out0_ready: %handshake_buffer87.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer87.in0_ready, %handshake_buffer87.out0, %handshake_buffer87.out0_valid = hw.instance "handshake_buffer87" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %arith_cmpi0.out0: i1, in0_valid: %arith_cmpi0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork14.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_fork14.in0_ready, %handshake_fork14.out0, %handshake_fork14.out0_valid, %handshake_fork14.out1, %handshake_fork14.out1_valid, %handshake_fork14.out2, %handshake_fork14.out2_valid, %handshake_fork14.out3, %handshake_fork14.out3_valid, %handshake_fork14.out4, %handshake_fork14.out4_valid = hw.instance "handshake_fork14" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in0: %handshake_buffer87.out0: i1, in0_valid: %handshake_buffer87.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer74.in0_ready: i1, out1_ready: %handshake_buffer91.in0_ready: i1, out2_ready: %handshake_buffer90.in0_ready: i1, out3_ready: %handshake_buffer89.in0_ready: i1, out4_ready: %handshake_buffer88.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1, out4: i1, out4_valid: i1)
    %handshake_buffer88.in0_ready, %handshake_buffer88.out0, %handshake_buffer88.out0_valid = hw.instance "handshake_buffer88" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out4: i1, in0_valid: %handshake_fork14.out4_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br0.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer89.in0_ready, %handshake_buffer89.out0, %handshake_buffer89.out0_valid = hw.instance "handshake_buffer89" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out3: i1, in0_valid: %handshake_fork14.out3_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br1.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer90.in0_ready, %handshake_buffer90.out0, %handshake_buffer90.out0_valid = hw.instance "handshake_buffer90" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out2: i1, in0_valid: %handshake_fork14.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br2.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer91.in0_ready, %handshake_buffer91.out0, %handshake_buffer91.out0_valid = hw.instance "handshake_buffer91" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out1: i1, in0_valid: %handshake_fork14.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br3.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_cond_br0.cond_ready, %handshake_cond_br0.data_ready, %handshake_cond_br0.outTrue, %handshake_cond_br0.outTrue_valid, %handshake_cond_br0.outFalse, %handshake_cond_br0.outFalse_valid = hw.instance "handshake_cond_br0" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer88.out0: i1, cond_valid: %handshake_buffer88.out0_valid: i1, data: %handshake_buffer81.out0: i64, data_valid: %handshake_buffer81.out0_valid: i1, outTrue_ready: %handshake_buffer92.in0_ready: i1, outFalse_ready: %handshake_sink0.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %handshake_buffer92.in0_ready, %handshake_buffer92.out0, %handshake_buffer92.out0_valid = hw.instance "handshake_buffer92" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br0.outTrue: i64, in0_valid: %handshake_cond_br0.outTrue_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork15.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_sink0.in0_ready = hw.instance "handshake_sink0" @handshake_sink_in_ui64(in0: %handshake_cond_br0.outFalse: i64, in0_valid: %handshake_cond_br0.outFalse_valid: i1) -> (in0_ready: i1)
    %handshake_fork15.in0_ready, %handshake_fork15.out0, %handshake_fork15.out0_valid, %handshake_fork15.out1, %handshake_fork15.out1_valid, %handshake_fork15.out2, %handshake_fork15.out2_valid, %handshake_fork15.out3, %handshake_fork15.out3_valid = hw.instance "handshake_fork15" @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in0: %handshake_buffer92.out0: i64, in0_valid: %handshake_buffer92.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer96.in0_ready: i1, out1_ready: %handshake_buffer95.in0_ready: i1, out2_ready: %handshake_buffer94.in0_ready: i1, out3_ready: %handshake_buffer93.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1, out3: i64, out3_valid: i1)
    %handshake_buffer93.in0_ready, %handshake_buffer93.out0, %handshake_buffer93.out0_valid = hw.instance "handshake_buffer93" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out3: i64, in0_valid: %handshake_fork15.out3_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store6.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer94.in0_ready, %handshake_buffer94.out0, %handshake_buffer94.out0_valid = hw.instance "handshake_buffer94" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out2: i64, in0_valid: %handshake_fork15.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load1.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer95.in0_ready, %handshake_buffer95.out0, %handshake_buffer95.out0_valid = hw.instance "handshake_buffer95" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out1: i64, in0_valid: %handshake_fork15.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load0.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer96.in0_ready, %handshake_buffer96.out0, %handshake_buffer96.out0_valid = hw.instance "handshake_buffer96" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out0: i64, in0_valid: %handshake_fork15.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_addi1.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_cond_br1.cond_ready, %handshake_cond_br1.data_ready, %handshake_cond_br1.outTrue, %handshake_cond_br1.outTrue_valid, %handshake_cond_br1.outFalse, %handshake_cond_br1.outFalse_valid = hw.instance "handshake_cond_br1" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer89.out0: i1, cond_valid: %handshake_buffer89.out0_valid: i1, data: %handshake_buffer84.out0: i64, data_valid: %handshake_buffer84.out0_valid: i1, outTrue_ready: %handshake_buffer97.in0_ready: i1, outFalse_ready: %handshake_sink1.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %handshake_buffer97.in0_ready, %handshake_buffer97.out0, %handshake_buffer97.out0_valid = hw.instance "handshake_buffer97" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br1.outTrue: i64, in0_valid: %handshake_cond_br1.outTrue_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux2.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_sink1.in0_ready = hw.instance "handshake_sink1" @handshake_sink_in_ui64(in0: %handshake_cond_br1.outFalse: i64, in0_valid: %handshake_cond_br1.outFalse_valid: i1) -> (in0_ready: i1)
    %handshake_cond_br2.cond_ready, %handshake_cond_br2.data_ready, %handshake_cond_br2.outTrue, %handshake_cond_br2.outTrue_valid, %handshake_cond_br2.outFalse, %handshake_cond_br2.outFalse_valid = hw.instance "handshake_cond_br2" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer90.out0: i1, cond_valid: %handshake_buffer90.out0_valid: i1, data: %handshake_buffer86.out0: i64, data_valid: %handshake_buffer86.out0_valid: i1, outTrue_ready: %handshake_buffer98.in0_ready: i1, outFalse_ready: %handshake_sink2.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %handshake_buffer98.in0_ready, %handshake_buffer98.out0, %handshake_buffer98.out0_valid = hw.instance "handshake_buffer98" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br2.outTrue: i64, in0_valid: %handshake_cond_br2.outTrue_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork16.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_sink2.in0_ready = hw.instance "handshake_sink2" @handshake_sink_in_ui64(in0: %handshake_cond_br2.outFalse: i64, in0_valid: %handshake_cond_br2.outFalse_valid: i1) -> (in0_ready: i1)
    %handshake_fork16.in0_ready, %handshake_fork16.out0, %handshake_fork16.out0_valid, %handshake_fork16.out1, %handshake_fork16.out1_valid = hw.instance "handshake_fork16" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer98.out0: i64, in0_valid: %handshake_buffer98.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer100.in0_ready: i1, out1_ready: %handshake_buffer99.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer99.in0_ready, %handshake_buffer99.out0, %handshake_buffer99.out0_valid = hw.instance "handshake_buffer99" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out1: i64, in0_valid: %handshake_fork16.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_addi1.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer100.in0_ready, %handshake_buffer100.out0, %handshake_buffer100.out0_valid = hw.instance "handshake_buffer100" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out0: i64, in0_valid: %handshake_fork16.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux3.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_cond_br3.cond_ready, %handshake_cond_br3.data_ready, %handshake_cond_br3.outTrue, %handshake_cond_br3.outTrue_valid, %handshake_cond_br3.outFalse, %handshake_cond_br3.outFalse_valid = hw.instance "handshake_cond_br3" @handshake_cond_br_in_ui1_2ins_2outs_ctrl(cond: %handshake_buffer91.out0: i1, cond_valid: %handshake_buffer91.out0_valid: i1, data: %handshake_buffer79.out0: i0, data_valid: %handshake_buffer79.out0_valid: i1, outTrue_ready: %handshake_buffer102.in0_ready: i1, outFalse_ready: %handshake_buffer101.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i0, outTrue_valid: i1, outFalse: i0, outFalse_valid: i1)
    %handshake_buffer101.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid = hw.instance "handshake_buffer101" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outFalse: i0, in0_valid: %handshake_cond_br3.outFalse_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %out0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer102.in0_ready, %handshake_buffer102.out0, %handshake_buffer102.out0_valid = hw.instance "handshake_buffer102" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outTrue: i0, in0_valid: %handshake_cond_br3.outTrue_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork17.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork17.in0_ready, %handshake_fork17.out0, %handshake_fork17.out0_valid, %handshake_fork17.out1, %handshake_fork17.out1_valid, %handshake_fork17.out2, %handshake_fork17.out2_valid, %handshake_fork17.out3, %handshake_fork17.out3_valid = hw.instance "handshake_fork17" @handshake_fork_1ins_4outs_ctrl(in0: %handshake_buffer102.out0: i0, in0_valid: %handshake_buffer102.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer106.in0_ready: i1, out1_ready: %handshake_buffer105.in0_ready: i1, out2_ready: %handshake_buffer104.in0_ready: i1, out3_ready: %handshake_buffer103.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1)
    %handshake_buffer103.in0_ready, %handshake_buffer103.out0, %handshake_buffer103.out0_valid = hw.instance "handshake_buffer103" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out3: i0, in0_valid: %handshake_fork17.out3_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer104.in0_ready, %handshake_buffer104.out0, %handshake_buffer104.out0_valid = hw.instance "handshake_buffer104" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out2: i0, in0_valid: %handshake_fork17.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer105.in0_ready, %handshake_buffer105.out0, %handshake_buffer105.out0_valid = hw.instance "handshake_buffer105" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out1: i0, in0_valid: %handshake_fork17.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join5.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer106.in0_ready, %handshake_buffer106.out0, %handshake_buffer106.out0_valid = hw.instance "handshake_buffer106" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out0: i0, in0_valid: %handshake_fork17.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store6.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_join5.in0_ready, %handshake_join5.in1_ready, %handshake_join5.in2_ready, %handshake_join5.in3_ready, %handshake_join5.out0, %handshake_join5.out0_valid = hw.instance "handshake_join5" @handshake_join_4ins_1outs_ctrl(in0: %handshake_buffer105.out0: i0, in0_valid: %handshake_buffer105.out0_valid: i1, in1: %handshake_buffer26.out0: i0, in1_valid: %handshake_buffer26.out0_valid: i1, in2: %handshake_buffer16.out0: i0, in2_valid: %handshake_buffer16.out0_valid: i1, in3: %handshake_buffer15.out0: i0, in3_valid: %handshake_buffer15.out0_valid: i1, out0_ready: %handshake_buffer107.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer107.in0_ready, %handshake_buffer107.out0, %handshake_buffer107.out0_valid = hw.instance "handshake_buffer107" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join5.out0: i0, in0_valid: %handshake_join5.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux0.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_load0.addrIn0_ready, %handshake_load0.dataFromMem_ready, %handshake_load0.ctrl_ready, %handshake_load0.dataOut, %handshake_load0.dataOut_valid, %handshake_load0.addrOut0, %handshake_load0.addrOut0_valid = hw.instance "handshake_load0" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer95.out0: i64, addrIn0_valid: %handshake_buffer95.out0_valid: i1, dataFromMem: %handshake_buffer30.out0: i64, dataFromMem_valid: %handshake_buffer30.out0_valid: i1, ctrl: %handshake_buffer103.out0: i0, ctrl_valid: %handshake_buffer103.out0_valid: i1, dataOut_ready: %handshake_buffer109.in0_ready: i1, addrOut0_ready: %handshake_buffer108.in0_ready: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer108.in0_ready, %handshake_buffer108.out0, %handshake_buffer108.out0_valid = hw.instance "handshake_buffer108" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.addrOut0: i64, in0_valid: %handshake_load0.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.ldAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer109.in0_ready, %handshake_buffer109.out0, %handshake_buffer109.out0_valid = hw.instance "handshake_buffer109" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.dataOut: i64, in0_valid: %handshake_load0.dataOut_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_addi0.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_load1.addrIn0_ready, %handshake_load1.dataFromMem_ready, %handshake_load1.ctrl_ready, %handshake_load1.dataOut, %handshake_load1.dataOut_valid, %handshake_load1.addrOut0, %handshake_load1.addrOut0_valid = hw.instance "handshake_load1" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer94.out0: i64, addrIn0_valid: %handshake_buffer94.out0_valid: i1, dataFromMem: %handshake_buffer20.out0: i64, dataFromMem_valid: %handshake_buffer20.out0_valid: i1, ctrl: %handshake_buffer104.out0: i0, ctrl_valid: %handshake_buffer104.out0_valid: i1, dataOut_ready: %handshake_buffer111.in0_ready: i1, addrOut0_ready: %handshake_buffer110.in0_ready: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer110.in0_ready, %handshake_buffer110.out0, %handshake_buffer110.out0_valid = hw.instance "handshake_buffer110" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.addrOut0: i64, in0_valid: %handshake_load1.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.ldAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer111.in0_ready, %handshake_buffer111.out0, %handshake_buffer111.out0_valid = hw.instance "handshake_buffer111" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.dataOut: i64, in0_valid: %handshake_load1.dataOut_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_addi0.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %arith_addi0.in0_ready, %arith_addi0.in1_ready, %arith_addi0.out0, %arith_addi0.out0_valid = hw.instance "arith_addi0" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer109.out0: i64, in0_valid: %handshake_buffer109.out0_valid: i1, in1: %handshake_buffer111.out0: i64, in1_valid: %handshake_buffer111.out0_valid: i1, out0_ready: %handshake_buffer112.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer112.in0_ready, %handshake_buffer112.out0, %handshake_buffer112.out0_valid = hw.instance "handshake_buffer112" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi0.out0: i64, in0_valid: %arith_addi0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store6.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_store6.addrIn0_ready, %handshake_store6.dataIn_ready, %handshake_store6.ctrl_ready, %handshake_store6.dataToMem, %handshake_store6.dataToMem_valid, %handshake_store6.addrOut0, %handshake_store6.addrOut0_valid = hw.instance "handshake_store6" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer93.out0: i64, addrIn0_valid: %handshake_buffer93.out0_valid: i1, dataIn: %handshake_buffer112.out0: i64, dataIn_valid: %handshake_buffer112.out0_valid: i1, ctrl: %handshake_buffer106.out0: i0, ctrl_valid: %handshake_buffer106.out0_valid: i1, dataToMem_ready: %handshake_buffer114.in0_ready: i1, addrOut0_ready: %handshake_buffer113.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer113.in0_ready, %handshake_buffer113.out0, %handshake_buffer113.out0_valid = hw.instance "handshake_buffer113" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.addrOut0: i64, in0_valid: %handshake_store6.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory0.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer114.in0_ready, %handshake_buffer114.out0, %handshake_buffer114.out0_valid = hw.instance "handshake_buffer114" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.dataToMem: i64, in0_valid: %handshake_store6.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory0.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %arith_addi1.in0_ready, %arith_addi1.in1_ready, %arith_addi1.out0, %arith_addi1.out0_valid = hw.instance "arith_addi1" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer96.out0: i64, in0_valid: %handshake_buffer96.out0_valid: i1, in1: %handshake_buffer99.out0: i64, in1_valid: %handshake_buffer99.out0_valid: i1, out0_ready: %handshake_buffer115.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer115.in0_ready, %handshake_buffer115.out0, %handshake_buffer115.out0_valid = hw.instance "handshake_buffer115" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi1.out0: i64, in0_valid: %arith_addi1.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux1.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    hw.output %handshake_buffer0.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid : i1, i0, i1
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
module {
  hw.module @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %in0_valid, %valid0_reg : i1
    %3 = comb.mux %1, %in0, %data0_reg : i0
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %c0_i0 : i0  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %16, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %16, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %14, %clock reset %reset, %c0_i0 : i0  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i0
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i0
    %14 = comb.mux %9, %c0_i0, %13 : i0
    %valid1_reg = seq.compreg sym @valid1_reg %17, %clock reset %reset, %false : i1  
    %15 = comb.xor %valid1_reg, %true : i1
    %16 = comb.or %15, %20 : i1
    %17 = comb.mux %16, %4, %valid1_reg : i1
    %18 = comb.mux %16, %12, %data1_reg : i0
    %data1_reg = seq.compreg sym @data1_reg %18, %clock reset %reset, %c0_i0 : i0  
    %ready1_reg = seq.compreg sym @ready1_reg %26, %clock reset %reset, %false : i1  
    %19 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
    %20 = comb.xor %ready1_reg, %true : i1
    %21 = comb.xor %out0_ready, %true : i1
    %22 = comb.and %21, %20 : i1
    %23 = comb.mux %22, %valid1_reg, %ready1_reg : i1
    %24 = comb.and %out0_ready, %ready1_reg : i1
    %25 = comb.xor %24, %true : i1
    %26 = comb.and %25, %23 : i1
    %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %29, %clock reset %reset, %c0_i0 : i0  
    %27 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i0
    %28 = comb.mux %22, %data1_reg, %ctrl_data1_reg : i0
    %29 = comb.mux %24, %c0_i0, %28 : i0
    hw.output %1, %27, %19 : i1, i0, i1
  }
  hw.module @handshake_fork_1ins_14outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, in %out5_ready : i1, in %out6_ready : i1, in %out7_ready : i1, in %out8_ready : i1, in %out9_ready : i1, in %out10_ready : i1, in %out11_ready : i1, in %out12_ready : i1, in %out13_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1, out out4 : i0, out out4_valid : i1, out out5 : i0, out out5_valid : i1, out out6 : i0, out out6_valid : i1, out out7 : i0, out out7_valid : i1, out out8 : i0, out out8_valid : i1, out out9 : i0, out out9_valid : i1, out out10 : i0, out out10_valid : i1, out out11 : i0, out out11_valid : i1, out out12 : i0, out out12_valid : i1, out out13 : i0, out out13_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %84, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %84, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %84, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %in0_valid : i1
    %16 = comb.and %out2_ready, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %84, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %in0_valid : i1
    %22 = comb.and %out3_ready, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.xor %84, %true : i1
    %25 = comb.and %29, %24 : i1
    %emitted_4 = seq.compreg sym @emitted_4 %25, %clock reset %reset, %false : i1  
    %26 = comb.xor %emitted_4, %true : i1
    %27 = comb.and %26, %in0_valid : i1
    %28 = comb.and %out4_ready, %27 : i1
    %29 = comb.or %28, %emitted_4 {sv.namehint = "done4"} : i1
    %30 = comb.xor %84, %true : i1
    %31 = comb.and %35, %30 : i1
    %emitted_5 = seq.compreg sym @emitted_5 %31, %clock reset %reset, %false : i1  
    %32 = comb.xor %emitted_5, %true : i1
    %33 = comb.and %32, %in0_valid : i1
    %34 = comb.and %out5_ready, %33 : i1
    %35 = comb.or %34, %emitted_5 {sv.namehint = "done5"} : i1
    %36 = comb.xor %84, %true : i1
    %37 = comb.and %41, %36 : i1
    %emitted_6 = seq.compreg sym @emitted_6 %37, %clock reset %reset, %false : i1  
    %38 = comb.xor %emitted_6, %true : i1
    %39 = comb.and %38, %in0_valid : i1
    %40 = comb.and %out6_ready, %39 : i1
    %41 = comb.or %40, %emitted_6 {sv.namehint = "done6"} : i1
    %42 = comb.xor %84, %true : i1
    %43 = comb.and %47, %42 : i1
    %emitted_7 = seq.compreg sym @emitted_7 %43, %clock reset %reset, %false : i1  
    %44 = comb.xor %emitted_7, %true : i1
    %45 = comb.and %44, %in0_valid : i1
    %46 = comb.and %out7_ready, %45 : i1
    %47 = comb.or %46, %emitted_7 {sv.namehint = "done7"} : i1
    %48 = comb.xor %84, %true : i1
    %49 = comb.and %53, %48 : i1
    %emitted_8 = seq.compreg sym @emitted_8 %49, %clock reset %reset, %false : i1  
    %50 = comb.xor %emitted_8, %true : i1
    %51 = comb.and %50, %in0_valid : i1
    %52 = comb.and %out8_ready, %51 : i1
    %53 = comb.or %52, %emitted_8 {sv.namehint = "done8"} : i1
    %54 = comb.xor %84, %true : i1
    %55 = comb.and %59, %54 : i1
    %emitted_9 = seq.compreg sym @emitted_9 %55, %clock reset %reset, %false : i1  
    %56 = comb.xor %emitted_9, %true : i1
    %57 = comb.and %56, %in0_valid : i1
    %58 = comb.and %out9_ready, %57 : i1
    %59 = comb.or %58, %emitted_9 {sv.namehint = "done9"} : i1
    %60 = comb.xor %84, %true : i1
    %61 = comb.and %65, %60 : i1
    %emitted_10 = seq.compreg sym @emitted_10 %61, %clock reset %reset, %false : i1  
    %62 = comb.xor %emitted_10, %true : i1
    %63 = comb.and %62, %in0_valid : i1
    %64 = comb.and %out10_ready, %63 : i1
    %65 = comb.or %64, %emitted_10 {sv.namehint = "done10"} : i1
    %66 = comb.xor %84, %true : i1
    %67 = comb.and %71, %66 : i1
    %emitted_11 = seq.compreg sym @emitted_11 %67, %clock reset %reset, %false : i1  
    %68 = comb.xor %emitted_11, %true : i1
    %69 = comb.and %68, %in0_valid : i1
    %70 = comb.and %out11_ready, %69 : i1
    %71 = comb.or %70, %emitted_11 {sv.namehint = "done11"} : i1
    %72 = comb.xor %84, %true : i1
    %73 = comb.and %77, %72 : i1
    %emitted_12 = seq.compreg sym @emitted_12 %73, %clock reset %reset, %false : i1  
    %74 = comb.xor %emitted_12, %true : i1
    %75 = comb.and %74, %in0_valid : i1
    %76 = comb.and %out12_ready, %75 : i1
    %77 = comb.or %76, %emitted_12 {sv.namehint = "done12"} : i1
    %78 = comb.xor %84, %true : i1
    %79 = comb.and %83, %78 : i1
    %emitted_13 = seq.compreg sym @emitted_13 %79, %clock reset %reset, %false : i1  
    %80 = comb.xor %emitted_13, %true : i1
    %81 = comb.and %80, %in0_valid : i1
    %82 = comb.and %out13_ready, %81 : i1
    %83 = comb.or %82, %emitted_13 {sv.namehint = "done13"} : i1
    %84 = comb.and %5, %11, %17, %23, %29, %35, %41, %47, %53, %59, %65, %71, %77, %83 {sv.namehint = "allDone"} : i1
    hw.output %84, %in0, %3, %in0, %9, %in0, %15, %in0, %21, %in0, %27, %in0, %33, %in0, %39, %in0, %45, %in0, %51, %in0, %57, %in0, %63, %in0, %69, %in0, %75, %in0, %81 : i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id2(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %stDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stDone0 : i0, out stDone0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_2 = seq.hlmem @_handshake_memory_2 %clock, %reset : <3xi64>
    %writeValidBuffer = seq.compreg sym @writeValidBuffer %4, %clock reset %reset, %false : i1  
    %0 = comb.and %stDone0_ready, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
    %1 = comb.xor %writeValidBuffer, %true : i1
    %2 = comb.or %1, %0 {sv.namehint = "emptyOrComplete"} : i1
    %3 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
    %4 = comb.mux %2, %3, %writeValidBuffer : i1
    %5 = comb.extract %stAddr0 from 0 : (i64) -> i2
    seq.write %_handshake_memory_2[%5] %stData0 wren %3 {latency = 1 : i64} : !seq.hlmem<3xi64>
    hw.output %2, %2, %c0_i0, %writeValidBuffer : i1, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id1(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_1 = seq.hlmem @_handshake_memory_1 %clock, %reset : <3xi64>
    %0 = comb.extract %ldAddr0 from 0 : (i64) -> i2
    %_handshake_memory_1_rdata = seq.read %_handshake_memory_1[%0] rden %ldAddr0_valid {latency = 0 : i64} : !seq.hlmem<3xi64>
    %1 = comb.xor %13, %true : i1
    %2 = comb.and %6, %1 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %2, %clock reset %reset, %false : i1  
    %3 = comb.xor %emitted_0, %true : i1
    %4 = comb.and %3, %ldAddr0_valid : i1
    %5 = comb.and %ldData0_ready, %4 : i1
    %6 = comb.or %5, %emitted_0 {sv.namehint = "done0"} : i1
    %7 = comb.xor %13, %true : i1
    %8 = comb.and %12, %7 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %8, %clock reset %reset, %false : i1  
    %9 = comb.xor %emitted_1, %true : i1
    %10 = comb.and %9, %ldAddr0_valid : i1
    %11 = comb.and %ldDone0_ready, %10 : i1
    %12 = comb.or %11, %emitted_1 {sv.namehint = "done1"} : i1
    %13 = comb.and %6, %12 {sv.namehint = "allDone"} : i1
    %writeValidBuffer = seq.compreg sym @writeValidBuffer %18, %clock reset %reset, %false : i1  
    %14 = comb.and %stDone0_ready, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
    %15 = comb.xor %writeValidBuffer, %true : i1
    %16 = comb.or %15, %14 {sv.namehint = "emptyOrComplete"} : i1
    %17 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
    %18 = comb.mux %16, %17, %writeValidBuffer : i1
    %19 = comb.extract %stAddr0 from 0 : (i64) -> i2
    seq.write %_handshake_memory_1[%19] %stData0 wren %17 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_0 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %24, %clock reset %reset, %false : i1  
    %20 = comb.and %stDone1_ready, %writeValidBuffer_0 {sv.namehint = "storeCompleted"} : i1
    %21 = comb.xor %writeValidBuffer_0, %true : i1
    %22 = comb.or %21, %20 {sv.namehint = "emptyOrComplete"} : i1
    %23 = comb.and %stAddr1_valid, %stData1_valid {sv.namehint = "writeValid"} : i1
    %24 = comb.mux %22, %23, %writeValidBuffer_0 : i1
    %25 = comb.extract %stAddr1 from 0 : (i64) -> i2
    seq.write %_handshake_memory_1[%25] %stData1 wren %23 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_1 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %30, %clock reset %reset, %false : i1  
    %26 = comb.and %stDone2_ready, %writeValidBuffer_1 {sv.namehint = "storeCompleted"} : i1
    %27 = comb.xor %writeValidBuffer_1, %true : i1
    %28 = comb.or %27, %26 {sv.namehint = "emptyOrComplete"} : i1
    %29 = comb.and %stAddr2_valid, %stData2_valid {sv.namehint = "writeValid"} : i1
    %30 = comb.mux %28, %29, %writeValidBuffer_1 : i1
    %31 = comb.extract %stAddr2 from 0 : (i64) -> i2
    seq.write %_handshake_memory_1[%31] %stData2 wren %29 {latency = 1 : i64} : !seq.hlmem<3xi64>
    hw.output %16, %16, %22, %22, %28, %28, %13, %_handshake_memory_1_rdata, %4, %c0_i0, %writeValidBuffer, %c0_i0, %writeValidBuffer_0, %c0_i0, %writeValidBuffer_1, %c0_i0, %10 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_buffer_in_ui64_out_ui64_2slots_seq(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i64 = hw.constant 0 : i64
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %in0_valid, %valid0_reg : i1
    %3 = comb.mux %1, %in0, %data0_reg : i64
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %c0_i64 : i64  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %16, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %16, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %14, %clock reset %reset, %c0_i64 : i64  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i64
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i64
    %14 = comb.mux %9, %c0_i64, %13 : i64
    %valid1_reg = seq.compreg sym @valid1_reg %17, %clock reset %reset, %false : i1  
    %15 = comb.xor %valid1_reg, %true : i1
    %16 = comb.or %15, %20 : i1
    %17 = comb.mux %16, %4, %valid1_reg : i1
    %18 = comb.mux %16, %12, %data1_reg : i64
    %data1_reg = seq.compreg sym @data1_reg %18, %clock reset %reset, %c0_i64 : i64  
    %ready1_reg = seq.compreg sym @ready1_reg %26, %clock reset %reset, %false : i1  
    %19 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
    %20 = comb.xor %ready1_reg, %true : i1
    %21 = comb.xor %out0_ready, %true : i1
    %22 = comb.and %21, %20 : i1
    %23 = comb.mux %22, %valid1_reg, %ready1_reg : i1
    %24 = comb.and %out0_ready, %ready1_reg : i1
    %25 = comb.xor %24, %true : i1
    %26 = comb.and %25, %23 : i1
    %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %29, %clock reset %reset, %c0_i64 : i64  
    %27 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i64
    %28 = comb.mux %22, %data1_reg, %ctrl_data1_reg : i64
    %29 = comb.mux %24, %c0_i64, %28 : i64
    hw.output %1, %27, %19 : i1, i64, i1
  }
  hw.module @handshake_fork_1ins_2outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %12, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %12, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.and %5, %11 {sv.namehint = "allDone"} : i1
    hw.output %12, %in0, %3, %in0, %9 : i1, i0, i1, i0, i1
  }
  hw.module @handshake_fork_1ins_3outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %18, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %18, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %18, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %in0_valid : i1
    %16 = comb.and %out2_ready, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.and %5, %11, %17 {sv.namehint = "allDone"} : i1
    hw.output %18, %in0, %3, %in0, %9, %in0, %15 : i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id0(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_0 = seq.hlmem @_handshake_memory_0 %clock, %reset : <3xi64>
    %0 = comb.extract %ldAddr0 from 0 : (i64) -> i2
    %_handshake_memory_0_rdata = seq.read %_handshake_memory_0[%0] rden %ldAddr0_valid {latency = 0 : i64} : !seq.hlmem<3xi64>
    %1 = comb.xor %13, %true : i1
    %2 = comb.and %6, %1 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %2, %clock reset %reset, %false : i1  
    %3 = comb.xor %emitted_0, %true : i1
    %4 = comb.and %3, %ldAddr0_valid : i1
    %5 = comb.and %ldData0_ready, %4 : i1
    %6 = comb.or %5, %emitted_0 {sv.namehint = "done0"} : i1
    %7 = comb.xor %13, %true : i1
    %8 = comb.and %12, %7 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %8, %clock reset %reset, %false : i1  
    %9 = comb.xor %emitted_1, %true : i1
    %10 = comb.and %9, %ldAddr0_valid : i1
    %11 = comb.and %ldDone0_ready, %10 : i1
    %12 = comb.or %11, %emitted_1 {sv.namehint = "done1"} : i1
    %13 = comb.and %6, %12 {sv.namehint = "allDone"} : i1
    %writeValidBuffer = seq.compreg sym @writeValidBuffer %18, %clock reset %reset, %false : i1  
    %14 = comb.and %stDone0_ready, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
    %15 = comb.xor %writeValidBuffer, %true : i1
    %16 = comb.or %15, %14 {sv.namehint = "emptyOrComplete"} : i1
    %17 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
    %18 = comb.mux %16, %17, %writeValidBuffer : i1
    %19 = comb.extract %stAddr0 from 0 : (i64) -> i2
    seq.write %_handshake_memory_0[%19] %stData0 wren %17 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_0 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %24, %clock reset %reset, %false : i1  
    %20 = comb.and %stDone1_ready, %writeValidBuffer_0 {sv.namehint = "storeCompleted"} : i1
    %21 = comb.xor %writeValidBuffer_0, %true : i1
    %22 = comb.or %21, %20 {sv.namehint = "emptyOrComplete"} : i1
    %23 = comb.and %stAddr1_valid, %stData1_valid {sv.namehint = "writeValid"} : i1
    %24 = comb.mux %22, %23, %writeValidBuffer_0 : i1
    %25 = comb.extract %stAddr1 from 0 : (i64) -> i2
    seq.write %_handshake_memory_0[%25] %stData1 wren %23 {latency = 1 : i64} : !seq.hlmem<3xi64>
    %writeValidBuffer_1 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %30, %clock reset %reset, %false : i1  
    %26 = comb.and %stDone2_ready, %writeValidBuffer_1 {sv.namehint = "storeCompleted"} : i1
    %27 = comb.xor %writeValidBuffer_1, %true : i1
    %28 = comb.or %27, %26 {sv.namehint = "emptyOrComplete"} : i1
    %29 = comb.and %stAddr2_valid, %stData2_valid {sv.namehint = "writeValid"} : i1
    %30 = comb.mux %28, %29, %writeValidBuffer_1 : i1
    %31 = comb.extract %stAddr2 from 0 : (i64) -> i2
    seq.write %_handshake_memory_0[%31] %stData2 wren %29 {latency = 1 : i64} : !seq.hlmem<3xi64>
    hw.output %16, %16, %22, %22, %28, %28, %13, %_handshake_memory_0_rdata, %4, %c0_i0, %writeValidBuffer, %c0_i0, %writeValidBuffer_0, %c0_i0, %writeValidBuffer_1, %c0_i0, %10 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_join_7ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %in4 : i0, in %in4_valid : i1, in %in5 : i0, in %in5_valid : i1, in %in6 : i0, in %in6_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out in4_ready : i1, out in5_ready : i1, out in6_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid, %in2_valid, %in3_valid, %in4_valid, %in5_valid, %in6_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %1, %1, %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i1, i1, i1, i1, i0, i1
  }
  hw.module @handshake_constant_c3_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c3_i64 = hw.constant 3 : i64
    hw.output %out0_ready, %c3_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %12, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %12, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.and %5, %11 {sv.namehint = "allDone"} : i1
    hw.output %12, %in0, %3, %in0, %9 : i1, i64, i1, i64, i1
  }
  hw.module @handshake_constant_c2_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c2_i64 = hw.constant 2 : i64
    hw.output %out0_ready, %c2_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_constant_c1_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c1_i64 = hw.constant 1 : i64
    hw.output %out0_ready, %c1_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %18, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %18, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %18, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %in0_valid : i1
    %16 = comb.and %out2_ready, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.and %5, %11, %17 {sv.namehint = "allDone"} : i1
    hw.output %18, %in0, %3, %in0, %9, %in0, %15 : i1, i64, i1, i64, i1, i64, i1
  }
  hw.module @handshake_constant_c0_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c0_i64 = hw.constant 0 : i64
    hw.output %out0_ready, %c0_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_store_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataIn : i64, in %dataIn_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataToMem_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataIn_ready : i1, out ctrl_ready : i1, out dataToMem : i64, out dataToMem_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
    %0 = comb.and %dataIn_valid, %addrIn0_valid, %ctrl_valid : i1
    %1 = comb.and %dataToMem_ready, %addrOut0_ready, %0 : i1
    hw.output %1, %1, %1, %dataIn, %0, %addrIn0, %0 : i1, i1, i1, i64, i1, i64, i1
  }
  hw.module @handshake_join_2ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %c0_i0, %0 : i1, i1, i0, i1
  }
  hw.module @handshake_join_3ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid, %in2_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i0, i1
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %true : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %in0_valid, %valid0_reg : i1
    %3 = comb.mux %1, %in0, %data0_reg : i1
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %false : i1  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %out0_ready, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %out0_ready, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %15, %clock reset %reset, %false : i1  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i1
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i1
    %14 = comb.xor %9, %true : i1
    %15 = comb.and %14, %13 : i1
    hw.output %1, %12, %4 : i1, i1, i1
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %24, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %24, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %24, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %in0_valid : i1
    %16 = comb.and %out2_ready, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %24, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %in0_valid : i1
    %22 = comb.and %out3_ready, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
    hw.output %24, %in0, %3, %in0, %9, %in0, %15, %in0, %21 : i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_2slots_seq(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %in0_valid, %valid0_reg : i1
    %3 = comb.mux %1, %in0, %data0_reg : i1
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %false : i1  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %17, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %17, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %15, %clock reset %reset, %false : i1  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i1
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i1
    %14 = comb.xor %9, %true : i1
    %15 = comb.and %14, %13 : i1
    %valid1_reg = seq.compreg sym @valid1_reg %18, %clock reset %reset, %false : i1  
    %16 = comb.xor %valid1_reg, %true : i1
    %17 = comb.or %16, %21 : i1
    %18 = comb.mux %17, %4, %valid1_reg : i1
    %19 = comb.mux %17, %12, %data1_reg : i1
    %data1_reg = seq.compreg sym @data1_reg %19, %clock reset %reset, %false : i1  
    %ready1_reg = seq.compreg sym @ready1_reg %27, %clock reset %reset, %false : i1  
    %20 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
    %21 = comb.xor %ready1_reg, %true : i1
    %22 = comb.xor %out0_ready, %true : i1
    %23 = comb.and %22, %21 : i1
    %24 = comb.mux %23, %valid1_reg, %ready1_reg : i1
    %25 = comb.and %out0_ready, %ready1_reg : i1
    %26 = comb.xor %25, %true : i1
    %27 = comb.and %26, %24 : i1
    %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %31, %clock reset %reset, %false : i1  
    %28 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i1
    %29 = comb.mux %23, %data1_reg, %ctrl_data1_reg : i1
    %30 = comb.xor %25, %true : i1
    %31 = comb.and %30, %29 : i1
    hw.output %1, %28, %20 : i1, i1, i1
  }
  hw.module @handshake_mux_in_ui1_3ins_1outs_ctrl(in %select : i1, in %select_valid : i1, in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %0 = comb.concat %false, %select : i1, i1
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = comb.mux %select, %in1_valid, %in0_valid : i1
    %3 = comb.and %2, %select_valid : i1
    %4 = comb.and %3, %out0_ready : i1
    %5 = comb.extract %1 from 0 : (i2) -> i1
    %6 = comb.and %5, %4 : i1
    %7 = comb.extract %1 from 1 : (i2) -> i1
    %8 = comb.and %7, %4 : i1
    %9 = comb.mux %select, %in1, %in0 : i0
    hw.output %4, %6, %8, %9, %3 : i1, i1, i1, i0, i1
  }
  hw.module @handshake_mux_in_ui1_ui64_ui64_out_ui64(in %select : i1, in %select_valid : i1, in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %0 = comb.concat %false, %select : i1, i1
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = comb.mux %select, %in1_valid, %in0_valid : i1
    %3 = comb.and %2, %select_valid : i1
    %4 = comb.and %3, %out0_ready : i1
    %5 = comb.extract %1 from 0 : (i2) -> i1
    %6 = comb.and %5, %4 : i1
    %7 = comb.extract %1 from 1 : (i2) -> i1
    %8 = comb.and %7, %4 : i1
    %9 = comb.mux %select, %in1, %in0 : i64
    hw.output %4, %6, %8, %9, %3 : i1, i1, i1, i64, i1
  }
  hw.module @arith_cmpi_in_ui64_ui64_out_ui1_slt(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i1, out out0_valid : i1) {
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    %2 = comb.icmp slt %in0, %in1 : i64
    hw.output %1, %1, %2, %0 : i1, i1, i1, i1
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1, out out4 : i1, out out4_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %30, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %30, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %30, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %in0_valid : i1
    %16 = comb.and %out2_ready, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %30, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %in0_valid : i1
    %22 = comb.and %out3_ready, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.xor %30, %true : i1
    %25 = comb.and %29, %24 : i1
    %emitted_4 = seq.compreg sym @emitted_4 %25, %clock reset %reset, %false : i1  
    %26 = comb.xor %emitted_4, %true : i1
    %27 = comb.and %26, %in0_valid : i1
    %28 = comb.and %out4_ready, %27 : i1
    %29 = comb.or %28, %emitted_4 {sv.namehint = "done4"} : i1
    %30 = comb.and %5, %11, %17, %23, %29 {sv.namehint = "allDone"} : i1
    hw.output %30, %in0, %3, %in0, %9, %in0, %15, %in0, %21, %in0, %27 : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(in %cond : i1, in %cond_valid : i1, in %data : i64, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i64, out outTrue_valid : i1, out outFalse : i64, out outFalse_valid : i1) {
    %true = hw.constant true
    %0 = comb.and %cond_valid, %data_valid : i1
    %1 = comb.and %cond, %0 : i1
    %2 = comb.xor %cond, %true : i1
    %3 = comb.and %2, %0 : i1
    %4 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
    %5 = comb.and %4, %0 : i1
    hw.output %5, %5, %data, %1, %data, %3 : i1, i1, i64, i1, i64, i1
  }
  hw.module @handshake_sink_in_ui64(in %in0 : i64, in %in0_valid : i1, out in0_ready : i1) {
    %true = hw.constant true
    hw.output %true : i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1, out out3 : i64, out out3_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %24, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %24, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %24, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %in0_valid : i1
    %16 = comb.and %out2_ready, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %24, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %in0_valid : i1
    %22 = comb.and %out3_ready, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
    hw.output %24, %in0, %3, %in0, %9, %in0, %15, %in0, %21 : i1, i64, i1, i64, i1, i64, i1, i64, i1
  }
  hw.module @handshake_cond_br_in_ui1_2ins_2outs_ctrl(in %cond : i1, in %cond_valid : i1, in %data : i0, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i0, out outTrue_valid : i1, out outFalse : i0, out outFalse_valid : i1) {
    %true = hw.constant true
    %0 = comb.and %cond_valid, %data_valid : i1
    %1 = comb.and %cond, %0 : i1
    %2 = comb.xor %cond, %true : i1
    %3 = comb.and %2, %0 : i1
    %4 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
    %5 = comb.and %4, %0 : i1
    hw.output %5, %5, %data, %1, %data, %3 : i1, i1, i0, i1, i0, i1
  }
  hw.module @handshake_fork_1ins_4outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %24, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %24, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %24, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %in0_valid : i1
    %16 = comb.and %out2_ready, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %24, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %in0_valid : i1
    %22 = comb.and %out3_ready, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
    hw.output %24, %in0, %3, %in0, %9, %in0, %15, %in0, %21 : i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_join_4ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid, %in2_valid, %in3_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i1, i0, i1
  }
  hw.module @handshake_load_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataFromMem : i64, in %dataFromMem_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataOut_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataFromMem_ready : i1, out ctrl_ready : i1, out dataOut : i64, out dataOut_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
    %0 = comb.and %addrIn0_valid, %ctrl_valid : i1
    %1 = comb.and %addrOut0_ready, %0 : i1
    hw.output %1, %dataOut_ready, %1, %dataFromMem, %dataFromMem_valid, %addrIn0, %0 : i1, i1, i1, i64, i1, i64, i1
  }
  hw.module @arith_addi_in_ui64_ui64_out_ui64(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    %2 = comb.add %in0, %in1 : i64
    hw.output %1, %1, %2, %0 : i1, i1, i64, i1
  }
  hw.module @main(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
    %handshake_buffer0.in0_ready, %handshake_buffer0.out0, %handshake_buffer0.out0_valid = hw.instance "handshake_buffer0" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %in0: i0, in0_valid: %in0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork0.in0_ready, %handshake_fork0.out0, %handshake_fork0.out0_valid, %handshake_fork0.out1, %handshake_fork0.out1_valid, %handshake_fork0.out2, %handshake_fork0.out2_valid, %handshake_fork0.out3, %handshake_fork0.out3_valid, %handshake_fork0.out4, %handshake_fork0.out4_valid, %handshake_fork0.out5, %handshake_fork0.out5_valid, %handshake_fork0.out6, %handshake_fork0.out6_valid, %handshake_fork0.out7, %handshake_fork0.out7_valid, %handshake_fork0.out8, %handshake_fork0.out8_valid, %handshake_fork0.out9, %handshake_fork0.out9_valid, %handshake_fork0.out10, %handshake_fork0.out10_valid, %handshake_fork0.out11, %handshake_fork0.out11_valid, %handshake_fork0.out12, %handshake_fork0.out12_valid, %handshake_fork0.out13, %handshake_fork0.out13_valid = hw.instance "handshake_fork0" @handshake_fork_1ins_14outs_ctrl(in0: %handshake_buffer0.out0: i0, in0_valid: %handshake_buffer0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer14.in0_ready: i1, out1_ready: %handshake_buffer13.in0_ready: i1, out2_ready: %handshake_buffer12.in0_ready: i1, out3_ready: %handshake_buffer11.in0_ready: i1, out4_ready: %handshake_buffer10.in0_ready: i1, out5_ready: %handshake_buffer9.in0_ready: i1, out6_ready: %handshake_buffer8.in0_ready: i1, out7_ready: %handshake_buffer7.in0_ready: i1, out8_ready: %handshake_buffer6.in0_ready: i1, out9_ready: %handshake_buffer5.in0_ready: i1, out10_ready: %handshake_buffer4.in0_ready: i1, out11_ready: %handshake_buffer3.in0_ready: i1, out12_ready: %handshake_buffer2.in0_ready: i1, out13_ready: %handshake_buffer1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1, out4: i0, out4_valid: i1, out5: i0, out5_valid: i1, out6: i0, out6_valid: i1, out7: i0, out7_valid: i1, out8: i0, out8_valid: i1, out9: i0, out9_valid: i1, out10: i0, out10_valid: i1, out11: i0, out11_valid: i1, out12: i0, out12_valid: i1, out13: i0, out13_valid: i1)
    %handshake_buffer1.in0_ready, %handshake_buffer1.out0, %handshake_buffer1.out0_valid = hw.instance "handshake_buffer1" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out13: i0, in0_valid: %handshake_fork0.out13_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join4.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer2.in0_ready, %handshake_buffer2.out0, %handshake_buffer2.out0_valid = hw.instance "handshake_buffer2" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out12: i0, in0_valid: %handshake_fork0.out12_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join3.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer3.in0_ready, %handshake_buffer3.out0, %handshake_buffer3.out0_valid = hw.instance "handshake_buffer3" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out11: i0, in0_valid: %handshake_fork0.out11_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store3.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer4.in0_ready, %handshake_buffer4.out0, %handshake_buffer4.out0_valid = hw.instance "handshake_buffer4" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out10: i0, in0_valid: %handshake_fork0.out10_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer5.in0_ready, %handshake_buffer5.out0, %handshake_buffer5.out0_valid = hw.instance "handshake_buffer5" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out9: i0, in0_valid: %handshake_fork0.out9_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join2.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer6.in0_ready, %handshake_buffer6.out0, %handshake_buffer6.out0_valid = hw.instance "handshake_buffer6" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out8: i0, in0_valid: %handshake_fork0.out8_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer7.in0_ready, %handshake_buffer7.out0, %handshake_buffer7.out0_valid = hw.instance "handshake_buffer7" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out7: i0, in0_valid: %handshake_fork0.out7_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer8.in0_ready, %handshake_buffer8.out0, %handshake_buffer8.out0_valid = hw.instance "handshake_buffer8" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out6: i0, in0_valid: %handshake_fork0.out6_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant6.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer9.in0_ready, %handshake_buffer9.out0, %handshake_buffer9.out0_valid = hw.instance "handshake_buffer9" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out5: i0, in0_valid: %handshake_fork0.out5_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant5.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer10.in0_ready, %handshake_buffer10.out0, %handshake_buffer10.out0_valid = hw.instance "handshake_buffer10" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out4: i0, in0_valid: %handshake_fork0.out4_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant4.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer11.in0_ready, %handshake_buffer11.out0, %handshake_buffer11.out0_valid = hw.instance "handshake_buffer11" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out3: i0, in0_valid: %handshake_fork0.out3_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant3.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer12.in0_ready, %handshake_buffer12.out0, %handshake_buffer12.out0_valid = hw.instance "handshake_buffer12" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out2: i0, in0_valid: %handshake_fork0.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant2.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer13.in0_ready, %handshake_buffer13.out0, %handshake_buffer13.out0_valid = hw.instance "handshake_buffer13" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out1: i0, in0_valid: %handshake_fork0.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer14.in0_ready, %handshake_buffer14.out0, %handshake_buffer14.out0_valid = hw.instance "handshake_buffer14" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out0: i0, in0_valid: %handshake_fork0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_memory0.stData0_ready, %handshake_memory0.stAddr0_ready, %handshake_memory0.stDone0, %handshake_memory0.stDone0_valid = hw.instance "handshake_memory0" @handshake_memory_out_ui64_id2(stData0: %handshake_buffer114.out0: i64, stData0_valid: %handshake_buffer114.out0_valid: i1, stAddr0: %handshake_buffer113.out0: i64, stAddr0_valid: %handshake_buffer113.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, stDone0_ready: %handshake_buffer15.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stDone0: i0, stDone0_valid: i1)
    %handshake_buffer15.in0_ready, %handshake_buffer15.out0, %handshake_buffer15.out0_valid = hw.instance "handshake_buffer15" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory0.stDone0: i0, in0_valid: %handshake_memory0.stDone0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join5.in3_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_memory1.stData0_ready, %handshake_memory1.stAddr0_ready, %handshake_memory1.stData1_ready, %handshake_memory1.stAddr1_ready, %handshake_memory1.stData2_ready, %handshake_memory1.stAddr2_ready, %handshake_memory1.ldAddr0_ready, %handshake_memory1.ldData0, %handshake_memory1.ldData0_valid, %handshake_memory1.stDone0, %handshake_memory1.stDone0_valid, %handshake_memory1.stDone1, %handshake_memory1.stDone1_valid, %handshake_memory1.stDone2, %handshake_memory1.stDone2_valid, %handshake_memory1.ldDone0, %handshake_memory1.ldDone0_valid = hw.instance "handshake_memory1" @handshake_memory_out_ui64_id1(stData0: %handshake_buffer67.out0: i64, stData0_valid: %handshake_buffer67.out0_valid: i1, stAddr0: %handshake_buffer66.out0: i64, stAddr0_valid: %handshake_buffer66.out0_valid: i1, stData1: %handshake_buffer70.out0: i64, stData1_valid: %handshake_buffer70.out0_valid: i1, stAddr1: %handshake_buffer69.out0: i64, stAddr1_valid: %handshake_buffer69.out0_valid: i1, stData2: %handshake_buffer73.out0: i64, stData2_valid: %handshake_buffer73.out0_valid: i1, stAddr2: %handshake_buffer72.out0: i64, stAddr2_valid: %handshake_buffer72.out0_valid: i1, ldAddr0: %handshake_buffer110.out0: i64, ldAddr0_valid: %handshake_buffer110.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, ldData0_ready: %handshake_buffer20.in0_ready: i1, stDone0_ready: %handshake_buffer19.in0_ready: i1, stDone1_ready: %handshake_buffer18.in0_ready: i1, stDone2_ready: %handshake_buffer17.in0_ready: i1, ldDone0_ready: %handshake_buffer16.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
    %handshake_buffer16.in0_ready, %handshake_buffer16.out0, %handshake_buffer16.out0_valid = hw.instance "handshake_buffer16" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.ldDone0: i0, in0_valid: %handshake_memory1.ldDone0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join5.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer17.in0_ready, %handshake_buffer17.out0, %handshake_buffer17.out0_valid = hw.instance "handshake_buffer17" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone2: i0, in0_valid: %handshake_memory1.stDone2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in6_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer18.in0_ready, %handshake_buffer18.out0, %handshake_buffer18.out0_valid = hw.instance "handshake_buffer18" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone1: i0, in0_valid: %handshake_memory1.stDone1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer19.in0_ready, %handshake_buffer19.out0, %handshake_buffer19.out0_valid = hw.instance "handshake_buffer19" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone0: i0, in0_valid: %handshake_memory1.stDone0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork2.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer20.in0_ready, %handshake_buffer20.out0, %handshake_buffer20.out0_valid = hw.instance "handshake_buffer20" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory1.ldData0: i64, in0_valid: %handshake_memory1.ldData0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load1.dataFromMem_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork1.in0_ready, %handshake_fork1.out0, %handshake_fork1.out0_valid, %handshake_fork1.out1, %handshake_fork1.out1_valid = hw.instance "handshake_fork1" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer18.out0: i0, in0_valid: %handshake_buffer18.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer22.in0_ready: i1, out1_ready: %handshake_buffer21.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
    %handshake_buffer21.in0_ready, %handshake_buffer21.out0, %handshake_buffer21.out0_valid = hw.instance "handshake_buffer21" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out1: i0, in0_valid: %handshake_fork1.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in5_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer22.in0_ready, %handshake_buffer22.out0, %handshake_buffer22.out0_valid = hw.instance "handshake_buffer22" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out0: i0, in0_valid: %handshake_fork1.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join4.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork2.in0_ready, %handshake_fork2.out0, %handshake_fork2.out0_valid, %handshake_fork2.out1, %handshake_fork2.out1_valid, %handshake_fork2.out2, %handshake_fork2.out2_valid = hw.instance "handshake_fork2" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer19.out0: i0, in0_valid: %handshake_buffer19.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer25.in0_ready: i1, out1_ready: %handshake_buffer24.in0_ready: i1, out2_ready: %handshake_buffer23.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
    %handshake_buffer23.in0_ready, %handshake_buffer23.out0, %handshake_buffer23.out0_valid = hw.instance "handshake_buffer23" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out2: i0, in0_valid: %handshake_fork2.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in4_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer24.in0_ready, %handshake_buffer24.out0, %handshake_buffer24.out0_valid = hw.instance "handshake_buffer24" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out1: i0, in0_valid: %handshake_fork2.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join3.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer25.in0_ready, %handshake_buffer25.out0, %handshake_buffer25.out0_valid = hw.instance "handshake_buffer25" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out0: i0, in0_valid: %handshake_fork2.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join4.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_memory2.stData0_ready, %handshake_memory2.stAddr0_ready, %handshake_memory2.stData1_ready, %handshake_memory2.stAddr1_ready, %handshake_memory2.stData2_ready, %handshake_memory2.stAddr2_ready, %handshake_memory2.ldAddr0_ready, %handshake_memory2.ldData0, %handshake_memory2.ldData0_valid, %handshake_memory2.stDone0, %handshake_memory2.stDone0_valid, %handshake_memory2.stDone1, %handshake_memory2.stDone1_valid, %handshake_memory2.stDone2, %handshake_memory2.stDone2_valid, %handshake_memory2.ldDone0, %handshake_memory2.ldDone0_valid = hw.instance "handshake_memory2" @handshake_memory_out_ui64_id0(stData0: %handshake_buffer59.out0: i64, stData0_valid: %handshake_buffer59.out0_valid: i1, stAddr0: %handshake_buffer58.out0: i64, stAddr0_valid: %handshake_buffer58.out0_valid: i1, stData1: %handshake_buffer62.out0: i64, stData1_valid: %handshake_buffer62.out0_valid: i1, stAddr1: %handshake_buffer61.out0: i64, stAddr1_valid: %handshake_buffer61.out0_valid: i1, stData2: %handshake_buffer65.out0: i64, stData2_valid: %handshake_buffer65.out0_valid: i1, stAddr2: %handshake_buffer64.out0: i64, stAddr2_valid: %handshake_buffer64.out0_valid: i1, ldAddr0: %handshake_buffer108.out0: i64, ldAddr0_valid: %handshake_buffer108.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, ldData0_ready: %handshake_buffer30.in0_ready: i1, stDone0_ready: %handshake_buffer29.in0_ready: i1, stDone1_ready: %handshake_buffer28.in0_ready: i1, stDone2_ready: %handshake_buffer27.in0_ready: i1, ldDone0_ready: %handshake_buffer26.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
    %handshake_buffer26.in0_ready, %handshake_buffer26.out0, %handshake_buffer26.out0_valid = hw.instance "handshake_buffer26" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.ldDone0: i0, in0_valid: %handshake_memory2.ldDone0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join5.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer27.in0_ready, %handshake_buffer27.out0, %handshake_buffer27.out0_valid = hw.instance "handshake_buffer27" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone2: i0, in0_valid: %handshake_memory2.stDone2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in3_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer28.in0_ready, %handshake_buffer28.out0, %handshake_buffer28.out0_valid = hw.instance "handshake_buffer28" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone1: i0, in0_valid: %handshake_memory2.stDone1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork3.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer29.in0_ready, %handshake_buffer29.out0, %handshake_buffer29.out0_valid = hw.instance "handshake_buffer29" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone0: i0, in0_valid: %handshake_memory2.stDone0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork4.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer30.in0_ready, %handshake_buffer30.out0, %handshake_buffer30.out0_valid = hw.instance "handshake_buffer30" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory2.ldData0: i64, in0_valid: %handshake_memory2.ldData0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load0.dataFromMem_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork3.in0_ready, %handshake_fork3.out0, %handshake_fork3.out0_valid, %handshake_fork3.out1, %handshake_fork3.out1_valid = hw.instance "handshake_fork3" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer28.out0: i0, in0_valid: %handshake_buffer28.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer32.in0_ready: i1, out1_ready: %handshake_buffer31.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
    %handshake_buffer31.in0_ready, %handshake_buffer31.out0, %handshake_buffer31.out0_valid = hw.instance "handshake_buffer31" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out1: i0, in0_valid: %handshake_fork3.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join2.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer32.in0_ready, %handshake_buffer32.out0, %handshake_buffer32.out0_valid = hw.instance "handshake_buffer32" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out0: i0, in0_valid: %handshake_fork3.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork4.in0_ready, %handshake_fork4.out0, %handshake_fork4.out0_valid, %handshake_fork4.out1, %handshake_fork4.out1_valid, %handshake_fork4.out2, %handshake_fork4.out2_valid = hw.instance "handshake_fork4" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer29.out0: i0, in0_valid: %handshake_buffer29.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer35.in0_ready: i1, out1_ready: %handshake_buffer34.in0_ready: i1, out2_ready: %handshake_buffer33.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
    %handshake_buffer33.in0_ready, %handshake_buffer33.out0, %handshake_buffer33.out0_valid = hw.instance "handshake_buffer33" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out2: i0, in0_valid: %handshake_fork4.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join1.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer34.in0_ready, %handshake_buffer34.out0, %handshake_buffer34.out0_valid = hw.instance "handshake_buffer34" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out1: i0, in0_valid: %handshake_fork4.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join2.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer35.in0_ready, %handshake_buffer35.out0, %handshake_buffer35.out0_valid = hw.instance "handshake_buffer35" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out0: i0, in0_valid: %handshake_fork4.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_join0.in0_ready, %handshake_join0.in1_ready, %handshake_join0.in2_ready, %handshake_join0.in3_ready, %handshake_join0.in4_ready, %handshake_join0.in5_ready, %handshake_join0.in6_ready, %handshake_join0.out0, %handshake_join0.out0_valid = hw.instance "handshake_join0" @handshake_join_7ins_1outs_ctrl(in0: %handshake_buffer4.out0: i0, in0_valid: %handshake_buffer4.out0_valid: i1, in1: %handshake_buffer35.out0: i0, in1_valid: %handshake_buffer35.out0_valid: i1, in2: %handshake_buffer32.out0: i0, in2_valid: %handshake_buffer32.out0_valid: i1, in3: %handshake_buffer27.out0: i0, in3_valid: %handshake_buffer27.out0_valid: i1, in4: %handshake_buffer23.out0: i0, in4_valid: %handshake_buffer23.out0_valid: i1, in5: %handshake_buffer21.out0: i0, in5_valid: %handshake_buffer21.out0_valid: i1, in6: %handshake_buffer17.out0: i0, in6_valid: %handshake_buffer17.out0_valid: i1, out0_ready: %handshake_buffer36.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, in4_ready: i1, in5_ready: i1, in6_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer36.in0_ready, %handshake_buffer36.out0, %handshake_buffer36.out0_valid = hw.instance "handshake_buffer36" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join0.out0: i0, in0_valid: %handshake_join0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_constant0.ctrl_ready, %handshake_constant0.out0, %handshake_constant0.out0_valid = hw.instance "handshake_constant0" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer14.out0: i0, ctrl_valid: %handshake_buffer14.out0_valid: i1, out0_ready: %handshake_buffer37.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer37.in0_ready, %handshake_buffer37.out0, %handshake_buffer37.out0_valid = hw.instance "handshake_buffer37" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant0.out0: i64, in0_valid: %handshake_constant0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux2.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant1.ctrl_ready, %handshake_constant1.out0, %handshake_constant1.out0_valid = hw.instance "handshake_constant1" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer13.out0: i0, ctrl_valid: %handshake_buffer13.out0_valid: i1, out0_ready: %handshake_buffer38.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer38.in0_ready, %handshake_buffer38.out0, %handshake_buffer38.out0_valid = hw.instance "handshake_buffer38" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant1.out0: i64, in0_valid: %handshake_constant1.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork5.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork5.in0_ready, %handshake_fork5.out0, %handshake_fork5.out0_valid, %handshake_fork5.out1, %handshake_fork5.out1_valid = hw.instance "handshake_fork5" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer38.out0: i64, in0_valid: %handshake_buffer38.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer40.in0_ready: i1, out1_ready: %handshake_buffer39.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer39.in0_ready, %handshake_buffer39.out0, %handshake_buffer39.out0_valid = hw.instance "handshake_buffer39" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out1: i64, in0_valid: %handshake_fork5.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store2.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer40.in0_ready, %handshake_buffer40.out0, %handshake_buffer40.out0_valid = hw.instance "handshake_buffer40" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out0: i64, in0_valid: %handshake_fork5.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store5.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant2.ctrl_ready, %handshake_constant2.out0, %handshake_constant2.out0_valid = hw.instance "handshake_constant2" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer12.out0: i0, ctrl_valid: %handshake_buffer12.out0_valid: i1, out0_ready: %handshake_buffer41.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer41.in0_ready, %handshake_buffer41.out0, %handshake_buffer41.out0_valid = hw.instance "handshake_buffer41" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant2.out0: i64, in0_valid: %handshake_constant2.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork6.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork6.in0_ready, %handshake_fork6.out0, %handshake_fork6.out0_valid, %handshake_fork6.out1, %handshake_fork6.out1_valid = hw.instance "handshake_fork6" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer41.out0: i64, in0_valid: %handshake_buffer41.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer43.in0_ready: i1, out1_ready: %handshake_buffer42.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer42.in0_ready, %handshake_buffer42.out0, %handshake_buffer42.out0_valid = hw.instance "handshake_buffer42" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out1: i64, in0_valid: %handshake_fork6.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store1.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer43.in0_ready, %handshake_buffer43.out0, %handshake_buffer43.out0_valid = hw.instance "handshake_buffer43" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out0: i64, in0_valid: %handshake_fork6.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store4.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant3.ctrl_ready, %handshake_constant3.out0, %handshake_constant3.out0_valid = hw.instance "handshake_constant3" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer11.out0: i0, ctrl_valid: %handshake_buffer11.out0_valid: i1, out0_ready: %handshake_buffer44.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer44.in0_ready, %handshake_buffer44.out0, %handshake_buffer44.out0_valid = hw.instance "handshake_buffer44" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant3.out0: i64, in0_valid: %handshake_constant3.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork7.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork7.in0_ready, %handshake_fork7.out0, %handshake_fork7.out0_valid, %handshake_fork7.out1, %handshake_fork7.out1_valid = hw.instance "handshake_fork7" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer44.out0: i64, in0_valid: %handshake_buffer44.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer46.in0_ready: i1, out1_ready: %handshake_buffer45.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer45.in0_ready, %handshake_buffer45.out0, %handshake_buffer45.out0_valid = hw.instance "handshake_buffer45" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out1: i64, in0_valid: %handshake_fork7.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store0.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer46.in0_ready, %handshake_buffer46.out0, %handshake_buffer46.out0_valid = hw.instance "handshake_buffer46" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out0: i64, in0_valid: %handshake_fork7.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store3.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant4.ctrl_ready, %handshake_constant4.out0, %handshake_constant4.out0_valid = hw.instance "handshake_constant4" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer10.out0: i0, ctrl_valid: %handshake_buffer10.out0_valid: i1, out0_ready: %handshake_buffer47.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer47.in0_ready, %handshake_buffer47.out0, %handshake_buffer47.out0_valid = hw.instance "handshake_buffer47" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant4.out0: i64, in0_valid: %handshake_constant4.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork8.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork8.in0_ready, %handshake_fork8.out0, %handshake_fork8.out0_valid, %handshake_fork8.out1, %handshake_fork8.out1_valid = hw.instance "handshake_fork8" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer47.out0: i64, in0_valid: %handshake_buffer47.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer49.in0_ready: i1, out1_ready: %handshake_buffer48.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer48.in0_ready, %handshake_buffer48.out0, %handshake_buffer48.out0_valid = hw.instance "handshake_buffer48" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out1: i64, in0_valid: %handshake_fork8.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store2.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer49.in0_ready, %handshake_buffer49.out0, %handshake_buffer49.out0_valid = hw.instance "handshake_buffer49" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out0: i64, in0_valid: %handshake_fork8.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store5.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant5.ctrl_ready, %handshake_constant5.out0, %handshake_constant5.out0_valid = hw.instance "handshake_constant5" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer9.out0: i0, ctrl_valid: %handshake_buffer9.out0_valid: i1, out0_ready: %handshake_buffer50.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer50.in0_ready, %handshake_buffer50.out0, %handshake_buffer50.out0_valid = hw.instance "handshake_buffer50" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant5.out0: i64, in0_valid: %handshake_constant5.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork9.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork9.in0_ready, %handshake_fork9.out0, %handshake_fork9.out0_valid, %handshake_fork9.out1, %handshake_fork9.out1_valid, %handshake_fork9.out2, %handshake_fork9.out2_valid = hw.instance "handshake_fork9" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer50.out0: i64, in0_valid: %handshake_buffer50.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer53.in0_ready: i1, out1_ready: %handshake_buffer52.in0_ready: i1, out2_ready: %handshake_buffer51.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
    %handshake_buffer51.in0_ready, %handshake_buffer51.out0, %handshake_buffer51.out0_valid = hw.instance "handshake_buffer51" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out2: i64, in0_valid: %handshake_fork9.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store1.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer52.in0_ready, %handshake_buffer52.out0, %handshake_buffer52.out0_valid = hw.instance "handshake_buffer52" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out1: i64, in0_valid: %handshake_fork9.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store4.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer53.in0_ready, %handshake_buffer53.out0, %handshake_buffer53.out0_valid = hw.instance "handshake_buffer53" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out0: i64, in0_valid: %handshake_fork9.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux3.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant6.ctrl_ready, %handshake_constant6.out0, %handshake_constant6.out0_valid = hw.instance "handshake_constant6" @handshake_constant_c0_out_ui64(ctrl: %handshake_buffer8.out0: i0, ctrl_valid: %handshake_buffer8.out0_valid: i1, out0_ready: %handshake_buffer54.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer54.in0_ready, %handshake_buffer54.out0, %handshake_buffer54.out0_valid = hw.instance "handshake_buffer54" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant6.out0: i64, in0_valid: %handshake_constant6.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork10.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork10.in0_ready, %handshake_fork10.out0, %handshake_fork10.out0_valid, %handshake_fork10.out1, %handshake_fork10.out1_valid, %handshake_fork10.out2, %handshake_fork10.out2_valid = hw.instance "handshake_fork10" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer54.out0: i64, in0_valid: %handshake_buffer54.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer57.in0_ready: i1, out1_ready: %handshake_buffer56.in0_ready: i1, out2_ready: %handshake_buffer55.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
    %handshake_buffer55.in0_ready, %handshake_buffer55.out0, %handshake_buffer55.out0_valid = hw.instance "handshake_buffer55" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out2: i64, in0_valid: %handshake_fork10.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store0.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer56.in0_ready, %handshake_buffer56.out0, %handshake_buffer56.out0_valid = hw.instance "handshake_buffer56" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out1: i64, in0_valid: %handshake_fork10.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store3.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer57.in0_ready, %handshake_buffer57.out0, %handshake_buffer57.out0_valid = hw.instance "handshake_buffer57" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out0: i64, in0_valid: %handshake_fork10.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux1.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_store0.addrIn0_ready, %handshake_store0.dataIn_ready, %handshake_store0.ctrl_ready, %handshake_store0.dataToMem, %handshake_store0.dataToMem_valid, %handshake_store0.addrOut0, %handshake_store0.addrOut0_valid = hw.instance "handshake_store0" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer55.out0: i64, addrIn0_valid: %handshake_buffer55.out0_valid: i1, dataIn: %handshake_buffer45.out0: i64, dataIn_valid: %handshake_buffer45.out0_valid: i1, ctrl: %handshake_buffer7.out0: i0, ctrl_valid: %handshake_buffer7.out0_valid: i1, dataToMem_ready: %handshake_buffer59.in0_ready: i1, addrOut0_ready: %handshake_buffer58.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer58.in0_ready, %handshake_buffer58.out0, %handshake_buffer58.out0_valid = hw.instance "handshake_buffer58" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.addrOut0: i64, in0_valid: %handshake_store0.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer59.in0_ready, %handshake_buffer59.out0, %handshake_buffer59.out0_valid = hw.instance "handshake_buffer59" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.dataToMem: i64, in0_valid: %handshake_store0.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join1.in0_ready, %handshake_join1.in1_ready, %handshake_join1.out0, %handshake_join1.out0_valid = hw.instance "handshake_join1" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer6.out0: i0, in0_valid: %handshake_buffer6.out0_valid: i1, in1: %handshake_buffer33.out0: i0, in1_valid: %handshake_buffer33.out0_valid: i1, out0_ready: %handshake_buffer60.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer60.in0_ready, %handshake_buffer60.out0, %handshake_buffer60.out0_valid = hw.instance "handshake_buffer60" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join1.out0: i0, in0_valid: %handshake_join1.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store1.addrIn0_ready, %handshake_store1.dataIn_ready, %handshake_store1.ctrl_ready, %handshake_store1.dataToMem, %handshake_store1.dataToMem_valid, %handshake_store1.addrOut0, %handshake_store1.addrOut0_valid = hw.instance "handshake_store1" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer51.out0: i64, addrIn0_valid: %handshake_buffer51.out0_valid: i1, dataIn: %handshake_buffer42.out0: i64, dataIn_valid: %handshake_buffer42.out0_valid: i1, ctrl: %handshake_buffer60.out0: i0, ctrl_valid: %handshake_buffer60.out0_valid: i1, dataToMem_ready: %handshake_buffer62.in0_ready: i1, addrOut0_ready: %handshake_buffer61.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer61.in0_ready, %handshake_buffer61.out0, %handshake_buffer61.out0_valid = hw.instance "handshake_buffer61" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.addrOut0: i64, in0_valid: %handshake_store1.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer62.in0_ready, %handshake_buffer62.out0, %handshake_buffer62.out0_valid = hw.instance "handshake_buffer62" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.dataToMem: i64, in0_valid: %handshake_store1.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stData1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join2.in0_ready, %handshake_join2.in1_ready, %handshake_join2.in2_ready, %handshake_join2.out0, %handshake_join2.out0_valid = hw.instance "handshake_join2" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer5.out0: i0, in0_valid: %handshake_buffer5.out0_valid: i1, in1: %handshake_buffer34.out0: i0, in1_valid: %handshake_buffer34.out0_valid: i1, in2: %handshake_buffer31.out0: i0, in2_valid: %handshake_buffer31.out0_valid: i1, out0_ready: %handshake_buffer63.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer63.in0_ready, %handshake_buffer63.out0, %handshake_buffer63.out0_valid = hw.instance "handshake_buffer63" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join2.out0: i0, in0_valid: %handshake_join2.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store2.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store2.addrIn0_ready, %handshake_store2.dataIn_ready, %handshake_store2.ctrl_ready, %handshake_store2.dataToMem, %handshake_store2.dataToMem_valid, %handshake_store2.addrOut0, %handshake_store2.addrOut0_valid = hw.instance "handshake_store2" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer48.out0: i64, addrIn0_valid: %handshake_buffer48.out0_valid: i1, dataIn: %handshake_buffer39.out0: i64, dataIn_valid: %handshake_buffer39.out0_valid: i1, ctrl: %handshake_buffer63.out0: i0, ctrl_valid: %handshake_buffer63.out0_valid: i1, dataToMem_ready: %handshake_buffer65.in0_ready: i1, addrOut0_ready: %handshake_buffer64.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer64.in0_ready, %handshake_buffer64.out0, %handshake_buffer64.out0_valid = hw.instance "handshake_buffer64" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.addrOut0: i64, in0_valid: %handshake_store2.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer65.in0_ready, %handshake_buffer65.out0, %handshake_buffer65.out0_valid = hw.instance "handshake_buffer65" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.dataToMem: i64, in0_valid: %handshake_store2.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stData2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_store3.addrIn0_ready, %handshake_store3.dataIn_ready, %handshake_store3.ctrl_ready, %handshake_store3.dataToMem, %handshake_store3.dataToMem_valid, %handshake_store3.addrOut0, %handshake_store3.addrOut0_valid = hw.instance "handshake_store3" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer56.out0: i64, addrIn0_valid: %handshake_buffer56.out0_valid: i1, dataIn: %handshake_buffer46.out0: i64, dataIn_valid: %handshake_buffer46.out0_valid: i1, ctrl: %handshake_buffer3.out0: i0, ctrl_valid: %handshake_buffer3.out0_valid: i1, dataToMem_ready: %handshake_buffer67.in0_ready: i1, addrOut0_ready: %handshake_buffer66.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer66.in0_ready, %handshake_buffer66.out0, %handshake_buffer66.out0_valid = hw.instance "handshake_buffer66" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.addrOut0: i64, in0_valid: %handshake_store3.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer67.in0_ready, %handshake_buffer67.out0, %handshake_buffer67.out0_valid = hw.instance "handshake_buffer67" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.dataToMem: i64, in0_valid: %handshake_store3.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join3.in0_ready, %handshake_join3.in1_ready, %handshake_join3.out0, %handshake_join3.out0_valid = hw.instance "handshake_join3" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer2.out0: i0, in0_valid: %handshake_buffer2.out0_valid: i1, in1: %handshake_buffer24.out0: i0, in1_valid: %handshake_buffer24.out0_valid: i1, out0_ready: %handshake_buffer68.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer68.in0_ready, %handshake_buffer68.out0, %handshake_buffer68.out0_valid = hw.instance "handshake_buffer68" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join3.out0: i0, in0_valid: %handshake_join3.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store4.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store4.addrIn0_ready, %handshake_store4.dataIn_ready, %handshake_store4.ctrl_ready, %handshake_store4.dataToMem, %handshake_store4.dataToMem_valid, %handshake_store4.addrOut0, %handshake_store4.addrOut0_valid = hw.instance "handshake_store4" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer52.out0: i64, addrIn0_valid: %handshake_buffer52.out0_valid: i1, dataIn: %handshake_buffer43.out0: i64, dataIn_valid: %handshake_buffer43.out0_valid: i1, ctrl: %handshake_buffer68.out0: i0, ctrl_valid: %handshake_buffer68.out0_valid: i1, dataToMem_ready: %handshake_buffer70.in0_ready: i1, addrOut0_ready: %handshake_buffer69.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer69.in0_ready, %handshake_buffer69.out0, %handshake_buffer69.out0_valid = hw.instance "handshake_buffer69" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.addrOut0: i64, in0_valid: %handshake_store4.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer70.in0_ready, %handshake_buffer70.out0, %handshake_buffer70.out0_valid = hw.instance "handshake_buffer70" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.dataToMem: i64, in0_valid: %handshake_store4.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stData1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join4.in0_ready, %handshake_join4.in1_ready, %handshake_join4.in2_ready, %handshake_join4.out0, %handshake_join4.out0_valid = hw.instance "handshake_join4" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer1.out0: i0, in0_valid: %handshake_buffer1.out0_valid: i1, in1: %handshake_buffer25.out0: i0, in1_valid: %handshake_buffer25.out0_valid: i1, in2: %handshake_buffer22.out0: i0, in2_valid: %handshake_buffer22.out0_valid: i1, out0_ready: %handshake_buffer71.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer71.in0_ready, %handshake_buffer71.out0, %handshake_buffer71.out0_valid = hw.instance "handshake_buffer71" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join4.out0: i0, in0_valid: %handshake_join4.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store5.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store5.addrIn0_ready, %handshake_store5.dataIn_ready, %handshake_store5.ctrl_ready, %handshake_store5.dataToMem, %handshake_store5.dataToMem_valid, %handshake_store5.addrOut0, %handshake_store5.addrOut0_valid = hw.instance "handshake_store5" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer49.out0: i64, addrIn0_valid: %handshake_buffer49.out0_valid: i1, dataIn: %handshake_buffer40.out0: i64, dataIn_valid: %handshake_buffer40.out0_valid: i1, ctrl: %handshake_buffer71.out0: i0, ctrl_valid: %handshake_buffer71.out0_valid: i1, dataToMem_ready: %handshake_buffer73.in0_ready: i1, addrOut0_ready: %handshake_buffer72.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer72.in0_ready, %handshake_buffer72.out0, %handshake_buffer72.out0_valid = hw.instance "handshake_buffer72" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.addrOut0: i64, in0_valid: %handshake_store5.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer73.in0_ready, %handshake_buffer73.out0, %handshake_buffer73.out0_valid = hw.instance "handshake_buffer73" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.dataToMem: i64, in0_valid: %handshake_store5.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stData2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer74.in0_ready, %handshake_buffer74.out0, %handshake_buffer74.out0_valid = hw.instance "handshake_buffer74" @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in0: %handshake_fork14.out0: i1, in0_valid: %handshake_fork14.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork11.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_fork11.in0_ready, %handshake_fork11.out0, %handshake_fork11.out0_valid, %handshake_fork11.out1, %handshake_fork11.out1_valid, %handshake_fork11.out2, %handshake_fork11.out2_valid, %handshake_fork11.out3, %handshake_fork11.out3_valid = hw.instance "handshake_fork11" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in0: %handshake_buffer74.out0: i1, in0_valid: %handshake_buffer74.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer78.in0_ready: i1, out1_ready: %handshake_buffer77.in0_ready: i1, out2_ready: %handshake_buffer76.in0_ready: i1, out3_ready: %handshake_buffer75.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1)
    %handshake_buffer75.in0_ready, %handshake_buffer75.out0, %handshake_buffer75.out0_valid = hw.instance "handshake_buffer75" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out3: i1, in0_valid: %handshake_fork11.out3_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux0.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer76.in0_ready, %handshake_buffer76.out0, %handshake_buffer76.out0_valid = hw.instance "handshake_buffer76" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out2: i1, in0_valid: %handshake_fork11.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux1.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer77.in0_ready, %handshake_buffer77.out0, %handshake_buffer77.out0_valid = hw.instance "handshake_buffer77" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out1: i1, in0_valid: %handshake_fork11.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux2.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer78.in0_ready, %handshake_buffer78.out0, %handshake_buffer78.out0_valid = hw.instance "handshake_buffer78" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out0: i1, in0_valid: %handshake_fork11.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux3.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_mux0.select_ready, %handshake_mux0.in0_ready, %handshake_mux0.in1_ready, %handshake_mux0.out0, %handshake_mux0.out0_valid = hw.instance "handshake_mux0" @handshake_mux_in_ui1_3ins_1outs_ctrl(select: %handshake_buffer75.out0: i1, select_valid: %handshake_buffer75.out0_valid: i1, in0: %handshake_buffer36.out0: i0, in0_valid: %handshake_buffer36.out0_valid: i1, in1: %handshake_buffer107.out0: i0, in1_valid: %handshake_buffer107.out0_valid: i1, out0_ready: %handshake_buffer79.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer79.in0_ready, %handshake_buffer79.out0, %handshake_buffer79.out0_valid = hw.instance "handshake_buffer79" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_mux0.out0: i0, in0_valid: %handshake_mux0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br3.data_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_mux1.select_ready, %handshake_mux1.in0_ready, %handshake_mux1.in1_ready, %handshake_mux1.out0, %handshake_mux1.out0_valid = hw.instance "handshake_mux1" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer76.out0: i1, select_valid: %handshake_buffer76.out0_valid: i1, in0: %handshake_buffer57.out0: i64, in0_valid: %handshake_buffer57.out0_valid: i1, in1: %handshake_buffer115.out0: i64, in1_valid: %handshake_buffer115.out0_valid: i1, out0_ready: %handshake_buffer80.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer80.in0_ready, %handshake_buffer80.out0, %handshake_buffer80.out0_valid = hw.instance "handshake_buffer80" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux1.out0: i64, in0_valid: %handshake_mux1.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork12.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork12.in0_ready, %handshake_fork12.out0, %handshake_fork12.out0_valid, %handshake_fork12.out1, %handshake_fork12.out1_valid = hw.instance "handshake_fork12" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer80.out0: i64, in0_valid: %handshake_buffer80.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer82.in0_ready: i1, out1_ready: %handshake_buffer81.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer81.in0_ready, %handshake_buffer81.out0, %handshake_buffer81.out0_valid = hw.instance "handshake_buffer81" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out1: i64, in0_valid: %handshake_fork12.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br0.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer82.in0_ready, %handshake_buffer82.out0, %handshake_buffer82.out0_valid = hw.instance "handshake_buffer82" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out0: i64, in0_valid: %handshake_fork12.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_cmpi0.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_mux2.select_ready, %handshake_mux2.in0_ready, %handshake_mux2.in1_ready, %handshake_mux2.out0, %handshake_mux2.out0_valid = hw.instance "handshake_mux2" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer77.out0: i1, select_valid: %handshake_buffer77.out0_valid: i1, in0: %handshake_buffer37.out0: i64, in0_valid: %handshake_buffer37.out0_valid: i1, in1: %handshake_buffer97.out0: i64, in1_valid: %handshake_buffer97.out0_valid: i1, out0_ready: %handshake_buffer83.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer83.in0_ready, %handshake_buffer83.out0, %handshake_buffer83.out0_valid = hw.instance "handshake_buffer83" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux2.out0: i64, in0_valid: %handshake_mux2.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork13.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork13.in0_ready, %handshake_fork13.out0, %handshake_fork13.out0_valid, %handshake_fork13.out1, %handshake_fork13.out1_valid = hw.instance "handshake_fork13" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer83.out0: i64, in0_valid: %handshake_buffer83.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer85.in0_ready: i1, out1_ready: %handshake_buffer84.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer84.in0_ready, %handshake_buffer84.out0, %handshake_buffer84.out0_valid = hw.instance "handshake_buffer84" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out1: i64, in0_valid: %handshake_fork13.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br1.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer85.in0_ready, %handshake_buffer85.out0, %handshake_buffer85.out0_valid = hw.instance "handshake_buffer85" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out0: i64, in0_valid: %handshake_fork13.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_cmpi0.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_mux3.select_ready, %handshake_mux3.in0_ready, %handshake_mux3.in1_ready, %handshake_mux3.out0, %handshake_mux3.out0_valid = hw.instance "handshake_mux3" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer78.out0: i1, select_valid: %handshake_buffer78.out0_valid: i1, in0: %handshake_buffer53.out0: i64, in0_valid: %handshake_buffer53.out0_valid: i1, in1: %handshake_buffer100.out0: i64, in1_valid: %handshake_buffer100.out0_valid: i1, out0_ready: %handshake_buffer86.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer86.in0_ready, %handshake_buffer86.out0, %handshake_buffer86.out0_valid = hw.instance "handshake_buffer86" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux3.out0: i64, in0_valid: %handshake_mux3.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br2.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %arith_cmpi0.in0_ready, %arith_cmpi0.in1_ready, %arith_cmpi0.out0, %arith_cmpi0.out0_valid = hw.instance "arith_cmpi0" @arith_cmpi_in_ui64_ui64_out_ui1_slt(in0: %handshake_buffer82.out0: i64, in0_valid: %handshake_buffer82.out0_valid: i1, in1: %handshake_buffer85.out0: i64, in1_valid: %handshake_buffer85.out0_valid: i1, out0_ready: %handshake_buffer87.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer87.in0_ready, %handshake_buffer87.out0, %handshake_buffer87.out0_valid = hw.instance "handshake_buffer87" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %arith_cmpi0.out0: i1, in0_valid: %arith_cmpi0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork14.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_fork14.in0_ready, %handshake_fork14.out0, %handshake_fork14.out0_valid, %handshake_fork14.out1, %handshake_fork14.out1_valid, %handshake_fork14.out2, %handshake_fork14.out2_valid, %handshake_fork14.out3, %handshake_fork14.out3_valid, %handshake_fork14.out4, %handshake_fork14.out4_valid = hw.instance "handshake_fork14" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in0: %handshake_buffer87.out0: i1, in0_valid: %handshake_buffer87.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer74.in0_ready: i1, out1_ready: %handshake_buffer91.in0_ready: i1, out2_ready: %handshake_buffer90.in0_ready: i1, out3_ready: %handshake_buffer89.in0_ready: i1, out4_ready: %handshake_buffer88.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1, out4: i1, out4_valid: i1)
    %handshake_buffer88.in0_ready, %handshake_buffer88.out0, %handshake_buffer88.out0_valid = hw.instance "handshake_buffer88" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out4: i1, in0_valid: %handshake_fork14.out4_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br0.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer89.in0_ready, %handshake_buffer89.out0, %handshake_buffer89.out0_valid = hw.instance "handshake_buffer89" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out3: i1, in0_valid: %handshake_fork14.out3_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br1.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer90.in0_ready, %handshake_buffer90.out0, %handshake_buffer90.out0_valid = hw.instance "handshake_buffer90" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out2: i1, in0_valid: %handshake_fork14.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br2.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer91.in0_ready, %handshake_buffer91.out0, %handshake_buffer91.out0_valid = hw.instance "handshake_buffer91" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out1: i1, in0_valid: %handshake_fork14.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br3.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_cond_br0.cond_ready, %handshake_cond_br0.data_ready, %handshake_cond_br0.outTrue, %handshake_cond_br0.outTrue_valid, %handshake_cond_br0.outFalse, %handshake_cond_br0.outFalse_valid = hw.instance "handshake_cond_br0" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer88.out0: i1, cond_valid: %handshake_buffer88.out0_valid: i1, data: %handshake_buffer81.out0: i64, data_valid: %handshake_buffer81.out0_valid: i1, outTrue_ready: %handshake_buffer92.in0_ready: i1, outFalse_ready: %handshake_sink0.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %handshake_buffer92.in0_ready, %handshake_buffer92.out0, %handshake_buffer92.out0_valid = hw.instance "handshake_buffer92" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br0.outTrue: i64, in0_valid: %handshake_cond_br0.outTrue_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork15.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_sink0.in0_ready = hw.instance "handshake_sink0" @handshake_sink_in_ui64(in0: %handshake_cond_br0.outFalse: i64, in0_valid: %handshake_cond_br0.outFalse_valid: i1) -> (in0_ready: i1)
    %handshake_fork15.in0_ready, %handshake_fork15.out0, %handshake_fork15.out0_valid, %handshake_fork15.out1, %handshake_fork15.out1_valid, %handshake_fork15.out2, %handshake_fork15.out2_valid, %handshake_fork15.out3, %handshake_fork15.out3_valid = hw.instance "handshake_fork15" @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in0: %handshake_buffer92.out0: i64, in0_valid: %handshake_buffer92.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer96.in0_ready: i1, out1_ready: %handshake_buffer95.in0_ready: i1, out2_ready: %handshake_buffer94.in0_ready: i1, out3_ready: %handshake_buffer93.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1, out3: i64, out3_valid: i1)
    %handshake_buffer93.in0_ready, %handshake_buffer93.out0, %handshake_buffer93.out0_valid = hw.instance "handshake_buffer93" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out3: i64, in0_valid: %handshake_fork15.out3_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store6.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer94.in0_ready, %handshake_buffer94.out0, %handshake_buffer94.out0_valid = hw.instance "handshake_buffer94" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out2: i64, in0_valid: %handshake_fork15.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load1.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer95.in0_ready, %handshake_buffer95.out0, %handshake_buffer95.out0_valid = hw.instance "handshake_buffer95" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out1: i64, in0_valid: %handshake_fork15.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load0.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer96.in0_ready, %handshake_buffer96.out0, %handshake_buffer96.out0_valid = hw.instance "handshake_buffer96" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out0: i64, in0_valid: %handshake_fork15.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_addi1.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_cond_br1.cond_ready, %handshake_cond_br1.data_ready, %handshake_cond_br1.outTrue, %handshake_cond_br1.outTrue_valid, %handshake_cond_br1.outFalse, %handshake_cond_br1.outFalse_valid = hw.instance "handshake_cond_br1" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer89.out0: i1, cond_valid: %handshake_buffer89.out0_valid: i1, data: %handshake_buffer84.out0: i64, data_valid: %handshake_buffer84.out0_valid: i1, outTrue_ready: %handshake_buffer97.in0_ready: i1, outFalse_ready: %handshake_sink1.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %handshake_buffer97.in0_ready, %handshake_buffer97.out0, %handshake_buffer97.out0_valid = hw.instance "handshake_buffer97" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br1.outTrue: i64, in0_valid: %handshake_cond_br1.outTrue_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux2.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_sink1.in0_ready = hw.instance "handshake_sink1" @handshake_sink_in_ui64(in0: %handshake_cond_br1.outFalse: i64, in0_valid: %handshake_cond_br1.outFalse_valid: i1) -> (in0_ready: i1)
    %handshake_cond_br2.cond_ready, %handshake_cond_br2.data_ready, %handshake_cond_br2.outTrue, %handshake_cond_br2.outTrue_valid, %handshake_cond_br2.outFalse, %handshake_cond_br2.outFalse_valid = hw.instance "handshake_cond_br2" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer90.out0: i1, cond_valid: %handshake_buffer90.out0_valid: i1, data: %handshake_buffer86.out0: i64, data_valid: %handshake_buffer86.out0_valid: i1, outTrue_ready: %handshake_buffer98.in0_ready: i1, outFalse_ready: %handshake_sink2.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %handshake_buffer98.in0_ready, %handshake_buffer98.out0, %handshake_buffer98.out0_valid = hw.instance "handshake_buffer98" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br2.outTrue: i64, in0_valid: %handshake_cond_br2.outTrue_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork16.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_sink2.in0_ready = hw.instance "handshake_sink2" @handshake_sink_in_ui64(in0: %handshake_cond_br2.outFalse: i64, in0_valid: %handshake_cond_br2.outFalse_valid: i1) -> (in0_ready: i1)
    %handshake_fork16.in0_ready, %handshake_fork16.out0, %handshake_fork16.out0_valid, %handshake_fork16.out1, %handshake_fork16.out1_valid = hw.instance "handshake_fork16" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer98.out0: i64, in0_valid: %handshake_buffer98.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer100.in0_ready: i1, out1_ready: %handshake_buffer99.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer99.in0_ready, %handshake_buffer99.out0, %handshake_buffer99.out0_valid = hw.instance "handshake_buffer99" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out1: i64, in0_valid: %handshake_fork16.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_addi1.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer100.in0_ready, %handshake_buffer100.out0, %handshake_buffer100.out0_valid = hw.instance "handshake_buffer100" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out0: i64, in0_valid: %handshake_fork16.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux3.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_cond_br3.cond_ready, %handshake_cond_br3.data_ready, %handshake_cond_br3.outTrue, %handshake_cond_br3.outTrue_valid, %handshake_cond_br3.outFalse, %handshake_cond_br3.outFalse_valid = hw.instance "handshake_cond_br3" @handshake_cond_br_in_ui1_2ins_2outs_ctrl(cond: %handshake_buffer91.out0: i1, cond_valid: %handshake_buffer91.out0_valid: i1, data: %handshake_buffer79.out0: i0, data_valid: %handshake_buffer79.out0_valid: i1, outTrue_ready: %handshake_buffer102.in0_ready: i1, outFalse_ready: %handshake_buffer101.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i0, outTrue_valid: i1, outFalse: i0, outFalse_valid: i1)
    %handshake_buffer101.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid = hw.instance "handshake_buffer101" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outFalse: i0, in0_valid: %handshake_cond_br3.outFalse_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %out0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer102.in0_ready, %handshake_buffer102.out0, %handshake_buffer102.out0_valid = hw.instance "handshake_buffer102" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outTrue: i0, in0_valid: %handshake_cond_br3.outTrue_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork17.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork17.in0_ready, %handshake_fork17.out0, %handshake_fork17.out0_valid, %handshake_fork17.out1, %handshake_fork17.out1_valid, %handshake_fork17.out2, %handshake_fork17.out2_valid, %handshake_fork17.out3, %handshake_fork17.out3_valid = hw.instance "handshake_fork17" @handshake_fork_1ins_4outs_ctrl(in0: %handshake_buffer102.out0: i0, in0_valid: %handshake_buffer102.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer106.in0_ready: i1, out1_ready: %handshake_buffer105.in0_ready: i1, out2_ready: %handshake_buffer104.in0_ready: i1, out3_ready: %handshake_buffer103.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1)
    %handshake_buffer103.in0_ready, %handshake_buffer103.out0, %handshake_buffer103.out0_valid = hw.instance "handshake_buffer103" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out3: i0, in0_valid: %handshake_fork17.out3_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer104.in0_ready, %handshake_buffer104.out0, %handshake_buffer104.out0_valid = hw.instance "handshake_buffer104" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out2: i0, in0_valid: %handshake_fork17.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer105.in0_ready, %handshake_buffer105.out0, %handshake_buffer105.out0_valid = hw.instance "handshake_buffer105" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out1: i0, in0_valid: %handshake_fork17.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join5.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer106.in0_ready, %handshake_buffer106.out0, %handshake_buffer106.out0_valid = hw.instance "handshake_buffer106" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out0: i0, in0_valid: %handshake_fork17.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store6.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_join5.in0_ready, %handshake_join5.in1_ready, %handshake_join5.in2_ready, %handshake_join5.in3_ready, %handshake_join5.out0, %handshake_join5.out0_valid = hw.instance "handshake_join5" @handshake_join_4ins_1outs_ctrl(in0: %handshake_buffer105.out0: i0, in0_valid: %handshake_buffer105.out0_valid: i1, in1: %handshake_buffer26.out0: i0, in1_valid: %handshake_buffer26.out0_valid: i1, in2: %handshake_buffer16.out0: i0, in2_valid: %handshake_buffer16.out0_valid: i1, in3: %handshake_buffer15.out0: i0, in3_valid: %handshake_buffer15.out0_valid: i1, out0_ready: %handshake_buffer107.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer107.in0_ready, %handshake_buffer107.out0, %handshake_buffer107.out0_valid = hw.instance "handshake_buffer107" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join5.out0: i0, in0_valid: %handshake_join5.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux0.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_load0.addrIn0_ready, %handshake_load0.dataFromMem_ready, %handshake_load0.ctrl_ready, %handshake_load0.dataOut, %handshake_load0.dataOut_valid, %handshake_load0.addrOut0, %handshake_load0.addrOut0_valid = hw.instance "handshake_load0" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer95.out0: i64, addrIn0_valid: %handshake_buffer95.out0_valid: i1, dataFromMem: %handshake_buffer30.out0: i64, dataFromMem_valid: %handshake_buffer30.out0_valid: i1, ctrl: %handshake_buffer103.out0: i0, ctrl_valid: %handshake_buffer103.out0_valid: i1, dataOut_ready: %handshake_buffer109.in0_ready: i1, addrOut0_ready: %handshake_buffer108.in0_ready: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer108.in0_ready, %handshake_buffer108.out0, %handshake_buffer108.out0_valid = hw.instance "handshake_buffer108" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.addrOut0: i64, in0_valid: %handshake_load0.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.ldAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer109.in0_ready, %handshake_buffer109.out0, %handshake_buffer109.out0_valid = hw.instance "handshake_buffer109" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.dataOut: i64, in0_valid: %handshake_load0.dataOut_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_addi0.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_load1.addrIn0_ready, %handshake_load1.dataFromMem_ready, %handshake_load1.ctrl_ready, %handshake_load1.dataOut, %handshake_load1.dataOut_valid, %handshake_load1.addrOut0, %handshake_load1.addrOut0_valid = hw.instance "handshake_load1" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer94.out0: i64, addrIn0_valid: %handshake_buffer94.out0_valid: i1, dataFromMem: %handshake_buffer20.out0: i64, dataFromMem_valid: %handshake_buffer20.out0_valid: i1, ctrl: %handshake_buffer104.out0: i0, ctrl_valid: %handshake_buffer104.out0_valid: i1, dataOut_ready: %handshake_buffer111.in0_ready: i1, addrOut0_ready: %handshake_buffer110.in0_ready: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer110.in0_ready, %handshake_buffer110.out0, %handshake_buffer110.out0_valid = hw.instance "handshake_buffer110" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.addrOut0: i64, in0_valid: %handshake_load1.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.ldAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer111.in0_ready, %handshake_buffer111.out0, %handshake_buffer111.out0_valid = hw.instance "handshake_buffer111" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.dataOut: i64, in0_valid: %handshake_load1.dataOut_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_addi0.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %arith_addi0.in0_ready, %arith_addi0.in1_ready, %arith_addi0.out0, %arith_addi0.out0_valid = hw.instance "arith_addi0" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer109.out0: i64, in0_valid: %handshake_buffer109.out0_valid: i1, in1: %handshake_buffer111.out0: i64, in1_valid: %handshake_buffer111.out0_valid: i1, out0_ready: %handshake_buffer112.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer112.in0_ready, %handshake_buffer112.out0, %handshake_buffer112.out0_valid = hw.instance "handshake_buffer112" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi0.out0: i64, in0_valid: %arith_addi0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store6.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_store6.addrIn0_ready, %handshake_store6.dataIn_ready, %handshake_store6.ctrl_ready, %handshake_store6.dataToMem, %handshake_store6.dataToMem_valid, %handshake_store6.addrOut0, %handshake_store6.addrOut0_valid = hw.instance "handshake_store6" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer93.out0: i64, addrIn0_valid: %handshake_buffer93.out0_valid: i1, dataIn: %handshake_buffer112.out0: i64, dataIn_valid: %handshake_buffer112.out0_valid: i1, ctrl: %handshake_buffer106.out0: i0, ctrl_valid: %handshake_buffer106.out0_valid: i1, dataToMem_ready: %handshake_buffer114.in0_ready: i1, addrOut0_ready: %handshake_buffer113.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer113.in0_ready, %handshake_buffer113.out0, %handshake_buffer113.out0_valid = hw.instance "handshake_buffer113" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.addrOut0: i64, in0_valid: %handshake_store6.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory0.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer114.in0_ready, %handshake_buffer114.out0, %handshake_buffer114.out0_valid = hw.instance "handshake_buffer114" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.dataToMem: i64, in0_valid: %handshake_store6.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory0.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %arith_addi1.in0_ready, %arith_addi1.in1_ready, %arith_addi1.out0, %arith_addi1.out0_valid = hw.instance "arith_addi1" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer96.out0: i64, in0_valid: %handshake_buffer96.out0_valid: i1, in1: %handshake_buffer99.out0: i64, in1_valid: %handshake_buffer99.out0_valid: i1, out0_ready: %handshake_buffer115.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer115.in0_ready, %handshake_buffer115.out0, %handshake_buffer115.out0_valid = hw.instance "handshake_buffer115" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi1.out0: i64, in0_valid: %arith_addi1.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux1.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    hw.output %handshake_buffer0.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid : i1, i0, i1
  }
}


// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_constant_c2_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c2_i64 = hw.constant 2 : i64
  hw.output %out0_ready, %c2_i64, %ctrl_valid : i1, i64, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_constant_c0_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c0_i64 = hw.constant 0 : i64
  hw.output %out0_ready, %c0_i64, %ctrl_valid : i1, i64, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_constant_c3_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c3_i64 = hw.constant 3 : i64
  hw.output %out0_ready, %c3_i64, %ctrl_valid : i1, i64, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_constant_c1_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c1_i64 = hw.constant 1 : i64
  hw.output %out0_ready, %c1_i64, %ctrl_valid : i1, i64, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %true : i1  
  %0 = comb.xor %valid0_reg, %true : i1
  %1 = comb.or %0, %5 : i1
  %2 = comb.mux %1, %in0_valid, %valid0_reg : i1
  %3 = comb.mux %1, %in0, %data0_reg : i1
  %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %false : i1  
  %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
  %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
  %5 = comb.xor %ready0_reg, %true : i1
  %6 = comb.xor %out0_ready, %true : i1
  %7 = comb.and %6, %5 : i1
  %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
  %9 = comb.and %out0_ready, %ready0_reg : i1
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %8 : i1
  %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %15, %clock reset %reset, %false : i1  
  %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i1
  %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i1
  %14 = comb.xor %9, %true : i1
  %15 = comb.and %14, %13 : i1
  hw.output %1, %12, %4 : i1, i1, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_join_7ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %in4 : i0, in %in4_valid : i1, in %in5 : i0, in %in5_valid : i1, in %in6 : i0, in %in6_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out in4_ready : i1, out in5_ready : i1, out in6_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c0_i0 = hw.constant 0 : i0
  %0 = comb.and %in0_valid, %in1_valid, %in2_valid, %in3_valid, %in4_valid, %in5_valid, %in6_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  hw.output %1, %1, %1, %1, %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i1, i1, i1, i1, i0, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_fork_1ins_2outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %12, %true : i1
  %1 = comb.and %5, %0 : i1
  %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
  %2 = comb.xor %emitted_0, %true : i1
  %3 = comb.and %2, %in0_valid : i1
  %4 = comb.and %out0_ready, %3 : i1
  %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
  %6 = comb.xor %12, %true : i1
  %7 = comb.and %11, %6 : i1
  %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
  %8 = comb.xor %emitted_1, %true : i1
  %9 = comb.and %8, %in0_valid : i1
  %10 = comb.and %out1_ready, %9 : i1
  %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
  %12 = comb.and %5, %11 {sv.namehint = "allDone"} : i1
  hw.output %12, %in0, %3, %in0, %9 : i1, i0, i1, i0, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_fork_in_ui64_out_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %12, %true : i1
  %1 = comb.and %5, %0 : i1
  %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
  %2 = comb.xor %emitted_0, %true : i1
  %3 = comb.and %2, %in0_valid : i1
  %4 = comb.and %out0_ready, %3 : i1
  %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
  %6 = comb.xor %12, %true : i1
  %7 = comb.and %11, %6 : i1
  %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
  %8 = comb.xor %emitted_1, %true : i1
  %9 = comb.and %8, %in0_valid : i1
  %10 = comb.and %out1_ready, %9 : i1
  %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
  %12 = comb.and %5, %11 {sv.namehint = "allDone"} : i1
  hw.output %12, %in0, %3, %in0, %9 : i1, i64, i1, i64, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_fork_1ins_3outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %18, %true : i1
  %1 = comb.and %5, %0 : i1
  %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
  %2 = comb.xor %emitted_0, %true : i1
  %3 = comb.and %2, %in0_valid : i1
  %4 = comb.and %out0_ready, %3 : i1
  %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
  %6 = comb.xor %18, %true : i1
  %7 = comb.and %11, %6 : i1
  %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
  %8 = comb.xor %emitted_1, %true : i1
  %9 = comb.and %8, %in0_valid : i1
  %10 = comb.and %out1_ready, %9 : i1
  %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
  %12 = comb.xor %18, %true : i1
  %13 = comb.and %17, %12 : i1
  %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
  %14 = comb.xor %emitted_2, %true : i1
  %15 = comb.and %14, %in0_valid : i1
  %16 = comb.and %out2_ready, %15 : i1
  %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
  %18 = comb.and %5, %11, %17 {sv.namehint = "allDone"} : i1
  hw.output %18, %in0, %3, %in0, %9, %in0, %15 : i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %18, %true : i1
  %1 = comb.and %5, %0 : i1
  %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
  %2 = comb.xor %emitted_0, %true : i1
  %3 = comb.and %2, %in0_valid : i1
  %4 = comb.and %out0_ready, %3 : i1
  %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
  %6 = comb.xor %18, %true : i1
  %7 = comb.and %11, %6 : i1
  %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
  %8 = comb.xor %emitted_1, %true : i1
  %9 = comb.and %8, %in0_valid : i1
  %10 = comb.and %out1_ready, %9 : i1
  %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
  %12 = comb.xor %18, %true : i1
  %13 = comb.and %17, %12 : i1
  %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
  %14 = comb.xor %emitted_2, %true : i1
  %15 = comb.and %14, %in0_valid : i1
  %16 = comb.and %out2_ready, %15 : i1
  %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
  %18 = comb.and %5, %11, %17 {sv.namehint = "allDone"} : i1
  hw.output %18, %in0, %3, %in0, %9, %in0, %15 : i1, i64, i1, i64, i1, i64, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_memory_out_ui64_id2(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %stDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stDone0 : i0, out stDone0_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %c0_i0 = hw.constant 0 : i0
  %_handshake_memory_2 = sv.reg : !hw.inout<uarray<3xi64>> 
  %0 = seq.from_clock %clock
  sv.alwaysff(posedge %0) {
    sv.if %4 {
      %7 = sv.array_index_inout %_handshake_memory_2[%6] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %7, %stData0 : i64
    }
  }(syncreset : posedge %reset) {
  }
  %writeValidBuffer = seq.compreg sym @writeValidBuffer %5, %clock reset %reset, %false : i1  
  %1 = comb.and %stDone0_ready, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
  %2 = comb.xor %writeValidBuffer, %true : i1
  %3 = comb.or %2, %1 {sv.namehint = "emptyOrComplete"} : i1
  %4 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
  %5 = comb.mux %3, %4, %writeValidBuffer : i1
  %6 = comb.extract %stAddr0 from 0 : (i64) -> i2
  hw.output %3, %3, %c0_i0, %writeValidBuffer : i1, i1, i0, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %c0_i0 = hw.constant 0 : i0
  %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
  %0 = comb.xor %valid0_reg, %true : i1
  %1 = comb.or %0, %5 : i1
  %2 = comb.mux %1, %in0_valid, %valid0_reg : i1
  %3 = comb.mux %1, %in0, %data0_reg : i0
  %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %c0_i0 : i0  
  %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
  %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
  %5 = comb.xor %ready0_reg, %true : i1
  %6 = comb.xor %16, %true : i1
  %7 = comb.and %6, %5 : i1
  %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
  %9 = comb.and %16, %ready0_reg : i1
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %8 : i1
  %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %14, %clock reset %reset, %c0_i0 : i0  
  %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i0
  %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i0
  %14 = comb.mux %9, %c0_i0, %13 : i0
  %valid1_reg = seq.compreg sym @valid1_reg %17, %clock reset %reset, %false : i1  
  %15 = comb.xor %valid1_reg, %true : i1
  %16 = comb.or %15, %20 : i1
  %17 = comb.mux %16, %4, %valid1_reg : i1
  %18 = comb.mux %16, %12, %data1_reg : i0
  %data1_reg = seq.compreg sym @data1_reg %18, %clock reset %reset, %c0_i0 : i0  
  %ready1_reg = seq.compreg sym @ready1_reg %26, %clock reset %reset, %false : i1  
  %19 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
  %20 = comb.xor %ready1_reg, %true : i1
  %21 = comb.xor %out0_ready, %true : i1
  %22 = comb.and %21, %20 : i1
  %23 = comb.mux %22, %valid1_reg, %ready1_reg : i1
  %24 = comb.and %out0_ready, %ready1_reg : i1
  %25 = comb.xor %24, %true : i1
  %26 = comb.and %25, %23 : i1
  %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %29, %clock reset %reset, %c0_i0 : i0  
  %27 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i0
  %28 = comb.mux %22, %data1_reg, %ctrl_data1_reg : i0
  %29 = comb.mux %24, %c0_i0, %28 : i0
  hw.output %1, %27, %19 : i1, i0, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_buffer_in_ui64_out_ui64_2slots_seq(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %c0_i64 = hw.constant 0 : i64
  %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
  %0 = comb.xor %valid0_reg, %true : i1
  %1 = comb.or %0, %5 : i1
  %2 = comb.mux %1, %in0_valid, %valid0_reg : i1
  %3 = comb.mux %1, %in0, %data0_reg : i64
  %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %c0_i64 : i64  
  %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
  %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
  %5 = comb.xor %ready0_reg, %true : i1
  %6 = comb.xor %16, %true : i1
  %7 = comb.and %6, %5 : i1
  %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
  %9 = comb.and %16, %ready0_reg : i1
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %8 : i1
  %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %14, %clock reset %reset, %c0_i64 : i64  
  %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i64
  %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i64
  %14 = comb.mux %9, %c0_i64, %13 : i64
  %valid1_reg = seq.compreg sym @valid1_reg %17, %clock reset %reset, %false : i1  
  %15 = comb.xor %valid1_reg, %true : i1
  %16 = comb.or %15, %20 : i1
  %17 = comb.mux %16, %4, %valid1_reg : i1
  %18 = comb.mux %16, %12, %data1_reg : i64
  %data1_reg = seq.compreg sym @data1_reg %18, %clock reset %reset, %c0_i64 : i64  
  %ready1_reg = seq.compreg sym @ready1_reg %26, %clock reset %reset, %false : i1  
  %19 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
  %20 = comb.xor %ready1_reg, %true : i1
  %21 = comb.xor %out0_ready, %true : i1
  %22 = comb.and %21, %20 : i1
  %23 = comb.mux %22, %valid1_reg, %ready1_reg : i1
  %24 = comb.and %out0_ready, %ready1_reg : i1
  %25 = comb.xor %24, %true : i1
  %26 = comb.and %25, %23 : i1
  %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %29, %clock reset %reset, %c0_i64 : i64  
  %27 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i64
  %28 = comb.mux %22, %data1_reg, %ctrl_data1_reg : i64
  %29 = comb.mux %24, %c0_i64, %28 : i64
  hw.output %1, %27, %19 : i1, i64, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_memory_out_ui64_id0(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %c0_i0 = hw.constant 0 : i0
  %_handshake_memory_0 = sv.reg : !hw.inout<uarray<3xi64>> 
  %0 = seq.from_clock %clock
  sv.alwaysff(posedge %0) {
    sv.if %32 {
      %35 = sv.array_index_inout %_handshake_memory_0[%34] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %35, %stData2 : i64
    }
    sv.if %26 {
      %35 = sv.array_index_inout %_handshake_memory_0[%28] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %35, %stData1 : i64
    }
    sv.if %20 {
      %35 = sv.array_index_inout %_handshake_memory_0[%22] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %35, %stData0 : i64
    }
  }(syncreset : posedge %reset) {
  }
  %1 = comb.extract %ldAddr0 from 0 : (i64) -> i2
  %2 = sv.array_index_inout %_handshake_memory_0[%1] : !hw.inout<uarray<3xi64>>, i2
  %3 = sv.read_inout %2 : !hw.inout<i64>
  %4 = comb.xor %16, %true : i1
  %5 = comb.and %9, %4 : i1
  %emitted_0 = seq.compreg sym @emitted_0 %5, %clock reset %reset, %false : i1  
  %6 = comb.xor %emitted_0, %true : i1
  %7 = comb.and %6, %ldAddr0_valid : i1
  %8 = comb.and %ldData0_ready, %7 : i1
  %9 = comb.or %8, %emitted_0 {sv.namehint = "done0"} : i1
  %10 = comb.xor %16, %true : i1
  %11 = comb.and %15, %10 : i1
  %emitted_1 = seq.compreg sym @emitted_1 %11, %clock reset %reset, %false : i1  
  %12 = comb.xor %emitted_1, %true : i1
  %13 = comb.and %12, %ldAddr0_valid : i1
  %14 = comb.and %ldDone0_ready, %13 : i1
  %15 = comb.or %14, %emitted_1 {sv.namehint = "done1"} : i1
  %16 = comb.and %9, %15 {sv.namehint = "allDone"} : i1
  %writeValidBuffer = seq.compreg sym @writeValidBuffer %21, %clock reset %reset, %false : i1  
  %17 = comb.and %stDone0_ready, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
  %18 = comb.xor %writeValidBuffer, %true : i1
  %19 = comb.or %18, %17 {sv.namehint = "emptyOrComplete"} : i1
  %20 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
  %21 = comb.mux %19, %20, %writeValidBuffer : i1
  %22 = comb.extract %stAddr0 from 0 : (i64) -> i2
  %writeValidBuffer_0 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %27, %clock reset %reset, %false : i1  
  %23 = comb.and %stDone1_ready, %writeValidBuffer_0 {sv.namehint = "storeCompleted"} : i1
  %24 = comb.xor %writeValidBuffer_0, %true : i1
  %25 = comb.or %24, %23 {sv.namehint = "emptyOrComplete"} : i1
  %26 = comb.and %stAddr1_valid, %stData1_valid {sv.namehint = "writeValid"} : i1
  %27 = comb.mux %25, %26, %writeValidBuffer_0 : i1
  %28 = comb.extract %stAddr1 from 0 : (i64) -> i2
  %writeValidBuffer_1 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %33, %clock reset %reset, %false : i1  
  %29 = comb.and %stDone2_ready, %writeValidBuffer_1 {sv.namehint = "storeCompleted"} : i1
  %30 = comb.xor %writeValidBuffer_1, %true : i1
  %31 = comb.or %30, %29 {sv.namehint = "emptyOrComplete"} : i1
  %32 = comb.and %stAddr2_valid, %stData2_valid {sv.namehint = "writeValid"} : i1
  %33 = comb.mux %31, %32, %writeValidBuffer_1 : i1
  %34 = comb.extract %stAddr2 from 0 : (i64) -> i2
  hw.output %19, %19, %25, %25, %31, %31, %16, %3, %7, %c0_i0, %writeValidBuffer, %c0_i0, %writeValidBuffer_0, %c0_i0, %writeValidBuffer_1, %c0_i0, %13 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_memory_out_ui64_id1(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %c0_i0 = hw.constant 0 : i0
  %_handshake_memory_1 = sv.reg : !hw.inout<uarray<3xi64>> 
  %0 = seq.from_clock %clock
  sv.alwaysff(posedge %0) {
    sv.if %32 {
      %35 = sv.array_index_inout %_handshake_memory_1[%34] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %35, %stData2 : i64
    }
    sv.if %26 {
      %35 = sv.array_index_inout %_handshake_memory_1[%28] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %35, %stData1 : i64
    }
    sv.if %20 {
      %35 = sv.array_index_inout %_handshake_memory_1[%22] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %35, %stData0 : i64
    }
  }(syncreset : posedge %reset) {
  }
  %1 = comb.extract %ldAddr0 from 0 : (i64) -> i2
  %2 = sv.array_index_inout %_handshake_memory_1[%1] : !hw.inout<uarray<3xi64>>, i2
  %3 = sv.read_inout %2 : !hw.inout<i64>
  %4 = comb.xor %16, %true : i1
  %5 = comb.and %9, %4 : i1
  %emitted_0 = seq.compreg sym @emitted_0 %5, %clock reset %reset, %false : i1  
  %6 = comb.xor %emitted_0, %true : i1
  %7 = comb.and %6, %ldAddr0_valid : i1
  %8 = comb.and %ldData0_ready, %7 : i1
  %9 = comb.or %8, %emitted_0 {sv.namehint = "done0"} : i1
  %10 = comb.xor %16, %true : i1
  %11 = comb.and %15, %10 : i1
  %emitted_1 = seq.compreg sym @emitted_1 %11, %clock reset %reset, %false : i1  
  %12 = comb.xor %emitted_1, %true : i1
  %13 = comb.and %12, %ldAddr0_valid : i1
  %14 = comb.and %ldDone0_ready, %13 : i1
  %15 = comb.or %14, %emitted_1 {sv.namehint = "done1"} : i1
  %16 = comb.and %9, %15 {sv.namehint = "allDone"} : i1
  %writeValidBuffer = seq.compreg sym @writeValidBuffer %21, %clock reset %reset, %false : i1  
  %17 = comb.and %stDone0_ready, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
  %18 = comb.xor %writeValidBuffer, %true : i1
  %19 = comb.or %18, %17 {sv.namehint = "emptyOrComplete"} : i1
  %20 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
  %21 = comb.mux %19, %20, %writeValidBuffer : i1
  %22 = comb.extract %stAddr0 from 0 : (i64) -> i2
  %writeValidBuffer_0 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %27, %clock reset %reset, %false : i1  
  %23 = comb.and %stDone1_ready, %writeValidBuffer_0 {sv.namehint = "storeCompleted"} : i1
  %24 = comb.xor %writeValidBuffer_0, %true : i1
  %25 = comb.or %24, %23 {sv.namehint = "emptyOrComplete"} : i1
  %26 = comb.and %stAddr1_valid, %stData1_valid {sv.namehint = "writeValid"} : i1
  %27 = comb.mux %25, %26, %writeValidBuffer_0 : i1
  %28 = comb.extract %stAddr1 from 0 : (i64) -> i2
  %writeValidBuffer_1 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %33, %clock reset %reset, %false : i1  
  %29 = comb.and %stDone2_ready, %writeValidBuffer_1 {sv.namehint = "storeCompleted"} : i1
  %30 = comb.xor %writeValidBuffer_1, %true : i1
  %31 = comb.or %30, %29 {sv.namehint = "emptyOrComplete"} : i1
  %32 = comb.and %stAddr2_valid, %stData2_valid {sv.namehint = "writeValid"} : i1
  %33 = comb.mux %31, %32, %writeValidBuffer_1 : i1
  %34 = comb.extract %stAddr2 from 0 : (i64) -> i2
  hw.output %19, %19, %25, %25, %31, %31, %16, %3, %7, %c0_i0, %writeValidBuffer, %c0_i0, %writeValidBuffer_0, %c0_i0, %writeValidBuffer_1, %c0_i0, %13 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_store_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataIn : i64, in %dataIn_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataToMem_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataIn_ready : i1, out ctrl_ready : i1, out dataToMem : i64, out dataToMem_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
  %0 = comb.and %dataIn_valid, %addrIn0_valid, %ctrl_valid : i1
  %1 = comb.and %dataToMem_ready, %addrOut0_ready, %0 : i1
  hw.output %1, %1, %1, %dataIn, %0, %addrIn0, %0 : i1, i1, i1, i64, i1, i64, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_fork_1ins_14outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, in %out5_ready : i1, in %out6_ready : i1, in %out7_ready : i1, in %out8_ready : i1, in %out9_ready : i1, in %out10_ready : i1, in %out11_ready : i1, in %out12_ready : i1, in %out13_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1, out out4 : i0, out out4_valid : i1, out out5 : i0, out out5_valid : i1, out out6 : i0, out out6_valid : i1, out out7 : i0, out out7_valid : i1, out out8 : i0, out out8_valid : i1, out out9 : i0, out out9_valid : i1, out out10 : i0, out out10_valid : i1, out out11 : i0, out out11_valid : i1, out out12 : i0, out out12_valid : i1, out out13 : i0, out out13_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %84, %true : i1
  %1 = comb.and %5, %0 : i1
  %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
  %2 = comb.xor %emitted_0, %true : i1
  %3 = comb.and %2, %in0_valid : i1
  %4 = comb.and %out0_ready, %3 : i1
  %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
  %6 = comb.xor %84, %true : i1
  %7 = comb.and %11, %6 : i1
  %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
  %8 = comb.xor %emitted_1, %true : i1
  %9 = comb.and %8, %in0_valid : i1
  %10 = comb.and %out1_ready, %9 : i1
  %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
  %12 = comb.xor %84, %true : i1
  %13 = comb.and %17, %12 : i1
  %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
  %14 = comb.xor %emitted_2, %true : i1
  %15 = comb.and %14, %in0_valid : i1
  %16 = comb.and %out2_ready, %15 : i1
  %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
  %18 = comb.xor %84, %true : i1
  %19 = comb.and %23, %18 : i1
  %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
  %20 = comb.xor %emitted_3, %true : i1
  %21 = comb.and %20, %in0_valid : i1
  %22 = comb.and %out3_ready, %21 : i1
  %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
  %24 = comb.xor %84, %true : i1
  %25 = comb.and %29, %24 : i1
  %emitted_4 = seq.compreg sym @emitted_4 %25, %clock reset %reset, %false : i1  
  %26 = comb.xor %emitted_4, %true : i1
  %27 = comb.and %26, %in0_valid : i1
  %28 = comb.and %out4_ready, %27 : i1
  %29 = comb.or %28, %emitted_4 {sv.namehint = "done4"} : i1
  %30 = comb.xor %84, %true : i1
  %31 = comb.and %35, %30 : i1
  %emitted_5 = seq.compreg sym @emitted_5 %31, %clock reset %reset, %false : i1  
  %32 = comb.xor %emitted_5, %true : i1
  %33 = comb.and %32, %in0_valid : i1
  %34 = comb.and %out5_ready, %33 : i1
  %35 = comb.or %34, %emitted_5 {sv.namehint = "done5"} : i1
  %36 = comb.xor %84, %true : i1
  %37 = comb.and %41, %36 : i1
  %emitted_6 = seq.compreg sym @emitted_6 %37, %clock reset %reset, %false : i1  
  %38 = comb.xor %emitted_6, %true : i1
  %39 = comb.and %38, %in0_valid : i1
  %40 = comb.and %out6_ready, %39 : i1
  %41 = comb.or %40, %emitted_6 {sv.namehint = "done6"} : i1
  %42 = comb.xor %84, %true : i1
  %43 = comb.and %47, %42 : i1
  %emitted_7 = seq.compreg sym @emitted_7 %43, %clock reset %reset, %false : i1  
  %44 = comb.xor %emitted_7, %true : i1
  %45 = comb.and %44, %in0_valid : i1
  %46 = comb.and %out7_ready, %45 : i1
  %47 = comb.or %46, %emitted_7 {sv.namehint = "done7"} : i1
  %48 = comb.xor %84, %true : i1
  %49 = comb.and %53, %48 : i1
  %emitted_8 = seq.compreg sym @emitted_8 %49, %clock reset %reset, %false : i1  
  %50 = comb.xor %emitted_8, %true : i1
  %51 = comb.and %50, %in0_valid : i1
  %52 = comb.and %out8_ready, %51 : i1
  %53 = comb.or %52, %emitted_8 {sv.namehint = "done8"} : i1
  %54 = comb.xor %84, %true : i1
  %55 = comb.and %59, %54 : i1
  %emitted_9 = seq.compreg sym @emitted_9 %55, %clock reset %reset, %false : i1  
  %56 = comb.xor %emitted_9, %true : i1
  %57 = comb.and %56, %in0_valid : i1
  %58 = comb.and %out9_ready, %57 : i1
  %59 = comb.or %58, %emitted_9 {sv.namehint = "done9"} : i1
  %60 = comb.xor %84, %true : i1
  %61 = comb.and %65, %60 : i1
  %emitted_10 = seq.compreg sym @emitted_10 %61, %clock reset %reset, %false : i1  
  %62 = comb.xor %emitted_10, %true : i1
  %63 = comb.and %62, %in0_valid : i1
  %64 = comb.and %out10_ready, %63 : i1
  %65 = comb.or %64, %emitted_10 {sv.namehint = "done10"} : i1
  %66 = comb.xor %84, %true : i1
  %67 = comb.and %71, %66 : i1
  %emitted_11 = seq.compreg sym @emitted_11 %67, %clock reset %reset, %false : i1  
  %68 = comb.xor %emitted_11, %true : i1
  %69 = comb.and %68, %in0_valid : i1
  %70 = comb.and %out11_ready, %69 : i1
  %71 = comb.or %70, %emitted_11 {sv.namehint = "done11"} : i1
  %72 = comb.xor %84, %true : i1
  %73 = comb.and %77, %72 : i1
  %emitted_12 = seq.compreg sym @emitted_12 %73, %clock reset %reset, %false : i1  
  %74 = comb.xor %emitted_12, %true : i1
  %75 = comb.and %74, %in0_valid : i1
  %76 = comb.and %out12_ready, %75 : i1
  %77 = comb.or %76, %emitted_12 {sv.namehint = "done12"} : i1
  %78 = comb.xor %84, %true : i1
  %79 = comb.and %83, %78 : i1
  %emitted_13 = seq.compreg sym @emitted_13 %79, %clock reset %reset, %false : i1  
  %80 = comb.xor %emitted_13, %true : i1
  %81 = comb.and %80, %in0_valid : i1
  %82 = comb.and %out13_ready, %81 : i1
  %83 = comb.or %82, %emitted_13 {sv.namehint = "done13"} : i1
  %84 = comb.and %5, %11, %17, %23, %29, %35, %41, %47, %53, %59, %65, %71, %77, %83 {sv.namehint = "allDone"} : i1
  hw.output %84, %in0, %3, %in0, %9, %in0, %15, %in0, %21, %in0, %27, %in0, %33, %in0, %39, %in0, %45, %in0, %51, %in0, %57, %in0, %63, %in0, %69, %in0, %75, %in0, %81 : i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_mux_in_ui1_ui64_ui64_out_ui64(in %select : i1, in %select_valid : i1, in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c1_i2 = hw.constant 1 : i2
  %false = hw.constant false
  %0 = comb.concat %false, %select : i1, i1
  %1 = comb.shl %c1_i2, %0 : i2
  %2 = comb.mux %select, %in1_valid, %in0_valid : i1
  %3 = comb.and %2, %select_valid : i1
  %4 = comb.and %3, %out0_ready : i1
  %5 = comb.extract %1 from 0 : (i2) -> i1
  %6 = comb.and %5, %4 : i1
  %7 = comb.extract %1 from 1 : (i2) -> i1
  %8 = comb.and %7, %4 : i1
  %9 = comb.mux %select, %in1, %in0 : i64
  hw.output %4, %6, %8, %9, %3 : i1, i1, i1, i64, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @arith_cmpi_in_ui64_ui64_out_ui1_slt(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i1, out out0_valid : i1) {
  %0 = comb.and %in0_valid, %in1_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  %2 = comb.icmp slt %in0, %in1 : i64
  hw.output %1, %1, %2, %0 : i1, i1, i1, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_join_2ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c0_i0 = hw.constant 0 : i0
  %0 = comb.and %in0_valid, %in1_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  hw.output %1, %1, %c0_i0, %0 : i1, i1, i0, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_sink_in_ui64(in %in0 : i64, in %in0_valid : i1, out in0_ready : i1) {
  %true = hw.constant true
  hw.output %true : i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %24, %true : i1
  %1 = comb.and %5, %0 : i1
  %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
  %2 = comb.xor %emitted_0, %true : i1
  %3 = comb.and %2, %in0_valid : i1
  %4 = comb.and %out0_ready, %3 : i1
  %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
  %6 = comb.xor %24, %true : i1
  %7 = comb.and %11, %6 : i1
  %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
  %8 = comb.xor %emitted_1, %true : i1
  %9 = comb.and %8, %in0_valid : i1
  %10 = comb.and %out1_ready, %9 : i1
  %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
  %12 = comb.xor %24, %true : i1
  %13 = comb.and %17, %12 : i1
  %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
  %14 = comb.xor %emitted_2, %true : i1
  %15 = comb.and %14, %in0_valid : i1
  %16 = comb.and %out2_ready, %15 : i1
  %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
  %18 = comb.xor %24, %true : i1
  %19 = comb.and %23, %18 : i1
  %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
  %20 = comb.xor %emitted_3, %true : i1
  %21 = comb.and %20, %in0_valid : i1
  %22 = comb.and %out3_ready, %21 : i1
  %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
  %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
  hw.output %24, %in0, %3, %in0, %9, %in0, %15, %in0, %21 : i1, i1, i1, i1, i1, i1, i1, i1, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @arith_addi_in_ui64_ui64_out_ui64(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
  %0 = comb.and %in0_valid, %in1_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  %2 = comb.add %in0, %in1 : i64
  hw.output %1, %1, %2, %0 : i1, i1, i64, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_buffer_in_ui1_out_ui1_2slots_seq(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
  %0 = comb.xor %valid0_reg, %true : i1
  %1 = comb.or %0, %5 : i1
  %2 = comb.mux %1, %in0_valid, %valid0_reg : i1
  %3 = comb.mux %1, %in0, %data0_reg : i1
  %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %false : i1  
  %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
  %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
  %5 = comb.xor %ready0_reg, %true : i1
  %6 = comb.xor %17, %true : i1
  %7 = comb.and %6, %5 : i1
  %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
  %9 = comb.and %17, %ready0_reg : i1
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %8 : i1
  %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %15, %clock reset %reset, %false : i1  
  %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i1
  %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i1
  %14 = comb.xor %9, %true : i1
  %15 = comb.and %14, %13 : i1
  %valid1_reg = seq.compreg sym @valid1_reg %18, %clock reset %reset, %false : i1  
  %16 = comb.xor %valid1_reg, %true : i1
  %17 = comb.or %16, %21 : i1
  %18 = comb.mux %17, %4, %valid1_reg : i1
  %19 = comb.mux %17, %12, %data1_reg : i1
  %data1_reg = seq.compreg sym @data1_reg %19, %clock reset %reset, %false : i1  
  %ready1_reg = seq.compreg sym @ready1_reg %27, %clock reset %reset, %false : i1  
  %20 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
  %21 = comb.xor %ready1_reg, %true : i1
  %22 = comb.xor %out0_ready, %true : i1
  %23 = comb.and %22, %21 : i1
  %24 = comb.mux %23, %valid1_reg, %ready1_reg : i1
  %25 = comb.and %out0_ready, %ready1_reg : i1
  %26 = comb.xor %25, %true : i1
  %27 = comb.and %26, %24 : i1
  %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %31, %clock reset %reset, %false : i1  
  %28 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i1
  %29 = comb.mux %23, %data1_reg, %ctrl_data1_reg : i1
  %30 = comb.xor %25, %true : i1
  %31 = comb.and %30, %29 : i1
  hw.output %1, %28, %20 : i1, i1, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_join_3ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c0_i0 = hw.constant 0 : i0
  %0 = comb.and %in0_valid, %in1_valid, %in2_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  hw.output %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i0, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(in %cond : i1, in %cond_valid : i1, in %data : i64, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i64, out outTrue_valid : i1, out outFalse : i64, out outFalse_valid : i1) {
  %true = hw.constant true
  %0 = comb.and %cond_valid, %data_valid : i1
  %1 = comb.and %cond, %0 : i1
  %2 = comb.xor %cond, %true : i1
  %3 = comb.and %2, %0 : i1
  %4 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
  %5 = comb.and %4, %0 : i1
  hw.output %5, %5, %data, %1, %data, %3 : i1, i1, i64, i1, i64, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_load_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataFromMem : i64, in %dataFromMem_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataOut_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataFromMem_ready : i1, out ctrl_ready : i1, out dataOut : i64, out dataOut_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
  %0 = comb.and %addrIn0_valid, %ctrl_valid : i1
  %1 = comb.and %addrOut0_ready, %0 : i1
  hw.output %1, %dataOut_ready, %1, %dataFromMem, %dataFromMem_valid, %addrIn0, %0 : i1, i1, i1, i64, i1, i64, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_join_4ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c0_i0 = hw.constant 0 : i0
  %0 = comb.and %in0_valid, %in1_valid, %in2_valid, %in3_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  hw.output %1, %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i1, i0, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1, out out4 : i1, out out4_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %30, %true : i1
  %1 = comb.and %5, %0 : i1
  %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
  %2 = comb.xor %emitted_0, %true : i1
  %3 = comb.and %2, %in0_valid : i1
  %4 = comb.and %out0_ready, %3 : i1
  %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
  %6 = comb.xor %30, %true : i1
  %7 = comb.and %11, %6 : i1
  %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
  %8 = comb.xor %emitted_1, %true : i1
  %9 = comb.and %8, %in0_valid : i1
  %10 = comb.and %out1_ready, %9 : i1
  %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
  %12 = comb.xor %30, %true : i1
  %13 = comb.and %17, %12 : i1
  %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
  %14 = comb.xor %emitted_2, %true : i1
  %15 = comb.and %14, %in0_valid : i1
  %16 = comb.and %out2_ready, %15 : i1
  %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
  %18 = comb.xor %30, %true : i1
  %19 = comb.and %23, %18 : i1
  %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
  %20 = comb.xor %emitted_3, %true : i1
  %21 = comb.and %20, %in0_valid : i1
  %22 = comb.and %out3_ready, %21 : i1
  %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
  %24 = comb.xor %30, %true : i1
  %25 = comb.and %29, %24 : i1
  %emitted_4 = seq.compreg sym @emitted_4 %25, %clock reset %reset, %false : i1  
  %26 = comb.xor %emitted_4, %true : i1
  %27 = comb.and %26, %in0_valid : i1
  %28 = comb.and %out4_ready, %27 : i1
  %29 = comb.or %28, %emitted_4 {sv.namehint = "done4"} : i1
  %30 = comb.and %5, %11, %17, %23, %29 {sv.namehint = "allDone"} : i1
  hw.output %30, %in0, %3, %in0, %9, %in0, %15, %in0, %21, %in0, %27 : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1, out out3 : i64, out out3_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %24, %true : i1
  %1 = comb.and %5, %0 : i1
  %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
  %2 = comb.xor %emitted_0, %true : i1
  %3 = comb.and %2, %in0_valid : i1
  %4 = comb.and %out0_ready, %3 : i1
  %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
  %6 = comb.xor %24, %true : i1
  %7 = comb.and %11, %6 : i1
  %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
  %8 = comb.xor %emitted_1, %true : i1
  %9 = comb.and %8, %in0_valid : i1
  %10 = comb.and %out1_ready, %9 : i1
  %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
  %12 = comb.xor %24, %true : i1
  %13 = comb.and %17, %12 : i1
  %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
  %14 = comb.xor %emitted_2, %true : i1
  %15 = comb.and %14, %in0_valid : i1
  %16 = comb.and %out2_ready, %15 : i1
  %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
  %18 = comb.xor %24, %true : i1
  %19 = comb.and %23, %18 : i1
  %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
  %20 = comb.xor %emitted_3, %true : i1
  %21 = comb.and %20, %in0_valid : i1
  %22 = comb.and %out3_ready, %21 : i1
  %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
  %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
  hw.output %24, %in0, %3, %in0, %9, %in0, %15, %in0, %21 : i1, i64, i1, i64, i1, i64, i1, i64, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_fork_1ins_4outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %24, %true : i1
  %1 = comb.and %5, %0 : i1
  %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
  %2 = comb.xor %emitted_0, %true : i1
  %3 = comb.and %2, %in0_valid : i1
  %4 = comb.and %out0_ready, %3 : i1
  %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
  %6 = comb.xor %24, %true : i1
  %7 = comb.and %11, %6 : i1
  %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
  %8 = comb.xor %emitted_1, %true : i1
  %9 = comb.and %8, %in0_valid : i1
  %10 = comb.and %out1_ready, %9 : i1
  %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
  %12 = comb.xor %24, %true : i1
  %13 = comb.and %17, %12 : i1
  %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
  %14 = comb.xor %emitted_2, %true : i1
  %15 = comb.and %14, %in0_valid : i1
  %16 = comb.and %out2_ready, %15 : i1
  %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
  %18 = comb.xor %24, %true : i1
  %19 = comb.and %23, %18 : i1
  %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
  %20 = comb.xor %emitted_3, %true : i1
  %21 = comb.and %20, %in0_valid : i1
  %22 = comb.and %out3_ready, %21 : i1
  %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
  %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
  hw.output %24, %in0, %3, %in0, %9, %in0, %15, %in0, %21 : i1, i0, i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_mux_in_ui1_3ins_1outs_ctrl(in %select : i1, in %select_valid : i1, in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c1_i2 = hw.constant 1 : i2
  %false = hw.constant false
  %0 = comb.concat %false, %select : i1, i1
  %1 = comb.shl %c1_i2, %0 : i2
  %2 = comb.mux %select, %in1_valid, %in0_valid : i1
  %3 = comb.and %2, %select_valid : i1
  %4 = comb.and %3, %out0_ready : i1
  %5 = comb.extract %1 from 0 : (i2) -> i1
  %6 = comb.and %5, %4 : i1
  %7 = comb.extract %1 from 1 : (i2) -> i1
  %8 = comb.and %7, %4 : i1
  %9 = comb.mux %select, %in1, %in0 : i0
  hw.output %4, %6, %8, %9, %3 : i1, i1, i1, i0, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @handshake_cond_br_in_ui1_2ins_2outs_ctrl(in %cond : i1, in %cond_valid : i1, in %data : i0, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i0, out outTrue_valid : i1, out outFalse : i0, out outFalse_valid : i1) {
  %true = hw.constant true
  %0 = comb.and %cond_valid, %data_valid : i1
  %1 = comb.and %cond, %0 : i1
  %2 = comb.xor %cond, %true : i1
  %3 = comb.and %2, %0 : i1
  %4 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
  %5 = comb.and %4, %0 : i1
  hw.output %5, %5, %data, %1, %data, %3 : i1, i1, i0, i1, i0, i1
}

// -----// IR Dump After LowerSeqHLMem (lower-seq-hlmem) //----- //
hw.module @main(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
  %handshake_buffer0.in0_ready, %handshake_buffer0.out0, %handshake_buffer0.out0_valid = hw.instance "handshake_buffer0" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %in0: i0, in0_valid: %in0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_fork0.in0_ready, %handshake_fork0.out0, %handshake_fork0.out0_valid, %handshake_fork0.out1, %handshake_fork0.out1_valid, %handshake_fork0.out2, %handshake_fork0.out2_valid, %handshake_fork0.out3, %handshake_fork0.out3_valid, %handshake_fork0.out4, %handshake_fork0.out4_valid, %handshake_fork0.out5, %handshake_fork0.out5_valid, %handshake_fork0.out6, %handshake_fork0.out6_valid, %handshake_fork0.out7, %handshake_fork0.out7_valid, %handshake_fork0.out8, %handshake_fork0.out8_valid, %handshake_fork0.out9, %handshake_fork0.out9_valid, %handshake_fork0.out10, %handshake_fork0.out10_valid, %handshake_fork0.out11, %handshake_fork0.out11_valid, %handshake_fork0.out12, %handshake_fork0.out12_valid, %handshake_fork0.out13, %handshake_fork0.out13_valid = hw.instance "handshake_fork0" @handshake_fork_1ins_14outs_ctrl(in0: %handshake_buffer0.out0: i0, in0_valid: %handshake_buffer0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer14.in0_ready: i1, out1_ready: %handshake_buffer13.in0_ready: i1, out2_ready: %handshake_buffer12.in0_ready: i1, out3_ready: %handshake_buffer11.in0_ready: i1, out4_ready: %handshake_buffer10.in0_ready: i1, out5_ready: %handshake_buffer9.in0_ready: i1, out6_ready: %handshake_buffer8.in0_ready: i1, out7_ready: %handshake_buffer7.in0_ready: i1, out8_ready: %handshake_buffer6.in0_ready: i1, out9_ready: %handshake_buffer5.in0_ready: i1, out10_ready: %handshake_buffer4.in0_ready: i1, out11_ready: %handshake_buffer3.in0_ready: i1, out12_ready: %handshake_buffer2.in0_ready: i1, out13_ready: %handshake_buffer1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1, out4: i0, out4_valid: i1, out5: i0, out5_valid: i1, out6: i0, out6_valid: i1, out7: i0, out7_valid: i1, out8: i0, out8_valid: i1, out9: i0, out9_valid: i1, out10: i0, out10_valid: i1, out11: i0, out11_valid: i1, out12: i0, out12_valid: i1, out13: i0, out13_valid: i1)
  %handshake_buffer1.in0_ready, %handshake_buffer1.out0, %handshake_buffer1.out0_valid = hw.instance "handshake_buffer1" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out13: i0, in0_valid: %handshake_fork0.out13_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join4.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer2.in0_ready, %handshake_buffer2.out0, %handshake_buffer2.out0_valid = hw.instance "handshake_buffer2" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out12: i0, in0_valid: %handshake_fork0.out12_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join3.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer3.in0_ready, %handshake_buffer3.out0, %handshake_buffer3.out0_valid = hw.instance "handshake_buffer3" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out11: i0, in0_valid: %handshake_fork0.out11_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store3.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer4.in0_ready, %handshake_buffer4.out0, %handshake_buffer4.out0_valid = hw.instance "handshake_buffer4" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out10: i0, in0_valid: %handshake_fork0.out10_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer5.in0_ready, %handshake_buffer5.out0, %handshake_buffer5.out0_valid = hw.instance "handshake_buffer5" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out9: i0, in0_valid: %handshake_fork0.out9_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join2.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer6.in0_ready, %handshake_buffer6.out0, %handshake_buffer6.out0_valid = hw.instance "handshake_buffer6" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out8: i0, in0_valid: %handshake_fork0.out8_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer7.in0_ready, %handshake_buffer7.out0, %handshake_buffer7.out0_valid = hw.instance "handshake_buffer7" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out7: i0, in0_valid: %handshake_fork0.out7_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer8.in0_ready, %handshake_buffer8.out0, %handshake_buffer8.out0_valid = hw.instance "handshake_buffer8" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out6: i0, in0_valid: %handshake_fork0.out6_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant6.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer9.in0_ready, %handshake_buffer9.out0, %handshake_buffer9.out0_valid = hw.instance "handshake_buffer9" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out5: i0, in0_valid: %handshake_fork0.out5_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant5.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer10.in0_ready, %handshake_buffer10.out0, %handshake_buffer10.out0_valid = hw.instance "handshake_buffer10" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out4: i0, in0_valid: %handshake_fork0.out4_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant4.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer11.in0_ready, %handshake_buffer11.out0, %handshake_buffer11.out0_valid = hw.instance "handshake_buffer11" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out3: i0, in0_valid: %handshake_fork0.out3_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant3.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer12.in0_ready, %handshake_buffer12.out0, %handshake_buffer12.out0_valid = hw.instance "handshake_buffer12" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out2: i0, in0_valid: %handshake_fork0.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant2.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer13.in0_ready, %handshake_buffer13.out0, %handshake_buffer13.out0_valid = hw.instance "handshake_buffer13" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out1: i0, in0_valid: %handshake_fork0.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer14.in0_ready, %handshake_buffer14.out0, %handshake_buffer14.out0_valid = hw.instance "handshake_buffer14" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out0: i0, in0_valid: %handshake_fork0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_memory0.stData0_ready, %handshake_memory0.stAddr0_ready, %handshake_memory0.stDone0, %handshake_memory0.stDone0_valid = hw.instance "handshake_memory0" @handshake_memory_out_ui64_id2(stData0: %handshake_buffer114.out0: i64, stData0_valid: %handshake_buffer114.out0_valid: i1, stAddr0: %handshake_buffer113.out0: i64, stAddr0_valid: %handshake_buffer113.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, stDone0_ready: %handshake_buffer15.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stDone0: i0, stDone0_valid: i1)
  %handshake_buffer15.in0_ready, %handshake_buffer15.out0, %handshake_buffer15.out0_valid = hw.instance "handshake_buffer15" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory0.stDone0: i0, in0_valid: %handshake_memory0.stDone0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join5.in3_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_memory1.stData0_ready, %handshake_memory1.stAddr0_ready, %handshake_memory1.stData1_ready, %handshake_memory1.stAddr1_ready, %handshake_memory1.stData2_ready, %handshake_memory1.stAddr2_ready, %handshake_memory1.ldAddr0_ready, %handshake_memory1.ldData0, %handshake_memory1.ldData0_valid, %handshake_memory1.stDone0, %handshake_memory1.stDone0_valid, %handshake_memory1.stDone1, %handshake_memory1.stDone1_valid, %handshake_memory1.stDone2, %handshake_memory1.stDone2_valid, %handshake_memory1.ldDone0, %handshake_memory1.ldDone0_valid = hw.instance "handshake_memory1" @handshake_memory_out_ui64_id1(stData0: %handshake_buffer67.out0: i64, stData0_valid: %handshake_buffer67.out0_valid: i1, stAddr0: %handshake_buffer66.out0: i64, stAddr0_valid: %handshake_buffer66.out0_valid: i1, stData1: %handshake_buffer70.out0: i64, stData1_valid: %handshake_buffer70.out0_valid: i1, stAddr1: %handshake_buffer69.out0: i64, stAddr1_valid: %handshake_buffer69.out0_valid: i1, stData2: %handshake_buffer73.out0: i64, stData2_valid: %handshake_buffer73.out0_valid: i1, stAddr2: %handshake_buffer72.out0: i64, stAddr2_valid: %handshake_buffer72.out0_valid: i1, ldAddr0: %handshake_buffer110.out0: i64, ldAddr0_valid: %handshake_buffer110.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, ldData0_ready: %handshake_buffer20.in0_ready: i1, stDone0_ready: %handshake_buffer19.in0_ready: i1, stDone1_ready: %handshake_buffer18.in0_ready: i1, stDone2_ready: %handshake_buffer17.in0_ready: i1, ldDone0_ready: %handshake_buffer16.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
  %handshake_buffer16.in0_ready, %handshake_buffer16.out0, %handshake_buffer16.out0_valid = hw.instance "handshake_buffer16" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.ldDone0: i0, in0_valid: %handshake_memory1.ldDone0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join5.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer17.in0_ready, %handshake_buffer17.out0, %handshake_buffer17.out0_valid = hw.instance "handshake_buffer17" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone2: i0, in0_valid: %handshake_memory1.stDone2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in6_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer18.in0_ready, %handshake_buffer18.out0, %handshake_buffer18.out0_valid = hw.instance "handshake_buffer18" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone1: i0, in0_valid: %handshake_memory1.stDone1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer19.in0_ready, %handshake_buffer19.out0, %handshake_buffer19.out0_valid = hw.instance "handshake_buffer19" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone0: i0, in0_valid: %handshake_memory1.stDone0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork2.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer20.in0_ready, %handshake_buffer20.out0, %handshake_buffer20.out0_valid = hw.instance "handshake_buffer20" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory1.ldData0: i64, in0_valid: %handshake_memory1.ldData0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load1.dataFromMem_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork1.in0_ready, %handshake_fork1.out0, %handshake_fork1.out0_valid, %handshake_fork1.out1, %handshake_fork1.out1_valid = hw.instance "handshake_fork1" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer18.out0: i0, in0_valid: %handshake_buffer18.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer22.in0_ready: i1, out1_ready: %handshake_buffer21.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
  %handshake_buffer21.in0_ready, %handshake_buffer21.out0, %handshake_buffer21.out0_valid = hw.instance "handshake_buffer21" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out1: i0, in0_valid: %handshake_fork1.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in5_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer22.in0_ready, %handshake_buffer22.out0, %handshake_buffer22.out0_valid = hw.instance "handshake_buffer22" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out0: i0, in0_valid: %handshake_fork1.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join4.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_fork2.in0_ready, %handshake_fork2.out0, %handshake_fork2.out0_valid, %handshake_fork2.out1, %handshake_fork2.out1_valid, %handshake_fork2.out2, %handshake_fork2.out2_valid = hw.instance "handshake_fork2" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer19.out0: i0, in0_valid: %handshake_buffer19.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer25.in0_ready: i1, out1_ready: %handshake_buffer24.in0_ready: i1, out2_ready: %handshake_buffer23.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
  %handshake_buffer23.in0_ready, %handshake_buffer23.out0, %handshake_buffer23.out0_valid = hw.instance "handshake_buffer23" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out2: i0, in0_valid: %handshake_fork2.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in4_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer24.in0_ready, %handshake_buffer24.out0, %handshake_buffer24.out0_valid = hw.instance "handshake_buffer24" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out1: i0, in0_valid: %handshake_fork2.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join3.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer25.in0_ready, %handshake_buffer25.out0, %handshake_buffer25.out0_valid = hw.instance "handshake_buffer25" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out0: i0, in0_valid: %handshake_fork2.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join4.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_memory2.stData0_ready, %handshake_memory2.stAddr0_ready, %handshake_memory2.stData1_ready, %handshake_memory2.stAddr1_ready, %handshake_memory2.stData2_ready, %handshake_memory2.stAddr2_ready, %handshake_memory2.ldAddr0_ready, %handshake_memory2.ldData0, %handshake_memory2.ldData0_valid, %handshake_memory2.stDone0, %handshake_memory2.stDone0_valid, %handshake_memory2.stDone1, %handshake_memory2.stDone1_valid, %handshake_memory2.stDone2, %handshake_memory2.stDone2_valid, %handshake_memory2.ldDone0, %handshake_memory2.ldDone0_valid = hw.instance "handshake_memory2" @handshake_memory_out_ui64_id0(stData0: %handshake_buffer59.out0: i64, stData0_valid: %handshake_buffer59.out0_valid: i1, stAddr0: %handshake_buffer58.out0: i64, stAddr0_valid: %handshake_buffer58.out0_valid: i1, stData1: %handshake_buffer62.out0: i64, stData1_valid: %handshake_buffer62.out0_valid: i1, stAddr1: %handshake_buffer61.out0: i64, stAddr1_valid: %handshake_buffer61.out0_valid: i1, stData2: %handshake_buffer65.out0: i64, stData2_valid: %handshake_buffer65.out0_valid: i1, stAddr2: %handshake_buffer64.out0: i64, stAddr2_valid: %handshake_buffer64.out0_valid: i1, ldAddr0: %handshake_buffer108.out0: i64, ldAddr0_valid: %handshake_buffer108.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, ldData0_ready: %handshake_buffer30.in0_ready: i1, stDone0_ready: %handshake_buffer29.in0_ready: i1, stDone1_ready: %handshake_buffer28.in0_ready: i1, stDone2_ready: %handshake_buffer27.in0_ready: i1, ldDone0_ready: %handshake_buffer26.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
  %handshake_buffer26.in0_ready, %handshake_buffer26.out0, %handshake_buffer26.out0_valid = hw.instance "handshake_buffer26" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.ldDone0: i0, in0_valid: %handshake_memory2.ldDone0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join5.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer27.in0_ready, %handshake_buffer27.out0, %handshake_buffer27.out0_valid = hw.instance "handshake_buffer27" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone2: i0, in0_valid: %handshake_memory2.stDone2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in3_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer28.in0_ready, %handshake_buffer28.out0, %handshake_buffer28.out0_valid = hw.instance "handshake_buffer28" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone1: i0, in0_valid: %handshake_memory2.stDone1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork3.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer29.in0_ready, %handshake_buffer29.out0, %handshake_buffer29.out0_valid = hw.instance "handshake_buffer29" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone0: i0, in0_valid: %handshake_memory2.stDone0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork4.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer30.in0_ready, %handshake_buffer30.out0, %handshake_buffer30.out0_valid = hw.instance "handshake_buffer30" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory2.ldData0: i64, in0_valid: %handshake_memory2.ldData0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load0.dataFromMem_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork3.in0_ready, %handshake_fork3.out0, %handshake_fork3.out0_valid, %handshake_fork3.out1, %handshake_fork3.out1_valid = hw.instance "handshake_fork3" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer28.out0: i0, in0_valid: %handshake_buffer28.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer32.in0_ready: i1, out1_ready: %handshake_buffer31.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
  %handshake_buffer31.in0_ready, %handshake_buffer31.out0, %handshake_buffer31.out0_valid = hw.instance "handshake_buffer31" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out1: i0, in0_valid: %handshake_fork3.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join2.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer32.in0_ready, %handshake_buffer32.out0, %handshake_buffer32.out0_valid = hw.instance "handshake_buffer32" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out0: i0, in0_valid: %handshake_fork3.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_fork4.in0_ready, %handshake_fork4.out0, %handshake_fork4.out0_valid, %handshake_fork4.out1, %handshake_fork4.out1_valid, %handshake_fork4.out2, %handshake_fork4.out2_valid = hw.instance "handshake_fork4" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer29.out0: i0, in0_valid: %handshake_buffer29.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer35.in0_ready: i1, out1_ready: %handshake_buffer34.in0_ready: i1, out2_ready: %handshake_buffer33.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
  %handshake_buffer33.in0_ready, %handshake_buffer33.out0, %handshake_buffer33.out0_valid = hw.instance "handshake_buffer33" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out2: i0, in0_valid: %handshake_fork4.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join1.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer34.in0_ready, %handshake_buffer34.out0, %handshake_buffer34.out0_valid = hw.instance "handshake_buffer34" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out1: i0, in0_valid: %handshake_fork4.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join2.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer35.in0_ready, %handshake_buffer35.out0, %handshake_buffer35.out0_valid = hw.instance "handshake_buffer35" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out0: i0, in0_valid: %handshake_fork4.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_join0.in0_ready, %handshake_join0.in1_ready, %handshake_join0.in2_ready, %handshake_join0.in3_ready, %handshake_join0.in4_ready, %handshake_join0.in5_ready, %handshake_join0.in6_ready, %handshake_join0.out0, %handshake_join0.out0_valid = hw.instance "handshake_join0" @handshake_join_7ins_1outs_ctrl(in0: %handshake_buffer4.out0: i0, in0_valid: %handshake_buffer4.out0_valid: i1, in1: %handshake_buffer35.out0: i0, in1_valid: %handshake_buffer35.out0_valid: i1, in2: %handshake_buffer32.out0: i0, in2_valid: %handshake_buffer32.out0_valid: i1, in3: %handshake_buffer27.out0: i0, in3_valid: %handshake_buffer27.out0_valid: i1, in4: %handshake_buffer23.out0: i0, in4_valid: %handshake_buffer23.out0_valid: i1, in5: %handshake_buffer21.out0: i0, in5_valid: %handshake_buffer21.out0_valid: i1, in6: %handshake_buffer17.out0: i0, in6_valid: %handshake_buffer17.out0_valid: i1, out0_ready: %handshake_buffer36.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, in4_ready: i1, in5_ready: i1, in6_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer36.in0_ready, %handshake_buffer36.out0, %handshake_buffer36.out0_valid = hw.instance "handshake_buffer36" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join0.out0: i0, in0_valid: %handshake_join0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_constant0.ctrl_ready, %handshake_constant0.out0, %handshake_constant0.out0_valid = hw.instance "handshake_constant0" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer14.out0: i0, ctrl_valid: %handshake_buffer14.out0_valid: i1, out0_ready: %handshake_buffer37.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer37.in0_ready, %handshake_buffer37.out0, %handshake_buffer37.out0_valid = hw.instance "handshake_buffer37" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant0.out0: i64, in0_valid: %handshake_constant0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux2.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant1.ctrl_ready, %handshake_constant1.out0, %handshake_constant1.out0_valid = hw.instance "handshake_constant1" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer13.out0: i0, ctrl_valid: %handshake_buffer13.out0_valid: i1, out0_ready: %handshake_buffer38.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer38.in0_ready, %handshake_buffer38.out0, %handshake_buffer38.out0_valid = hw.instance "handshake_buffer38" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant1.out0: i64, in0_valid: %handshake_constant1.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork5.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork5.in0_ready, %handshake_fork5.out0, %handshake_fork5.out0_valid, %handshake_fork5.out1, %handshake_fork5.out1_valid = hw.instance "handshake_fork5" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer38.out0: i64, in0_valid: %handshake_buffer38.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer40.in0_ready: i1, out1_ready: %handshake_buffer39.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer39.in0_ready, %handshake_buffer39.out0, %handshake_buffer39.out0_valid = hw.instance "handshake_buffer39" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out1: i64, in0_valid: %handshake_fork5.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store2.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer40.in0_ready, %handshake_buffer40.out0, %handshake_buffer40.out0_valid = hw.instance "handshake_buffer40" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out0: i64, in0_valid: %handshake_fork5.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store5.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant2.ctrl_ready, %handshake_constant2.out0, %handshake_constant2.out0_valid = hw.instance "handshake_constant2" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer12.out0: i0, ctrl_valid: %handshake_buffer12.out0_valid: i1, out0_ready: %handshake_buffer41.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer41.in0_ready, %handshake_buffer41.out0, %handshake_buffer41.out0_valid = hw.instance "handshake_buffer41" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant2.out0: i64, in0_valid: %handshake_constant2.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork6.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork6.in0_ready, %handshake_fork6.out0, %handshake_fork6.out0_valid, %handshake_fork6.out1, %handshake_fork6.out1_valid = hw.instance "handshake_fork6" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer41.out0: i64, in0_valid: %handshake_buffer41.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer43.in0_ready: i1, out1_ready: %handshake_buffer42.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer42.in0_ready, %handshake_buffer42.out0, %handshake_buffer42.out0_valid = hw.instance "handshake_buffer42" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out1: i64, in0_valid: %handshake_fork6.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store1.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer43.in0_ready, %handshake_buffer43.out0, %handshake_buffer43.out0_valid = hw.instance "handshake_buffer43" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out0: i64, in0_valid: %handshake_fork6.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store4.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant3.ctrl_ready, %handshake_constant3.out0, %handshake_constant3.out0_valid = hw.instance "handshake_constant3" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer11.out0: i0, ctrl_valid: %handshake_buffer11.out0_valid: i1, out0_ready: %handshake_buffer44.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer44.in0_ready, %handshake_buffer44.out0, %handshake_buffer44.out0_valid = hw.instance "handshake_buffer44" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant3.out0: i64, in0_valid: %handshake_constant3.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork7.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork7.in0_ready, %handshake_fork7.out0, %handshake_fork7.out0_valid, %handshake_fork7.out1, %handshake_fork7.out1_valid = hw.instance "handshake_fork7" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer44.out0: i64, in0_valid: %handshake_buffer44.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer46.in0_ready: i1, out1_ready: %handshake_buffer45.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer45.in0_ready, %handshake_buffer45.out0, %handshake_buffer45.out0_valid = hw.instance "handshake_buffer45" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out1: i64, in0_valid: %handshake_fork7.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store0.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer46.in0_ready, %handshake_buffer46.out0, %handshake_buffer46.out0_valid = hw.instance "handshake_buffer46" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out0: i64, in0_valid: %handshake_fork7.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store3.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant4.ctrl_ready, %handshake_constant4.out0, %handshake_constant4.out0_valid = hw.instance "handshake_constant4" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer10.out0: i0, ctrl_valid: %handshake_buffer10.out0_valid: i1, out0_ready: %handshake_buffer47.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer47.in0_ready, %handshake_buffer47.out0, %handshake_buffer47.out0_valid = hw.instance "handshake_buffer47" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant4.out0: i64, in0_valid: %handshake_constant4.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork8.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork8.in0_ready, %handshake_fork8.out0, %handshake_fork8.out0_valid, %handshake_fork8.out1, %handshake_fork8.out1_valid = hw.instance "handshake_fork8" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer47.out0: i64, in0_valid: %handshake_buffer47.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer49.in0_ready: i1, out1_ready: %handshake_buffer48.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer48.in0_ready, %handshake_buffer48.out0, %handshake_buffer48.out0_valid = hw.instance "handshake_buffer48" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out1: i64, in0_valid: %handshake_fork8.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store2.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer49.in0_ready, %handshake_buffer49.out0, %handshake_buffer49.out0_valid = hw.instance "handshake_buffer49" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out0: i64, in0_valid: %handshake_fork8.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store5.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant5.ctrl_ready, %handshake_constant5.out0, %handshake_constant5.out0_valid = hw.instance "handshake_constant5" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer9.out0: i0, ctrl_valid: %handshake_buffer9.out0_valid: i1, out0_ready: %handshake_buffer50.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer50.in0_ready, %handshake_buffer50.out0, %handshake_buffer50.out0_valid = hw.instance "handshake_buffer50" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant5.out0: i64, in0_valid: %handshake_constant5.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork9.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork9.in0_ready, %handshake_fork9.out0, %handshake_fork9.out0_valid, %handshake_fork9.out1, %handshake_fork9.out1_valid, %handshake_fork9.out2, %handshake_fork9.out2_valid = hw.instance "handshake_fork9" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer50.out0: i64, in0_valid: %handshake_buffer50.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer53.in0_ready: i1, out1_ready: %handshake_buffer52.in0_ready: i1, out2_ready: %handshake_buffer51.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
  %handshake_buffer51.in0_ready, %handshake_buffer51.out0, %handshake_buffer51.out0_valid = hw.instance "handshake_buffer51" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out2: i64, in0_valid: %handshake_fork9.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store1.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer52.in0_ready, %handshake_buffer52.out0, %handshake_buffer52.out0_valid = hw.instance "handshake_buffer52" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out1: i64, in0_valid: %handshake_fork9.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store4.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer53.in0_ready, %handshake_buffer53.out0, %handshake_buffer53.out0_valid = hw.instance "handshake_buffer53" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out0: i64, in0_valid: %handshake_fork9.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux3.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant6.ctrl_ready, %handshake_constant6.out0, %handshake_constant6.out0_valid = hw.instance "handshake_constant6" @handshake_constant_c0_out_ui64(ctrl: %handshake_buffer8.out0: i0, ctrl_valid: %handshake_buffer8.out0_valid: i1, out0_ready: %handshake_buffer54.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer54.in0_ready, %handshake_buffer54.out0, %handshake_buffer54.out0_valid = hw.instance "handshake_buffer54" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant6.out0: i64, in0_valid: %handshake_constant6.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork10.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork10.in0_ready, %handshake_fork10.out0, %handshake_fork10.out0_valid, %handshake_fork10.out1, %handshake_fork10.out1_valid, %handshake_fork10.out2, %handshake_fork10.out2_valid = hw.instance "handshake_fork10" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer54.out0: i64, in0_valid: %handshake_buffer54.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer57.in0_ready: i1, out1_ready: %handshake_buffer56.in0_ready: i1, out2_ready: %handshake_buffer55.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
  %handshake_buffer55.in0_ready, %handshake_buffer55.out0, %handshake_buffer55.out0_valid = hw.instance "handshake_buffer55" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out2: i64, in0_valid: %handshake_fork10.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store0.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer56.in0_ready, %handshake_buffer56.out0, %handshake_buffer56.out0_valid = hw.instance "handshake_buffer56" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out1: i64, in0_valid: %handshake_fork10.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store3.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer57.in0_ready, %handshake_buffer57.out0, %handshake_buffer57.out0_valid = hw.instance "handshake_buffer57" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out0: i64, in0_valid: %handshake_fork10.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux1.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_store0.addrIn0_ready, %handshake_store0.dataIn_ready, %handshake_store0.ctrl_ready, %handshake_store0.dataToMem, %handshake_store0.dataToMem_valid, %handshake_store0.addrOut0, %handshake_store0.addrOut0_valid = hw.instance "handshake_store0" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer55.out0: i64, addrIn0_valid: %handshake_buffer55.out0_valid: i1, dataIn: %handshake_buffer45.out0: i64, dataIn_valid: %handshake_buffer45.out0_valid: i1, ctrl: %handshake_buffer7.out0: i0, ctrl_valid: %handshake_buffer7.out0_valid: i1, dataToMem_ready: %handshake_buffer59.in0_ready: i1, addrOut0_ready: %handshake_buffer58.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer58.in0_ready, %handshake_buffer58.out0, %handshake_buffer58.out0_valid = hw.instance "handshake_buffer58" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.addrOut0: i64, in0_valid: %handshake_store0.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer59.in0_ready, %handshake_buffer59.out0, %handshake_buffer59.out0_valid = hw.instance "handshake_buffer59" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.dataToMem: i64, in0_valid: %handshake_store0.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_join1.in0_ready, %handshake_join1.in1_ready, %handshake_join1.out0, %handshake_join1.out0_valid = hw.instance "handshake_join1" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer6.out0: i0, in0_valid: %handshake_buffer6.out0_valid: i1, in1: %handshake_buffer33.out0: i0, in1_valid: %handshake_buffer33.out0_valid: i1, out0_ready: %handshake_buffer60.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer60.in0_ready, %handshake_buffer60.out0, %handshake_buffer60.out0_valid = hw.instance "handshake_buffer60" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join1.out0: i0, in0_valid: %handshake_join1.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_store1.addrIn0_ready, %handshake_store1.dataIn_ready, %handshake_store1.ctrl_ready, %handshake_store1.dataToMem, %handshake_store1.dataToMem_valid, %handshake_store1.addrOut0, %handshake_store1.addrOut0_valid = hw.instance "handshake_store1" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer51.out0: i64, addrIn0_valid: %handshake_buffer51.out0_valid: i1, dataIn: %handshake_buffer42.out0: i64, dataIn_valid: %handshake_buffer42.out0_valid: i1, ctrl: %handshake_buffer60.out0: i0, ctrl_valid: %handshake_buffer60.out0_valid: i1, dataToMem_ready: %handshake_buffer62.in0_ready: i1, addrOut0_ready: %handshake_buffer61.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer61.in0_ready, %handshake_buffer61.out0, %handshake_buffer61.out0_valid = hw.instance "handshake_buffer61" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.addrOut0: i64, in0_valid: %handshake_store1.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer62.in0_ready, %handshake_buffer62.out0, %handshake_buffer62.out0_valid = hw.instance "handshake_buffer62" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.dataToMem: i64, in0_valid: %handshake_store1.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stData1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_join2.in0_ready, %handshake_join2.in1_ready, %handshake_join2.in2_ready, %handshake_join2.out0, %handshake_join2.out0_valid = hw.instance "handshake_join2" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer5.out0: i0, in0_valid: %handshake_buffer5.out0_valid: i1, in1: %handshake_buffer34.out0: i0, in1_valid: %handshake_buffer34.out0_valid: i1, in2: %handshake_buffer31.out0: i0, in2_valid: %handshake_buffer31.out0_valid: i1, out0_ready: %handshake_buffer63.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer63.in0_ready, %handshake_buffer63.out0, %handshake_buffer63.out0_valid = hw.instance "handshake_buffer63" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join2.out0: i0, in0_valid: %handshake_join2.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store2.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_store2.addrIn0_ready, %handshake_store2.dataIn_ready, %handshake_store2.ctrl_ready, %handshake_store2.dataToMem, %handshake_store2.dataToMem_valid, %handshake_store2.addrOut0, %handshake_store2.addrOut0_valid = hw.instance "handshake_store2" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer48.out0: i64, addrIn0_valid: %handshake_buffer48.out0_valid: i1, dataIn: %handshake_buffer39.out0: i64, dataIn_valid: %handshake_buffer39.out0_valid: i1, ctrl: %handshake_buffer63.out0: i0, ctrl_valid: %handshake_buffer63.out0_valid: i1, dataToMem_ready: %handshake_buffer65.in0_ready: i1, addrOut0_ready: %handshake_buffer64.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer64.in0_ready, %handshake_buffer64.out0, %handshake_buffer64.out0_valid = hw.instance "handshake_buffer64" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.addrOut0: i64, in0_valid: %handshake_store2.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer65.in0_ready, %handshake_buffer65.out0, %handshake_buffer65.out0_valid = hw.instance "handshake_buffer65" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.dataToMem: i64, in0_valid: %handshake_store2.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stData2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_store3.addrIn0_ready, %handshake_store3.dataIn_ready, %handshake_store3.ctrl_ready, %handshake_store3.dataToMem, %handshake_store3.dataToMem_valid, %handshake_store3.addrOut0, %handshake_store3.addrOut0_valid = hw.instance "handshake_store3" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer56.out0: i64, addrIn0_valid: %handshake_buffer56.out0_valid: i1, dataIn: %handshake_buffer46.out0: i64, dataIn_valid: %handshake_buffer46.out0_valid: i1, ctrl: %handshake_buffer3.out0: i0, ctrl_valid: %handshake_buffer3.out0_valid: i1, dataToMem_ready: %handshake_buffer67.in0_ready: i1, addrOut0_ready: %handshake_buffer66.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer66.in0_ready, %handshake_buffer66.out0, %handshake_buffer66.out0_valid = hw.instance "handshake_buffer66" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.addrOut0: i64, in0_valid: %handshake_store3.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer67.in0_ready, %handshake_buffer67.out0, %handshake_buffer67.out0_valid = hw.instance "handshake_buffer67" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.dataToMem: i64, in0_valid: %handshake_store3.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_join3.in0_ready, %handshake_join3.in1_ready, %handshake_join3.out0, %handshake_join3.out0_valid = hw.instance "handshake_join3" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer2.out0: i0, in0_valid: %handshake_buffer2.out0_valid: i1, in1: %handshake_buffer24.out0: i0, in1_valid: %handshake_buffer24.out0_valid: i1, out0_ready: %handshake_buffer68.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer68.in0_ready, %handshake_buffer68.out0, %handshake_buffer68.out0_valid = hw.instance "handshake_buffer68" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join3.out0: i0, in0_valid: %handshake_join3.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store4.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_store4.addrIn0_ready, %handshake_store4.dataIn_ready, %handshake_store4.ctrl_ready, %handshake_store4.dataToMem, %handshake_store4.dataToMem_valid, %handshake_store4.addrOut0, %handshake_store4.addrOut0_valid = hw.instance "handshake_store4" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer52.out0: i64, addrIn0_valid: %handshake_buffer52.out0_valid: i1, dataIn: %handshake_buffer43.out0: i64, dataIn_valid: %handshake_buffer43.out0_valid: i1, ctrl: %handshake_buffer68.out0: i0, ctrl_valid: %handshake_buffer68.out0_valid: i1, dataToMem_ready: %handshake_buffer70.in0_ready: i1, addrOut0_ready: %handshake_buffer69.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer69.in0_ready, %handshake_buffer69.out0, %handshake_buffer69.out0_valid = hw.instance "handshake_buffer69" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.addrOut0: i64, in0_valid: %handshake_store4.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer70.in0_ready, %handshake_buffer70.out0, %handshake_buffer70.out0_valid = hw.instance "handshake_buffer70" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.dataToMem: i64, in0_valid: %handshake_store4.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stData1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_join4.in0_ready, %handshake_join4.in1_ready, %handshake_join4.in2_ready, %handshake_join4.out0, %handshake_join4.out0_valid = hw.instance "handshake_join4" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer1.out0: i0, in0_valid: %handshake_buffer1.out0_valid: i1, in1: %handshake_buffer25.out0: i0, in1_valid: %handshake_buffer25.out0_valid: i1, in2: %handshake_buffer22.out0: i0, in2_valid: %handshake_buffer22.out0_valid: i1, out0_ready: %handshake_buffer71.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer71.in0_ready, %handshake_buffer71.out0, %handshake_buffer71.out0_valid = hw.instance "handshake_buffer71" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join4.out0: i0, in0_valid: %handshake_join4.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store5.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_store5.addrIn0_ready, %handshake_store5.dataIn_ready, %handshake_store5.ctrl_ready, %handshake_store5.dataToMem, %handshake_store5.dataToMem_valid, %handshake_store5.addrOut0, %handshake_store5.addrOut0_valid = hw.instance "handshake_store5" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer49.out0: i64, addrIn0_valid: %handshake_buffer49.out0_valid: i1, dataIn: %handshake_buffer40.out0: i64, dataIn_valid: %handshake_buffer40.out0_valid: i1, ctrl: %handshake_buffer71.out0: i0, ctrl_valid: %handshake_buffer71.out0_valid: i1, dataToMem_ready: %handshake_buffer73.in0_ready: i1, addrOut0_ready: %handshake_buffer72.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer72.in0_ready, %handshake_buffer72.out0, %handshake_buffer72.out0_valid = hw.instance "handshake_buffer72" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.addrOut0: i64, in0_valid: %handshake_store5.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer73.in0_ready, %handshake_buffer73.out0, %handshake_buffer73.out0_valid = hw.instance "handshake_buffer73" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.dataToMem: i64, in0_valid: %handshake_store5.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stData2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer74.in0_ready, %handshake_buffer74.out0, %handshake_buffer74.out0_valid = hw.instance "handshake_buffer74" @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in0: %handshake_fork14.out0: i1, in0_valid: %handshake_fork14.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork11.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_fork11.in0_ready, %handshake_fork11.out0, %handshake_fork11.out0_valid, %handshake_fork11.out1, %handshake_fork11.out1_valid, %handshake_fork11.out2, %handshake_fork11.out2_valid, %handshake_fork11.out3, %handshake_fork11.out3_valid = hw.instance "handshake_fork11" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in0: %handshake_buffer74.out0: i1, in0_valid: %handshake_buffer74.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer78.in0_ready: i1, out1_ready: %handshake_buffer77.in0_ready: i1, out2_ready: %handshake_buffer76.in0_ready: i1, out3_ready: %handshake_buffer75.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1)
  %handshake_buffer75.in0_ready, %handshake_buffer75.out0, %handshake_buffer75.out0_valid = hw.instance "handshake_buffer75" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out3: i1, in0_valid: %handshake_fork11.out3_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux0.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer76.in0_ready, %handshake_buffer76.out0, %handshake_buffer76.out0_valid = hw.instance "handshake_buffer76" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out2: i1, in0_valid: %handshake_fork11.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux1.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer77.in0_ready, %handshake_buffer77.out0, %handshake_buffer77.out0_valid = hw.instance "handshake_buffer77" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out1: i1, in0_valid: %handshake_fork11.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux2.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer78.in0_ready, %handshake_buffer78.out0, %handshake_buffer78.out0_valid = hw.instance "handshake_buffer78" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out0: i1, in0_valid: %handshake_fork11.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux3.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_mux0.select_ready, %handshake_mux0.in0_ready, %handshake_mux0.in1_ready, %handshake_mux0.out0, %handshake_mux0.out0_valid = hw.instance "handshake_mux0" @handshake_mux_in_ui1_3ins_1outs_ctrl(select: %handshake_buffer75.out0: i1, select_valid: %handshake_buffer75.out0_valid: i1, in0: %handshake_buffer36.out0: i0, in0_valid: %handshake_buffer36.out0_valid: i1, in1: %handshake_buffer107.out0: i0, in1_valid: %handshake_buffer107.out0_valid: i1, out0_ready: %handshake_buffer79.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer79.in0_ready, %handshake_buffer79.out0, %handshake_buffer79.out0_valid = hw.instance "handshake_buffer79" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_mux0.out0: i0, in0_valid: %handshake_mux0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br3.data_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_mux1.select_ready, %handshake_mux1.in0_ready, %handshake_mux1.in1_ready, %handshake_mux1.out0, %handshake_mux1.out0_valid = hw.instance "handshake_mux1" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer76.out0: i1, select_valid: %handshake_buffer76.out0_valid: i1, in0: %handshake_buffer57.out0: i64, in0_valid: %handshake_buffer57.out0_valid: i1, in1: %handshake_buffer115.out0: i64, in1_valid: %handshake_buffer115.out0_valid: i1, out0_ready: %handshake_buffer80.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer80.in0_ready, %handshake_buffer80.out0, %handshake_buffer80.out0_valid = hw.instance "handshake_buffer80" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux1.out0: i64, in0_valid: %handshake_mux1.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork12.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork12.in0_ready, %handshake_fork12.out0, %handshake_fork12.out0_valid, %handshake_fork12.out1, %handshake_fork12.out1_valid = hw.instance "handshake_fork12" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer80.out0: i64, in0_valid: %handshake_buffer80.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer82.in0_ready: i1, out1_ready: %handshake_buffer81.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer81.in0_ready, %handshake_buffer81.out0, %handshake_buffer81.out0_valid = hw.instance "handshake_buffer81" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out1: i64, in0_valid: %handshake_fork12.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br0.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer82.in0_ready, %handshake_buffer82.out0, %handshake_buffer82.out0_valid = hw.instance "handshake_buffer82" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out0: i64, in0_valid: %handshake_fork12.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_cmpi0.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_mux2.select_ready, %handshake_mux2.in0_ready, %handshake_mux2.in1_ready, %handshake_mux2.out0, %handshake_mux2.out0_valid = hw.instance "handshake_mux2" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer77.out0: i1, select_valid: %handshake_buffer77.out0_valid: i1, in0: %handshake_buffer37.out0: i64, in0_valid: %handshake_buffer37.out0_valid: i1, in1: %handshake_buffer97.out0: i64, in1_valid: %handshake_buffer97.out0_valid: i1, out0_ready: %handshake_buffer83.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer83.in0_ready, %handshake_buffer83.out0, %handshake_buffer83.out0_valid = hw.instance "handshake_buffer83" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux2.out0: i64, in0_valid: %handshake_mux2.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork13.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork13.in0_ready, %handshake_fork13.out0, %handshake_fork13.out0_valid, %handshake_fork13.out1, %handshake_fork13.out1_valid = hw.instance "handshake_fork13" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer83.out0: i64, in0_valid: %handshake_buffer83.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer85.in0_ready: i1, out1_ready: %handshake_buffer84.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer84.in0_ready, %handshake_buffer84.out0, %handshake_buffer84.out0_valid = hw.instance "handshake_buffer84" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out1: i64, in0_valid: %handshake_fork13.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br1.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer85.in0_ready, %handshake_buffer85.out0, %handshake_buffer85.out0_valid = hw.instance "handshake_buffer85" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out0: i64, in0_valid: %handshake_fork13.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_cmpi0.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_mux3.select_ready, %handshake_mux3.in0_ready, %handshake_mux3.in1_ready, %handshake_mux3.out0, %handshake_mux3.out0_valid = hw.instance "handshake_mux3" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer78.out0: i1, select_valid: %handshake_buffer78.out0_valid: i1, in0: %handshake_buffer53.out0: i64, in0_valid: %handshake_buffer53.out0_valid: i1, in1: %handshake_buffer100.out0: i64, in1_valid: %handshake_buffer100.out0_valid: i1, out0_ready: %handshake_buffer86.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer86.in0_ready, %handshake_buffer86.out0, %handshake_buffer86.out0_valid = hw.instance "handshake_buffer86" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux3.out0: i64, in0_valid: %handshake_mux3.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br2.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %arith_cmpi0.in0_ready, %arith_cmpi0.in1_ready, %arith_cmpi0.out0, %arith_cmpi0.out0_valid = hw.instance "arith_cmpi0" @arith_cmpi_in_ui64_ui64_out_ui1_slt(in0: %handshake_buffer82.out0: i64, in0_valid: %handshake_buffer82.out0_valid: i1, in1: %handshake_buffer85.out0: i64, in1_valid: %handshake_buffer85.out0_valid: i1, out0_ready: %handshake_buffer87.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer87.in0_ready, %handshake_buffer87.out0, %handshake_buffer87.out0_valid = hw.instance "handshake_buffer87" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %arith_cmpi0.out0: i1, in0_valid: %arith_cmpi0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork14.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_fork14.in0_ready, %handshake_fork14.out0, %handshake_fork14.out0_valid, %handshake_fork14.out1, %handshake_fork14.out1_valid, %handshake_fork14.out2, %handshake_fork14.out2_valid, %handshake_fork14.out3, %handshake_fork14.out3_valid, %handshake_fork14.out4, %handshake_fork14.out4_valid = hw.instance "handshake_fork14" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in0: %handshake_buffer87.out0: i1, in0_valid: %handshake_buffer87.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer74.in0_ready: i1, out1_ready: %handshake_buffer91.in0_ready: i1, out2_ready: %handshake_buffer90.in0_ready: i1, out3_ready: %handshake_buffer89.in0_ready: i1, out4_ready: %handshake_buffer88.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1, out4: i1, out4_valid: i1)
  %handshake_buffer88.in0_ready, %handshake_buffer88.out0, %handshake_buffer88.out0_valid = hw.instance "handshake_buffer88" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out4: i1, in0_valid: %handshake_fork14.out4_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br0.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer89.in0_ready, %handshake_buffer89.out0, %handshake_buffer89.out0_valid = hw.instance "handshake_buffer89" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out3: i1, in0_valid: %handshake_fork14.out3_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br1.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer90.in0_ready, %handshake_buffer90.out0, %handshake_buffer90.out0_valid = hw.instance "handshake_buffer90" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out2: i1, in0_valid: %handshake_fork14.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br2.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer91.in0_ready, %handshake_buffer91.out0, %handshake_buffer91.out0_valid = hw.instance "handshake_buffer91" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out1: i1, in0_valid: %handshake_fork14.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br3.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_cond_br0.cond_ready, %handshake_cond_br0.data_ready, %handshake_cond_br0.outTrue, %handshake_cond_br0.outTrue_valid, %handshake_cond_br0.outFalse, %handshake_cond_br0.outFalse_valid = hw.instance "handshake_cond_br0" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer88.out0: i1, cond_valid: %handshake_buffer88.out0_valid: i1, data: %handshake_buffer81.out0: i64, data_valid: %handshake_buffer81.out0_valid: i1, outTrue_ready: %handshake_buffer92.in0_ready: i1, outFalse_ready: %handshake_sink0.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
  %handshake_buffer92.in0_ready, %handshake_buffer92.out0, %handshake_buffer92.out0_valid = hw.instance "handshake_buffer92" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br0.outTrue: i64, in0_valid: %handshake_cond_br0.outTrue_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork15.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_sink0.in0_ready = hw.instance "handshake_sink0" @handshake_sink_in_ui64(in0: %handshake_cond_br0.outFalse: i64, in0_valid: %handshake_cond_br0.outFalse_valid: i1) -> (in0_ready: i1)
  %handshake_fork15.in0_ready, %handshake_fork15.out0, %handshake_fork15.out0_valid, %handshake_fork15.out1, %handshake_fork15.out1_valid, %handshake_fork15.out2, %handshake_fork15.out2_valid, %handshake_fork15.out3, %handshake_fork15.out3_valid = hw.instance "handshake_fork15" @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in0: %handshake_buffer92.out0: i64, in0_valid: %handshake_buffer92.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer96.in0_ready: i1, out1_ready: %handshake_buffer95.in0_ready: i1, out2_ready: %handshake_buffer94.in0_ready: i1, out3_ready: %handshake_buffer93.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1, out3: i64, out3_valid: i1)
  %handshake_buffer93.in0_ready, %handshake_buffer93.out0, %handshake_buffer93.out0_valid = hw.instance "handshake_buffer93" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out3: i64, in0_valid: %handshake_fork15.out3_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store6.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer94.in0_ready, %handshake_buffer94.out0, %handshake_buffer94.out0_valid = hw.instance "handshake_buffer94" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out2: i64, in0_valid: %handshake_fork15.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load1.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer95.in0_ready, %handshake_buffer95.out0, %handshake_buffer95.out0_valid = hw.instance "handshake_buffer95" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out1: i64, in0_valid: %handshake_fork15.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load0.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer96.in0_ready, %handshake_buffer96.out0, %handshake_buffer96.out0_valid = hw.instance "handshake_buffer96" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out0: i64, in0_valid: %handshake_fork15.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_addi1.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_cond_br1.cond_ready, %handshake_cond_br1.data_ready, %handshake_cond_br1.outTrue, %handshake_cond_br1.outTrue_valid, %handshake_cond_br1.outFalse, %handshake_cond_br1.outFalse_valid = hw.instance "handshake_cond_br1" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer89.out0: i1, cond_valid: %handshake_buffer89.out0_valid: i1, data: %handshake_buffer84.out0: i64, data_valid: %handshake_buffer84.out0_valid: i1, outTrue_ready: %handshake_buffer97.in0_ready: i1, outFalse_ready: %handshake_sink1.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
  %handshake_buffer97.in0_ready, %handshake_buffer97.out0, %handshake_buffer97.out0_valid = hw.instance "handshake_buffer97" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br1.outTrue: i64, in0_valid: %handshake_cond_br1.outTrue_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux2.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_sink1.in0_ready = hw.instance "handshake_sink1" @handshake_sink_in_ui64(in0: %handshake_cond_br1.outFalse: i64, in0_valid: %handshake_cond_br1.outFalse_valid: i1) -> (in0_ready: i1)
  %handshake_cond_br2.cond_ready, %handshake_cond_br2.data_ready, %handshake_cond_br2.outTrue, %handshake_cond_br2.outTrue_valid, %handshake_cond_br2.outFalse, %handshake_cond_br2.outFalse_valid = hw.instance "handshake_cond_br2" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer90.out0: i1, cond_valid: %handshake_buffer90.out0_valid: i1, data: %handshake_buffer86.out0: i64, data_valid: %handshake_buffer86.out0_valid: i1, outTrue_ready: %handshake_buffer98.in0_ready: i1, outFalse_ready: %handshake_sink2.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
  %handshake_buffer98.in0_ready, %handshake_buffer98.out0, %handshake_buffer98.out0_valid = hw.instance "handshake_buffer98" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br2.outTrue: i64, in0_valid: %handshake_cond_br2.outTrue_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork16.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_sink2.in0_ready = hw.instance "handshake_sink2" @handshake_sink_in_ui64(in0: %handshake_cond_br2.outFalse: i64, in0_valid: %handshake_cond_br2.outFalse_valid: i1) -> (in0_ready: i1)
  %handshake_fork16.in0_ready, %handshake_fork16.out0, %handshake_fork16.out0_valid, %handshake_fork16.out1, %handshake_fork16.out1_valid = hw.instance "handshake_fork16" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer98.out0: i64, in0_valid: %handshake_buffer98.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer100.in0_ready: i1, out1_ready: %handshake_buffer99.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer99.in0_ready, %handshake_buffer99.out0, %handshake_buffer99.out0_valid = hw.instance "handshake_buffer99" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out1: i64, in0_valid: %handshake_fork16.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_addi1.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer100.in0_ready, %handshake_buffer100.out0, %handshake_buffer100.out0_valid = hw.instance "handshake_buffer100" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out0: i64, in0_valid: %handshake_fork16.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux3.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_cond_br3.cond_ready, %handshake_cond_br3.data_ready, %handshake_cond_br3.outTrue, %handshake_cond_br3.outTrue_valid, %handshake_cond_br3.outFalse, %handshake_cond_br3.outFalse_valid = hw.instance "handshake_cond_br3" @handshake_cond_br_in_ui1_2ins_2outs_ctrl(cond: %handshake_buffer91.out0: i1, cond_valid: %handshake_buffer91.out0_valid: i1, data: %handshake_buffer79.out0: i0, data_valid: %handshake_buffer79.out0_valid: i1, outTrue_ready: %handshake_buffer102.in0_ready: i1, outFalse_ready: %handshake_buffer101.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i0, outTrue_valid: i1, outFalse: i0, outFalse_valid: i1)
  %handshake_buffer101.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid = hw.instance "handshake_buffer101" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outFalse: i0, in0_valid: %handshake_cond_br3.outFalse_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %out0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer102.in0_ready, %handshake_buffer102.out0, %handshake_buffer102.out0_valid = hw.instance "handshake_buffer102" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outTrue: i0, in0_valid: %handshake_cond_br3.outTrue_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork17.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_fork17.in0_ready, %handshake_fork17.out0, %handshake_fork17.out0_valid, %handshake_fork17.out1, %handshake_fork17.out1_valid, %handshake_fork17.out2, %handshake_fork17.out2_valid, %handshake_fork17.out3, %handshake_fork17.out3_valid = hw.instance "handshake_fork17" @handshake_fork_1ins_4outs_ctrl(in0: %handshake_buffer102.out0: i0, in0_valid: %handshake_buffer102.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer106.in0_ready: i1, out1_ready: %handshake_buffer105.in0_ready: i1, out2_ready: %handshake_buffer104.in0_ready: i1, out3_ready: %handshake_buffer103.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1)
  %handshake_buffer103.in0_ready, %handshake_buffer103.out0, %handshake_buffer103.out0_valid = hw.instance "handshake_buffer103" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out3: i0, in0_valid: %handshake_fork17.out3_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer104.in0_ready, %handshake_buffer104.out0, %handshake_buffer104.out0_valid = hw.instance "handshake_buffer104" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out2: i0, in0_valid: %handshake_fork17.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer105.in0_ready, %handshake_buffer105.out0, %handshake_buffer105.out0_valid = hw.instance "handshake_buffer105" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out1: i0, in0_valid: %handshake_fork17.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join5.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer106.in0_ready, %handshake_buffer106.out0, %handshake_buffer106.out0_valid = hw.instance "handshake_buffer106" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out0: i0, in0_valid: %handshake_fork17.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store6.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_join5.in0_ready, %handshake_join5.in1_ready, %handshake_join5.in2_ready, %handshake_join5.in3_ready, %handshake_join5.out0, %handshake_join5.out0_valid = hw.instance "handshake_join5" @handshake_join_4ins_1outs_ctrl(in0: %handshake_buffer105.out0: i0, in0_valid: %handshake_buffer105.out0_valid: i1, in1: %handshake_buffer26.out0: i0, in1_valid: %handshake_buffer26.out0_valid: i1, in2: %handshake_buffer16.out0: i0, in2_valid: %handshake_buffer16.out0_valid: i1, in3: %handshake_buffer15.out0: i0, in3_valid: %handshake_buffer15.out0_valid: i1, out0_ready: %handshake_buffer107.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer107.in0_ready, %handshake_buffer107.out0, %handshake_buffer107.out0_valid = hw.instance "handshake_buffer107" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join5.out0: i0, in0_valid: %handshake_join5.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux0.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_load0.addrIn0_ready, %handshake_load0.dataFromMem_ready, %handshake_load0.ctrl_ready, %handshake_load0.dataOut, %handshake_load0.dataOut_valid, %handshake_load0.addrOut0, %handshake_load0.addrOut0_valid = hw.instance "handshake_load0" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer95.out0: i64, addrIn0_valid: %handshake_buffer95.out0_valid: i1, dataFromMem: %handshake_buffer30.out0: i64, dataFromMem_valid: %handshake_buffer30.out0_valid: i1, ctrl: %handshake_buffer103.out0: i0, ctrl_valid: %handshake_buffer103.out0_valid: i1, dataOut_ready: %handshake_buffer109.in0_ready: i1, addrOut0_ready: %handshake_buffer108.in0_ready: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer108.in0_ready, %handshake_buffer108.out0, %handshake_buffer108.out0_valid = hw.instance "handshake_buffer108" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.addrOut0: i64, in0_valid: %handshake_load0.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.ldAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer109.in0_ready, %handshake_buffer109.out0, %handshake_buffer109.out0_valid = hw.instance "handshake_buffer109" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.dataOut: i64, in0_valid: %handshake_load0.dataOut_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_addi0.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_load1.addrIn0_ready, %handshake_load1.dataFromMem_ready, %handshake_load1.ctrl_ready, %handshake_load1.dataOut, %handshake_load1.dataOut_valid, %handshake_load1.addrOut0, %handshake_load1.addrOut0_valid = hw.instance "handshake_load1" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer94.out0: i64, addrIn0_valid: %handshake_buffer94.out0_valid: i1, dataFromMem: %handshake_buffer20.out0: i64, dataFromMem_valid: %handshake_buffer20.out0_valid: i1, ctrl: %handshake_buffer104.out0: i0, ctrl_valid: %handshake_buffer104.out0_valid: i1, dataOut_ready: %handshake_buffer111.in0_ready: i1, addrOut0_ready: %handshake_buffer110.in0_ready: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer110.in0_ready, %handshake_buffer110.out0, %handshake_buffer110.out0_valid = hw.instance "handshake_buffer110" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.addrOut0: i64, in0_valid: %handshake_load1.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.ldAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer111.in0_ready, %handshake_buffer111.out0, %handshake_buffer111.out0_valid = hw.instance "handshake_buffer111" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.dataOut: i64, in0_valid: %handshake_load1.dataOut_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_addi0.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %arith_addi0.in0_ready, %arith_addi0.in1_ready, %arith_addi0.out0, %arith_addi0.out0_valid = hw.instance "arith_addi0" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer109.out0: i64, in0_valid: %handshake_buffer109.out0_valid: i1, in1: %handshake_buffer111.out0: i64, in1_valid: %handshake_buffer111.out0_valid: i1, out0_ready: %handshake_buffer112.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer112.in0_ready, %handshake_buffer112.out0, %handshake_buffer112.out0_valid = hw.instance "handshake_buffer112" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi0.out0: i64, in0_valid: %arith_addi0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store6.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_store6.addrIn0_ready, %handshake_store6.dataIn_ready, %handshake_store6.ctrl_ready, %handshake_store6.dataToMem, %handshake_store6.dataToMem_valid, %handshake_store6.addrOut0, %handshake_store6.addrOut0_valid = hw.instance "handshake_store6" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer93.out0: i64, addrIn0_valid: %handshake_buffer93.out0_valid: i1, dataIn: %handshake_buffer112.out0: i64, dataIn_valid: %handshake_buffer112.out0_valid: i1, ctrl: %handshake_buffer106.out0: i0, ctrl_valid: %handshake_buffer106.out0_valid: i1, dataToMem_ready: %handshake_buffer114.in0_ready: i1, addrOut0_ready: %handshake_buffer113.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer113.in0_ready, %handshake_buffer113.out0, %handshake_buffer113.out0_valid = hw.instance "handshake_buffer113" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.addrOut0: i64, in0_valid: %handshake_store6.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory0.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer114.in0_ready, %handshake_buffer114.out0, %handshake_buffer114.out0_valid = hw.instance "handshake_buffer114" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.dataToMem: i64, in0_valid: %handshake_store6.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory0.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %arith_addi1.in0_ready, %arith_addi1.in1_ready, %arith_addi1.out0, %arith_addi1.out0_valid = hw.instance "arith_addi1" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer96.out0: i64, in0_valid: %handshake_buffer96.out0_valid: i1, in1: %handshake_buffer99.out0: i64, in1_valid: %handshake_buffer99.out0_valid: i1, out0_ready: %handshake_buffer115.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer115.in0_ready, %handshake_buffer115.out0, %handshake_buffer115.out0_valid = hw.instance "handshake_buffer115" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi1.out0: i64, in0_valid: %arith_addi1.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux1.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  hw.output %handshake_buffer0.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid : i1, i0, i1
}

// -----// IR Dump After HWMemSimImpl (hw-memory-sim) //----- //
module {
  hw.module @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %in0_valid, %valid0_reg : i1
    %3 = comb.mux %1, %in0, %data0_reg : i0
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %c0_i0 : i0  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %16, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %16, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %14, %clock reset %reset, %c0_i0 : i0  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i0
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i0
    %14 = comb.mux %9, %c0_i0, %13 : i0
    %valid1_reg = seq.compreg sym @valid1_reg %17, %clock reset %reset, %false : i1  
    %15 = comb.xor %valid1_reg, %true : i1
    %16 = comb.or %15, %20 : i1
    %17 = comb.mux %16, %4, %valid1_reg : i1
    %18 = comb.mux %16, %12, %data1_reg : i0
    %data1_reg = seq.compreg sym @data1_reg %18, %clock reset %reset, %c0_i0 : i0  
    %ready1_reg = seq.compreg sym @ready1_reg %26, %clock reset %reset, %false : i1  
    %19 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
    %20 = comb.xor %ready1_reg, %true : i1
    %21 = comb.xor %out0_ready, %true : i1
    %22 = comb.and %21, %20 : i1
    %23 = comb.mux %22, %valid1_reg, %ready1_reg : i1
    %24 = comb.and %out0_ready, %ready1_reg : i1
    %25 = comb.xor %24, %true : i1
    %26 = comb.and %25, %23 : i1
    %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %29, %clock reset %reset, %c0_i0 : i0  
    %27 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i0
    %28 = comb.mux %22, %data1_reg, %ctrl_data1_reg : i0
    %29 = comb.mux %24, %c0_i0, %28 : i0
    hw.output %1, %27, %19 : i1, i0, i1
  }
  hw.module @handshake_fork_1ins_14outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, in %out5_ready : i1, in %out6_ready : i1, in %out7_ready : i1, in %out8_ready : i1, in %out9_ready : i1, in %out10_ready : i1, in %out11_ready : i1, in %out12_ready : i1, in %out13_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1, out out4 : i0, out out4_valid : i1, out out5 : i0, out out5_valid : i1, out out6 : i0, out out6_valid : i1, out out7 : i0, out out7_valid : i1, out out8 : i0, out out8_valid : i1, out out9 : i0, out out9_valid : i1, out out10 : i0, out out10_valid : i1, out out11 : i0, out out11_valid : i1, out out12 : i0, out out12_valid : i1, out out13 : i0, out out13_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %84, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %84, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %84, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %in0_valid : i1
    %16 = comb.and %out2_ready, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %84, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %in0_valid : i1
    %22 = comb.and %out3_ready, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.xor %84, %true : i1
    %25 = comb.and %29, %24 : i1
    %emitted_4 = seq.compreg sym @emitted_4 %25, %clock reset %reset, %false : i1  
    %26 = comb.xor %emitted_4, %true : i1
    %27 = comb.and %26, %in0_valid : i1
    %28 = comb.and %out4_ready, %27 : i1
    %29 = comb.or %28, %emitted_4 {sv.namehint = "done4"} : i1
    %30 = comb.xor %84, %true : i1
    %31 = comb.and %35, %30 : i1
    %emitted_5 = seq.compreg sym @emitted_5 %31, %clock reset %reset, %false : i1  
    %32 = comb.xor %emitted_5, %true : i1
    %33 = comb.and %32, %in0_valid : i1
    %34 = comb.and %out5_ready, %33 : i1
    %35 = comb.or %34, %emitted_5 {sv.namehint = "done5"} : i1
    %36 = comb.xor %84, %true : i1
    %37 = comb.and %41, %36 : i1
    %emitted_6 = seq.compreg sym @emitted_6 %37, %clock reset %reset, %false : i1  
    %38 = comb.xor %emitted_6, %true : i1
    %39 = comb.and %38, %in0_valid : i1
    %40 = comb.and %out6_ready, %39 : i1
    %41 = comb.or %40, %emitted_6 {sv.namehint = "done6"} : i1
    %42 = comb.xor %84, %true : i1
    %43 = comb.and %47, %42 : i1
    %emitted_7 = seq.compreg sym @emitted_7 %43, %clock reset %reset, %false : i1  
    %44 = comb.xor %emitted_7, %true : i1
    %45 = comb.and %44, %in0_valid : i1
    %46 = comb.and %out7_ready, %45 : i1
    %47 = comb.or %46, %emitted_7 {sv.namehint = "done7"} : i1
    %48 = comb.xor %84, %true : i1
    %49 = comb.and %53, %48 : i1
    %emitted_8 = seq.compreg sym @emitted_8 %49, %clock reset %reset, %false : i1  
    %50 = comb.xor %emitted_8, %true : i1
    %51 = comb.and %50, %in0_valid : i1
    %52 = comb.and %out8_ready, %51 : i1
    %53 = comb.or %52, %emitted_8 {sv.namehint = "done8"} : i1
    %54 = comb.xor %84, %true : i1
    %55 = comb.and %59, %54 : i1
    %emitted_9 = seq.compreg sym @emitted_9 %55, %clock reset %reset, %false : i1  
    %56 = comb.xor %emitted_9, %true : i1
    %57 = comb.and %56, %in0_valid : i1
    %58 = comb.and %out9_ready, %57 : i1
    %59 = comb.or %58, %emitted_9 {sv.namehint = "done9"} : i1
    %60 = comb.xor %84, %true : i1
    %61 = comb.and %65, %60 : i1
    %emitted_10 = seq.compreg sym @emitted_10 %61, %clock reset %reset, %false : i1  
    %62 = comb.xor %emitted_10, %true : i1
    %63 = comb.and %62, %in0_valid : i1
    %64 = comb.and %out10_ready, %63 : i1
    %65 = comb.or %64, %emitted_10 {sv.namehint = "done10"} : i1
    %66 = comb.xor %84, %true : i1
    %67 = comb.and %71, %66 : i1
    %emitted_11 = seq.compreg sym @emitted_11 %67, %clock reset %reset, %false : i1  
    %68 = comb.xor %emitted_11, %true : i1
    %69 = comb.and %68, %in0_valid : i1
    %70 = comb.and %out11_ready, %69 : i1
    %71 = comb.or %70, %emitted_11 {sv.namehint = "done11"} : i1
    %72 = comb.xor %84, %true : i1
    %73 = comb.and %77, %72 : i1
    %emitted_12 = seq.compreg sym @emitted_12 %73, %clock reset %reset, %false : i1  
    %74 = comb.xor %emitted_12, %true : i1
    %75 = comb.and %74, %in0_valid : i1
    %76 = comb.and %out12_ready, %75 : i1
    %77 = comb.or %76, %emitted_12 {sv.namehint = "done12"} : i1
    %78 = comb.xor %84, %true : i1
    %79 = comb.and %83, %78 : i1
    %emitted_13 = seq.compreg sym @emitted_13 %79, %clock reset %reset, %false : i1  
    %80 = comb.xor %emitted_13, %true : i1
    %81 = comb.and %80, %in0_valid : i1
    %82 = comb.and %out13_ready, %81 : i1
    %83 = comb.or %82, %emitted_13 {sv.namehint = "done13"} : i1
    %84 = comb.and %5, %11, %17, %23, %29, %35, %41, %47, %53, %59, %65, %71, %77, %83 {sv.namehint = "allDone"} : i1
    hw.output %84, %in0, %3, %in0, %9, %in0, %15, %in0, %21, %in0, %27, %in0, %33, %in0, %39, %in0, %45, %in0, %51, %in0, %57, %in0, %63, %in0, %69, %in0, %75, %in0, %81 : i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id2(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %stDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stDone0 : i0, out stDone0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_2 = sv.reg : !hw.inout<uarray<3xi64>> 
    %0 = seq.from_clock %clock
    sv.alwaysff(posedge %0) {
      sv.if %4 {
        %7 = sv.array_index_inout %_handshake_memory_2[%6] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %7, %stData0 : i64
      }
    }(syncreset : posedge %reset) {
    }
    %writeValidBuffer = seq.compreg sym @writeValidBuffer %5, %clock reset %reset, %false : i1  
    %1 = comb.and %stDone0_ready, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
    %2 = comb.xor %writeValidBuffer, %true : i1
    %3 = comb.or %2, %1 {sv.namehint = "emptyOrComplete"} : i1
    %4 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
    %5 = comb.mux %3, %4, %writeValidBuffer : i1
    %6 = comb.extract %stAddr0 from 0 : (i64) -> i2
    hw.output %3, %3, %c0_i0, %writeValidBuffer : i1, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id1(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_1 = sv.reg : !hw.inout<uarray<3xi64>> 
    %0 = seq.from_clock %clock
    sv.alwaysff(posedge %0) {
      sv.if %32 {
        %35 = sv.array_index_inout %_handshake_memory_1[%34] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %35, %stData2 : i64
      }
      sv.if %26 {
        %35 = sv.array_index_inout %_handshake_memory_1[%28] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %35, %stData1 : i64
      }
      sv.if %20 {
        %35 = sv.array_index_inout %_handshake_memory_1[%22] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %35, %stData0 : i64
      }
    }(syncreset : posedge %reset) {
    }
    %1 = comb.extract %ldAddr0 from 0 : (i64) -> i2
    %2 = sv.array_index_inout %_handshake_memory_1[%1] : !hw.inout<uarray<3xi64>>, i2
    %3 = sv.read_inout %2 : !hw.inout<i64>
    %4 = comb.xor %16, %true : i1
    %5 = comb.and %9, %4 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %5, %clock reset %reset, %false : i1  
    %6 = comb.xor %emitted_0, %true : i1
    %7 = comb.and %6, %ldAddr0_valid : i1
    %8 = comb.and %ldData0_ready, %7 : i1
    %9 = comb.or %8, %emitted_0 {sv.namehint = "done0"} : i1
    %10 = comb.xor %16, %true : i1
    %11 = comb.and %15, %10 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %11, %clock reset %reset, %false : i1  
    %12 = comb.xor %emitted_1, %true : i1
    %13 = comb.and %12, %ldAddr0_valid : i1
    %14 = comb.and %ldDone0_ready, %13 : i1
    %15 = comb.or %14, %emitted_1 {sv.namehint = "done1"} : i1
    %16 = comb.and %9, %15 {sv.namehint = "allDone"} : i1
    %writeValidBuffer = seq.compreg sym @writeValidBuffer %21, %clock reset %reset, %false : i1  
    %17 = comb.and %stDone0_ready, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
    %18 = comb.xor %writeValidBuffer, %true : i1
    %19 = comb.or %18, %17 {sv.namehint = "emptyOrComplete"} : i1
    %20 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
    %21 = comb.mux %19, %20, %writeValidBuffer : i1
    %22 = comb.extract %stAddr0 from 0 : (i64) -> i2
    %writeValidBuffer_0 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %27, %clock reset %reset, %false : i1  
    %23 = comb.and %stDone1_ready, %writeValidBuffer_0 {sv.namehint = "storeCompleted"} : i1
    %24 = comb.xor %writeValidBuffer_0, %true : i1
    %25 = comb.or %24, %23 {sv.namehint = "emptyOrComplete"} : i1
    %26 = comb.and %stAddr1_valid, %stData1_valid {sv.namehint = "writeValid"} : i1
    %27 = comb.mux %25, %26, %writeValidBuffer_0 : i1
    %28 = comb.extract %stAddr1 from 0 : (i64) -> i2
    %writeValidBuffer_1 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %33, %clock reset %reset, %false : i1  
    %29 = comb.and %stDone2_ready, %writeValidBuffer_1 {sv.namehint = "storeCompleted"} : i1
    %30 = comb.xor %writeValidBuffer_1, %true : i1
    %31 = comb.or %30, %29 {sv.namehint = "emptyOrComplete"} : i1
    %32 = comb.and %stAddr2_valid, %stData2_valid {sv.namehint = "writeValid"} : i1
    %33 = comb.mux %31, %32, %writeValidBuffer_1 : i1
    %34 = comb.extract %stAddr2 from 0 : (i64) -> i2
    hw.output %19, %19, %25, %25, %31, %31, %16, %3, %7, %c0_i0, %writeValidBuffer, %c0_i0, %writeValidBuffer_0, %c0_i0, %writeValidBuffer_1, %c0_i0, %13 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_buffer_in_ui64_out_ui64_2slots_seq(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i64 = hw.constant 0 : i64
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %in0_valid, %valid0_reg : i1
    %3 = comb.mux %1, %in0, %data0_reg : i64
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %c0_i64 : i64  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %16, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %16, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %14, %clock reset %reset, %c0_i64 : i64  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i64
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i64
    %14 = comb.mux %9, %c0_i64, %13 : i64
    %valid1_reg = seq.compreg sym @valid1_reg %17, %clock reset %reset, %false : i1  
    %15 = comb.xor %valid1_reg, %true : i1
    %16 = comb.or %15, %20 : i1
    %17 = comb.mux %16, %4, %valid1_reg : i1
    %18 = comb.mux %16, %12, %data1_reg : i64
    %data1_reg = seq.compreg sym @data1_reg %18, %clock reset %reset, %c0_i64 : i64  
    %ready1_reg = seq.compreg sym @ready1_reg %26, %clock reset %reset, %false : i1  
    %19 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
    %20 = comb.xor %ready1_reg, %true : i1
    %21 = comb.xor %out0_ready, %true : i1
    %22 = comb.and %21, %20 : i1
    %23 = comb.mux %22, %valid1_reg, %ready1_reg : i1
    %24 = comb.and %out0_ready, %ready1_reg : i1
    %25 = comb.xor %24, %true : i1
    %26 = comb.and %25, %23 : i1
    %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %29, %clock reset %reset, %c0_i64 : i64  
    %27 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i64
    %28 = comb.mux %22, %data1_reg, %ctrl_data1_reg : i64
    %29 = comb.mux %24, %c0_i64, %28 : i64
    hw.output %1, %27, %19 : i1, i64, i1
  }
  hw.module @handshake_fork_1ins_2outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %12, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %12, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.and %5, %11 {sv.namehint = "allDone"} : i1
    hw.output %12, %in0, %3, %in0, %9 : i1, i0, i1, i0, i1
  }
  hw.module @handshake_fork_1ins_3outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %18, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %18, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %18, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %in0_valid : i1
    %16 = comb.and %out2_ready, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.and %5, %11, %17 {sv.namehint = "allDone"} : i1
    hw.output %18, %in0, %3, %in0, %9, %in0, %15 : i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id0(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_0 = sv.reg : !hw.inout<uarray<3xi64>> 
    %0 = seq.from_clock %clock
    sv.alwaysff(posedge %0) {
      sv.if %32 {
        %35 = sv.array_index_inout %_handshake_memory_0[%34] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %35, %stData2 : i64
      }
      sv.if %26 {
        %35 = sv.array_index_inout %_handshake_memory_0[%28] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %35, %stData1 : i64
      }
      sv.if %20 {
        %35 = sv.array_index_inout %_handshake_memory_0[%22] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %35, %stData0 : i64
      }
    }(syncreset : posedge %reset) {
    }
    %1 = comb.extract %ldAddr0 from 0 : (i64) -> i2
    %2 = sv.array_index_inout %_handshake_memory_0[%1] : !hw.inout<uarray<3xi64>>, i2
    %3 = sv.read_inout %2 : !hw.inout<i64>
    %4 = comb.xor %16, %true : i1
    %5 = comb.and %9, %4 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %5, %clock reset %reset, %false : i1  
    %6 = comb.xor %emitted_0, %true : i1
    %7 = comb.and %6, %ldAddr0_valid : i1
    %8 = comb.and %ldData0_ready, %7 : i1
    %9 = comb.or %8, %emitted_0 {sv.namehint = "done0"} : i1
    %10 = comb.xor %16, %true : i1
    %11 = comb.and %15, %10 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %11, %clock reset %reset, %false : i1  
    %12 = comb.xor %emitted_1, %true : i1
    %13 = comb.and %12, %ldAddr0_valid : i1
    %14 = comb.and %ldDone0_ready, %13 : i1
    %15 = comb.or %14, %emitted_1 {sv.namehint = "done1"} : i1
    %16 = comb.and %9, %15 {sv.namehint = "allDone"} : i1
    %writeValidBuffer = seq.compreg sym @writeValidBuffer %21, %clock reset %reset, %false : i1  
    %17 = comb.and %stDone0_ready, %writeValidBuffer {sv.namehint = "storeCompleted"} : i1
    %18 = comb.xor %writeValidBuffer, %true : i1
    %19 = comb.or %18, %17 {sv.namehint = "emptyOrComplete"} : i1
    %20 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
    %21 = comb.mux %19, %20, %writeValidBuffer : i1
    %22 = comb.extract %stAddr0 from 0 : (i64) -> i2
    %writeValidBuffer_0 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %27, %clock reset %reset, %false : i1  
    %23 = comb.and %stDone1_ready, %writeValidBuffer_0 {sv.namehint = "storeCompleted"} : i1
    %24 = comb.xor %writeValidBuffer_0, %true : i1
    %25 = comb.or %24, %23 {sv.namehint = "emptyOrComplete"} : i1
    %26 = comb.and %stAddr1_valid, %stData1_valid {sv.namehint = "writeValid"} : i1
    %27 = comb.mux %25, %26, %writeValidBuffer_0 : i1
    %28 = comb.extract %stAddr1 from 0 : (i64) -> i2
    %writeValidBuffer_1 = seq.compreg sym @writeValidBuffer name "writeValidBuffer" %33, %clock reset %reset, %false : i1  
    %29 = comb.and %stDone2_ready, %writeValidBuffer_1 {sv.namehint = "storeCompleted"} : i1
    %30 = comb.xor %writeValidBuffer_1, %true : i1
    %31 = comb.or %30, %29 {sv.namehint = "emptyOrComplete"} : i1
    %32 = comb.and %stAddr2_valid, %stData2_valid {sv.namehint = "writeValid"} : i1
    %33 = comb.mux %31, %32, %writeValidBuffer_1 : i1
    %34 = comb.extract %stAddr2 from 0 : (i64) -> i2
    hw.output %19, %19, %25, %25, %31, %31, %16, %3, %7, %c0_i0, %writeValidBuffer, %c0_i0, %writeValidBuffer_0, %c0_i0, %writeValidBuffer_1, %c0_i0, %13 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_join_7ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %in4 : i0, in %in4_valid : i1, in %in5 : i0, in %in5_valid : i1, in %in6 : i0, in %in6_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out in4_ready : i1, out in5_ready : i1, out in6_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid, %in2_valid, %in3_valid, %in4_valid, %in5_valid, %in6_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %1, %1, %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i1, i1, i1, i1, i0, i1
  }
  hw.module @handshake_constant_c3_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c3_i64 = hw.constant 3 : i64
    hw.output %out0_ready, %c3_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %12, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %12, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.and %5, %11 {sv.namehint = "allDone"} : i1
    hw.output %12, %in0, %3, %in0, %9 : i1, i64, i1, i64, i1
  }
  hw.module @handshake_constant_c2_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c2_i64 = hw.constant 2 : i64
    hw.output %out0_ready, %c2_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_constant_c1_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c1_i64 = hw.constant 1 : i64
    hw.output %out0_ready, %c1_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %18, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %18, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %18, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %in0_valid : i1
    %16 = comb.and %out2_ready, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.and %5, %11, %17 {sv.namehint = "allDone"} : i1
    hw.output %18, %in0, %3, %in0, %9, %in0, %15 : i1, i64, i1, i64, i1, i64, i1
  }
  hw.module @handshake_constant_c0_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c0_i64 = hw.constant 0 : i64
    hw.output %out0_ready, %c0_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_store_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataIn : i64, in %dataIn_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataToMem_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataIn_ready : i1, out ctrl_ready : i1, out dataToMem : i64, out dataToMem_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
    %0 = comb.and %dataIn_valid, %addrIn0_valid, %ctrl_valid : i1
    %1 = comb.and %dataToMem_ready, %addrOut0_ready, %0 : i1
    hw.output %1, %1, %1, %dataIn, %0, %addrIn0, %0 : i1, i1, i1, i64, i1, i64, i1
  }
  hw.module @handshake_join_2ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %c0_i0, %0 : i1, i1, i0, i1
  }
  hw.module @handshake_join_3ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid, %in2_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i0, i1
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %true : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %in0_valid, %valid0_reg : i1
    %3 = comb.mux %1, %in0, %data0_reg : i1
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %false : i1  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %out0_ready, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %out0_ready, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %15, %clock reset %reset, %false : i1  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i1
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i1
    %14 = comb.xor %9, %true : i1
    %15 = comb.and %14, %13 : i1
    hw.output %1, %12, %4 : i1, i1, i1
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %24, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %24, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %24, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %in0_valid : i1
    %16 = comb.and %out2_ready, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %24, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %in0_valid : i1
    %22 = comb.and %out3_ready, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
    hw.output %24, %in0, %3, %in0, %9, %in0, %15, %in0, %21 : i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_2slots_seq(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %valid0_reg = seq.compreg sym @valid0_reg %2, %clock reset %reset, %false : i1  
    %0 = comb.xor %valid0_reg, %true : i1
    %1 = comb.or %0, %5 : i1
    %2 = comb.mux %1, %in0_valid, %valid0_reg : i1
    %3 = comb.mux %1, %in0, %data0_reg : i1
    %data0_reg = seq.compreg sym @data0_reg %3, %clock reset %reset, %false : i1  
    %ready0_reg = seq.compreg sym @ready0_reg %11, %clock reset %reset, %false : i1  
    %4 = comb.mux %ready0_reg, %ready0_reg, %valid0_reg : i1
    %5 = comb.xor %ready0_reg, %true : i1
    %6 = comb.xor %17, %true : i1
    %7 = comb.and %6, %5 : i1
    %8 = comb.mux %7, %valid0_reg, %ready0_reg : i1
    %9 = comb.and %17, %ready0_reg : i1
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %8 : i1
    %ctrl_data0_reg = seq.compreg sym @ctrl_data0_reg %15, %clock reset %reset, %false : i1  
    %12 = comb.mux %ready0_reg, %ctrl_data0_reg, %data0_reg : i1
    %13 = comb.mux %7, %data0_reg, %ctrl_data0_reg : i1
    %14 = comb.xor %9, %true : i1
    %15 = comb.and %14, %13 : i1
    %valid1_reg = seq.compreg sym @valid1_reg %18, %clock reset %reset, %false : i1  
    %16 = comb.xor %valid1_reg, %true : i1
    %17 = comb.or %16, %21 : i1
    %18 = comb.mux %17, %4, %valid1_reg : i1
    %19 = comb.mux %17, %12, %data1_reg : i1
    %data1_reg = seq.compreg sym @data1_reg %19, %clock reset %reset, %false : i1  
    %ready1_reg = seq.compreg sym @ready1_reg %27, %clock reset %reset, %false : i1  
    %20 = comb.mux %ready1_reg, %ready1_reg, %valid1_reg : i1
    %21 = comb.xor %ready1_reg, %true : i1
    %22 = comb.xor %out0_ready, %true : i1
    %23 = comb.and %22, %21 : i1
    %24 = comb.mux %23, %valid1_reg, %ready1_reg : i1
    %25 = comb.and %out0_ready, %ready1_reg : i1
    %26 = comb.xor %25, %true : i1
    %27 = comb.and %26, %24 : i1
    %ctrl_data1_reg = seq.compreg sym @ctrl_data1_reg %31, %clock reset %reset, %false : i1  
    %28 = comb.mux %ready1_reg, %ctrl_data1_reg, %data1_reg : i1
    %29 = comb.mux %23, %data1_reg, %ctrl_data1_reg : i1
    %30 = comb.xor %25, %true : i1
    %31 = comb.and %30, %29 : i1
    hw.output %1, %28, %20 : i1, i1, i1
  }
  hw.module @handshake_mux_in_ui1_3ins_1outs_ctrl(in %select : i1, in %select_valid : i1, in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %0 = comb.concat %false, %select : i1, i1
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = comb.mux %select, %in1_valid, %in0_valid : i1
    %3 = comb.and %2, %select_valid : i1
    %4 = comb.and %3, %out0_ready : i1
    %5 = comb.extract %1 from 0 : (i2) -> i1
    %6 = comb.and %5, %4 : i1
    %7 = comb.extract %1 from 1 : (i2) -> i1
    %8 = comb.and %7, %4 : i1
    %9 = comb.mux %select, %in1, %in0 : i0
    hw.output %4, %6, %8, %9, %3 : i1, i1, i1, i0, i1
  }
  hw.module @handshake_mux_in_ui1_ui64_ui64_out_ui64(in %select : i1, in %select_valid : i1, in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %0 = comb.concat %false, %select : i1, i1
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = comb.mux %select, %in1_valid, %in0_valid : i1
    %3 = comb.and %2, %select_valid : i1
    %4 = comb.and %3, %out0_ready : i1
    %5 = comb.extract %1 from 0 : (i2) -> i1
    %6 = comb.and %5, %4 : i1
    %7 = comb.extract %1 from 1 : (i2) -> i1
    %8 = comb.and %7, %4 : i1
    %9 = comb.mux %select, %in1, %in0 : i64
    hw.output %4, %6, %8, %9, %3 : i1, i1, i1, i64, i1
  }
  hw.module @arith_cmpi_in_ui64_ui64_out_ui1_slt(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i1, out out0_valid : i1) {
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    %2 = comb.icmp slt %in0, %in1 : i64
    hw.output %1, %1, %2, %0 : i1, i1, i1, i1
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1, out out4 : i1, out out4_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %30, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %30, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %30, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %in0_valid : i1
    %16 = comb.and %out2_ready, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %30, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %in0_valid : i1
    %22 = comb.and %out3_ready, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.xor %30, %true : i1
    %25 = comb.and %29, %24 : i1
    %emitted_4 = seq.compreg sym @emitted_4 %25, %clock reset %reset, %false : i1  
    %26 = comb.xor %emitted_4, %true : i1
    %27 = comb.and %26, %in0_valid : i1
    %28 = comb.and %out4_ready, %27 : i1
    %29 = comb.or %28, %emitted_4 {sv.namehint = "done4"} : i1
    %30 = comb.and %5, %11, %17, %23, %29 {sv.namehint = "allDone"} : i1
    hw.output %30, %in0, %3, %in0, %9, %in0, %15, %in0, %21, %in0, %27 : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(in %cond : i1, in %cond_valid : i1, in %data : i64, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i64, out outTrue_valid : i1, out outFalse : i64, out outFalse_valid : i1) {
    %true = hw.constant true
    %0 = comb.and %cond_valid, %data_valid : i1
    %1 = comb.and %cond, %0 : i1
    %2 = comb.xor %cond, %true : i1
    %3 = comb.and %2, %0 : i1
    %4 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
    %5 = comb.and %4, %0 : i1
    hw.output %5, %5, %data, %1, %data, %3 : i1, i1, i64, i1, i64, i1
  }
  hw.module @handshake_sink_in_ui64(in %in0 : i64, in %in0_valid : i1, out in0_ready : i1) {
    %true = hw.constant true
    hw.output %true : i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1, out out3 : i64, out out3_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %24, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %24, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %24, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %in0_valid : i1
    %16 = comb.and %out2_ready, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %24, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %in0_valid : i1
    %22 = comb.and %out3_ready, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
    hw.output %24, %in0, %3, %in0, %9, %in0, %15, %in0, %21 : i1, i64, i1, i64, i1, i64, i1, i64, i1
  }
  hw.module @handshake_cond_br_in_ui1_2ins_2outs_ctrl(in %cond : i1, in %cond_valid : i1, in %data : i0, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i0, out outTrue_valid : i1, out outFalse : i0, out outFalse_valid : i1) {
    %true = hw.constant true
    %0 = comb.and %cond_valid, %data_valid : i1
    %1 = comb.and %cond, %0 : i1
    %2 = comb.xor %cond, %true : i1
    %3 = comb.and %2, %0 : i1
    %4 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
    %5 = comb.and %4, %0 : i1
    hw.output %5, %5, %data, %1, %data, %3 : i1, i1, i0, i1, i0, i1
  }
  hw.module @handshake_fork_1ins_4outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %24, %true : i1
    %1 = comb.and %5, %0 : i1
    %emitted_0 = seq.compreg sym @emitted_0 %1, %clock reset %reset, %false : i1  
    %2 = comb.xor %emitted_0, %true : i1
    %3 = comb.and %2, %in0_valid : i1
    %4 = comb.and %out0_ready, %3 : i1
    %5 = comb.or %4, %emitted_0 {sv.namehint = "done0"} : i1
    %6 = comb.xor %24, %true : i1
    %7 = comb.and %11, %6 : i1
    %emitted_1 = seq.compreg sym @emitted_1 %7, %clock reset %reset, %false : i1  
    %8 = comb.xor %emitted_1, %true : i1
    %9 = comb.and %8, %in0_valid : i1
    %10 = comb.and %out1_ready, %9 : i1
    %11 = comb.or %10, %emitted_1 {sv.namehint = "done1"} : i1
    %12 = comb.xor %24, %true : i1
    %13 = comb.and %17, %12 : i1
    %emitted_2 = seq.compreg sym @emitted_2 %13, %clock reset %reset, %false : i1  
    %14 = comb.xor %emitted_2, %true : i1
    %15 = comb.and %14, %in0_valid : i1
    %16 = comb.and %out2_ready, %15 : i1
    %17 = comb.or %16, %emitted_2 {sv.namehint = "done2"} : i1
    %18 = comb.xor %24, %true : i1
    %19 = comb.and %23, %18 : i1
    %emitted_3 = seq.compreg sym @emitted_3 %19, %clock reset %reset, %false : i1  
    %20 = comb.xor %emitted_3, %true : i1
    %21 = comb.and %20, %in0_valid : i1
    %22 = comb.and %out3_ready, %21 : i1
    %23 = comb.or %22, %emitted_3 {sv.namehint = "done3"} : i1
    %24 = comb.and %5, %11, %17, %23 {sv.namehint = "allDone"} : i1
    hw.output %24, %in0, %3, %in0, %9, %in0, %15, %in0, %21 : i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_join_4ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid, %in2_valid, %in3_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i1, i0, i1
  }
  hw.module @handshake_load_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataFromMem : i64, in %dataFromMem_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataOut_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataFromMem_ready : i1, out ctrl_ready : i1, out dataOut : i64, out dataOut_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
    %0 = comb.and %addrIn0_valid, %ctrl_valid : i1
    %1 = comb.and %addrOut0_ready, %0 : i1
    hw.output %1, %dataOut_ready, %1, %dataFromMem, %dataFromMem_valid, %addrIn0, %0 : i1, i1, i1, i64, i1, i64, i1
  }
  hw.module @arith_addi_in_ui64_ui64_out_ui64(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    %2 = comb.add %in0, %in1 : i64
    hw.output %1, %1, %2, %0 : i1, i1, i64, i1
  }
  hw.module @main(in %in0 : i0, in %in0_valid : i1, in %clock : !seq.clock, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
    %handshake_buffer0.in0_ready, %handshake_buffer0.out0, %handshake_buffer0.out0_valid = hw.instance "handshake_buffer0" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %in0: i0, in0_valid: %in0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork0.in0_ready, %handshake_fork0.out0, %handshake_fork0.out0_valid, %handshake_fork0.out1, %handshake_fork0.out1_valid, %handshake_fork0.out2, %handshake_fork0.out2_valid, %handshake_fork0.out3, %handshake_fork0.out3_valid, %handshake_fork0.out4, %handshake_fork0.out4_valid, %handshake_fork0.out5, %handshake_fork0.out5_valid, %handshake_fork0.out6, %handshake_fork0.out6_valid, %handshake_fork0.out7, %handshake_fork0.out7_valid, %handshake_fork0.out8, %handshake_fork0.out8_valid, %handshake_fork0.out9, %handshake_fork0.out9_valid, %handshake_fork0.out10, %handshake_fork0.out10_valid, %handshake_fork0.out11, %handshake_fork0.out11_valid, %handshake_fork0.out12, %handshake_fork0.out12_valid, %handshake_fork0.out13, %handshake_fork0.out13_valid = hw.instance "handshake_fork0" @handshake_fork_1ins_14outs_ctrl(in0: %handshake_buffer0.out0: i0, in0_valid: %handshake_buffer0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer14.in0_ready: i1, out1_ready: %handshake_buffer13.in0_ready: i1, out2_ready: %handshake_buffer12.in0_ready: i1, out3_ready: %handshake_buffer11.in0_ready: i1, out4_ready: %handshake_buffer10.in0_ready: i1, out5_ready: %handshake_buffer9.in0_ready: i1, out6_ready: %handshake_buffer8.in0_ready: i1, out7_ready: %handshake_buffer7.in0_ready: i1, out8_ready: %handshake_buffer6.in0_ready: i1, out9_ready: %handshake_buffer5.in0_ready: i1, out10_ready: %handshake_buffer4.in0_ready: i1, out11_ready: %handshake_buffer3.in0_ready: i1, out12_ready: %handshake_buffer2.in0_ready: i1, out13_ready: %handshake_buffer1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1, out4: i0, out4_valid: i1, out5: i0, out5_valid: i1, out6: i0, out6_valid: i1, out7: i0, out7_valid: i1, out8: i0, out8_valid: i1, out9: i0, out9_valid: i1, out10: i0, out10_valid: i1, out11: i0, out11_valid: i1, out12: i0, out12_valid: i1, out13: i0, out13_valid: i1)
    %handshake_buffer1.in0_ready, %handshake_buffer1.out0, %handshake_buffer1.out0_valid = hw.instance "handshake_buffer1" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out13: i0, in0_valid: %handshake_fork0.out13_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join4.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer2.in0_ready, %handshake_buffer2.out0, %handshake_buffer2.out0_valid = hw.instance "handshake_buffer2" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out12: i0, in0_valid: %handshake_fork0.out12_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join3.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer3.in0_ready, %handshake_buffer3.out0, %handshake_buffer3.out0_valid = hw.instance "handshake_buffer3" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out11: i0, in0_valid: %handshake_fork0.out11_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store3.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer4.in0_ready, %handshake_buffer4.out0, %handshake_buffer4.out0_valid = hw.instance "handshake_buffer4" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out10: i0, in0_valid: %handshake_fork0.out10_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer5.in0_ready, %handshake_buffer5.out0, %handshake_buffer5.out0_valid = hw.instance "handshake_buffer5" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out9: i0, in0_valid: %handshake_fork0.out9_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join2.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer6.in0_ready, %handshake_buffer6.out0, %handshake_buffer6.out0_valid = hw.instance "handshake_buffer6" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out8: i0, in0_valid: %handshake_fork0.out8_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer7.in0_ready, %handshake_buffer7.out0, %handshake_buffer7.out0_valid = hw.instance "handshake_buffer7" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out7: i0, in0_valid: %handshake_fork0.out7_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer8.in0_ready, %handshake_buffer8.out0, %handshake_buffer8.out0_valid = hw.instance "handshake_buffer8" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out6: i0, in0_valid: %handshake_fork0.out6_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant6.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer9.in0_ready, %handshake_buffer9.out0, %handshake_buffer9.out0_valid = hw.instance "handshake_buffer9" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out5: i0, in0_valid: %handshake_fork0.out5_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant5.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer10.in0_ready, %handshake_buffer10.out0, %handshake_buffer10.out0_valid = hw.instance "handshake_buffer10" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out4: i0, in0_valid: %handshake_fork0.out4_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant4.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer11.in0_ready, %handshake_buffer11.out0, %handshake_buffer11.out0_valid = hw.instance "handshake_buffer11" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out3: i0, in0_valid: %handshake_fork0.out3_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant3.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer12.in0_ready, %handshake_buffer12.out0, %handshake_buffer12.out0_valid = hw.instance "handshake_buffer12" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out2: i0, in0_valid: %handshake_fork0.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant2.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer13.in0_ready, %handshake_buffer13.out0, %handshake_buffer13.out0_valid = hw.instance "handshake_buffer13" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out1: i0, in0_valid: %handshake_fork0.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer14.in0_ready, %handshake_buffer14.out0, %handshake_buffer14.out0_valid = hw.instance "handshake_buffer14" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out0: i0, in0_valid: %handshake_fork0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_constant0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_memory0.stData0_ready, %handshake_memory0.stAddr0_ready, %handshake_memory0.stDone0, %handshake_memory0.stDone0_valid = hw.instance "handshake_memory0" @handshake_memory_out_ui64_id2(stData0: %handshake_buffer114.out0: i64, stData0_valid: %handshake_buffer114.out0_valid: i1, stAddr0: %handshake_buffer113.out0: i64, stAddr0_valid: %handshake_buffer113.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, stDone0_ready: %handshake_buffer15.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stDone0: i0, stDone0_valid: i1)
    %handshake_buffer15.in0_ready, %handshake_buffer15.out0, %handshake_buffer15.out0_valid = hw.instance "handshake_buffer15" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory0.stDone0: i0, in0_valid: %handshake_memory0.stDone0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join5.in3_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_memory1.stData0_ready, %handshake_memory1.stAddr0_ready, %handshake_memory1.stData1_ready, %handshake_memory1.stAddr1_ready, %handshake_memory1.stData2_ready, %handshake_memory1.stAddr2_ready, %handshake_memory1.ldAddr0_ready, %handshake_memory1.ldData0, %handshake_memory1.ldData0_valid, %handshake_memory1.stDone0, %handshake_memory1.stDone0_valid, %handshake_memory1.stDone1, %handshake_memory1.stDone1_valid, %handshake_memory1.stDone2, %handshake_memory1.stDone2_valid, %handshake_memory1.ldDone0, %handshake_memory1.ldDone0_valid = hw.instance "handshake_memory1" @handshake_memory_out_ui64_id1(stData0: %handshake_buffer67.out0: i64, stData0_valid: %handshake_buffer67.out0_valid: i1, stAddr0: %handshake_buffer66.out0: i64, stAddr0_valid: %handshake_buffer66.out0_valid: i1, stData1: %handshake_buffer70.out0: i64, stData1_valid: %handshake_buffer70.out0_valid: i1, stAddr1: %handshake_buffer69.out0: i64, stAddr1_valid: %handshake_buffer69.out0_valid: i1, stData2: %handshake_buffer73.out0: i64, stData2_valid: %handshake_buffer73.out0_valid: i1, stAddr2: %handshake_buffer72.out0: i64, stAddr2_valid: %handshake_buffer72.out0_valid: i1, ldAddr0: %handshake_buffer110.out0: i64, ldAddr0_valid: %handshake_buffer110.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, ldData0_ready: %handshake_buffer20.in0_ready: i1, stDone0_ready: %handshake_buffer19.in0_ready: i1, stDone1_ready: %handshake_buffer18.in0_ready: i1, stDone2_ready: %handshake_buffer17.in0_ready: i1, ldDone0_ready: %handshake_buffer16.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
    %handshake_buffer16.in0_ready, %handshake_buffer16.out0, %handshake_buffer16.out0_valid = hw.instance "handshake_buffer16" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.ldDone0: i0, in0_valid: %handshake_memory1.ldDone0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join5.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer17.in0_ready, %handshake_buffer17.out0, %handshake_buffer17.out0_valid = hw.instance "handshake_buffer17" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone2: i0, in0_valid: %handshake_memory1.stDone2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in6_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer18.in0_ready, %handshake_buffer18.out0, %handshake_buffer18.out0_valid = hw.instance "handshake_buffer18" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone1: i0, in0_valid: %handshake_memory1.stDone1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer19.in0_ready, %handshake_buffer19.out0, %handshake_buffer19.out0_valid = hw.instance "handshake_buffer19" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone0: i0, in0_valid: %handshake_memory1.stDone0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork2.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer20.in0_ready, %handshake_buffer20.out0, %handshake_buffer20.out0_valid = hw.instance "handshake_buffer20" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory1.ldData0: i64, in0_valid: %handshake_memory1.ldData0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load1.dataFromMem_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork1.in0_ready, %handshake_fork1.out0, %handshake_fork1.out0_valid, %handshake_fork1.out1, %handshake_fork1.out1_valid = hw.instance "handshake_fork1" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer18.out0: i0, in0_valid: %handshake_buffer18.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer22.in0_ready: i1, out1_ready: %handshake_buffer21.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
    %handshake_buffer21.in0_ready, %handshake_buffer21.out0, %handshake_buffer21.out0_valid = hw.instance "handshake_buffer21" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out1: i0, in0_valid: %handshake_fork1.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in5_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer22.in0_ready, %handshake_buffer22.out0, %handshake_buffer22.out0_valid = hw.instance "handshake_buffer22" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out0: i0, in0_valid: %handshake_fork1.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join4.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork2.in0_ready, %handshake_fork2.out0, %handshake_fork2.out0_valid, %handshake_fork2.out1, %handshake_fork2.out1_valid, %handshake_fork2.out2, %handshake_fork2.out2_valid = hw.instance "handshake_fork2" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer19.out0: i0, in0_valid: %handshake_buffer19.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer25.in0_ready: i1, out1_ready: %handshake_buffer24.in0_ready: i1, out2_ready: %handshake_buffer23.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
    %handshake_buffer23.in0_ready, %handshake_buffer23.out0, %handshake_buffer23.out0_valid = hw.instance "handshake_buffer23" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out2: i0, in0_valid: %handshake_fork2.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in4_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer24.in0_ready, %handshake_buffer24.out0, %handshake_buffer24.out0_valid = hw.instance "handshake_buffer24" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out1: i0, in0_valid: %handshake_fork2.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join3.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer25.in0_ready, %handshake_buffer25.out0, %handshake_buffer25.out0_valid = hw.instance "handshake_buffer25" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out0: i0, in0_valid: %handshake_fork2.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join4.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_memory2.stData0_ready, %handshake_memory2.stAddr0_ready, %handshake_memory2.stData1_ready, %handshake_memory2.stAddr1_ready, %handshake_memory2.stData2_ready, %handshake_memory2.stAddr2_ready, %handshake_memory2.ldAddr0_ready, %handshake_memory2.ldData0, %handshake_memory2.ldData0_valid, %handshake_memory2.stDone0, %handshake_memory2.stDone0_valid, %handshake_memory2.stDone1, %handshake_memory2.stDone1_valid, %handshake_memory2.stDone2, %handshake_memory2.stDone2_valid, %handshake_memory2.ldDone0, %handshake_memory2.ldDone0_valid = hw.instance "handshake_memory2" @handshake_memory_out_ui64_id0(stData0: %handshake_buffer59.out0: i64, stData0_valid: %handshake_buffer59.out0_valid: i1, stAddr0: %handshake_buffer58.out0: i64, stAddr0_valid: %handshake_buffer58.out0_valid: i1, stData1: %handshake_buffer62.out0: i64, stData1_valid: %handshake_buffer62.out0_valid: i1, stAddr1: %handshake_buffer61.out0: i64, stAddr1_valid: %handshake_buffer61.out0_valid: i1, stData2: %handshake_buffer65.out0: i64, stData2_valid: %handshake_buffer65.out0_valid: i1, stAddr2: %handshake_buffer64.out0: i64, stAddr2_valid: %handshake_buffer64.out0_valid: i1, ldAddr0: %handshake_buffer108.out0: i64, ldAddr0_valid: %handshake_buffer108.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, ldData0_ready: %handshake_buffer30.in0_ready: i1, stDone0_ready: %handshake_buffer29.in0_ready: i1, stDone1_ready: %handshake_buffer28.in0_ready: i1, stDone2_ready: %handshake_buffer27.in0_ready: i1, ldDone0_ready: %handshake_buffer26.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
    %handshake_buffer26.in0_ready, %handshake_buffer26.out0, %handshake_buffer26.out0_valid = hw.instance "handshake_buffer26" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.ldDone0: i0, in0_valid: %handshake_memory2.ldDone0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join5.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer27.in0_ready, %handshake_buffer27.out0, %handshake_buffer27.out0_valid = hw.instance "handshake_buffer27" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone2: i0, in0_valid: %handshake_memory2.stDone2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in3_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer28.in0_ready, %handshake_buffer28.out0, %handshake_buffer28.out0_valid = hw.instance "handshake_buffer28" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone1: i0, in0_valid: %handshake_memory2.stDone1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork3.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer29.in0_ready, %handshake_buffer29.out0, %handshake_buffer29.out0_valid = hw.instance "handshake_buffer29" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone0: i0, in0_valid: %handshake_memory2.stDone0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork4.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer30.in0_ready, %handshake_buffer30.out0, %handshake_buffer30.out0_valid = hw.instance "handshake_buffer30" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory2.ldData0: i64, in0_valid: %handshake_memory2.ldData0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load0.dataFromMem_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork3.in0_ready, %handshake_fork3.out0, %handshake_fork3.out0_valid, %handshake_fork3.out1, %handshake_fork3.out1_valid = hw.instance "handshake_fork3" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer28.out0: i0, in0_valid: %handshake_buffer28.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer32.in0_ready: i1, out1_ready: %handshake_buffer31.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
    %handshake_buffer31.in0_ready, %handshake_buffer31.out0, %handshake_buffer31.out0_valid = hw.instance "handshake_buffer31" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out1: i0, in0_valid: %handshake_fork3.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join2.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer32.in0_ready, %handshake_buffer32.out0, %handshake_buffer32.out0_valid = hw.instance "handshake_buffer32" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out0: i0, in0_valid: %handshake_fork3.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork4.in0_ready, %handshake_fork4.out0, %handshake_fork4.out0_valid, %handshake_fork4.out1, %handshake_fork4.out1_valid, %handshake_fork4.out2, %handshake_fork4.out2_valid = hw.instance "handshake_fork4" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer29.out0: i0, in0_valid: %handshake_buffer29.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer35.in0_ready: i1, out1_ready: %handshake_buffer34.in0_ready: i1, out2_ready: %handshake_buffer33.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
    %handshake_buffer33.in0_ready, %handshake_buffer33.out0, %handshake_buffer33.out0_valid = hw.instance "handshake_buffer33" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out2: i0, in0_valid: %handshake_fork4.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join1.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer34.in0_ready, %handshake_buffer34.out0, %handshake_buffer34.out0_valid = hw.instance "handshake_buffer34" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out1: i0, in0_valid: %handshake_fork4.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join2.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer35.in0_ready, %handshake_buffer35.out0, %handshake_buffer35.out0_valid = hw.instance "handshake_buffer35" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out0: i0, in0_valid: %handshake_fork4.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join0.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_join0.in0_ready, %handshake_join0.in1_ready, %handshake_join0.in2_ready, %handshake_join0.in3_ready, %handshake_join0.in4_ready, %handshake_join0.in5_ready, %handshake_join0.in6_ready, %handshake_join0.out0, %handshake_join0.out0_valid = hw.instance "handshake_join0" @handshake_join_7ins_1outs_ctrl(in0: %handshake_buffer4.out0: i0, in0_valid: %handshake_buffer4.out0_valid: i1, in1: %handshake_buffer35.out0: i0, in1_valid: %handshake_buffer35.out0_valid: i1, in2: %handshake_buffer32.out0: i0, in2_valid: %handshake_buffer32.out0_valid: i1, in3: %handshake_buffer27.out0: i0, in3_valid: %handshake_buffer27.out0_valid: i1, in4: %handshake_buffer23.out0: i0, in4_valid: %handshake_buffer23.out0_valid: i1, in5: %handshake_buffer21.out0: i0, in5_valid: %handshake_buffer21.out0_valid: i1, in6: %handshake_buffer17.out0: i0, in6_valid: %handshake_buffer17.out0_valid: i1, out0_ready: %handshake_buffer36.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, in4_ready: i1, in5_ready: i1, in6_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer36.in0_ready, %handshake_buffer36.out0, %handshake_buffer36.out0_valid = hw.instance "handshake_buffer36" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join0.out0: i0, in0_valid: %handshake_join0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_constant0.ctrl_ready, %handshake_constant0.out0, %handshake_constant0.out0_valid = hw.instance "handshake_constant0" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer14.out0: i0, ctrl_valid: %handshake_buffer14.out0_valid: i1, out0_ready: %handshake_buffer37.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer37.in0_ready, %handshake_buffer37.out0, %handshake_buffer37.out0_valid = hw.instance "handshake_buffer37" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant0.out0: i64, in0_valid: %handshake_constant0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux2.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant1.ctrl_ready, %handshake_constant1.out0, %handshake_constant1.out0_valid = hw.instance "handshake_constant1" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer13.out0: i0, ctrl_valid: %handshake_buffer13.out0_valid: i1, out0_ready: %handshake_buffer38.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer38.in0_ready, %handshake_buffer38.out0, %handshake_buffer38.out0_valid = hw.instance "handshake_buffer38" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant1.out0: i64, in0_valid: %handshake_constant1.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork5.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork5.in0_ready, %handshake_fork5.out0, %handshake_fork5.out0_valid, %handshake_fork5.out1, %handshake_fork5.out1_valid = hw.instance "handshake_fork5" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer38.out0: i64, in0_valid: %handshake_buffer38.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer40.in0_ready: i1, out1_ready: %handshake_buffer39.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer39.in0_ready, %handshake_buffer39.out0, %handshake_buffer39.out0_valid = hw.instance "handshake_buffer39" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out1: i64, in0_valid: %handshake_fork5.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store2.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer40.in0_ready, %handshake_buffer40.out0, %handshake_buffer40.out0_valid = hw.instance "handshake_buffer40" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out0: i64, in0_valid: %handshake_fork5.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store5.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant2.ctrl_ready, %handshake_constant2.out0, %handshake_constant2.out0_valid = hw.instance "handshake_constant2" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer12.out0: i0, ctrl_valid: %handshake_buffer12.out0_valid: i1, out0_ready: %handshake_buffer41.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer41.in0_ready, %handshake_buffer41.out0, %handshake_buffer41.out0_valid = hw.instance "handshake_buffer41" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant2.out0: i64, in0_valid: %handshake_constant2.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork6.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork6.in0_ready, %handshake_fork6.out0, %handshake_fork6.out0_valid, %handshake_fork6.out1, %handshake_fork6.out1_valid = hw.instance "handshake_fork6" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer41.out0: i64, in0_valid: %handshake_buffer41.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer43.in0_ready: i1, out1_ready: %handshake_buffer42.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer42.in0_ready, %handshake_buffer42.out0, %handshake_buffer42.out0_valid = hw.instance "handshake_buffer42" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out1: i64, in0_valid: %handshake_fork6.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store1.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer43.in0_ready, %handshake_buffer43.out0, %handshake_buffer43.out0_valid = hw.instance "handshake_buffer43" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out0: i64, in0_valid: %handshake_fork6.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store4.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant3.ctrl_ready, %handshake_constant3.out0, %handshake_constant3.out0_valid = hw.instance "handshake_constant3" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer11.out0: i0, ctrl_valid: %handshake_buffer11.out0_valid: i1, out0_ready: %handshake_buffer44.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer44.in0_ready, %handshake_buffer44.out0, %handshake_buffer44.out0_valid = hw.instance "handshake_buffer44" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant3.out0: i64, in0_valid: %handshake_constant3.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork7.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork7.in0_ready, %handshake_fork7.out0, %handshake_fork7.out0_valid, %handshake_fork7.out1, %handshake_fork7.out1_valid = hw.instance "handshake_fork7" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer44.out0: i64, in0_valid: %handshake_buffer44.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer46.in0_ready: i1, out1_ready: %handshake_buffer45.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer45.in0_ready, %handshake_buffer45.out0, %handshake_buffer45.out0_valid = hw.instance "handshake_buffer45" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out1: i64, in0_valid: %handshake_fork7.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store0.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer46.in0_ready, %handshake_buffer46.out0, %handshake_buffer46.out0_valid = hw.instance "handshake_buffer46" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out0: i64, in0_valid: %handshake_fork7.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store3.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant4.ctrl_ready, %handshake_constant4.out0, %handshake_constant4.out0_valid = hw.instance "handshake_constant4" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer10.out0: i0, ctrl_valid: %handshake_buffer10.out0_valid: i1, out0_ready: %handshake_buffer47.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer47.in0_ready, %handshake_buffer47.out0, %handshake_buffer47.out0_valid = hw.instance "handshake_buffer47" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant4.out0: i64, in0_valid: %handshake_constant4.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork8.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork8.in0_ready, %handshake_fork8.out0, %handshake_fork8.out0_valid, %handshake_fork8.out1, %handshake_fork8.out1_valid = hw.instance "handshake_fork8" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer47.out0: i64, in0_valid: %handshake_buffer47.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer49.in0_ready: i1, out1_ready: %handshake_buffer48.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer48.in0_ready, %handshake_buffer48.out0, %handshake_buffer48.out0_valid = hw.instance "handshake_buffer48" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out1: i64, in0_valid: %handshake_fork8.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store2.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer49.in0_ready, %handshake_buffer49.out0, %handshake_buffer49.out0_valid = hw.instance "handshake_buffer49" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out0: i64, in0_valid: %handshake_fork8.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store5.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant5.ctrl_ready, %handshake_constant5.out0, %handshake_constant5.out0_valid = hw.instance "handshake_constant5" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer9.out0: i0, ctrl_valid: %handshake_buffer9.out0_valid: i1, out0_ready: %handshake_buffer50.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer50.in0_ready, %handshake_buffer50.out0, %handshake_buffer50.out0_valid = hw.instance "handshake_buffer50" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant5.out0: i64, in0_valid: %handshake_constant5.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork9.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork9.in0_ready, %handshake_fork9.out0, %handshake_fork9.out0_valid, %handshake_fork9.out1, %handshake_fork9.out1_valid, %handshake_fork9.out2, %handshake_fork9.out2_valid = hw.instance "handshake_fork9" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer50.out0: i64, in0_valid: %handshake_buffer50.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer53.in0_ready: i1, out1_ready: %handshake_buffer52.in0_ready: i1, out2_ready: %handshake_buffer51.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
    %handshake_buffer51.in0_ready, %handshake_buffer51.out0, %handshake_buffer51.out0_valid = hw.instance "handshake_buffer51" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out2: i64, in0_valid: %handshake_fork9.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store1.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer52.in0_ready, %handshake_buffer52.out0, %handshake_buffer52.out0_valid = hw.instance "handshake_buffer52" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out1: i64, in0_valid: %handshake_fork9.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store4.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer53.in0_ready, %handshake_buffer53.out0, %handshake_buffer53.out0_valid = hw.instance "handshake_buffer53" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out0: i64, in0_valid: %handshake_fork9.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux3.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant6.ctrl_ready, %handshake_constant6.out0, %handshake_constant6.out0_valid = hw.instance "handshake_constant6" @handshake_constant_c0_out_ui64(ctrl: %handshake_buffer8.out0: i0, ctrl_valid: %handshake_buffer8.out0_valid: i1, out0_ready: %handshake_buffer54.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer54.in0_ready, %handshake_buffer54.out0, %handshake_buffer54.out0_valid = hw.instance "handshake_buffer54" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant6.out0: i64, in0_valid: %handshake_constant6.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork10.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork10.in0_ready, %handshake_fork10.out0, %handshake_fork10.out0_valid, %handshake_fork10.out1, %handshake_fork10.out1_valid, %handshake_fork10.out2, %handshake_fork10.out2_valid = hw.instance "handshake_fork10" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer54.out0: i64, in0_valid: %handshake_buffer54.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer57.in0_ready: i1, out1_ready: %handshake_buffer56.in0_ready: i1, out2_ready: %handshake_buffer55.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
    %handshake_buffer55.in0_ready, %handshake_buffer55.out0, %handshake_buffer55.out0_valid = hw.instance "handshake_buffer55" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out2: i64, in0_valid: %handshake_fork10.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store0.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer56.in0_ready, %handshake_buffer56.out0, %handshake_buffer56.out0_valid = hw.instance "handshake_buffer56" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out1: i64, in0_valid: %handshake_fork10.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store3.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer57.in0_ready, %handshake_buffer57.out0, %handshake_buffer57.out0_valid = hw.instance "handshake_buffer57" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out0: i64, in0_valid: %handshake_fork10.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux1.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_store0.addrIn0_ready, %handshake_store0.dataIn_ready, %handshake_store0.ctrl_ready, %handshake_store0.dataToMem, %handshake_store0.dataToMem_valid, %handshake_store0.addrOut0, %handshake_store0.addrOut0_valid = hw.instance "handshake_store0" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer55.out0: i64, addrIn0_valid: %handshake_buffer55.out0_valid: i1, dataIn: %handshake_buffer45.out0: i64, dataIn_valid: %handshake_buffer45.out0_valid: i1, ctrl: %handshake_buffer7.out0: i0, ctrl_valid: %handshake_buffer7.out0_valid: i1, dataToMem_ready: %handshake_buffer59.in0_ready: i1, addrOut0_ready: %handshake_buffer58.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer58.in0_ready, %handshake_buffer58.out0, %handshake_buffer58.out0_valid = hw.instance "handshake_buffer58" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.addrOut0: i64, in0_valid: %handshake_store0.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer59.in0_ready, %handshake_buffer59.out0, %handshake_buffer59.out0_valid = hw.instance "handshake_buffer59" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.dataToMem: i64, in0_valid: %handshake_store0.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join1.in0_ready, %handshake_join1.in1_ready, %handshake_join1.out0, %handshake_join1.out0_valid = hw.instance "handshake_join1" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer6.out0: i0, in0_valid: %handshake_buffer6.out0_valid: i1, in1: %handshake_buffer33.out0: i0, in1_valid: %handshake_buffer33.out0_valid: i1, out0_ready: %handshake_buffer60.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer60.in0_ready, %handshake_buffer60.out0, %handshake_buffer60.out0_valid = hw.instance "handshake_buffer60" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join1.out0: i0, in0_valid: %handshake_join1.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store1.addrIn0_ready, %handshake_store1.dataIn_ready, %handshake_store1.ctrl_ready, %handshake_store1.dataToMem, %handshake_store1.dataToMem_valid, %handshake_store1.addrOut0, %handshake_store1.addrOut0_valid = hw.instance "handshake_store1" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer51.out0: i64, addrIn0_valid: %handshake_buffer51.out0_valid: i1, dataIn: %handshake_buffer42.out0: i64, dataIn_valid: %handshake_buffer42.out0_valid: i1, ctrl: %handshake_buffer60.out0: i0, ctrl_valid: %handshake_buffer60.out0_valid: i1, dataToMem_ready: %handshake_buffer62.in0_ready: i1, addrOut0_ready: %handshake_buffer61.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer61.in0_ready, %handshake_buffer61.out0, %handshake_buffer61.out0_valid = hw.instance "handshake_buffer61" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.addrOut0: i64, in0_valid: %handshake_store1.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer62.in0_ready, %handshake_buffer62.out0, %handshake_buffer62.out0_valid = hw.instance "handshake_buffer62" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.dataToMem: i64, in0_valid: %handshake_store1.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stData1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join2.in0_ready, %handshake_join2.in1_ready, %handshake_join2.in2_ready, %handshake_join2.out0, %handshake_join2.out0_valid = hw.instance "handshake_join2" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer5.out0: i0, in0_valid: %handshake_buffer5.out0_valid: i1, in1: %handshake_buffer34.out0: i0, in1_valid: %handshake_buffer34.out0_valid: i1, in2: %handshake_buffer31.out0: i0, in2_valid: %handshake_buffer31.out0_valid: i1, out0_ready: %handshake_buffer63.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer63.in0_ready, %handshake_buffer63.out0, %handshake_buffer63.out0_valid = hw.instance "handshake_buffer63" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join2.out0: i0, in0_valid: %handshake_join2.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store2.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store2.addrIn0_ready, %handshake_store2.dataIn_ready, %handshake_store2.ctrl_ready, %handshake_store2.dataToMem, %handshake_store2.dataToMem_valid, %handshake_store2.addrOut0, %handshake_store2.addrOut0_valid = hw.instance "handshake_store2" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer48.out0: i64, addrIn0_valid: %handshake_buffer48.out0_valid: i1, dataIn: %handshake_buffer39.out0: i64, dataIn_valid: %handshake_buffer39.out0_valid: i1, ctrl: %handshake_buffer63.out0: i0, ctrl_valid: %handshake_buffer63.out0_valid: i1, dataToMem_ready: %handshake_buffer65.in0_ready: i1, addrOut0_ready: %handshake_buffer64.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer64.in0_ready, %handshake_buffer64.out0, %handshake_buffer64.out0_valid = hw.instance "handshake_buffer64" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.addrOut0: i64, in0_valid: %handshake_store2.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer65.in0_ready, %handshake_buffer65.out0, %handshake_buffer65.out0_valid = hw.instance "handshake_buffer65" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.dataToMem: i64, in0_valid: %handshake_store2.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.stData2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_store3.addrIn0_ready, %handshake_store3.dataIn_ready, %handshake_store3.ctrl_ready, %handshake_store3.dataToMem, %handshake_store3.dataToMem_valid, %handshake_store3.addrOut0, %handshake_store3.addrOut0_valid = hw.instance "handshake_store3" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer56.out0: i64, addrIn0_valid: %handshake_buffer56.out0_valid: i1, dataIn: %handshake_buffer46.out0: i64, dataIn_valid: %handshake_buffer46.out0_valid: i1, ctrl: %handshake_buffer3.out0: i0, ctrl_valid: %handshake_buffer3.out0_valid: i1, dataToMem_ready: %handshake_buffer67.in0_ready: i1, addrOut0_ready: %handshake_buffer66.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer66.in0_ready, %handshake_buffer66.out0, %handshake_buffer66.out0_valid = hw.instance "handshake_buffer66" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.addrOut0: i64, in0_valid: %handshake_store3.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer67.in0_ready, %handshake_buffer67.out0, %handshake_buffer67.out0_valid = hw.instance "handshake_buffer67" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.dataToMem: i64, in0_valid: %handshake_store3.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join3.in0_ready, %handshake_join3.in1_ready, %handshake_join3.out0, %handshake_join3.out0_valid = hw.instance "handshake_join3" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer2.out0: i0, in0_valid: %handshake_buffer2.out0_valid: i1, in1: %handshake_buffer24.out0: i0, in1_valid: %handshake_buffer24.out0_valid: i1, out0_ready: %handshake_buffer68.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer68.in0_ready, %handshake_buffer68.out0, %handshake_buffer68.out0_valid = hw.instance "handshake_buffer68" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join3.out0: i0, in0_valid: %handshake_join3.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store4.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store4.addrIn0_ready, %handshake_store4.dataIn_ready, %handshake_store4.ctrl_ready, %handshake_store4.dataToMem, %handshake_store4.dataToMem_valid, %handshake_store4.addrOut0, %handshake_store4.addrOut0_valid = hw.instance "handshake_store4" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer52.out0: i64, addrIn0_valid: %handshake_buffer52.out0_valid: i1, dataIn: %handshake_buffer43.out0: i64, dataIn_valid: %handshake_buffer43.out0_valid: i1, ctrl: %handshake_buffer68.out0: i0, ctrl_valid: %handshake_buffer68.out0_valid: i1, dataToMem_ready: %handshake_buffer70.in0_ready: i1, addrOut0_ready: %handshake_buffer69.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer69.in0_ready, %handshake_buffer69.out0, %handshake_buffer69.out0_valid = hw.instance "handshake_buffer69" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.addrOut0: i64, in0_valid: %handshake_store4.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer70.in0_ready, %handshake_buffer70.out0, %handshake_buffer70.out0_valid = hw.instance "handshake_buffer70" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.dataToMem: i64, in0_valid: %handshake_store4.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stData1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join4.in0_ready, %handshake_join4.in1_ready, %handshake_join4.in2_ready, %handshake_join4.out0, %handshake_join4.out0_valid = hw.instance "handshake_join4" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer1.out0: i0, in0_valid: %handshake_buffer1.out0_valid: i1, in1: %handshake_buffer25.out0: i0, in1_valid: %handshake_buffer25.out0_valid: i1, in2: %handshake_buffer22.out0: i0, in2_valid: %handshake_buffer22.out0_valid: i1, out0_ready: %handshake_buffer71.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer71.in0_ready, %handshake_buffer71.out0, %handshake_buffer71.out0_valid = hw.instance "handshake_buffer71" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join4.out0: i0, in0_valid: %handshake_join4.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store5.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store5.addrIn0_ready, %handshake_store5.dataIn_ready, %handshake_store5.ctrl_ready, %handshake_store5.dataToMem, %handshake_store5.dataToMem_valid, %handshake_store5.addrOut0, %handshake_store5.addrOut0_valid = hw.instance "handshake_store5" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer49.out0: i64, addrIn0_valid: %handshake_buffer49.out0_valid: i1, dataIn: %handshake_buffer40.out0: i64, dataIn_valid: %handshake_buffer40.out0_valid: i1, ctrl: %handshake_buffer71.out0: i0, ctrl_valid: %handshake_buffer71.out0_valid: i1, dataToMem_ready: %handshake_buffer73.in0_ready: i1, addrOut0_ready: %handshake_buffer72.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer72.in0_ready, %handshake_buffer72.out0, %handshake_buffer72.out0_valid = hw.instance "handshake_buffer72" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.addrOut0: i64, in0_valid: %handshake_store5.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer73.in0_ready, %handshake_buffer73.out0, %handshake_buffer73.out0_valid = hw.instance "handshake_buffer73" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.dataToMem: i64, in0_valid: %handshake_store5.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.stData2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer74.in0_ready, %handshake_buffer74.out0, %handshake_buffer74.out0_valid = hw.instance "handshake_buffer74" @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in0: %handshake_fork14.out0: i1, in0_valid: %handshake_fork14.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork11.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_fork11.in0_ready, %handshake_fork11.out0, %handshake_fork11.out0_valid, %handshake_fork11.out1, %handshake_fork11.out1_valid, %handshake_fork11.out2, %handshake_fork11.out2_valid, %handshake_fork11.out3, %handshake_fork11.out3_valid = hw.instance "handshake_fork11" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in0: %handshake_buffer74.out0: i1, in0_valid: %handshake_buffer74.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer78.in0_ready: i1, out1_ready: %handshake_buffer77.in0_ready: i1, out2_ready: %handshake_buffer76.in0_ready: i1, out3_ready: %handshake_buffer75.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1)
    %handshake_buffer75.in0_ready, %handshake_buffer75.out0, %handshake_buffer75.out0_valid = hw.instance "handshake_buffer75" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out3: i1, in0_valid: %handshake_fork11.out3_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux0.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer76.in0_ready, %handshake_buffer76.out0, %handshake_buffer76.out0_valid = hw.instance "handshake_buffer76" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out2: i1, in0_valid: %handshake_fork11.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux1.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer77.in0_ready, %handshake_buffer77.out0, %handshake_buffer77.out0_valid = hw.instance "handshake_buffer77" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out1: i1, in0_valid: %handshake_fork11.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux2.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer78.in0_ready, %handshake_buffer78.out0, %handshake_buffer78.out0_valid = hw.instance "handshake_buffer78" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out0: i1, in0_valid: %handshake_fork11.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux3.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_mux0.select_ready, %handshake_mux0.in0_ready, %handshake_mux0.in1_ready, %handshake_mux0.out0, %handshake_mux0.out0_valid = hw.instance "handshake_mux0" @handshake_mux_in_ui1_3ins_1outs_ctrl(select: %handshake_buffer75.out0: i1, select_valid: %handshake_buffer75.out0_valid: i1, in0: %handshake_buffer36.out0: i0, in0_valid: %handshake_buffer36.out0_valid: i1, in1: %handshake_buffer107.out0: i0, in1_valid: %handshake_buffer107.out0_valid: i1, out0_ready: %handshake_buffer79.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer79.in0_ready, %handshake_buffer79.out0, %handshake_buffer79.out0_valid = hw.instance "handshake_buffer79" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_mux0.out0: i0, in0_valid: %handshake_mux0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br3.data_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_mux1.select_ready, %handshake_mux1.in0_ready, %handshake_mux1.in1_ready, %handshake_mux1.out0, %handshake_mux1.out0_valid = hw.instance "handshake_mux1" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer76.out0: i1, select_valid: %handshake_buffer76.out0_valid: i1, in0: %handshake_buffer57.out0: i64, in0_valid: %handshake_buffer57.out0_valid: i1, in1: %handshake_buffer115.out0: i64, in1_valid: %handshake_buffer115.out0_valid: i1, out0_ready: %handshake_buffer80.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer80.in0_ready, %handshake_buffer80.out0, %handshake_buffer80.out0_valid = hw.instance "handshake_buffer80" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux1.out0: i64, in0_valid: %handshake_mux1.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork12.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork12.in0_ready, %handshake_fork12.out0, %handshake_fork12.out0_valid, %handshake_fork12.out1, %handshake_fork12.out1_valid = hw.instance "handshake_fork12" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer80.out0: i64, in0_valid: %handshake_buffer80.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer82.in0_ready: i1, out1_ready: %handshake_buffer81.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer81.in0_ready, %handshake_buffer81.out0, %handshake_buffer81.out0_valid = hw.instance "handshake_buffer81" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out1: i64, in0_valid: %handshake_fork12.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br0.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer82.in0_ready, %handshake_buffer82.out0, %handshake_buffer82.out0_valid = hw.instance "handshake_buffer82" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out0: i64, in0_valid: %handshake_fork12.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_cmpi0.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_mux2.select_ready, %handshake_mux2.in0_ready, %handshake_mux2.in1_ready, %handshake_mux2.out0, %handshake_mux2.out0_valid = hw.instance "handshake_mux2" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer77.out0: i1, select_valid: %handshake_buffer77.out0_valid: i1, in0: %handshake_buffer37.out0: i64, in0_valid: %handshake_buffer37.out0_valid: i1, in1: %handshake_buffer97.out0: i64, in1_valid: %handshake_buffer97.out0_valid: i1, out0_ready: %handshake_buffer83.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer83.in0_ready, %handshake_buffer83.out0, %handshake_buffer83.out0_valid = hw.instance "handshake_buffer83" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux2.out0: i64, in0_valid: %handshake_mux2.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork13.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork13.in0_ready, %handshake_fork13.out0, %handshake_fork13.out0_valid, %handshake_fork13.out1, %handshake_fork13.out1_valid = hw.instance "handshake_fork13" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer83.out0: i64, in0_valid: %handshake_buffer83.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer85.in0_ready: i1, out1_ready: %handshake_buffer84.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer84.in0_ready, %handshake_buffer84.out0, %handshake_buffer84.out0_valid = hw.instance "handshake_buffer84" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out1: i64, in0_valid: %handshake_fork13.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br1.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer85.in0_ready, %handshake_buffer85.out0, %handshake_buffer85.out0_valid = hw.instance "handshake_buffer85" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out0: i64, in0_valid: %handshake_fork13.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_cmpi0.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_mux3.select_ready, %handshake_mux3.in0_ready, %handshake_mux3.in1_ready, %handshake_mux3.out0, %handshake_mux3.out0_valid = hw.instance "handshake_mux3" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer78.out0: i1, select_valid: %handshake_buffer78.out0_valid: i1, in0: %handshake_buffer53.out0: i64, in0_valid: %handshake_buffer53.out0_valid: i1, in1: %handshake_buffer100.out0: i64, in1_valid: %handshake_buffer100.out0_valid: i1, out0_ready: %handshake_buffer86.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer86.in0_ready, %handshake_buffer86.out0, %handshake_buffer86.out0_valid = hw.instance "handshake_buffer86" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux3.out0: i64, in0_valid: %handshake_mux3.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br2.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %arith_cmpi0.in0_ready, %arith_cmpi0.in1_ready, %arith_cmpi0.out0, %arith_cmpi0.out0_valid = hw.instance "arith_cmpi0" @arith_cmpi_in_ui64_ui64_out_ui1_slt(in0: %handshake_buffer82.out0: i64, in0_valid: %handshake_buffer82.out0_valid: i1, in1: %handshake_buffer85.out0: i64, in1_valid: %handshake_buffer85.out0_valid: i1, out0_ready: %handshake_buffer87.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer87.in0_ready, %handshake_buffer87.out0, %handshake_buffer87.out0_valid = hw.instance "handshake_buffer87" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %arith_cmpi0.out0: i1, in0_valid: %arith_cmpi0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork14.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_fork14.in0_ready, %handshake_fork14.out0, %handshake_fork14.out0_valid, %handshake_fork14.out1, %handshake_fork14.out1_valid, %handshake_fork14.out2, %handshake_fork14.out2_valid, %handshake_fork14.out3, %handshake_fork14.out3_valid, %handshake_fork14.out4, %handshake_fork14.out4_valid = hw.instance "handshake_fork14" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in0: %handshake_buffer87.out0: i1, in0_valid: %handshake_buffer87.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer74.in0_ready: i1, out1_ready: %handshake_buffer91.in0_ready: i1, out2_ready: %handshake_buffer90.in0_ready: i1, out3_ready: %handshake_buffer89.in0_ready: i1, out4_ready: %handshake_buffer88.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1, out4: i1, out4_valid: i1)
    %handshake_buffer88.in0_ready, %handshake_buffer88.out0, %handshake_buffer88.out0_valid = hw.instance "handshake_buffer88" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out4: i1, in0_valid: %handshake_fork14.out4_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br0.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer89.in0_ready, %handshake_buffer89.out0, %handshake_buffer89.out0_valid = hw.instance "handshake_buffer89" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out3: i1, in0_valid: %handshake_fork14.out3_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br1.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer90.in0_ready, %handshake_buffer90.out0, %handshake_buffer90.out0_valid = hw.instance "handshake_buffer90" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out2: i1, in0_valid: %handshake_fork14.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br2.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer91.in0_ready, %handshake_buffer91.out0, %handshake_buffer91.out0_valid = hw.instance "handshake_buffer91" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out1: i1, in0_valid: %handshake_fork14.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_cond_br3.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_cond_br0.cond_ready, %handshake_cond_br0.data_ready, %handshake_cond_br0.outTrue, %handshake_cond_br0.outTrue_valid, %handshake_cond_br0.outFalse, %handshake_cond_br0.outFalse_valid = hw.instance "handshake_cond_br0" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer88.out0: i1, cond_valid: %handshake_buffer88.out0_valid: i1, data: %handshake_buffer81.out0: i64, data_valid: %handshake_buffer81.out0_valid: i1, outTrue_ready: %handshake_buffer92.in0_ready: i1, outFalse_ready: %handshake_sink0.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %handshake_buffer92.in0_ready, %handshake_buffer92.out0, %handshake_buffer92.out0_valid = hw.instance "handshake_buffer92" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br0.outTrue: i64, in0_valid: %handshake_cond_br0.outTrue_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork15.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_sink0.in0_ready = hw.instance "handshake_sink0" @handshake_sink_in_ui64(in0: %handshake_cond_br0.outFalse: i64, in0_valid: %handshake_cond_br0.outFalse_valid: i1) -> (in0_ready: i1)
    %handshake_fork15.in0_ready, %handshake_fork15.out0, %handshake_fork15.out0_valid, %handshake_fork15.out1, %handshake_fork15.out1_valid, %handshake_fork15.out2, %handshake_fork15.out2_valid, %handshake_fork15.out3, %handshake_fork15.out3_valid = hw.instance "handshake_fork15" @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in0: %handshake_buffer92.out0: i64, in0_valid: %handshake_buffer92.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer96.in0_ready: i1, out1_ready: %handshake_buffer95.in0_ready: i1, out2_ready: %handshake_buffer94.in0_ready: i1, out3_ready: %handshake_buffer93.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1, out3: i64, out3_valid: i1)
    %handshake_buffer93.in0_ready, %handshake_buffer93.out0, %handshake_buffer93.out0_valid = hw.instance "handshake_buffer93" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out3: i64, in0_valid: %handshake_fork15.out3_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store6.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer94.in0_ready, %handshake_buffer94.out0, %handshake_buffer94.out0_valid = hw.instance "handshake_buffer94" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out2: i64, in0_valid: %handshake_fork15.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load1.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer95.in0_ready, %handshake_buffer95.out0, %handshake_buffer95.out0_valid = hw.instance "handshake_buffer95" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out1: i64, in0_valid: %handshake_fork15.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load0.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer96.in0_ready, %handshake_buffer96.out0, %handshake_buffer96.out0_valid = hw.instance "handshake_buffer96" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out0: i64, in0_valid: %handshake_fork15.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_addi1.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_cond_br1.cond_ready, %handshake_cond_br1.data_ready, %handshake_cond_br1.outTrue, %handshake_cond_br1.outTrue_valid, %handshake_cond_br1.outFalse, %handshake_cond_br1.outFalse_valid = hw.instance "handshake_cond_br1" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer89.out0: i1, cond_valid: %handshake_buffer89.out0_valid: i1, data: %handshake_buffer84.out0: i64, data_valid: %handshake_buffer84.out0_valid: i1, outTrue_ready: %handshake_buffer97.in0_ready: i1, outFalse_ready: %handshake_sink1.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %handshake_buffer97.in0_ready, %handshake_buffer97.out0, %handshake_buffer97.out0_valid = hw.instance "handshake_buffer97" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br1.outTrue: i64, in0_valid: %handshake_cond_br1.outTrue_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux2.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_sink1.in0_ready = hw.instance "handshake_sink1" @handshake_sink_in_ui64(in0: %handshake_cond_br1.outFalse: i64, in0_valid: %handshake_cond_br1.outFalse_valid: i1) -> (in0_ready: i1)
    %handshake_cond_br2.cond_ready, %handshake_cond_br2.data_ready, %handshake_cond_br2.outTrue, %handshake_cond_br2.outTrue_valid, %handshake_cond_br2.outFalse, %handshake_cond_br2.outFalse_valid = hw.instance "handshake_cond_br2" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer90.out0: i1, cond_valid: %handshake_buffer90.out0_valid: i1, data: %handshake_buffer86.out0: i64, data_valid: %handshake_buffer86.out0_valid: i1, outTrue_ready: %handshake_buffer98.in0_ready: i1, outFalse_ready: %handshake_sink2.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %handshake_buffer98.in0_ready, %handshake_buffer98.out0, %handshake_buffer98.out0_valid = hw.instance "handshake_buffer98" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br2.outTrue: i64, in0_valid: %handshake_cond_br2.outTrue_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork16.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_sink2.in0_ready = hw.instance "handshake_sink2" @handshake_sink_in_ui64(in0: %handshake_cond_br2.outFalse: i64, in0_valid: %handshake_cond_br2.outFalse_valid: i1) -> (in0_ready: i1)
    %handshake_fork16.in0_ready, %handshake_fork16.out0, %handshake_fork16.out0_valid, %handshake_fork16.out1, %handshake_fork16.out1_valid = hw.instance "handshake_fork16" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer98.out0: i64, in0_valid: %handshake_buffer98.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer100.in0_ready: i1, out1_ready: %handshake_buffer99.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer99.in0_ready, %handshake_buffer99.out0, %handshake_buffer99.out0_valid = hw.instance "handshake_buffer99" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out1: i64, in0_valid: %handshake_fork16.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_addi1.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer100.in0_ready, %handshake_buffer100.out0, %handshake_buffer100.out0_valid = hw.instance "handshake_buffer100" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out0: i64, in0_valid: %handshake_fork16.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux3.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_cond_br3.cond_ready, %handshake_cond_br3.data_ready, %handshake_cond_br3.outTrue, %handshake_cond_br3.outTrue_valid, %handshake_cond_br3.outFalse, %handshake_cond_br3.outFalse_valid = hw.instance "handshake_cond_br3" @handshake_cond_br_in_ui1_2ins_2outs_ctrl(cond: %handshake_buffer91.out0: i1, cond_valid: %handshake_buffer91.out0_valid: i1, data: %handshake_buffer79.out0: i0, data_valid: %handshake_buffer79.out0_valid: i1, outTrue_ready: %handshake_buffer102.in0_ready: i1, outFalse_ready: %handshake_buffer101.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i0, outTrue_valid: i1, outFalse: i0, outFalse_valid: i1)
    %handshake_buffer101.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid = hw.instance "handshake_buffer101" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outFalse: i0, in0_valid: %handshake_cond_br3.outFalse_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %out0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer102.in0_ready, %handshake_buffer102.out0, %handshake_buffer102.out0_valid = hw.instance "handshake_buffer102" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outTrue: i0, in0_valid: %handshake_cond_br3.outTrue_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_fork17.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork17.in0_ready, %handshake_fork17.out0, %handshake_fork17.out0_valid, %handshake_fork17.out1, %handshake_fork17.out1_valid, %handshake_fork17.out2, %handshake_fork17.out2_valid, %handshake_fork17.out3, %handshake_fork17.out3_valid = hw.instance "handshake_fork17" @handshake_fork_1ins_4outs_ctrl(in0: %handshake_buffer102.out0: i0, in0_valid: %handshake_buffer102.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_buffer106.in0_ready: i1, out1_ready: %handshake_buffer105.in0_ready: i1, out2_ready: %handshake_buffer104.in0_ready: i1, out3_ready: %handshake_buffer103.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1)
    %handshake_buffer103.in0_ready, %handshake_buffer103.out0, %handshake_buffer103.out0_valid = hw.instance "handshake_buffer103" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out3: i0, in0_valid: %handshake_fork17.out3_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer104.in0_ready, %handshake_buffer104.out0, %handshake_buffer104.out0_valid = hw.instance "handshake_buffer104" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out2: i0, in0_valid: %handshake_fork17.out2_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_load1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer105.in0_ready, %handshake_buffer105.out0, %handshake_buffer105.out0_valid = hw.instance "handshake_buffer105" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out1: i0, in0_valid: %handshake_fork17.out1_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_join5.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer106.in0_ready, %handshake_buffer106.out0, %handshake_buffer106.out0_valid = hw.instance "handshake_buffer106" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out0: i0, in0_valid: %handshake_fork17.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store6.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_join5.in0_ready, %handshake_join5.in1_ready, %handshake_join5.in2_ready, %handshake_join5.in3_ready, %handshake_join5.out0, %handshake_join5.out0_valid = hw.instance "handshake_join5" @handshake_join_4ins_1outs_ctrl(in0: %handshake_buffer105.out0: i0, in0_valid: %handshake_buffer105.out0_valid: i1, in1: %handshake_buffer26.out0: i0, in1_valid: %handshake_buffer26.out0_valid: i1, in2: %handshake_buffer16.out0: i0, in2_valid: %handshake_buffer16.out0_valid: i1, in3: %handshake_buffer15.out0: i0, in3_valid: %handshake_buffer15.out0_valid: i1, out0_ready: %handshake_buffer107.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer107.in0_ready, %handshake_buffer107.out0, %handshake_buffer107.out0_valid = hw.instance "handshake_buffer107" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join5.out0: i0, in0_valid: %handshake_join5.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux0.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_load0.addrIn0_ready, %handshake_load0.dataFromMem_ready, %handshake_load0.ctrl_ready, %handshake_load0.dataOut, %handshake_load0.dataOut_valid, %handshake_load0.addrOut0, %handshake_load0.addrOut0_valid = hw.instance "handshake_load0" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer95.out0: i64, addrIn0_valid: %handshake_buffer95.out0_valid: i1, dataFromMem: %handshake_buffer30.out0: i64, dataFromMem_valid: %handshake_buffer30.out0_valid: i1, ctrl: %handshake_buffer103.out0: i0, ctrl_valid: %handshake_buffer103.out0_valid: i1, dataOut_ready: %handshake_buffer109.in0_ready: i1, addrOut0_ready: %handshake_buffer108.in0_ready: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer108.in0_ready, %handshake_buffer108.out0, %handshake_buffer108.out0_valid = hw.instance "handshake_buffer108" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.addrOut0: i64, in0_valid: %handshake_load0.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory2.ldAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer109.in0_ready, %handshake_buffer109.out0, %handshake_buffer109.out0_valid = hw.instance "handshake_buffer109" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.dataOut: i64, in0_valid: %handshake_load0.dataOut_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_addi0.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_load1.addrIn0_ready, %handshake_load1.dataFromMem_ready, %handshake_load1.ctrl_ready, %handshake_load1.dataOut, %handshake_load1.dataOut_valid, %handshake_load1.addrOut0, %handshake_load1.addrOut0_valid = hw.instance "handshake_load1" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer94.out0: i64, addrIn0_valid: %handshake_buffer94.out0_valid: i1, dataFromMem: %handshake_buffer20.out0: i64, dataFromMem_valid: %handshake_buffer20.out0_valid: i1, ctrl: %handshake_buffer104.out0: i0, ctrl_valid: %handshake_buffer104.out0_valid: i1, dataOut_ready: %handshake_buffer111.in0_ready: i1, addrOut0_ready: %handshake_buffer110.in0_ready: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer110.in0_ready, %handshake_buffer110.out0, %handshake_buffer110.out0_valid = hw.instance "handshake_buffer110" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.addrOut0: i64, in0_valid: %handshake_load1.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory1.ldAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer111.in0_ready, %handshake_buffer111.out0, %handshake_buffer111.out0_valid = hw.instance "handshake_buffer111" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.dataOut: i64, in0_valid: %handshake_load1.dataOut_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %arith_addi0.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %arith_addi0.in0_ready, %arith_addi0.in1_ready, %arith_addi0.out0, %arith_addi0.out0_valid = hw.instance "arith_addi0" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer109.out0: i64, in0_valid: %handshake_buffer109.out0_valid: i1, in1: %handshake_buffer111.out0: i64, in1_valid: %handshake_buffer111.out0_valid: i1, out0_ready: %handshake_buffer112.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer112.in0_ready, %handshake_buffer112.out0, %handshake_buffer112.out0_valid = hw.instance "handshake_buffer112" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi0.out0: i64, in0_valid: %arith_addi0.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_store6.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_store6.addrIn0_ready, %handshake_store6.dataIn_ready, %handshake_store6.ctrl_ready, %handshake_store6.dataToMem, %handshake_store6.dataToMem_valid, %handshake_store6.addrOut0, %handshake_store6.addrOut0_valid = hw.instance "handshake_store6" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer93.out0: i64, addrIn0_valid: %handshake_buffer93.out0_valid: i1, dataIn: %handshake_buffer112.out0: i64, dataIn_valid: %handshake_buffer112.out0_valid: i1, ctrl: %handshake_buffer106.out0: i0, ctrl_valid: %handshake_buffer106.out0_valid: i1, dataToMem_ready: %handshake_buffer114.in0_ready: i1, addrOut0_ready: %handshake_buffer113.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer113.in0_ready, %handshake_buffer113.out0, %handshake_buffer113.out0_valid = hw.instance "handshake_buffer113" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.addrOut0: i64, in0_valid: %handshake_store6.addrOut0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory0.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer114.in0_ready, %handshake_buffer114.out0, %handshake_buffer114.out0_valid = hw.instance "handshake_buffer114" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.dataToMem: i64, in0_valid: %handshake_store6.dataToMem_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_memory0.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %arith_addi1.in0_ready, %arith_addi1.in1_ready, %arith_addi1.out0, %arith_addi1.out0_valid = hw.instance "arith_addi1" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer96.out0: i64, in0_valid: %handshake_buffer96.out0_valid: i1, in1: %handshake_buffer99.out0: i64, in1_valid: %handshake_buffer99.out0_valid: i1, out0_ready: %handshake_buffer115.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer115.in0_ready, %handshake_buffer115.out0, %handshake_buffer115.out0_valid = hw.instance "handshake_buffer115" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi1.out0: i64, in0_valid: %arith_addi1.out0_valid: i1, clock: %clock: !seq.clock, reset: %reset: i1, out0_ready: %handshake_mux1.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    hw.output %handshake_buffer0.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid : i1, i0, i1
  }
}


// -----// IR Dump After LowerSeqToSV (lower-seq-to-sv) //----- //
module {
  hw.module @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
    %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %valid0_reg, %3 : i1
    }(syncreset : posedge %reset) {
      sv.passign %valid0_reg, %false : i1
    }
    %1 = comb.xor %0, %true : i1
    %2 = comb.or %1, %8 : i1
    %3 = comb.mux %2, %in0_valid, %0 : i1
    %4 = comb.mux %2, %in0, %5 : i0
    %data0_reg = sv.reg sym @data0_reg : !hw.inout<i0> 
    %5 = sv.read_inout %data0_reg : !hw.inout<i0>
    sv.alwaysff(posedge %clock) {
      sv.passign %data0_reg, %4 : i0
    }(syncreset : posedge %reset) {
      sv.passign %data0_reg, %c0_i0 : i0
    }
    %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
    %6 = sv.read_inout %ready0_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %ready0_reg, %14 : i1
    }(syncreset : posedge %reset) {
      sv.passign %ready0_reg, %false : i1
    }
    %7 = comb.mux %6, %6, %0 : i1
    %8 = comb.xor %6, %true : i1
    %9 = comb.xor %21, %true : i1
    %10 = comb.and %9, %8 : i1
    %11 = comb.mux %10, %0, %6 : i1
    %12 = comb.and %21, %6 : i1
    %13 = comb.xor %12, %true : i1
    %14 = comb.and %13, %11 : i1
    %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i0> 
    %15 = sv.read_inout %ctrl_data0_reg : !hw.inout<i0>
    sv.alwaysff(posedge %clock) {
      sv.passign %ctrl_data0_reg, %18 : i0
    }(syncreset : posedge %reset) {
      sv.passign %ctrl_data0_reg, %c0_i0 : i0
    }
    %16 = comb.mux %6, %15, %5 : i0
    %17 = comb.mux %10, %5, %15 : i0
    %18 = comb.mux %12, %c0_i0, %17 : i0
    %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
    %19 = sv.read_inout %valid1_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %valid1_reg, %22 : i1
    }(syncreset : posedge %reset) {
      sv.passign %valid1_reg, %false : i1
    }
    %20 = comb.xor %19, %true : i1
    %21 = comb.or %20, %27 : i1
    %22 = comb.mux %21, %7, %19 : i1
    %23 = comb.mux %21, %16, %24 : i0
    %data1_reg = sv.reg sym @data1_reg : !hw.inout<i0> 
    %24 = sv.read_inout %data1_reg : !hw.inout<i0>
    sv.alwaysff(posedge %clock) {
      sv.passign %data1_reg, %23 : i0
    }(syncreset : posedge %reset) {
      sv.passign %data1_reg, %c0_i0 : i0
    }
    %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
    %25 = sv.read_inout %ready1_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %ready1_reg, %33 : i1
    }(syncreset : posedge %reset) {
      sv.passign %ready1_reg, %false : i1
    }
    %26 = comb.mux %25, %25, %19 : i1
    %27 = comb.xor %25, %true : i1
    %28 = comb.xor %out0_ready, %true : i1
    %29 = comb.and %28, %27 : i1
    %30 = comb.mux %29, %19, %25 : i1
    %31 = comb.and %out0_ready, %25 : i1
    %32 = comb.xor %31, %true : i1
    %33 = comb.and %32, %30 : i1
    %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i0> 
    %34 = sv.read_inout %ctrl_data1_reg : !hw.inout<i0>
    sv.alwaysff(posedge %clock) {
      sv.passign %ctrl_data1_reg, %37 : i0
    }(syncreset : posedge %reset) {
      sv.passign %ctrl_data1_reg, %c0_i0 : i0
    }
    %35 = comb.mux %25, %34, %24 : i0
    %36 = comb.mux %29, %24, %34 : i0
    %37 = comb.mux %31, %c0_i0, %36 : i0
    hw.output %2, %35, %26 : i1, i0, i1
  }
  hw.module @handshake_fork_1ins_14outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, in %out5_ready : i1, in %out6_ready : i1, in %out7_ready : i1, in %out8_ready : i1, in %out9_ready : i1, in %out10_ready : i1, in %out11_ready : i1, in %out12_ready : i1, in %out13_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1, out out4 : i0, out out4_valid : i1, out out5 : i0, out out5_valid : i1, out out6 : i0, out out6_valid : i1, out out7 : i0, out out7_valid : i1, out out8 : i0, out out8_valid : i1, out out9 : i0, out out9_valid : i1, out out10 : i0, out out10_valid : i1, out out11 : i0, out out11_valid : i1, out out12 : i0, out out12_valid : i1, out out13 : i0, out out13_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %98, %true : i1
    %1 = comb.and %6, %0 : i1
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_0, %1 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_0, %false : i1
    }
    %3 = comb.xor %2, %true : i1
    %4 = comb.and %3, %in0_valid : i1
    %5 = comb.and %out0_ready, %4 : i1
    %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
    %7 = comb.xor %98, %true : i1
    %8 = comb.and %13, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_1, %8 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_1, %false : i1
    }
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %in0_valid : i1
    %12 = comb.and %out1_ready, %11 : i1
    %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
    %14 = comb.xor %98, %true : i1
    %15 = comb.and %20, %14 : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_2, %15 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_2, %false : i1
    }
    %17 = comb.xor %16, %true : i1
    %18 = comb.and %17, %in0_valid : i1
    %19 = comb.and %out2_ready, %18 : i1
    %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
    %21 = comb.xor %98, %true : i1
    %22 = comb.and %27, %21 : i1
    %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
    %23 = sv.read_inout %emitted_3 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_3, %22 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_3, %false : i1
    }
    %24 = comb.xor %23, %true : i1
    %25 = comb.and %24, %in0_valid : i1
    %26 = comb.and %out3_ready, %25 : i1
    %27 = comb.or %26, %23 {sv.namehint = "done3"} : i1
    %28 = comb.xor %98, %true : i1
    %29 = comb.and %34, %28 : i1
    %emitted_4 = sv.reg sym @emitted_4 : !hw.inout<i1> 
    %30 = sv.read_inout %emitted_4 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_4, %29 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_4, %false : i1
    }
    %31 = comb.xor %30, %true : i1
    %32 = comb.and %31, %in0_valid : i1
    %33 = comb.and %out4_ready, %32 : i1
    %34 = comb.or %33, %30 {sv.namehint = "done4"} : i1
    %35 = comb.xor %98, %true : i1
    %36 = comb.and %41, %35 : i1
    %emitted_5 = sv.reg sym @emitted_5 : !hw.inout<i1> 
    %37 = sv.read_inout %emitted_5 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_5, %36 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_5, %false : i1
    }
    %38 = comb.xor %37, %true : i1
    %39 = comb.and %38, %in0_valid : i1
    %40 = comb.and %out5_ready, %39 : i1
    %41 = comb.or %40, %37 {sv.namehint = "done5"} : i1
    %42 = comb.xor %98, %true : i1
    %43 = comb.and %48, %42 : i1
    %emitted_6 = sv.reg sym @emitted_6 : !hw.inout<i1> 
    %44 = sv.read_inout %emitted_6 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_6, %43 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_6, %false : i1
    }
    %45 = comb.xor %44, %true : i1
    %46 = comb.and %45, %in0_valid : i1
    %47 = comb.and %out6_ready, %46 : i1
    %48 = comb.or %47, %44 {sv.namehint = "done6"} : i1
    %49 = comb.xor %98, %true : i1
    %50 = comb.and %55, %49 : i1
    %emitted_7 = sv.reg sym @emitted_7 : !hw.inout<i1> 
    %51 = sv.read_inout %emitted_7 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_7, %50 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_7, %false : i1
    }
    %52 = comb.xor %51, %true : i1
    %53 = comb.and %52, %in0_valid : i1
    %54 = comb.and %out7_ready, %53 : i1
    %55 = comb.or %54, %51 {sv.namehint = "done7"} : i1
    %56 = comb.xor %98, %true : i1
    %57 = comb.and %62, %56 : i1
    %emitted_8 = sv.reg sym @emitted_8 : !hw.inout<i1> 
    %58 = sv.read_inout %emitted_8 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_8, %57 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_8, %false : i1
    }
    %59 = comb.xor %58, %true : i1
    %60 = comb.and %59, %in0_valid : i1
    %61 = comb.and %out8_ready, %60 : i1
    %62 = comb.or %61, %58 {sv.namehint = "done8"} : i1
    %63 = comb.xor %98, %true : i1
    %64 = comb.and %69, %63 : i1
    %emitted_9 = sv.reg sym @emitted_9 : !hw.inout<i1> 
    %65 = sv.read_inout %emitted_9 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_9, %64 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_9, %false : i1
    }
    %66 = comb.xor %65, %true : i1
    %67 = comb.and %66, %in0_valid : i1
    %68 = comb.and %out9_ready, %67 : i1
    %69 = comb.or %68, %65 {sv.namehint = "done9"} : i1
    %70 = comb.xor %98, %true : i1
    %71 = comb.and %76, %70 : i1
    %emitted_10 = sv.reg sym @emitted_10 : !hw.inout<i1> 
    %72 = sv.read_inout %emitted_10 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_10, %71 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_10, %false : i1
    }
    %73 = comb.xor %72, %true : i1
    %74 = comb.and %73, %in0_valid : i1
    %75 = comb.and %out10_ready, %74 : i1
    %76 = comb.or %75, %72 {sv.namehint = "done10"} : i1
    %77 = comb.xor %98, %true : i1
    %78 = comb.and %83, %77 : i1
    %emitted_11 = sv.reg sym @emitted_11 : !hw.inout<i1> 
    %79 = sv.read_inout %emitted_11 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_11, %78 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_11, %false : i1
    }
    %80 = comb.xor %79, %true : i1
    %81 = comb.and %80, %in0_valid : i1
    %82 = comb.and %out11_ready, %81 : i1
    %83 = comb.or %82, %79 {sv.namehint = "done11"} : i1
    %84 = comb.xor %98, %true : i1
    %85 = comb.and %90, %84 : i1
    %emitted_12 = sv.reg sym @emitted_12 : !hw.inout<i1> 
    %86 = sv.read_inout %emitted_12 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_12, %85 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_12, %false : i1
    }
    %87 = comb.xor %86, %true : i1
    %88 = comb.and %87, %in0_valid : i1
    %89 = comb.and %out12_ready, %88 : i1
    %90 = comb.or %89, %86 {sv.namehint = "done12"} : i1
    %91 = comb.xor %98, %true : i1
    %92 = comb.and %97, %91 : i1
    %emitted_13 = sv.reg sym @emitted_13 : !hw.inout<i1> 
    %93 = sv.read_inout %emitted_13 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_13, %92 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_13, %false : i1
    }
    %94 = comb.xor %93, %true : i1
    %95 = comb.and %94, %in0_valid : i1
    %96 = comb.and %out13_ready, %95 : i1
    %97 = comb.or %96, %93 {sv.namehint = "done13"} : i1
    %98 = comb.and %6, %13, %20, %27, %34, %41, %48, %55, %62, %69, %76, %83, %90, %97 {sv.namehint = "allDone"} : i1
    hw.output %98, %in0, %4, %in0, %11, %in0, %18, %in0, %25, %in0, %32, %in0, %39, %in0, %46, %in0, %53, %in0, %60, %in0, %67, %in0, %74, %in0, %81, %in0, %88, %in0, %95 : i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id2(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %clock : i1, in %reset : i1, in %stDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stDone0 : i0, out stDone0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_2 = sv.reg : !hw.inout<uarray<3xi64>> 
    sv.alwaysff(posedge %clock) {
      sv.if %4 {
        %7 = sv.array_index_inout %_handshake_memory_2[%6] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %7, %stData0 : i64
      }
    }(syncreset : posedge %reset) {
    }
    %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
    %0 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %writeValidBuffer, %5 : i1
    }(syncreset : posedge %reset) {
      sv.passign %writeValidBuffer, %false : i1
    }
    %1 = comb.and %stDone0_ready, %0 {sv.namehint = "storeCompleted"} : i1
    %2 = comb.xor %0, %true : i1
    %3 = comb.or %2, %1 {sv.namehint = "emptyOrComplete"} : i1
    %4 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
    %5 = comb.mux %3, %4, %0 : i1
    %6 = comb.extract %stAddr0 from 0 : (i64) -> i2
    hw.output %3, %3, %c0_i0, %0 : i1, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id1(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : i1, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_1 = sv.reg : !hw.inout<uarray<3xi64>> 
    sv.alwaysff(posedge %clock) {
      sv.if %36 {
        %39 = sv.array_index_inout %_handshake_memory_1[%38] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %39, %stData2 : i64
      }
      sv.if %29 {
        %39 = sv.array_index_inout %_handshake_memory_1[%31] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %39, %stData1 : i64
      }
      sv.if %22 {
        %39 = sv.array_index_inout %_handshake_memory_1[%24] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %39, %stData0 : i64
      }
    }(syncreset : posedge %reset) {
    }
    %0 = comb.extract %ldAddr0 from 0 : (i64) -> i2
    %1 = sv.array_index_inout %_handshake_memory_1[%0] : !hw.inout<uarray<3xi64>>, i2
    %2 = sv.read_inout %1 : !hw.inout<i64>
    %3 = comb.xor %17, %true : i1
    %4 = comb.and %9, %3 : i1
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %5 = sv.read_inout %emitted_0 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_0, %4 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_0, %false : i1
    }
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %ldAddr0_valid : i1
    %8 = comb.and %ldData0_ready, %7 : i1
    %9 = comb.or %8, %5 {sv.namehint = "done0"} : i1
    %10 = comb.xor %17, %true : i1
    %11 = comb.and %16, %10 : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %12 = sv.read_inout %emitted_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_1, %11 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_1, %false : i1
    }
    %13 = comb.xor %12, %true : i1
    %14 = comb.and %13, %ldAddr0_valid : i1
    %15 = comb.and %ldDone0_ready, %14 : i1
    %16 = comb.or %15, %12 {sv.namehint = "done1"} : i1
    %17 = comb.and %9, %16 {sv.namehint = "allDone"} : i1
    %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
    %18 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %writeValidBuffer, %23 : i1
    }(syncreset : posedge %reset) {
      sv.passign %writeValidBuffer, %false : i1
    }
    %19 = comb.and %stDone0_ready, %18 {sv.namehint = "storeCompleted"} : i1
    %20 = comb.xor %18, %true : i1
    %21 = comb.or %20, %19 {sv.namehint = "emptyOrComplete"} : i1
    %22 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
    %23 = comb.mux %21, %22, %18 : i1
    %24 = comb.extract %stAddr0 from 0 : (i64) -> i2
    %writeValidBuffer_0 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
    %25 = sv.read_inout %writeValidBuffer_0 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %writeValidBuffer_0, %30 : i1
    }(syncreset : posedge %reset) {
      sv.passign %writeValidBuffer_0, %false : i1
    }
    %26 = comb.and %stDone1_ready, %25 {sv.namehint = "storeCompleted"} : i1
    %27 = comb.xor %25, %true : i1
    %28 = comb.or %27, %26 {sv.namehint = "emptyOrComplete"} : i1
    %29 = comb.and %stAddr1_valid, %stData1_valid {sv.namehint = "writeValid"} : i1
    %30 = comb.mux %28, %29, %25 : i1
    %31 = comb.extract %stAddr1 from 0 : (i64) -> i2
    %writeValidBuffer_1 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
    %32 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %writeValidBuffer_1, %37 : i1
    }(syncreset : posedge %reset) {
      sv.passign %writeValidBuffer_1, %false : i1
    }
    %33 = comb.and %stDone2_ready, %32 {sv.namehint = "storeCompleted"} : i1
    %34 = comb.xor %32, %true : i1
    %35 = comb.or %34, %33 {sv.namehint = "emptyOrComplete"} : i1
    %36 = comb.and %stAddr2_valid, %stData2_valid {sv.namehint = "writeValid"} : i1
    %37 = comb.mux %35, %36, %32 : i1
    %38 = comb.extract %stAddr2 from 0 : (i64) -> i2
    hw.output %21, %21, %28, %28, %35, %35, %17, %2, %7, %c0_i0, %18, %c0_i0, %25, %c0_i0, %32, %c0_i0, %14 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_buffer_in_ui64_out_ui64_2slots_seq(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i64 = hw.constant 0 : i64
    %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
    %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %valid0_reg, %3 : i1
    }(syncreset : posedge %reset) {
      sv.passign %valid0_reg, %false : i1
    }
    %1 = comb.xor %0, %true : i1
    %2 = comb.or %1, %8 : i1
    %3 = comb.mux %2, %in0_valid, %0 : i1
    %4 = comb.mux %2, %in0, %5 : i64
    %data0_reg = sv.reg sym @data0_reg : !hw.inout<i64> 
    %5 = sv.read_inout %data0_reg : !hw.inout<i64>
    sv.alwaysff(posedge %clock) {
      sv.passign %data0_reg, %4 : i64
    }(syncreset : posedge %reset) {
      sv.passign %data0_reg, %c0_i64 : i64
    }
    %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
    %6 = sv.read_inout %ready0_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %ready0_reg, %14 : i1
    }(syncreset : posedge %reset) {
      sv.passign %ready0_reg, %false : i1
    }
    %7 = comb.mux %6, %6, %0 : i1
    %8 = comb.xor %6, %true : i1
    %9 = comb.xor %21, %true : i1
    %10 = comb.and %9, %8 : i1
    %11 = comb.mux %10, %0, %6 : i1
    %12 = comb.and %21, %6 : i1
    %13 = comb.xor %12, %true : i1
    %14 = comb.and %13, %11 : i1
    %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i64> 
    %15 = sv.read_inout %ctrl_data0_reg : !hw.inout<i64>
    sv.alwaysff(posedge %clock) {
      sv.passign %ctrl_data0_reg, %18 : i64
    }(syncreset : posedge %reset) {
      sv.passign %ctrl_data0_reg, %c0_i64 : i64
    }
    %16 = comb.mux %6, %15, %5 : i64
    %17 = comb.mux %10, %5, %15 : i64
    %18 = comb.mux %12, %c0_i64, %17 : i64
    %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
    %19 = sv.read_inout %valid1_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %valid1_reg, %22 : i1
    }(syncreset : posedge %reset) {
      sv.passign %valid1_reg, %false : i1
    }
    %20 = comb.xor %19, %true : i1
    %21 = comb.or %20, %27 : i1
    %22 = comb.mux %21, %7, %19 : i1
    %23 = comb.mux %21, %16, %24 : i64
    %data1_reg = sv.reg sym @data1_reg : !hw.inout<i64> 
    %24 = sv.read_inout %data1_reg : !hw.inout<i64>
    sv.alwaysff(posedge %clock) {
      sv.passign %data1_reg, %23 : i64
    }(syncreset : posedge %reset) {
      sv.passign %data1_reg, %c0_i64 : i64
    }
    %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
    %25 = sv.read_inout %ready1_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %ready1_reg, %33 : i1
    }(syncreset : posedge %reset) {
      sv.passign %ready1_reg, %false : i1
    }
    %26 = comb.mux %25, %25, %19 : i1
    %27 = comb.xor %25, %true : i1
    %28 = comb.xor %out0_ready, %true : i1
    %29 = comb.and %28, %27 : i1
    %30 = comb.mux %29, %19, %25 : i1
    %31 = comb.and %out0_ready, %25 : i1
    %32 = comb.xor %31, %true : i1
    %33 = comb.and %32, %30 : i1
    %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i64> 
    %34 = sv.read_inout %ctrl_data1_reg : !hw.inout<i64>
    sv.alwaysff(posedge %clock) {
      sv.passign %ctrl_data1_reg, %37 : i64
    }(syncreset : posedge %reset) {
      sv.passign %ctrl_data1_reg, %c0_i64 : i64
    }
    %35 = comb.mux %25, %34, %24 : i64
    %36 = comb.mux %29, %24, %34 : i64
    %37 = comb.mux %31, %c0_i64, %36 : i64
    hw.output %2, %35, %26 : i1, i64, i1
  }
  hw.module @handshake_fork_1ins_2outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %14, %true : i1
    %1 = comb.and %6, %0 : i1
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_0, %1 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_0, %false : i1
    }
    %3 = comb.xor %2, %true : i1
    %4 = comb.and %3, %in0_valid : i1
    %5 = comb.and %out0_ready, %4 : i1
    %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
    %7 = comb.xor %14, %true : i1
    %8 = comb.and %13, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_1, %8 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_1, %false : i1
    }
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %in0_valid : i1
    %12 = comb.and %out1_ready, %11 : i1
    %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
    %14 = comb.and %6, %13 {sv.namehint = "allDone"} : i1
    hw.output %14, %in0, %4, %in0, %11 : i1, i0, i1, i0, i1
  }
  hw.module @handshake_fork_1ins_3outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %21, %true : i1
    %1 = comb.and %6, %0 : i1
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_0, %1 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_0, %false : i1
    }
    %3 = comb.xor %2, %true : i1
    %4 = comb.and %3, %in0_valid : i1
    %5 = comb.and %out0_ready, %4 : i1
    %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
    %7 = comb.xor %21, %true : i1
    %8 = comb.and %13, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_1, %8 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_1, %false : i1
    }
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %in0_valid : i1
    %12 = comb.and %out1_ready, %11 : i1
    %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
    %14 = comb.xor %21, %true : i1
    %15 = comb.and %20, %14 : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_2, %15 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_2, %false : i1
    }
    %17 = comb.xor %16, %true : i1
    %18 = comb.and %17, %in0_valid : i1
    %19 = comb.and %out2_ready, %18 : i1
    %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
    %21 = comb.and %6, %13, %20 {sv.namehint = "allDone"} : i1
    hw.output %21, %in0, %4, %in0, %11, %in0, %18 : i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id0(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : i1, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_0 = sv.reg : !hw.inout<uarray<3xi64>> 
    sv.alwaysff(posedge %clock) {
      sv.if %36 {
        %39 = sv.array_index_inout %_handshake_memory_0[%38] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %39, %stData2 : i64
      }
      sv.if %29 {
        %39 = sv.array_index_inout %_handshake_memory_0[%31] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %39, %stData1 : i64
      }
      sv.if %22 {
        %39 = sv.array_index_inout %_handshake_memory_0[%24] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %39, %stData0 : i64
      }
    }(syncreset : posedge %reset) {
    }
    %0 = comb.extract %ldAddr0 from 0 : (i64) -> i2
    %1 = sv.array_index_inout %_handshake_memory_0[%0] : !hw.inout<uarray<3xi64>>, i2
    %2 = sv.read_inout %1 : !hw.inout<i64>
    %3 = comb.xor %17, %true : i1
    %4 = comb.and %9, %3 : i1
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %5 = sv.read_inout %emitted_0 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_0, %4 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_0, %false : i1
    }
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %ldAddr0_valid : i1
    %8 = comb.and %ldData0_ready, %7 : i1
    %9 = comb.or %8, %5 {sv.namehint = "done0"} : i1
    %10 = comb.xor %17, %true : i1
    %11 = comb.and %16, %10 : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %12 = sv.read_inout %emitted_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_1, %11 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_1, %false : i1
    }
    %13 = comb.xor %12, %true : i1
    %14 = comb.and %13, %ldAddr0_valid : i1
    %15 = comb.and %ldDone0_ready, %14 : i1
    %16 = comb.or %15, %12 {sv.namehint = "done1"} : i1
    %17 = comb.and %9, %16 {sv.namehint = "allDone"} : i1
    %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
    %18 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %writeValidBuffer, %23 : i1
    }(syncreset : posedge %reset) {
      sv.passign %writeValidBuffer, %false : i1
    }
    %19 = comb.and %stDone0_ready, %18 {sv.namehint = "storeCompleted"} : i1
    %20 = comb.xor %18, %true : i1
    %21 = comb.or %20, %19 {sv.namehint = "emptyOrComplete"} : i1
    %22 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
    %23 = comb.mux %21, %22, %18 : i1
    %24 = comb.extract %stAddr0 from 0 : (i64) -> i2
    %writeValidBuffer_0 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
    %25 = sv.read_inout %writeValidBuffer_0 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %writeValidBuffer_0, %30 : i1
    }(syncreset : posedge %reset) {
      sv.passign %writeValidBuffer_0, %false : i1
    }
    %26 = comb.and %stDone1_ready, %25 {sv.namehint = "storeCompleted"} : i1
    %27 = comb.xor %25, %true : i1
    %28 = comb.or %27, %26 {sv.namehint = "emptyOrComplete"} : i1
    %29 = comb.and %stAddr1_valid, %stData1_valid {sv.namehint = "writeValid"} : i1
    %30 = comb.mux %28, %29, %25 : i1
    %31 = comb.extract %stAddr1 from 0 : (i64) -> i2
    %writeValidBuffer_1 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
    %32 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %writeValidBuffer_1, %37 : i1
    }(syncreset : posedge %reset) {
      sv.passign %writeValidBuffer_1, %false : i1
    }
    %33 = comb.and %stDone2_ready, %32 {sv.namehint = "storeCompleted"} : i1
    %34 = comb.xor %32, %true : i1
    %35 = comb.or %34, %33 {sv.namehint = "emptyOrComplete"} : i1
    %36 = comb.and %stAddr2_valid, %stData2_valid {sv.namehint = "writeValid"} : i1
    %37 = comb.mux %35, %36, %32 : i1
    %38 = comb.extract %stAddr2 from 0 : (i64) -> i2
    hw.output %21, %21, %28, %28, %35, %35, %17, %2, %7, %c0_i0, %18, %c0_i0, %25, %c0_i0, %32, %c0_i0, %14 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_join_7ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %in4 : i0, in %in4_valid : i1, in %in5 : i0, in %in5_valid : i1, in %in6 : i0, in %in6_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out in4_ready : i1, out in5_ready : i1, out in6_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid, %in2_valid, %in3_valid, %in4_valid, %in5_valid, %in6_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %1, %1, %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i1, i1, i1, i1, i0, i1
  }
  hw.module @handshake_constant_c3_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c3_i64 = hw.constant 3 : i64
    hw.output %out0_ready, %c3_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %14, %true : i1
    %1 = comb.and %6, %0 : i1
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_0, %1 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_0, %false : i1
    }
    %3 = comb.xor %2, %true : i1
    %4 = comb.and %3, %in0_valid : i1
    %5 = comb.and %out0_ready, %4 : i1
    %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
    %7 = comb.xor %14, %true : i1
    %8 = comb.and %13, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_1, %8 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_1, %false : i1
    }
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %in0_valid : i1
    %12 = comb.and %out1_ready, %11 : i1
    %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
    %14 = comb.and %6, %13 {sv.namehint = "allDone"} : i1
    hw.output %14, %in0, %4, %in0, %11 : i1, i64, i1, i64, i1
  }
  hw.module @handshake_constant_c2_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c2_i64 = hw.constant 2 : i64
    hw.output %out0_ready, %c2_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_constant_c1_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c1_i64 = hw.constant 1 : i64
    hw.output %out0_ready, %c1_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %21, %true : i1
    %1 = comb.and %6, %0 : i1
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_0, %1 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_0, %false : i1
    }
    %3 = comb.xor %2, %true : i1
    %4 = comb.and %3, %in0_valid : i1
    %5 = comb.and %out0_ready, %4 : i1
    %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
    %7 = comb.xor %21, %true : i1
    %8 = comb.and %13, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_1, %8 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_1, %false : i1
    }
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %in0_valid : i1
    %12 = comb.and %out1_ready, %11 : i1
    %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
    %14 = comb.xor %21, %true : i1
    %15 = comb.and %20, %14 : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_2, %15 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_2, %false : i1
    }
    %17 = comb.xor %16, %true : i1
    %18 = comb.and %17, %in0_valid : i1
    %19 = comb.and %out2_ready, %18 : i1
    %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
    %21 = comb.and %6, %13, %20 {sv.namehint = "allDone"} : i1
    hw.output %21, %in0, %4, %in0, %11, %in0, %18 : i1, i64, i1, i64, i1, i64, i1
  }
  hw.module @handshake_constant_c0_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c0_i64 = hw.constant 0 : i64
    hw.output %out0_ready, %c0_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_store_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataIn : i64, in %dataIn_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataToMem_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataIn_ready : i1, out ctrl_ready : i1, out dataToMem : i64, out dataToMem_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
    %0 = comb.and %dataIn_valid, %addrIn0_valid, %ctrl_valid : i1
    %1 = comb.and %dataToMem_ready, %addrOut0_ready, %0 : i1
    hw.output %1, %1, %1, %dataIn, %0, %addrIn0, %0 : i1, i1, i1, i64, i1, i64, i1
  }
  hw.module @handshake_join_2ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %c0_i0, %0 : i1, i1, i0, i1
  }
  hw.module @handshake_join_3ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid, %in2_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i0, i1
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
    %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %valid0_reg, %3 : i1
    }(syncreset : posedge %reset) {
      sv.passign %valid0_reg, %true : i1
    }
    %1 = comb.xor %0, %true : i1
    %2 = comb.or %1, %8 : i1
    %3 = comb.mux %2, %in0_valid, %0 : i1
    %4 = comb.mux %2, %in0, %5 : i1
    %data0_reg = sv.reg sym @data0_reg : !hw.inout<i1> 
    %5 = sv.read_inout %data0_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %data0_reg, %4 : i1
    }(syncreset : posedge %reset) {
      sv.passign %data0_reg, %false : i1
    }
    %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
    %6 = sv.read_inout %ready0_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %ready0_reg, %14 : i1
    }(syncreset : posedge %reset) {
      sv.passign %ready0_reg, %false : i1
    }
    %7 = comb.mux %6, %6, %0 : i1
    %8 = comb.xor %6, %true : i1
    %9 = comb.xor %out0_ready, %true : i1
    %10 = comb.and %9, %8 : i1
    %11 = comb.mux %10, %0, %6 : i1
    %12 = comb.and %out0_ready, %6 : i1
    %13 = comb.xor %12, %true : i1
    %14 = comb.and %13, %11 : i1
    %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i1> 
    %15 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %ctrl_data0_reg, %19 : i1
    }(syncreset : posedge %reset) {
      sv.passign %ctrl_data0_reg, %false : i1
    }
    %16 = comb.mux %6, %15, %5 : i1
    %17 = comb.mux %10, %5, %15 : i1
    %18 = comb.xor %12, %true : i1
    %19 = comb.and %18, %17 : i1
    hw.output %2, %16, %7 : i1, i1, i1
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %28, %true : i1
    %1 = comb.and %6, %0 : i1
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_0, %1 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_0, %false : i1
    }
    %3 = comb.xor %2, %true : i1
    %4 = comb.and %3, %in0_valid : i1
    %5 = comb.and %out0_ready, %4 : i1
    %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
    %7 = comb.xor %28, %true : i1
    %8 = comb.and %13, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_1, %8 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_1, %false : i1
    }
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %in0_valid : i1
    %12 = comb.and %out1_ready, %11 : i1
    %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
    %14 = comb.xor %28, %true : i1
    %15 = comb.and %20, %14 : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_2, %15 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_2, %false : i1
    }
    %17 = comb.xor %16, %true : i1
    %18 = comb.and %17, %in0_valid : i1
    %19 = comb.and %out2_ready, %18 : i1
    %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
    %21 = comb.xor %28, %true : i1
    %22 = comb.and %27, %21 : i1
    %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
    %23 = sv.read_inout %emitted_3 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_3, %22 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_3, %false : i1
    }
    %24 = comb.xor %23, %true : i1
    %25 = comb.and %24, %in0_valid : i1
    %26 = comb.and %out3_ready, %25 : i1
    %27 = comb.or %26, %23 {sv.namehint = "done3"} : i1
    %28 = comb.and %6, %13, %20, %27 {sv.namehint = "allDone"} : i1
    hw.output %28, %in0, %4, %in0, %11, %in0, %18, %in0, %25 : i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_2slots_seq(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
    %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %valid0_reg, %3 : i1
    }(syncreset : posedge %reset) {
      sv.passign %valid0_reg, %false : i1
    }
    %1 = comb.xor %0, %true : i1
    %2 = comb.or %1, %8 : i1
    %3 = comb.mux %2, %in0_valid, %0 : i1
    %4 = comb.mux %2, %in0, %5 : i1
    %data0_reg = sv.reg sym @data0_reg : !hw.inout<i1> 
    %5 = sv.read_inout %data0_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %data0_reg, %4 : i1
    }(syncreset : posedge %reset) {
      sv.passign %data0_reg, %false : i1
    }
    %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
    %6 = sv.read_inout %ready0_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %ready0_reg, %14 : i1
    }(syncreset : posedge %reset) {
      sv.passign %ready0_reg, %false : i1
    }
    %7 = comb.mux %6, %6, %0 : i1
    %8 = comb.xor %6, %true : i1
    %9 = comb.xor %22, %true : i1
    %10 = comb.and %9, %8 : i1
    %11 = comb.mux %10, %0, %6 : i1
    %12 = comb.and %22, %6 : i1
    %13 = comb.xor %12, %true : i1
    %14 = comb.and %13, %11 : i1
    %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i1> 
    %15 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %ctrl_data0_reg, %19 : i1
    }(syncreset : posedge %reset) {
      sv.passign %ctrl_data0_reg, %false : i1
    }
    %16 = comb.mux %6, %15, %5 : i1
    %17 = comb.mux %10, %5, %15 : i1
    %18 = comb.xor %12, %true : i1
    %19 = comb.and %18, %17 : i1
    %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
    %20 = sv.read_inout %valid1_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %valid1_reg, %23 : i1
    }(syncreset : posedge %reset) {
      sv.passign %valid1_reg, %false : i1
    }
    %21 = comb.xor %20, %true : i1
    %22 = comb.or %21, %28 : i1
    %23 = comb.mux %22, %7, %20 : i1
    %24 = comb.mux %22, %16, %25 : i1
    %data1_reg = sv.reg sym @data1_reg : !hw.inout<i1> 
    %25 = sv.read_inout %data1_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %data1_reg, %24 : i1
    }(syncreset : posedge %reset) {
      sv.passign %data1_reg, %false : i1
    }
    %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
    %26 = sv.read_inout %ready1_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %ready1_reg, %34 : i1
    }(syncreset : posedge %reset) {
      sv.passign %ready1_reg, %false : i1
    }
    %27 = comb.mux %26, %26, %20 : i1
    %28 = comb.xor %26, %true : i1
    %29 = comb.xor %out0_ready, %true : i1
    %30 = comb.and %29, %28 : i1
    %31 = comb.mux %30, %20, %26 : i1
    %32 = comb.and %out0_ready, %26 : i1
    %33 = comb.xor %32, %true : i1
    %34 = comb.and %33, %31 : i1
    %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i1> 
    %35 = sv.read_inout %ctrl_data1_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %ctrl_data1_reg, %39 : i1
    }(syncreset : posedge %reset) {
      sv.passign %ctrl_data1_reg, %false : i1
    }
    %36 = comb.mux %26, %35, %25 : i1
    %37 = comb.mux %30, %25, %35 : i1
    %38 = comb.xor %32, %true : i1
    %39 = comb.and %38, %37 : i1
    hw.output %2, %36, %27 : i1, i1, i1
  }
  hw.module @handshake_mux_in_ui1_3ins_1outs_ctrl(in %select : i1, in %select_valid : i1, in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %0 = comb.concat %false, %select : i1, i1
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = comb.mux %select, %in1_valid, %in0_valid : i1
    %3 = comb.and %2, %select_valid : i1
    %4 = comb.and %3, %out0_ready : i1
    %5 = comb.extract %1 from 0 : (i2) -> i1
    %6 = comb.and %5, %4 : i1
    %7 = comb.extract %1 from 1 : (i2) -> i1
    %8 = comb.and %7, %4 : i1
    %9 = comb.mux %select, %in1, %in0 : i0
    hw.output %4, %6, %8, %9, %3 : i1, i1, i1, i0, i1
  }
  hw.module @handshake_mux_in_ui1_ui64_ui64_out_ui64(in %select : i1, in %select_valid : i1, in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %0 = comb.concat %false, %select : i1, i1
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = comb.mux %select, %in1_valid, %in0_valid : i1
    %3 = comb.and %2, %select_valid : i1
    %4 = comb.and %3, %out0_ready : i1
    %5 = comb.extract %1 from 0 : (i2) -> i1
    %6 = comb.and %5, %4 : i1
    %7 = comb.extract %1 from 1 : (i2) -> i1
    %8 = comb.and %7, %4 : i1
    %9 = comb.mux %select, %in1, %in0 : i64
    hw.output %4, %6, %8, %9, %3 : i1, i1, i1, i64, i1
  }
  hw.module @arith_cmpi_in_ui64_ui64_out_ui1_slt(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i1, out out0_valid : i1) {
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    %2 = comb.icmp slt %in0, %in1 : i64
    hw.output %1, %1, %2, %0 : i1, i1, i1, i1
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1, out out4 : i1, out out4_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %35, %true : i1
    %1 = comb.and %6, %0 : i1
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_0, %1 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_0, %false : i1
    }
    %3 = comb.xor %2, %true : i1
    %4 = comb.and %3, %in0_valid : i1
    %5 = comb.and %out0_ready, %4 : i1
    %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
    %7 = comb.xor %35, %true : i1
    %8 = comb.and %13, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_1, %8 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_1, %false : i1
    }
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %in0_valid : i1
    %12 = comb.and %out1_ready, %11 : i1
    %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
    %14 = comb.xor %35, %true : i1
    %15 = comb.and %20, %14 : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_2, %15 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_2, %false : i1
    }
    %17 = comb.xor %16, %true : i1
    %18 = comb.and %17, %in0_valid : i1
    %19 = comb.and %out2_ready, %18 : i1
    %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
    %21 = comb.xor %35, %true : i1
    %22 = comb.and %27, %21 : i1
    %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
    %23 = sv.read_inout %emitted_3 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_3, %22 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_3, %false : i1
    }
    %24 = comb.xor %23, %true : i1
    %25 = comb.and %24, %in0_valid : i1
    %26 = comb.and %out3_ready, %25 : i1
    %27 = comb.or %26, %23 {sv.namehint = "done3"} : i1
    %28 = comb.xor %35, %true : i1
    %29 = comb.and %34, %28 : i1
    %emitted_4 = sv.reg sym @emitted_4 : !hw.inout<i1> 
    %30 = sv.read_inout %emitted_4 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_4, %29 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_4, %false : i1
    }
    %31 = comb.xor %30, %true : i1
    %32 = comb.and %31, %in0_valid : i1
    %33 = comb.and %out4_ready, %32 : i1
    %34 = comb.or %33, %30 {sv.namehint = "done4"} : i1
    %35 = comb.and %6, %13, %20, %27, %34 {sv.namehint = "allDone"} : i1
    hw.output %35, %in0, %4, %in0, %11, %in0, %18, %in0, %25, %in0, %32 : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(in %cond : i1, in %cond_valid : i1, in %data : i64, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i64, out outTrue_valid : i1, out outFalse : i64, out outFalse_valid : i1) {
    %true = hw.constant true
    %0 = comb.and %cond_valid, %data_valid : i1
    %1 = comb.and %cond, %0 : i1
    %2 = comb.xor %cond, %true : i1
    %3 = comb.and %2, %0 : i1
    %4 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
    %5 = comb.and %4, %0 : i1
    hw.output %5, %5, %data, %1, %data, %3 : i1, i1, i64, i1, i64, i1
  }
  hw.module @handshake_sink_in_ui64(in %in0 : i64, in %in0_valid : i1, out in0_ready : i1) {
    %true = hw.constant true
    hw.output %true : i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1, out out3 : i64, out out3_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %28, %true : i1
    %1 = comb.and %6, %0 : i1
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_0, %1 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_0, %false : i1
    }
    %3 = comb.xor %2, %true : i1
    %4 = comb.and %3, %in0_valid : i1
    %5 = comb.and %out0_ready, %4 : i1
    %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
    %7 = comb.xor %28, %true : i1
    %8 = comb.and %13, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_1, %8 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_1, %false : i1
    }
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %in0_valid : i1
    %12 = comb.and %out1_ready, %11 : i1
    %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
    %14 = comb.xor %28, %true : i1
    %15 = comb.and %20, %14 : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_2, %15 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_2, %false : i1
    }
    %17 = comb.xor %16, %true : i1
    %18 = comb.and %17, %in0_valid : i1
    %19 = comb.and %out2_ready, %18 : i1
    %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
    %21 = comb.xor %28, %true : i1
    %22 = comb.and %27, %21 : i1
    %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
    %23 = sv.read_inout %emitted_3 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_3, %22 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_3, %false : i1
    }
    %24 = comb.xor %23, %true : i1
    %25 = comb.and %24, %in0_valid : i1
    %26 = comb.and %out3_ready, %25 : i1
    %27 = comb.or %26, %23 {sv.namehint = "done3"} : i1
    %28 = comb.and %6, %13, %20, %27 {sv.namehint = "allDone"} : i1
    hw.output %28, %in0, %4, %in0, %11, %in0, %18, %in0, %25 : i1, i64, i1, i64, i1, i64, i1, i64, i1
  }
  hw.module @handshake_cond_br_in_ui1_2ins_2outs_ctrl(in %cond : i1, in %cond_valid : i1, in %data : i0, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i0, out outTrue_valid : i1, out outFalse : i0, out outFalse_valid : i1) {
    %true = hw.constant true
    %0 = comb.and %cond_valid, %data_valid : i1
    %1 = comb.and %cond, %0 : i1
    %2 = comb.xor %cond, %true : i1
    %3 = comb.and %2, %0 : i1
    %4 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
    %5 = comb.and %4, %0 : i1
    hw.output %5, %5, %data, %1, %data, %3 : i1, i1, i0, i1, i0, i1
  }
  hw.module @handshake_fork_1ins_4outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %28, %true : i1
    %1 = comb.and %6, %0 : i1
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_0, %1 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_0, %false : i1
    }
    %3 = comb.xor %2, %true : i1
    %4 = comb.and %3, %in0_valid : i1
    %5 = comb.and %out0_ready, %4 : i1
    %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
    %7 = comb.xor %28, %true : i1
    %8 = comb.and %13, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_1, %8 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_1, %false : i1
    }
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %in0_valid : i1
    %12 = comb.and %out1_ready, %11 : i1
    %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
    %14 = comb.xor %28, %true : i1
    %15 = comb.and %20, %14 : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_2, %15 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_2, %false : i1
    }
    %17 = comb.xor %16, %true : i1
    %18 = comb.and %17, %in0_valid : i1
    %19 = comb.and %out2_ready, %18 : i1
    %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
    %21 = comb.xor %28, %true : i1
    %22 = comb.and %27, %21 : i1
    %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
    %23 = sv.read_inout %emitted_3 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_3, %22 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_3, %false : i1
    }
    %24 = comb.xor %23, %true : i1
    %25 = comb.and %24, %in0_valid : i1
    %26 = comb.and %out3_ready, %25 : i1
    %27 = comb.or %26, %23 {sv.namehint = "done3"} : i1
    %28 = comb.and %6, %13, %20, %27 {sv.namehint = "allDone"} : i1
    hw.output %28, %in0, %4, %in0, %11, %in0, %18, %in0, %25 : i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_join_4ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid, %in2_valid, %in3_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i1, i0, i1
  }
  hw.module @handshake_load_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataFromMem : i64, in %dataFromMem_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataOut_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataFromMem_ready : i1, out ctrl_ready : i1, out dataOut : i64, out dataOut_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
    %0 = comb.and %addrIn0_valid, %ctrl_valid : i1
    %1 = comb.and %addrOut0_ready, %0 : i1
    hw.output %1, %dataOut_ready, %1, %dataFromMem, %dataFromMem_valid, %addrIn0, %0 : i1, i1, i1, i64, i1, i64, i1
  }
  hw.module @arith_addi_in_ui64_ui64_out_ui64(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    %2 = comb.add %in0, %in1 : i64
    hw.output %1, %1, %2, %0 : i1, i1, i64, i1
  }
  hw.module @main(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
    %handshake_buffer0.in0_ready, %handshake_buffer0.out0, %handshake_buffer0.out0_valid = hw.instance "handshake_buffer0" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %in0: i0, in0_valid: %in0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork0.in0_ready, %handshake_fork0.out0, %handshake_fork0.out0_valid, %handshake_fork0.out1, %handshake_fork0.out1_valid, %handshake_fork0.out2, %handshake_fork0.out2_valid, %handshake_fork0.out3, %handshake_fork0.out3_valid, %handshake_fork0.out4, %handshake_fork0.out4_valid, %handshake_fork0.out5, %handshake_fork0.out5_valid, %handshake_fork0.out6, %handshake_fork0.out6_valid, %handshake_fork0.out7, %handshake_fork0.out7_valid, %handshake_fork0.out8, %handshake_fork0.out8_valid, %handshake_fork0.out9, %handshake_fork0.out9_valid, %handshake_fork0.out10, %handshake_fork0.out10_valid, %handshake_fork0.out11, %handshake_fork0.out11_valid, %handshake_fork0.out12, %handshake_fork0.out12_valid, %handshake_fork0.out13, %handshake_fork0.out13_valid = hw.instance "handshake_fork0" @handshake_fork_1ins_14outs_ctrl(in0: %handshake_buffer0.out0: i0, in0_valid: %handshake_buffer0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer14.in0_ready: i1, out1_ready: %handshake_buffer13.in0_ready: i1, out2_ready: %handshake_buffer12.in0_ready: i1, out3_ready: %handshake_buffer11.in0_ready: i1, out4_ready: %handshake_buffer10.in0_ready: i1, out5_ready: %handshake_buffer9.in0_ready: i1, out6_ready: %handshake_buffer8.in0_ready: i1, out7_ready: %handshake_buffer7.in0_ready: i1, out8_ready: %handshake_buffer6.in0_ready: i1, out9_ready: %handshake_buffer5.in0_ready: i1, out10_ready: %handshake_buffer4.in0_ready: i1, out11_ready: %handshake_buffer3.in0_ready: i1, out12_ready: %handshake_buffer2.in0_ready: i1, out13_ready: %handshake_buffer1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1, out4: i0, out4_valid: i1, out5: i0, out5_valid: i1, out6: i0, out6_valid: i1, out7: i0, out7_valid: i1, out8: i0, out8_valid: i1, out9: i0, out9_valid: i1, out10: i0, out10_valid: i1, out11: i0, out11_valid: i1, out12: i0, out12_valid: i1, out13: i0, out13_valid: i1)
    %handshake_buffer1.in0_ready, %handshake_buffer1.out0, %handshake_buffer1.out0_valid = hw.instance "handshake_buffer1" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out13: i0, in0_valid: %handshake_fork0.out13_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join4.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer2.in0_ready, %handshake_buffer2.out0, %handshake_buffer2.out0_valid = hw.instance "handshake_buffer2" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out12: i0, in0_valid: %handshake_fork0.out12_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join3.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer3.in0_ready, %handshake_buffer3.out0, %handshake_buffer3.out0_valid = hw.instance "handshake_buffer3" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out11: i0, in0_valid: %handshake_fork0.out11_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store3.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer4.in0_ready, %handshake_buffer4.out0, %handshake_buffer4.out0_valid = hw.instance "handshake_buffer4" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out10: i0, in0_valid: %handshake_fork0.out10_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer5.in0_ready, %handshake_buffer5.out0, %handshake_buffer5.out0_valid = hw.instance "handshake_buffer5" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out9: i0, in0_valid: %handshake_fork0.out9_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join2.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer6.in0_ready, %handshake_buffer6.out0, %handshake_buffer6.out0_valid = hw.instance "handshake_buffer6" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out8: i0, in0_valid: %handshake_fork0.out8_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer7.in0_ready, %handshake_buffer7.out0, %handshake_buffer7.out0_valid = hw.instance "handshake_buffer7" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out7: i0, in0_valid: %handshake_fork0.out7_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer8.in0_ready, %handshake_buffer8.out0, %handshake_buffer8.out0_valid = hw.instance "handshake_buffer8" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out6: i0, in0_valid: %handshake_fork0.out6_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant6.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer9.in0_ready, %handshake_buffer9.out0, %handshake_buffer9.out0_valid = hw.instance "handshake_buffer9" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out5: i0, in0_valid: %handshake_fork0.out5_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant5.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer10.in0_ready, %handshake_buffer10.out0, %handshake_buffer10.out0_valid = hw.instance "handshake_buffer10" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out4: i0, in0_valid: %handshake_fork0.out4_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant4.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer11.in0_ready, %handshake_buffer11.out0, %handshake_buffer11.out0_valid = hw.instance "handshake_buffer11" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out3: i0, in0_valid: %handshake_fork0.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant3.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer12.in0_ready, %handshake_buffer12.out0, %handshake_buffer12.out0_valid = hw.instance "handshake_buffer12" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out2: i0, in0_valid: %handshake_fork0.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant2.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer13.in0_ready, %handshake_buffer13.out0, %handshake_buffer13.out0_valid = hw.instance "handshake_buffer13" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out1: i0, in0_valid: %handshake_fork0.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer14.in0_ready, %handshake_buffer14.out0, %handshake_buffer14.out0_valid = hw.instance "handshake_buffer14" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out0: i0, in0_valid: %handshake_fork0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_memory0.stData0_ready, %handshake_memory0.stAddr0_ready, %handshake_memory0.stDone0, %handshake_memory0.stDone0_valid = hw.instance "handshake_memory0" @handshake_memory_out_ui64_id2(stData0: %handshake_buffer114.out0: i64, stData0_valid: %handshake_buffer114.out0_valid: i1, stAddr0: %handshake_buffer113.out0: i64, stAddr0_valid: %handshake_buffer113.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, stDone0_ready: %handshake_buffer15.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stDone0: i0, stDone0_valid: i1)
    %handshake_buffer15.in0_ready, %handshake_buffer15.out0, %handshake_buffer15.out0_valid = hw.instance "handshake_buffer15" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory0.stDone0: i0, in0_valid: %handshake_memory0.stDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in3_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_memory1.stData0_ready, %handshake_memory1.stAddr0_ready, %handshake_memory1.stData1_ready, %handshake_memory1.stAddr1_ready, %handshake_memory1.stData2_ready, %handshake_memory1.stAddr2_ready, %handshake_memory1.ldAddr0_ready, %handshake_memory1.ldData0, %handshake_memory1.ldData0_valid, %handshake_memory1.stDone0, %handshake_memory1.stDone0_valid, %handshake_memory1.stDone1, %handshake_memory1.stDone1_valid, %handshake_memory1.stDone2, %handshake_memory1.stDone2_valid, %handshake_memory1.ldDone0, %handshake_memory1.ldDone0_valid = hw.instance "handshake_memory1" @handshake_memory_out_ui64_id1(stData0: %handshake_buffer67.out0: i64, stData0_valid: %handshake_buffer67.out0_valid: i1, stAddr0: %handshake_buffer66.out0: i64, stAddr0_valid: %handshake_buffer66.out0_valid: i1, stData1: %handshake_buffer70.out0: i64, stData1_valid: %handshake_buffer70.out0_valid: i1, stAddr1: %handshake_buffer69.out0: i64, stAddr1_valid: %handshake_buffer69.out0_valid: i1, stData2: %handshake_buffer73.out0: i64, stData2_valid: %handshake_buffer73.out0_valid: i1, stAddr2: %handshake_buffer72.out0: i64, stAddr2_valid: %handshake_buffer72.out0_valid: i1, ldAddr0: %handshake_buffer110.out0: i64, ldAddr0_valid: %handshake_buffer110.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, ldData0_ready: %handshake_buffer20.in0_ready: i1, stDone0_ready: %handshake_buffer19.in0_ready: i1, stDone1_ready: %handshake_buffer18.in0_ready: i1, stDone2_ready: %handshake_buffer17.in0_ready: i1, ldDone0_ready: %handshake_buffer16.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
    %handshake_buffer16.in0_ready, %handshake_buffer16.out0, %handshake_buffer16.out0_valid = hw.instance "handshake_buffer16" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.ldDone0: i0, in0_valid: %handshake_memory1.ldDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer17.in0_ready, %handshake_buffer17.out0, %handshake_buffer17.out0_valid = hw.instance "handshake_buffer17" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone2: i0, in0_valid: %handshake_memory1.stDone2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in6_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer18.in0_ready, %handshake_buffer18.out0, %handshake_buffer18.out0_valid = hw.instance "handshake_buffer18" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone1: i0, in0_valid: %handshake_memory1.stDone1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer19.in0_ready, %handshake_buffer19.out0, %handshake_buffer19.out0_valid = hw.instance "handshake_buffer19" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone0: i0, in0_valid: %handshake_memory1.stDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork2.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer20.in0_ready, %handshake_buffer20.out0, %handshake_buffer20.out0_valid = hw.instance "handshake_buffer20" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory1.ldData0: i64, in0_valid: %handshake_memory1.ldData0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load1.dataFromMem_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork1.in0_ready, %handshake_fork1.out0, %handshake_fork1.out0_valid, %handshake_fork1.out1, %handshake_fork1.out1_valid = hw.instance "handshake_fork1" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer18.out0: i0, in0_valid: %handshake_buffer18.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer22.in0_ready: i1, out1_ready: %handshake_buffer21.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
    %handshake_buffer21.in0_ready, %handshake_buffer21.out0, %handshake_buffer21.out0_valid = hw.instance "handshake_buffer21" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out1: i0, in0_valid: %handshake_fork1.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in5_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer22.in0_ready, %handshake_buffer22.out0, %handshake_buffer22.out0_valid = hw.instance "handshake_buffer22" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out0: i0, in0_valid: %handshake_fork1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join4.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork2.in0_ready, %handshake_fork2.out0, %handshake_fork2.out0_valid, %handshake_fork2.out1, %handshake_fork2.out1_valid, %handshake_fork2.out2, %handshake_fork2.out2_valid = hw.instance "handshake_fork2" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer19.out0: i0, in0_valid: %handshake_buffer19.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer25.in0_ready: i1, out1_ready: %handshake_buffer24.in0_ready: i1, out2_ready: %handshake_buffer23.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
    %handshake_buffer23.in0_ready, %handshake_buffer23.out0, %handshake_buffer23.out0_valid = hw.instance "handshake_buffer23" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out2: i0, in0_valid: %handshake_fork2.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in4_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer24.in0_ready, %handshake_buffer24.out0, %handshake_buffer24.out0_valid = hw.instance "handshake_buffer24" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out1: i0, in0_valid: %handshake_fork2.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join3.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer25.in0_ready, %handshake_buffer25.out0, %handshake_buffer25.out0_valid = hw.instance "handshake_buffer25" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out0: i0, in0_valid: %handshake_fork2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join4.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_memory2.stData0_ready, %handshake_memory2.stAddr0_ready, %handshake_memory2.stData1_ready, %handshake_memory2.stAddr1_ready, %handshake_memory2.stData2_ready, %handshake_memory2.stAddr2_ready, %handshake_memory2.ldAddr0_ready, %handshake_memory2.ldData0, %handshake_memory2.ldData0_valid, %handshake_memory2.stDone0, %handshake_memory2.stDone0_valid, %handshake_memory2.stDone1, %handshake_memory2.stDone1_valid, %handshake_memory2.stDone2, %handshake_memory2.stDone2_valid, %handshake_memory2.ldDone0, %handshake_memory2.ldDone0_valid = hw.instance "handshake_memory2" @handshake_memory_out_ui64_id0(stData0: %handshake_buffer59.out0: i64, stData0_valid: %handshake_buffer59.out0_valid: i1, stAddr0: %handshake_buffer58.out0: i64, stAddr0_valid: %handshake_buffer58.out0_valid: i1, stData1: %handshake_buffer62.out0: i64, stData1_valid: %handshake_buffer62.out0_valid: i1, stAddr1: %handshake_buffer61.out0: i64, stAddr1_valid: %handshake_buffer61.out0_valid: i1, stData2: %handshake_buffer65.out0: i64, stData2_valid: %handshake_buffer65.out0_valid: i1, stAddr2: %handshake_buffer64.out0: i64, stAddr2_valid: %handshake_buffer64.out0_valid: i1, ldAddr0: %handshake_buffer108.out0: i64, ldAddr0_valid: %handshake_buffer108.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, ldData0_ready: %handshake_buffer30.in0_ready: i1, stDone0_ready: %handshake_buffer29.in0_ready: i1, stDone1_ready: %handshake_buffer28.in0_ready: i1, stDone2_ready: %handshake_buffer27.in0_ready: i1, ldDone0_ready: %handshake_buffer26.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
    %handshake_buffer26.in0_ready, %handshake_buffer26.out0, %handshake_buffer26.out0_valid = hw.instance "handshake_buffer26" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.ldDone0: i0, in0_valid: %handshake_memory2.ldDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer27.in0_ready, %handshake_buffer27.out0, %handshake_buffer27.out0_valid = hw.instance "handshake_buffer27" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone2: i0, in0_valid: %handshake_memory2.stDone2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in3_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer28.in0_ready, %handshake_buffer28.out0, %handshake_buffer28.out0_valid = hw.instance "handshake_buffer28" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone1: i0, in0_valid: %handshake_memory2.stDone1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork3.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer29.in0_ready, %handshake_buffer29.out0, %handshake_buffer29.out0_valid = hw.instance "handshake_buffer29" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone0: i0, in0_valid: %handshake_memory2.stDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork4.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer30.in0_ready, %handshake_buffer30.out0, %handshake_buffer30.out0_valid = hw.instance "handshake_buffer30" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory2.ldData0: i64, in0_valid: %handshake_memory2.ldData0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load0.dataFromMem_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork3.in0_ready, %handshake_fork3.out0, %handshake_fork3.out0_valid, %handshake_fork3.out1, %handshake_fork3.out1_valid = hw.instance "handshake_fork3" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer28.out0: i0, in0_valid: %handshake_buffer28.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer32.in0_ready: i1, out1_ready: %handshake_buffer31.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
    %handshake_buffer31.in0_ready, %handshake_buffer31.out0, %handshake_buffer31.out0_valid = hw.instance "handshake_buffer31" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out1: i0, in0_valid: %handshake_fork3.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join2.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer32.in0_ready, %handshake_buffer32.out0, %handshake_buffer32.out0_valid = hw.instance "handshake_buffer32" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out0: i0, in0_valid: %handshake_fork3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork4.in0_ready, %handshake_fork4.out0, %handshake_fork4.out0_valid, %handshake_fork4.out1, %handshake_fork4.out1_valid, %handshake_fork4.out2, %handshake_fork4.out2_valid = hw.instance "handshake_fork4" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer29.out0: i0, in0_valid: %handshake_buffer29.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer35.in0_ready: i1, out1_ready: %handshake_buffer34.in0_ready: i1, out2_ready: %handshake_buffer33.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
    %handshake_buffer33.in0_ready, %handshake_buffer33.out0, %handshake_buffer33.out0_valid = hw.instance "handshake_buffer33" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out2: i0, in0_valid: %handshake_fork4.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join1.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer34.in0_ready, %handshake_buffer34.out0, %handshake_buffer34.out0_valid = hw.instance "handshake_buffer34" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out1: i0, in0_valid: %handshake_fork4.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join2.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer35.in0_ready, %handshake_buffer35.out0, %handshake_buffer35.out0_valid = hw.instance "handshake_buffer35" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out0: i0, in0_valid: %handshake_fork4.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_join0.in0_ready, %handshake_join0.in1_ready, %handshake_join0.in2_ready, %handshake_join0.in3_ready, %handshake_join0.in4_ready, %handshake_join0.in5_ready, %handshake_join0.in6_ready, %handshake_join0.out0, %handshake_join0.out0_valid = hw.instance "handshake_join0" @handshake_join_7ins_1outs_ctrl(in0: %handshake_buffer4.out0: i0, in0_valid: %handshake_buffer4.out0_valid: i1, in1: %handshake_buffer35.out0: i0, in1_valid: %handshake_buffer35.out0_valid: i1, in2: %handshake_buffer32.out0: i0, in2_valid: %handshake_buffer32.out0_valid: i1, in3: %handshake_buffer27.out0: i0, in3_valid: %handshake_buffer27.out0_valid: i1, in4: %handshake_buffer23.out0: i0, in4_valid: %handshake_buffer23.out0_valid: i1, in5: %handshake_buffer21.out0: i0, in5_valid: %handshake_buffer21.out0_valid: i1, in6: %handshake_buffer17.out0: i0, in6_valid: %handshake_buffer17.out0_valid: i1, out0_ready: %handshake_buffer36.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, in4_ready: i1, in5_ready: i1, in6_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer36.in0_ready, %handshake_buffer36.out0, %handshake_buffer36.out0_valid = hw.instance "handshake_buffer36" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join0.out0: i0, in0_valid: %handshake_join0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_constant0.ctrl_ready, %handshake_constant0.out0, %handshake_constant0.out0_valid = hw.instance "handshake_constant0" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer14.out0: i0, ctrl_valid: %handshake_buffer14.out0_valid: i1, out0_ready: %handshake_buffer37.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer37.in0_ready, %handshake_buffer37.out0, %handshake_buffer37.out0_valid = hw.instance "handshake_buffer37" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant0.out0: i64, in0_valid: %handshake_constant0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux2.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant1.ctrl_ready, %handshake_constant1.out0, %handshake_constant1.out0_valid = hw.instance "handshake_constant1" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer13.out0: i0, ctrl_valid: %handshake_buffer13.out0_valid: i1, out0_ready: %handshake_buffer38.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer38.in0_ready, %handshake_buffer38.out0, %handshake_buffer38.out0_valid = hw.instance "handshake_buffer38" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant1.out0: i64, in0_valid: %handshake_constant1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork5.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork5.in0_ready, %handshake_fork5.out0, %handshake_fork5.out0_valid, %handshake_fork5.out1, %handshake_fork5.out1_valid = hw.instance "handshake_fork5" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer38.out0: i64, in0_valid: %handshake_buffer38.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer40.in0_ready: i1, out1_ready: %handshake_buffer39.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer39.in0_ready, %handshake_buffer39.out0, %handshake_buffer39.out0_valid = hw.instance "handshake_buffer39" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out1: i64, in0_valid: %handshake_fork5.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store2.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer40.in0_ready, %handshake_buffer40.out0, %handshake_buffer40.out0_valid = hw.instance "handshake_buffer40" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out0: i64, in0_valid: %handshake_fork5.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store5.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant2.ctrl_ready, %handshake_constant2.out0, %handshake_constant2.out0_valid = hw.instance "handshake_constant2" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer12.out0: i0, ctrl_valid: %handshake_buffer12.out0_valid: i1, out0_ready: %handshake_buffer41.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer41.in0_ready, %handshake_buffer41.out0, %handshake_buffer41.out0_valid = hw.instance "handshake_buffer41" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant2.out0: i64, in0_valid: %handshake_constant2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork6.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork6.in0_ready, %handshake_fork6.out0, %handshake_fork6.out0_valid, %handshake_fork6.out1, %handshake_fork6.out1_valid = hw.instance "handshake_fork6" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer41.out0: i64, in0_valid: %handshake_buffer41.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer43.in0_ready: i1, out1_ready: %handshake_buffer42.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer42.in0_ready, %handshake_buffer42.out0, %handshake_buffer42.out0_valid = hw.instance "handshake_buffer42" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out1: i64, in0_valid: %handshake_fork6.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store1.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer43.in0_ready, %handshake_buffer43.out0, %handshake_buffer43.out0_valid = hw.instance "handshake_buffer43" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out0: i64, in0_valid: %handshake_fork6.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store4.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant3.ctrl_ready, %handshake_constant3.out0, %handshake_constant3.out0_valid = hw.instance "handshake_constant3" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer11.out0: i0, ctrl_valid: %handshake_buffer11.out0_valid: i1, out0_ready: %handshake_buffer44.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer44.in0_ready, %handshake_buffer44.out0, %handshake_buffer44.out0_valid = hw.instance "handshake_buffer44" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant3.out0: i64, in0_valid: %handshake_constant3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork7.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork7.in0_ready, %handshake_fork7.out0, %handshake_fork7.out0_valid, %handshake_fork7.out1, %handshake_fork7.out1_valid = hw.instance "handshake_fork7" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer44.out0: i64, in0_valid: %handshake_buffer44.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer46.in0_ready: i1, out1_ready: %handshake_buffer45.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer45.in0_ready, %handshake_buffer45.out0, %handshake_buffer45.out0_valid = hw.instance "handshake_buffer45" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out1: i64, in0_valid: %handshake_fork7.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store0.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer46.in0_ready, %handshake_buffer46.out0, %handshake_buffer46.out0_valid = hw.instance "handshake_buffer46" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out0: i64, in0_valid: %handshake_fork7.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store3.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant4.ctrl_ready, %handshake_constant4.out0, %handshake_constant4.out0_valid = hw.instance "handshake_constant4" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer10.out0: i0, ctrl_valid: %handshake_buffer10.out0_valid: i1, out0_ready: %handshake_buffer47.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer47.in0_ready, %handshake_buffer47.out0, %handshake_buffer47.out0_valid = hw.instance "handshake_buffer47" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant4.out0: i64, in0_valid: %handshake_constant4.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork8.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork8.in0_ready, %handshake_fork8.out0, %handshake_fork8.out0_valid, %handshake_fork8.out1, %handshake_fork8.out1_valid = hw.instance "handshake_fork8" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer47.out0: i64, in0_valid: %handshake_buffer47.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer49.in0_ready: i1, out1_ready: %handshake_buffer48.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer48.in0_ready, %handshake_buffer48.out0, %handshake_buffer48.out0_valid = hw.instance "handshake_buffer48" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out1: i64, in0_valid: %handshake_fork8.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store2.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer49.in0_ready, %handshake_buffer49.out0, %handshake_buffer49.out0_valid = hw.instance "handshake_buffer49" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out0: i64, in0_valid: %handshake_fork8.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store5.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant5.ctrl_ready, %handshake_constant5.out0, %handshake_constant5.out0_valid = hw.instance "handshake_constant5" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer9.out0: i0, ctrl_valid: %handshake_buffer9.out0_valid: i1, out0_ready: %handshake_buffer50.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer50.in0_ready, %handshake_buffer50.out0, %handshake_buffer50.out0_valid = hw.instance "handshake_buffer50" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant5.out0: i64, in0_valid: %handshake_constant5.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork9.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork9.in0_ready, %handshake_fork9.out0, %handshake_fork9.out0_valid, %handshake_fork9.out1, %handshake_fork9.out1_valid, %handshake_fork9.out2, %handshake_fork9.out2_valid = hw.instance "handshake_fork9" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer50.out0: i64, in0_valid: %handshake_buffer50.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer53.in0_ready: i1, out1_ready: %handshake_buffer52.in0_ready: i1, out2_ready: %handshake_buffer51.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
    %handshake_buffer51.in0_ready, %handshake_buffer51.out0, %handshake_buffer51.out0_valid = hw.instance "handshake_buffer51" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out2: i64, in0_valid: %handshake_fork9.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store1.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer52.in0_ready, %handshake_buffer52.out0, %handshake_buffer52.out0_valid = hw.instance "handshake_buffer52" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out1: i64, in0_valid: %handshake_fork9.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store4.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer53.in0_ready, %handshake_buffer53.out0, %handshake_buffer53.out0_valid = hw.instance "handshake_buffer53" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out0: i64, in0_valid: %handshake_fork9.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux3.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant6.ctrl_ready, %handshake_constant6.out0, %handshake_constant6.out0_valid = hw.instance "handshake_constant6" @handshake_constant_c0_out_ui64(ctrl: %handshake_buffer8.out0: i0, ctrl_valid: %handshake_buffer8.out0_valid: i1, out0_ready: %handshake_buffer54.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer54.in0_ready, %handshake_buffer54.out0, %handshake_buffer54.out0_valid = hw.instance "handshake_buffer54" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant6.out0: i64, in0_valid: %handshake_constant6.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork10.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork10.in0_ready, %handshake_fork10.out0, %handshake_fork10.out0_valid, %handshake_fork10.out1, %handshake_fork10.out1_valid, %handshake_fork10.out2, %handshake_fork10.out2_valid = hw.instance "handshake_fork10" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer54.out0: i64, in0_valid: %handshake_buffer54.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer57.in0_ready: i1, out1_ready: %handshake_buffer56.in0_ready: i1, out2_ready: %handshake_buffer55.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
    %handshake_buffer55.in0_ready, %handshake_buffer55.out0, %handshake_buffer55.out0_valid = hw.instance "handshake_buffer55" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out2: i64, in0_valid: %handshake_fork10.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store0.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer56.in0_ready, %handshake_buffer56.out0, %handshake_buffer56.out0_valid = hw.instance "handshake_buffer56" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out1: i64, in0_valid: %handshake_fork10.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store3.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer57.in0_ready, %handshake_buffer57.out0, %handshake_buffer57.out0_valid = hw.instance "handshake_buffer57" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out0: i64, in0_valid: %handshake_fork10.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux1.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_store0.addrIn0_ready, %handshake_store0.dataIn_ready, %handshake_store0.ctrl_ready, %handshake_store0.dataToMem, %handshake_store0.dataToMem_valid, %handshake_store0.addrOut0, %handshake_store0.addrOut0_valid = hw.instance "handshake_store0" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer55.out0: i64, addrIn0_valid: %handshake_buffer55.out0_valid: i1, dataIn: %handshake_buffer45.out0: i64, dataIn_valid: %handshake_buffer45.out0_valid: i1, ctrl: %handshake_buffer7.out0: i0, ctrl_valid: %handshake_buffer7.out0_valid: i1, dataToMem_ready: %handshake_buffer59.in0_ready: i1, addrOut0_ready: %handshake_buffer58.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer58.in0_ready, %handshake_buffer58.out0, %handshake_buffer58.out0_valid = hw.instance "handshake_buffer58" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.addrOut0: i64, in0_valid: %handshake_store0.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer59.in0_ready, %handshake_buffer59.out0, %handshake_buffer59.out0_valid = hw.instance "handshake_buffer59" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.dataToMem: i64, in0_valid: %handshake_store0.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join1.in0_ready, %handshake_join1.in1_ready, %handshake_join1.out0, %handshake_join1.out0_valid = hw.instance "handshake_join1" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer6.out0: i0, in0_valid: %handshake_buffer6.out0_valid: i1, in1: %handshake_buffer33.out0: i0, in1_valid: %handshake_buffer33.out0_valid: i1, out0_ready: %handshake_buffer60.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer60.in0_ready, %handshake_buffer60.out0, %handshake_buffer60.out0_valid = hw.instance "handshake_buffer60" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join1.out0: i0, in0_valid: %handshake_join1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store1.addrIn0_ready, %handshake_store1.dataIn_ready, %handshake_store1.ctrl_ready, %handshake_store1.dataToMem, %handshake_store1.dataToMem_valid, %handshake_store1.addrOut0, %handshake_store1.addrOut0_valid = hw.instance "handshake_store1" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer51.out0: i64, addrIn0_valid: %handshake_buffer51.out0_valid: i1, dataIn: %handshake_buffer42.out0: i64, dataIn_valid: %handshake_buffer42.out0_valid: i1, ctrl: %handshake_buffer60.out0: i0, ctrl_valid: %handshake_buffer60.out0_valid: i1, dataToMem_ready: %handshake_buffer62.in0_ready: i1, addrOut0_ready: %handshake_buffer61.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer61.in0_ready, %handshake_buffer61.out0, %handshake_buffer61.out0_valid = hw.instance "handshake_buffer61" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.addrOut0: i64, in0_valid: %handshake_store1.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer62.in0_ready, %handshake_buffer62.out0, %handshake_buffer62.out0_valid = hw.instance "handshake_buffer62" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.dataToMem: i64, in0_valid: %handshake_store1.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stData1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join2.in0_ready, %handshake_join2.in1_ready, %handshake_join2.in2_ready, %handshake_join2.out0, %handshake_join2.out0_valid = hw.instance "handshake_join2" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer5.out0: i0, in0_valid: %handshake_buffer5.out0_valid: i1, in1: %handshake_buffer34.out0: i0, in1_valid: %handshake_buffer34.out0_valid: i1, in2: %handshake_buffer31.out0: i0, in2_valid: %handshake_buffer31.out0_valid: i1, out0_ready: %handshake_buffer63.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer63.in0_ready, %handshake_buffer63.out0, %handshake_buffer63.out0_valid = hw.instance "handshake_buffer63" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join2.out0: i0, in0_valid: %handshake_join2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store2.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store2.addrIn0_ready, %handshake_store2.dataIn_ready, %handshake_store2.ctrl_ready, %handshake_store2.dataToMem, %handshake_store2.dataToMem_valid, %handshake_store2.addrOut0, %handshake_store2.addrOut0_valid = hw.instance "handshake_store2" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer48.out0: i64, addrIn0_valid: %handshake_buffer48.out0_valid: i1, dataIn: %handshake_buffer39.out0: i64, dataIn_valid: %handshake_buffer39.out0_valid: i1, ctrl: %handshake_buffer63.out0: i0, ctrl_valid: %handshake_buffer63.out0_valid: i1, dataToMem_ready: %handshake_buffer65.in0_ready: i1, addrOut0_ready: %handshake_buffer64.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer64.in0_ready, %handshake_buffer64.out0, %handshake_buffer64.out0_valid = hw.instance "handshake_buffer64" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.addrOut0: i64, in0_valid: %handshake_store2.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer65.in0_ready, %handshake_buffer65.out0, %handshake_buffer65.out0_valid = hw.instance "handshake_buffer65" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.dataToMem: i64, in0_valid: %handshake_store2.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stData2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_store3.addrIn0_ready, %handshake_store3.dataIn_ready, %handshake_store3.ctrl_ready, %handshake_store3.dataToMem, %handshake_store3.dataToMem_valid, %handshake_store3.addrOut0, %handshake_store3.addrOut0_valid = hw.instance "handshake_store3" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer56.out0: i64, addrIn0_valid: %handshake_buffer56.out0_valid: i1, dataIn: %handshake_buffer46.out0: i64, dataIn_valid: %handshake_buffer46.out0_valid: i1, ctrl: %handshake_buffer3.out0: i0, ctrl_valid: %handshake_buffer3.out0_valid: i1, dataToMem_ready: %handshake_buffer67.in0_ready: i1, addrOut0_ready: %handshake_buffer66.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer66.in0_ready, %handshake_buffer66.out0, %handshake_buffer66.out0_valid = hw.instance "handshake_buffer66" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.addrOut0: i64, in0_valid: %handshake_store3.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer67.in0_ready, %handshake_buffer67.out0, %handshake_buffer67.out0_valid = hw.instance "handshake_buffer67" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.dataToMem: i64, in0_valid: %handshake_store3.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join3.in0_ready, %handshake_join3.in1_ready, %handshake_join3.out0, %handshake_join3.out0_valid = hw.instance "handshake_join3" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer2.out0: i0, in0_valid: %handshake_buffer2.out0_valid: i1, in1: %handshake_buffer24.out0: i0, in1_valid: %handshake_buffer24.out0_valid: i1, out0_ready: %handshake_buffer68.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer68.in0_ready, %handshake_buffer68.out0, %handshake_buffer68.out0_valid = hw.instance "handshake_buffer68" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join3.out0: i0, in0_valid: %handshake_join3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store4.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store4.addrIn0_ready, %handshake_store4.dataIn_ready, %handshake_store4.ctrl_ready, %handshake_store4.dataToMem, %handshake_store4.dataToMem_valid, %handshake_store4.addrOut0, %handshake_store4.addrOut0_valid = hw.instance "handshake_store4" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer52.out0: i64, addrIn0_valid: %handshake_buffer52.out0_valid: i1, dataIn: %handshake_buffer43.out0: i64, dataIn_valid: %handshake_buffer43.out0_valid: i1, ctrl: %handshake_buffer68.out0: i0, ctrl_valid: %handshake_buffer68.out0_valid: i1, dataToMem_ready: %handshake_buffer70.in0_ready: i1, addrOut0_ready: %handshake_buffer69.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer69.in0_ready, %handshake_buffer69.out0, %handshake_buffer69.out0_valid = hw.instance "handshake_buffer69" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.addrOut0: i64, in0_valid: %handshake_store4.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer70.in0_ready, %handshake_buffer70.out0, %handshake_buffer70.out0_valid = hw.instance "handshake_buffer70" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.dataToMem: i64, in0_valid: %handshake_store4.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stData1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join4.in0_ready, %handshake_join4.in1_ready, %handshake_join4.in2_ready, %handshake_join4.out0, %handshake_join4.out0_valid = hw.instance "handshake_join4" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer1.out0: i0, in0_valid: %handshake_buffer1.out0_valid: i1, in1: %handshake_buffer25.out0: i0, in1_valid: %handshake_buffer25.out0_valid: i1, in2: %handshake_buffer22.out0: i0, in2_valid: %handshake_buffer22.out0_valid: i1, out0_ready: %handshake_buffer71.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer71.in0_ready, %handshake_buffer71.out0, %handshake_buffer71.out0_valid = hw.instance "handshake_buffer71" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join4.out0: i0, in0_valid: %handshake_join4.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store5.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store5.addrIn0_ready, %handshake_store5.dataIn_ready, %handshake_store5.ctrl_ready, %handshake_store5.dataToMem, %handshake_store5.dataToMem_valid, %handshake_store5.addrOut0, %handshake_store5.addrOut0_valid = hw.instance "handshake_store5" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer49.out0: i64, addrIn0_valid: %handshake_buffer49.out0_valid: i1, dataIn: %handshake_buffer40.out0: i64, dataIn_valid: %handshake_buffer40.out0_valid: i1, ctrl: %handshake_buffer71.out0: i0, ctrl_valid: %handshake_buffer71.out0_valid: i1, dataToMem_ready: %handshake_buffer73.in0_ready: i1, addrOut0_ready: %handshake_buffer72.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer72.in0_ready, %handshake_buffer72.out0, %handshake_buffer72.out0_valid = hw.instance "handshake_buffer72" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.addrOut0: i64, in0_valid: %handshake_store5.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer73.in0_ready, %handshake_buffer73.out0, %handshake_buffer73.out0_valid = hw.instance "handshake_buffer73" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.dataToMem: i64, in0_valid: %handshake_store5.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stData2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer74.in0_ready, %handshake_buffer74.out0, %handshake_buffer74.out0_valid = hw.instance "handshake_buffer74" @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in0: %handshake_fork14.out0: i1, in0_valid: %handshake_fork14.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork11.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_fork11.in0_ready, %handshake_fork11.out0, %handshake_fork11.out0_valid, %handshake_fork11.out1, %handshake_fork11.out1_valid, %handshake_fork11.out2, %handshake_fork11.out2_valid, %handshake_fork11.out3, %handshake_fork11.out3_valid = hw.instance "handshake_fork11" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in0: %handshake_buffer74.out0: i1, in0_valid: %handshake_buffer74.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer78.in0_ready: i1, out1_ready: %handshake_buffer77.in0_ready: i1, out2_ready: %handshake_buffer76.in0_ready: i1, out3_ready: %handshake_buffer75.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1)
    %handshake_buffer75.in0_ready, %handshake_buffer75.out0, %handshake_buffer75.out0_valid = hw.instance "handshake_buffer75" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out3: i1, in0_valid: %handshake_fork11.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux0.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer76.in0_ready, %handshake_buffer76.out0, %handshake_buffer76.out0_valid = hw.instance "handshake_buffer76" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out2: i1, in0_valid: %handshake_fork11.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux1.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer77.in0_ready, %handshake_buffer77.out0, %handshake_buffer77.out0_valid = hw.instance "handshake_buffer77" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out1: i1, in0_valid: %handshake_fork11.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux2.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer78.in0_ready, %handshake_buffer78.out0, %handshake_buffer78.out0_valid = hw.instance "handshake_buffer78" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out0: i1, in0_valid: %handshake_fork11.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux3.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_mux0.select_ready, %handshake_mux0.in0_ready, %handshake_mux0.in1_ready, %handshake_mux0.out0, %handshake_mux0.out0_valid = hw.instance "handshake_mux0" @handshake_mux_in_ui1_3ins_1outs_ctrl(select: %handshake_buffer75.out0: i1, select_valid: %handshake_buffer75.out0_valid: i1, in0: %handshake_buffer36.out0: i0, in0_valid: %handshake_buffer36.out0_valid: i1, in1: %handshake_buffer107.out0: i0, in1_valid: %handshake_buffer107.out0_valid: i1, out0_ready: %handshake_buffer79.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer79.in0_ready, %handshake_buffer79.out0, %handshake_buffer79.out0_valid = hw.instance "handshake_buffer79" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_mux0.out0: i0, in0_valid: %handshake_mux0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br3.data_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_mux1.select_ready, %handshake_mux1.in0_ready, %handshake_mux1.in1_ready, %handshake_mux1.out0, %handshake_mux1.out0_valid = hw.instance "handshake_mux1" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer76.out0: i1, select_valid: %handshake_buffer76.out0_valid: i1, in0: %handshake_buffer57.out0: i64, in0_valid: %handshake_buffer57.out0_valid: i1, in1: %handshake_buffer115.out0: i64, in1_valid: %handshake_buffer115.out0_valid: i1, out0_ready: %handshake_buffer80.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer80.in0_ready, %handshake_buffer80.out0, %handshake_buffer80.out0_valid = hw.instance "handshake_buffer80" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux1.out0: i64, in0_valid: %handshake_mux1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork12.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork12.in0_ready, %handshake_fork12.out0, %handshake_fork12.out0_valid, %handshake_fork12.out1, %handshake_fork12.out1_valid = hw.instance "handshake_fork12" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer80.out0: i64, in0_valid: %handshake_buffer80.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer82.in0_ready: i1, out1_ready: %handshake_buffer81.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer81.in0_ready, %handshake_buffer81.out0, %handshake_buffer81.out0_valid = hw.instance "handshake_buffer81" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out1: i64, in0_valid: %handshake_fork12.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br0.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer82.in0_ready, %handshake_buffer82.out0, %handshake_buffer82.out0_valid = hw.instance "handshake_buffer82" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out0: i64, in0_valid: %handshake_fork12.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_cmpi0.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_mux2.select_ready, %handshake_mux2.in0_ready, %handshake_mux2.in1_ready, %handshake_mux2.out0, %handshake_mux2.out0_valid = hw.instance "handshake_mux2" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer77.out0: i1, select_valid: %handshake_buffer77.out0_valid: i1, in0: %handshake_buffer37.out0: i64, in0_valid: %handshake_buffer37.out0_valid: i1, in1: %handshake_buffer97.out0: i64, in1_valid: %handshake_buffer97.out0_valid: i1, out0_ready: %handshake_buffer83.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer83.in0_ready, %handshake_buffer83.out0, %handshake_buffer83.out0_valid = hw.instance "handshake_buffer83" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux2.out0: i64, in0_valid: %handshake_mux2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork13.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork13.in0_ready, %handshake_fork13.out0, %handshake_fork13.out0_valid, %handshake_fork13.out1, %handshake_fork13.out1_valid = hw.instance "handshake_fork13" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer83.out0: i64, in0_valid: %handshake_buffer83.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer85.in0_ready: i1, out1_ready: %handshake_buffer84.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer84.in0_ready, %handshake_buffer84.out0, %handshake_buffer84.out0_valid = hw.instance "handshake_buffer84" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out1: i64, in0_valid: %handshake_fork13.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br1.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer85.in0_ready, %handshake_buffer85.out0, %handshake_buffer85.out0_valid = hw.instance "handshake_buffer85" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out0: i64, in0_valid: %handshake_fork13.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_cmpi0.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_mux3.select_ready, %handshake_mux3.in0_ready, %handshake_mux3.in1_ready, %handshake_mux3.out0, %handshake_mux3.out0_valid = hw.instance "handshake_mux3" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer78.out0: i1, select_valid: %handshake_buffer78.out0_valid: i1, in0: %handshake_buffer53.out0: i64, in0_valid: %handshake_buffer53.out0_valid: i1, in1: %handshake_buffer100.out0: i64, in1_valid: %handshake_buffer100.out0_valid: i1, out0_ready: %handshake_buffer86.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer86.in0_ready, %handshake_buffer86.out0, %handshake_buffer86.out0_valid = hw.instance "handshake_buffer86" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux3.out0: i64, in0_valid: %handshake_mux3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br2.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %arith_cmpi0.in0_ready, %arith_cmpi0.in1_ready, %arith_cmpi0.out0, %arith_cmpi0.out0_valid = hw.instance "arith_cmpi0" @arith_cmpi_in_ui64_ui64_out_ui1_slt(in0: %handshake_buffer82.out0: i64, in0_valid: %handshake_buffer82.out0_valid: i1, in1: %handshake_buffer85.out0: i64, in1_valid: %handshake_buffer85.out0_valid: i1, out0_ready: %handshake_buffer87.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer87.in0_ready, %handshake_buffer87.out0, %handshake_buffer87.out0_valid = hw.instance "handshake_buffer87" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %arith_cmpi0.out0: i1, in0_valid: %arith_cmpi0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork14.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_fork14.in0_ready, %handshake_fork14.out0, %handshake_fork14.out0_valid, %handshake_fork14.out1, %handshake_fork14.out1_valid, %handshake_fork14.out2, %handshake_fork14.out2_valid, %handshake_fork14.out3, %handshake_fork14.out3_valid, %handshake_fork14.out4, %handshake_fork14.out4_valid = hw.instance "handshake_fork14" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in0: %handshake_buffer87.out0: i1, in0_valid: %handshake_buffer87.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer74.in0_ready: i1, out1_ready: %handshake_buffer91.in0_ready: i1, out2_ready: %handshake_buffer90.in0_ready: i1, out3_ready: %handshake_buffer89.in0_ready: i1, out4_ready: %handshake_buffer88.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1, out4: i1, out4_valid: i1)
    %handshake_buffer88.in0_ready, %handshake_buffer88.out0, %handshake_buffer88.out0_valid = hw.instance "handshake_buffer88" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out4: i1, in0_valid: %handshake_fork14.out4_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br0.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer89.in0_ready, %handshake_buffer89.out0, %handshake_buffer89.out0_valid = hw.instance "handshake_buffer89" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out3: i1, in0_valid: %handshake_fork14.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br1.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer90.in0_ready, %handshake_buffer90.out0, %handshake_buffer90.out0_valid = hw.instance "handshake_buffer90" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out2: i1, in0_valid: %handshake_fork14.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br2.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer91.in0_ready, %handshake_buffer91.out0, %handshake_buffer91.out0_valid = hw.instance "handshake_buffer91" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out1: i1, in0_valid: %handshake_fork14.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br3.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_cond_br0.cond_ready, %handshake_cond_br0.data_ready, %handshake_cond_br0.outTrue, %handshake_cond_br0.outTrue_valid, %handshake_cond_br0.outFalse, %handshake_cond_br0.outFalse_valid = hw.instance "handshake_cond_br0" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer88.out0: i1, cond_valid: %handshake_buffer88.out0_valid: i1, data: %handshake_buffer81.out0: i64, data_valid: %handshake_buffer81.out0_valid: i1, outTrue_ready: %handshake_buffer92.in0_ready: i1, outFalse_ready: %handshake_sink0.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %handshake_buffer92.in0_ready, %handshake_buffer92.out0, %handshake_buffer92.out0_valid = hw.instance "handshake_buffer92" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br0.outTrue: i64, in0_valid: %handshake_cond_br0.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork15.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_sink0.in0_ready = hw.instance "handshake_sink0" @handshake_sink_in_ui64(in0: %handshake_cond_br0.outFalse: i64, in0_valid: %handshake_cond_br0.outFalse_valid: i1) -> (in0_ready: i1)
    %handshake_fork15.in0_ready, %handshake_fork15.out0, %handshake_fork15.out0_valid, %handshake_fork15.out1, %handshake_fork15.out1_valid, %handshake_fork15.out2, %handshake_fork15.out2_valid, %handshake_fork15.out3, %handshake_fork15.out3_valid = hw.instance "handshake_fork15" @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in0: %handshake_buffer92.out0: i64, in0_valid: %handshake_buffer92.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer96.in0_ready: i1, out1_ready: %handshake_buffer95.in0_ready: i1, out2_ready: %handshake_buffer94.in0_ready: i1, out3_ready: %handshake_buffer93.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1, out3: i64, out3_valid: i1)
    %handshake_buffer93.in0_ready, %handshake_buffer93.out0, %handshake_buffer93.out0_valid = hw.instance "handshake_buffer93" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out3: i64, in0_valid: %handshake_fork15.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store6.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer94.in0_ready, %handshake_buffer94.out0, %handshake_buffer94.out0_valid = hw.instance "handshake_buffer94" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out2: i64, in0_valid: %handshake_fork15.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load1.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer95.in0_ready, %handshake_buffer95.out0, %handshake_buffer95.out0_valid = hw.instance "handshake_buffer95" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out1: i64, in0_valid: %handshake_fork15.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load0.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer96.in0_ready, %handshake_buffer96.out0, %handshake_buffer96.out0_valid = hw.instance "handshake_buffer96" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out0: i64, in0_valid: %handshake_fork15.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi1.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_cond_br1.cond_ready, %handshake_cond_br1.data_ready, %handshake_cond_br1.outTrue, %handshake_cond_br1.outTrue_valid, %handshake_cond_br1.outFalse, %handshake_cond_br1.outFalse_valid = hw.instance "handshake_cond_br1" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer89.out0: i1, cond_valid: %handshake_buffer89.out0_valid: i1, data: %handshake_buffer84.out0: i64, data_valid: %handshake_buffer84.out0_valid: i1, outTrue_ready: %handshake_buffer97.in0_ready: i1, outFalse_ready: %handshake_sink1.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %handshake_buffer97.in0_ready, %handshake_buffer97.out0, %handshake_buffer97.out0_valid = hw.instance "handshake_buffer97" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br1.outTrue: i64, in0_valid: %handshake_cond_br1.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux2.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_sink1.in0_ready = hw.instance "handshake_sink1" @handshake_sink_in_ui64(in0: %handshake_cond_br1.outFalse: i64, in0_valid: %handshake_cond_br1.outFalse_valid: i1) -> (in0_ready: i1)
    %handshake_cond_br2.cond_ready, %handshake_cond_br2.data_ready, %handshake_cond_br2.outTrue, %handshake_cond_br2.outTrue_valid, %handshake_cond_br2.outFalse, %handshake_cond_br2.outFalse_valid = hw.instance "handshake_cond_br2" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer90.out0: i1, cond_valid: %handshake_buffer90.out0_valid: i1, data: %handshake_buffer86.out0: i64, data_valid: %handshake_buffer86.out0_valid: i1, outTrue_ready: %handshake_buffer98.in0_ready: i1, outFalse_ready: %handshake_sink2.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %handshake_buffer98.in0_ready, %handshake_buffer98.out0, %handshake_buffer98.out0_valid = hw.instance "handshake_buffer98" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br2.outTrue: i64, in0_valid: %handshake_cond_br2.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork16.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_sink2.in0_ready = hw.instance "handshake_sink2" @handshake_sink_in_ui64(in0: %handshake_cond_br2.outFalse: i64, in0_valid: %handshake_cond_br2.outFalse_valid: i1) -> (in0_ready: i1)
    %handshake_fork16.in0_ready, %handshake_fork16.out0, %handshake_fork16.out0_valid, %handshake_fork16.out1, %handshake_fork16.out1_valid = hw.instance "handshake_fork16" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer98.out0: i64, in0_valid: %handshake_buffer98.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer100.in0_ready: i1, out1_ready: %handshake_buffer99.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer99.in0_ready, %handshake_buffer99.out0, %handshake_buffer99.out0_valid = hw.instance "handshake_buffer99" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out1: i64, in0_valid: %handshake_fork16.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi1.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer100.in0_ready, %handshake_buffer100.out0, %handshake_buffer100.out0_valid = hw.instance "handshake_buffer100" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out0: i64, in0_valid: %handshake_fork16.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux3.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_cond_br3.cond_ready, %handshake_cond_br3.data_ready, %handshake_cond_br3.outTrue, %handshake_cond_br3.outTrue_valid, %handshake_cond_br3.outFalse, %handshake_cond_br3.outFalse_valid = hw.instance "handshake_cond_br3" @handshake_cond_br_in_ui1_2ins_2outs_ctrl(cond: %handshake_buffer91.out0: i1, cond_valid: %handshake_buffer91.out0_valid: i1, data: %handshake_buffer79.out0: i0, data_valid: %handshake_buffer79.out0_valid: i1, outTrue_ready: %handshake_buffer102.in0_ready: i1, outFalse_ready: %handshake_buffer101.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i0, outTrue_valid: i1, outFalse: i0, outFalse_valid: i1)
    %handshake_buffer101.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid = hw.instance "handshake_buffer101" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outFalse: i0, in0_valid: %handshake_cond_br3.outFalse_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %out0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer102.in0_ready, %handshake_buffer102.out0, %handshake_buffer102.out0_valid = hw.instance "handshake_buffer102" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outTrue: i0, in0_valid: %handshake_cond_br3.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork17.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork17.in0_ready, %handshake_fork17.out0, %handshake_fork17.out0_valid, %handshake_fork17.out1, %handshake_fork17.out1_valid, %handshake_fork17.out2, %handshake_fork17.out2_valid, %handshake_fork17.out3, %handshake_fork17.out3_valid = hw.instance "handshake_fork17" @handshake_fork_1ins_4outs_ctrl(in0: %handshake_buffer102.out0: i0, in0_valid: %handshake_buffer102.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer106.in0_ready: i1, out1_ready: %handshake_buffer105.in0_ready: i1, out2_ready: %handshake_buffer104.in0_ready: i1, out3_ready: %handshake_buffer103.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1)
    %handshake_buffer103.in0_ready, %handshake_buffer103.out0, %handshake_buffer103.out0_valid = hw.instance "handshake_buffer103" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out3: i0, in0_valid: %handshake_fork17.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer104.in0_ready, %handshake_buffer104.out0, %handshake_buffer104.out0_valid = hw.instance "handshake_buffer104" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out2: i0, in0_valid: %handshake_fork17.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer105.in0_ready, %handshake_buffer105.out0, %handshake_buffer105.out0_valid = hw.instance "handshake_buffer105" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out1: i0, in0_valid: %handshake_fork17.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer106.in0_ready, %handshake_buffer106.out0, %handshake_buffer106.out0_valid = hw.instance "handshake_buffer106" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out0: i0, in0_valid: %handshake_fork17.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store6.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_join5.in0_ready, %handshake_join5.in1_ready, %handshake_join5.in2_ready, %handshake_join5.in3_ready, %handshake_join5.out0, %handshake_join5.out0_valid = hw.instance "handshake_join5" @handshake_join_4ins_1outs_ctrl(in0: %handshake_buffer105.out0: i0, in0_valid: %handshake_buffer105.out0_valid: i1, in1: %handshake_buffer26.out0: i0, in1_valid: %handshake_buffer26.out0_valid: i1, in2: %handshake_buffer16.out0: i0, in2_valid: %handshake_buffer16.out0_valid: i1, in3: %handshake_buffer15.out0: i0, in3_valid: %handshake_buffer15.out0_valid: i1, out0_ready: %handshake_buffer107.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer107.in0_ready, %handshake_buffer107.out0, %handshake_buffer107.out0_valid = hw.instance "handshake_buffer107" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join5.out0: i0, in0_valid: %handshake_join5.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux0.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_load0.addrIn0_ready, %handshake_load0.dataFromMem_ready, %handshake_load0.ctrl_ready, %handshake_load0.dataOut, %handshake_load0.dataOut_valid, %handshake_load0.addrOut0, %handshake_load0.addrOut0_valid = hw.instance "handshake_load0" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer95.out0: i64, addrIn0_valid: %handshake_buffer95.out0_valid: i1, dataFromMem: %handshake_buffer30.out0: i64, dataFromMem_valid: %handshake_buffer30.out0_valid: i1, ctrl: %handshake_buffer103.out0: i0, ctrl_valid: %handshake_buffer103.out0_valid: i1, dataOut_ready: %handshake_buffer109.in0_ready: i1, addrOut0_ready: %handshake_buffer108.in0_ready: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer108.in0_ready, %handshake_buffer108.out0, %handshake_buffer108.out0_valid = hw.instance "handshake_buffer108" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.addrOut0: i64, in0_valid: %handshake_load0.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.ldAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer109.in0_ready, %handshake_buffer109.out0, %handshake_buffer109.out0_valid = hw.instance "handshake_buffer109" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.dataOut: i64, in0_valid: %handshake_load0.dataOut_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi0.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_load1.addrIn0_ready, %handshake_load1.dataFromMem_ready, %handshake_load1.ctrl_ready, %handshake_load1.dataOut, %handshake_load1.dataOut_valid, %handshake_load1.addrOut0, %handshake_load1.addrOut0_valid = hw.instance "handshake_load1" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer94.out0: i64, addrIn0_valid: %handshake_buffer94.out0_valid: i1, dataFromMem: %handshake_buffer20.out0: i64, dataFromMem_valid: %handshake_buffer20.out0_valid: i1, ctrl: %handshake_buffer104.out0: i0, ctrl_valid: %handshake_buffer104.out0_valid: i1, dataOut_ready: %handshake_buffer111.in0_ready: i1, addrOut0_ready: %handshake_buffer110.in0_ready: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer110.in0_ready, %handshake_buffer110.out0, %handshake_buffer110.out0_valid = hw.instance "handshake_buffer110" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.addrOut0: i64, in0_valid: %handshake_load1.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.ldAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer111.in0_ready, %handshake_buffer111.out0, %handshake_buffer111.out0_valid = hw.instance "handshake_buffer111" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.dataOut: i64, in0_valid: %handshake_load1.dataOut_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi0.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %arith_addi0.in0_ready, %arith_addi0.in1_ready, %arith_addi0.out0, %arith_addi0.out0_valid = hw.instance "arith_addi0" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer109.out0: i64, in0_valid: %handshake_buffer109.out0_valid: i1, in1: %handshake_buffer111.out0: i64, in1_valid: %handshake_buffer111.out0_valid: i1, out0_ready: %handshake_buffer112.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer112.in0_ready, %handshake_buffer112.out0, %handshake_buffer112.out0_valid = hw.instance "handshake_buffer112" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi0.out0: i64, in0_valid: %arith_addi0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store6.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_store6.addrIn0_ready, %handshake_store6.dataIn_ready, %handshake_store6.ctrl_ready, %handshake_store6.dataToMem, %handshake_store6.dataToMem_valid, %handshake_store6.addrOut0, %handshake_store6.addrOut0_valid = hw.instance "handshake_store6" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer93.out0: i64, addrIn0_valid: %handshake_buffer93.out0_valid: i1, dataIn: %handshake_buffer112.out0: i64, dataIn_valid: %handshake_buffer112.out0_valid: i1, ctrl: %handshake_buffer106.out0: i0, ctrl_valid: %handshake_buffer106.out0_valid: i1, dataToMem_ready: %handshake_buffer114.in0_ready: i1, addrOut0_ready: %handshake_buffer113.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer113.in0_ready, %handshake_buffer113.out0, %handshake_buffer113.out0_valid = hw.instance "handshake_buffer113" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.addrOut0: i64, in0_valid: %handshake_store6.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory0.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer114.in0_ready, %handshake_buffer114.out0, %handshake_buffer114.out0_valid = hw.instance "handshake_buffer114" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.dataToMem: i64, in0_valid: %handshake_store6.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory0.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %arith_addi1.in0_ready, %arith_addi1.in1_ready, %arith_addi1.out0, %arith_addi1.out0_valid = hw.instance "arith_addi1" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer96.out0: i64, in0_valid: %handshake_buffer96.out0_valid: i1, in1: %handshake_buffer99.out0: i64, in1_valid: %handshake_buffer99.out0_valid: i1, out0_ready: %handshake_buffer115.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer115.in0_ready, %handshake_buffer115.out0, %handshake_buffer115.out0_valid = hw.instance "handshake_buffer115" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi1.out0: i64, in0_valid: %arith_addi1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux1.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    hw.output %handshake_buffer0.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid : i1, i0, i1
  }
}


// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_constant_c3_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c3_i64 = hw.constant 3 : i64
  hw.output %out0_ready, %c3_i64, %ctrl_valid : i1, i64, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_constant_c3_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c3_i64 = hw.constant 3 : i64
  hw.output %out0_ready, %c3_i64, %ctrl_valid : i1, i64, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_join_7ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %in4 : i0, in %in4_valid : i1, in %in5 : i0, in %in5_valid : i1, in %in6 : i0, in %in6_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out in4_ready : i1, out in5_ready : i1, out in6_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c0_i0 = hw.constant 0 : i0
  %0 = comb.and %in0_valid, %in1_valid, %in2_valid, %in3_valid, %in4_valid, %in5_valid, %in6_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  hw.output %1, %1, %1, %1, %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i1, i1, i1, i1, i0, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_memory_out_ui64_id2(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %clock : i1, in %reset : i1, in %stDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stDone0 : i0, out stDone0_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %c0_i0 = hw.constant 0 : i0
  %_handshake_memory_2 = sv.reg : !hw.inout<uarray<3xi64>> 
  %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
  %0 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.if %4 {
      %7 = sv.array_index_inout %_handshake_memory_2[%6] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %7, %stData0 : i64
    }
    sv.passign %writeValidBuffer, %5 : i1
  }(syncreset : posedge %reset) {
    sv.passign %writeValidBuffer, %false : i1
  }
  %1 = comb.and %stDone0_ready, %0 {sv.namehint = "storeCompleted"} : i1
  %2 = comb.xor %0, %true : i1
  %3 = comb.or %2, %1 {sv.namehint = "emptyOrComplete"} : i1
  %4 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
  %5 = comb.mux %3, %4, %0 : i1
  %6 = comb.extract %stAddr0 from 0 : (i64) -> i2
  hw.output %3, %3, %c0_i0, %0 : i1, i1, i0, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_fork_1ins_2outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %14, %true : i1
  %1 = comb.and %6, %0 : i1
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.and %3, %in0_valid : i1
  %5 = comb.and %out0_ready, %4 : i1
  %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
  %7 = comb.xor %14, %true : i1
  %8 = comb.and %13, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.passign %emitted_0, %1 : i1
    sv.passign %emitted_1, %8 : i1
  }(syncreset : posedge %reset) {
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
  }
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %in0_valid : i1
  %12 = comb.and %out1_ready, %11 : i1
  %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
  %14 = comb.and %6, %13 {sv.namehint = "allDone"} : i1
  hw.output %14, %in0, %4, %in0, %11 : i1, i0, i1, i0, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_fork_1ins_2outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %14, %true : i1
  %1 = comb.and %6, %0 : i1
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.and %3, %in0_valid : i1
  %5 = comb.and %out0_ready, %4 : i1
  %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
  %7 = comb.xor %14, %true : i1
  %8 = comb.and %13, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.passign %emitted_0, %1 : i1
    sv.passign %emitted_1, %8 : i1
  }(syncreset : posedge %reset) {
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
  }
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %in0_valid : i1
  %12 = comb.and %out1_ready, %11 : i1
  %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
  %14 = comb.and %6, %13 {sv.namehint = "allDone"} : i1
  hw.output %14, %in0, %4, %in0, %11 : i1, i0, i1, i0, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_constant_c1_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c1_i64 = hw.constant 1 : i64
  hw.output %out0_ready, %c1_i64, %ctrl_valid : i1, i64, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_memory_out_ui64_id1(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : i1, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %c0_i0 = hw.constant 0 : i0
  %_handshake_memory_1 = sv.reg : !hw.inout<uarray<3xi64>> 
  %0 = comb.extract %ldAddr0 from 0 : (i64) -> i2
  %1 = sv.array_index_inout %_handshake_memory_1[%0] : !hw.inout<uarray<3xi64>>, i2
  %2 = sv.read_inout %1 : !hw.inout<i64>
  %3 = comb.xor %17, %true : i1
  %4 = comb.and %9, %3 : i1
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %5 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %6 = comb.xor %5, %true : i1
  %7 = comb.and %6, %ldAddr0_valid : i1
  %8 = comb.and %ldData0_ready, %7 : i1
  %9 = comb.or %8, %5 {sv.namehint = "done0"} : i1
  %10 = comb.xor %17, %true : i1
  %11 = comb.and %16, %10 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %12 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %13 = comb.xor %12, %true : i1
  %14 = comb.and %13, %ldAddr0_valid : i1
  %15 = comb.and %ldDone0_ready, %14 : i1
  %16 = comb.or %15, %12 {sv.namehint = "done1"} : i1
  %17 = comb.and %9, %16 {sv.namehint = "allDone"} : i1
  %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
  %18 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
  %19 = comb.and %stDone0_ready, %18 {sv.namehint = "storeCompleted"} : i1
  %20 = comb.xor %18, %true : i1
  %21 = comb.or %20, %19 {sv.namehint = "emptyOrComplete"} : i1
  %22 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
  %23 = comb.mux %21, %22, %18 : i1
  %24 = comb.extract %stAddr0 from 0 : (i64) -> i2
  %writeValidBuffer_0 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
  %25 = sv.read_inout %writeValidBuffer_0 : !hw.inout<i1>
  %26 = comb.and %stDone1_ready, %25 {sv.namehint = "storeCompleted"} : i1
  %27 = comb.xor %25, %true : i1
  %28 = comb.or %27, %26 {sv.namehint = "emptyOrComplete"} : i1
  %29 = comb.and %stAddr1_valid, %stData1_valid {sv.namehint = "writeValid"} : i1
  %30 = comb.mux %28, %29, %25 : i1
  %31 = comb.extract %stAddr1 from 0 : (i64) -> i2
  %writeValidBuffer_1 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
  %32 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.if %36 {
      %39 = sv.array_index_inout %_handshake_memory_1[%38] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %39, %stData2 : i64
    }
    sv.if %29 {
      %39 = sv.array_index_inout %_handshake_memory_1[%31] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %39, %stData1 : i64
    }
    sv.if %22 {
      %39 = sv.array_index_inout %_handshake_memory_1[%24] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %39, %stData0 : i64
    }
    sv.passign %emitted_0, %4 : i1
    sv.passign %emitted_1, %11 : i1
    sv.passign %writeValidBuffer, %23 : i1
    sv.passign %writeValidBuffer_0, %30 : i1
    sv.passign %writeValidBuffer_1, %37 : i1
  }(syncreset : posedge %reset) {
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %writeValidBuffer, %false : i1
    sv.passign %writeValidBuffer_0, %false : i1
    sv.passign %writeValidBuffer_1, %false : i1
  }
  %33 = comb.and %stDone2_ready, %32 {sv.namehint = "storeCompleted"} : i1
  %34 = comb.xor %32, %true : i1
  %35 = comb.or %34, %33 {sv.namehint = "emptyOrComplete"} : i1
  %36 = comb.and %stAddr2_valid, %stData2_valid {sv.namehint = "writeValid"} : i1
  %37 = comb.mux %35, %36, %32 : i1
  %38 = comb.extract %stAddr2 from 0 : (i64) -> i2
  hw.output %21, %21, %28, %28, %35, %35, %17, %2, %7, %c0_i0, %18, %c0_i0, %25, %c0_i0, %32, %c0_i0, %14 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_memory_out_ui64_id1(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : i1, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %c0_i0 = hw.constant 0 : i0
  %_handshake_memory_1 = sv.reg : !hw.inout<uarray<3xi64>> 
  %0 = comb.extract %ldAddr0 from 0 : (i64) -> i2
  %1 = sv.array_index_inout %_handshake_memory_1[%0] : !hw.inout<uarray<3xi64>>, i2
  %2 = sv.read_inout %1 : !hw.inout<i64>
  %3 = comb.xor %17, %true : i1
  %4 = comb.and %9, %3 : i1
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %5 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %6 = comb.xor %5, %true : i1
  %7 = comb.and %6, %ldAddr0_valid : i1
  %8 = comb.and %ldData0_ready, %7 : i1
  %9 = comb.or %8, %5 {sv.namehint = "done0"} : i1
  %10 = comb.xor %17, %true : i1
  %11 = comb.and %16, %10 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %12 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %13 = comb.xor %12, %true : i1
  %14 = comb.and %13, %ldAddr0_valid : i1
  %15 = comb.and %ldDone0_ready, %14 : i1
  %16 = comb.or %15, %12 {sv.namehint = "done1"} : i1
  %17 = comb.and %9, %16 {sv.namehint = "allDone"} : i1
  %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
  %18 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
  %19 = comb.and %stDone0_ready, %18 {sv.namehint = "storeCompleted"} : i1
  %20 = comb.xor %18, %true : i1
  %21 = comb.or %20, %19 {sv.namehint = "emptyOrComplete"} : i1
  %22 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
  %23 = comb.mux %21, %22, %18 : i1
  %24 = comb.extract %stAddr0 from 0 : (i64) -> i2
  %writeValidBuffer_0 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
  %25 = sv.read_inout %writeValidBuffer_0 : !hw.inout<i1>
  %26 = comb.and %stDone1_ready, %25 {sv.namehint = "storeCompleted"} : i1
  %27 = comb.xor %25, %true : i1
  %28 = comb.or %27, %26 {sv.namehint = "emptyOrComplete"} : i1
  %29 = comb.and %stAddr1_valid, %stData1_valid {sv.namehint = "writeValid"} : i1
  %30 = comb.mux %28, %29, %25 : i1
  %31 = comb.extract %stAddr1 from 0 : (i64) -> i2
  %writeValidBuffer_1 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
  %32 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.if %36 {
      %39 = sv.array_index_inout %_handshake_memory_1[%38] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %39, %stData2 : i64
    }
    sv.if %29 {
      %39 = sv.array_index_inout %_handshake_memory_1[%31] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %39, %stData1 : i64
    }
    sv.if %22 {
      %39 = sv.array_index_inout %_handshake_memory_1[%24] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %39, %stData0 : i64
    }
    sv.passign %emitted_0, %4 : i1
    sv.passign %emitted_1, %11 : i1
    sv.passign %writeValidBuffer, %23 : i1
    sv.passign %writeValidBuffer_0, %30 : i1
    sv.passign %writeValidBuffer_1, %37 : i1
  }(syncreset : posedge %reset) {
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %writeValidBuffer, %false : i1
    sv.passign %writeValidBuffer_0, %false : i1
    sv.passign %writeValidBuffer_1, %false : i1
  }
  %33 = comb.and %stDone2_ready, %32 {sv.namehint = "storeCompleted"} : i1
  %34 = comb.xor %32, %true : i1
  %35 = comb.or %34, %33 {sv.namehint = "emptyOrComplete"} : i1
  %36 = comb.and %stAddr2_valid, %stData2_valid {sv.namehint = "writeValid"} : i1
  %37 = comb.mux %35, %36, %32 : i1
  %38 = comb.extract %stAddr2 from 0 : (i64) -> i2
  hw.output %21, %21, %28, %28, %35, %35, %17, %2, %7, %c0_i0, %18, %c0_i0, %25, %c0_i0, %32, %c0_i0, %14 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %c0_i0 = hw.constant 0 : i0
  %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
  %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.or %1, %8 : i1
  %3 = comb.mux %2, %in0_valid, %0 : i1
  %4 = comb.mux %2, %in0, %5 : i0
  %data0_reg = sv.reg sym @data0_reg : !hw.inout<i0> 
  %5 = sv.read_inout %data0_reg : !hw.inout<i0>
  %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
  %6 = sv.read_inout %ready0_reg : !hw.inout<i1>
  %7 = comb.mux %6, %6, %0 : i1
  %8 = comb.xor %6, %true : i1
  %9 = comb.xor %21, %true : i1
  %10 = comb.and %9, %8 : i1
  %11 = comb.mux %10, %0, %6 : i1
  %12 = comb.and %21, %6 : i1
  %13 = comb.xor %12, %true : i1
  %14 = comb.and %13, %11 : i1
  %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i0> 
  %15 = sv.read_inout %ctrl_data0_reg : !hw.inout<i0>
  %16 = comb.mux %6, %15, %5 : i0
  %17 = comb.mux %10, %5, %15 : i0
  %18 = comb.mux %12, %c0_i0, %17 : i0
  %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
  %19 = sv.read_inout %valid1_reg : !hw.inout<i1>
  %20 = comb.xor %19, %true : i1
  %21 = comb.or %20, %27 : i1
  %22 = comb.mux %21, %7, %19 : i1
  %23 = comb.mux %21, %16, %24 : i0
  %data1_reg = sv.reg sym @data1_reg : !hw.inout<i0> 
  %24 = sv.read_inout %data1_reg : !hw.inout<i0>
  %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
  %25 = sv.read_inout %ready1_reg : !hw.inout<i1>
  %26 = comb.mux %25, %25, %19 : i1
  %27 = comb.xor %25, %true : i1
  %28 = comb.xor %out0_ready, %true : i1
  %29 = comb.and %28, %27 : i1
  %30 = comb.mux %29, %19, %25 : i1
  %31 = comb.and %out0_ready, %25 : i1
  %32 = comb.xor %31, %true : i1
  %33 = comb.and %32, %30 : i1
  %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i0> 
  %34 = sv.read_inout %ctrl_data1_reg : !hw.inout<i0>
  sv.alwaysff(posedge %clock) {
    sv.passign %valid0_reg, %3 : i1
    sv.passign %data0_reg, %4 : i0
    sv.passign %ready0_reg, %14 : i1
    sv.passign %ctrl_data0_reg, %18 : i0
    sv.passign %valid1_reg, %22 : i1
    sv.passign %data1_reg, %23 : i0
    sv.passign %ready1_reg, %33 : i1
    sv.passign %ctrl_data1_reg, %37 : i0
  }(syncreset : posedge %reset) {
    sv.passign %valid0_reg, %false : i1
    sv.passign %data0_reg, %c0_i0 : i0
    sv.passign %ready0_reg, %false : i1
    sv.passign %ctrl_data0_reg, %c0_i0 : i0
    sv.passign %valid1_reg, %false : i1
    sv.passign %data1_reg, %c0_i0 : i0
    sv.passign %ready1_reg, %false : i1
    sv.passign %ctrl_data1_reg, %c0_i0 : i0
  }
  %35 = comb.mux %25, %34, %24 : i0
  %36 = comb.mux %29, %24, %34 : i0
  %37 = comb.mux %31, %c0_i0, %36 : i0
  hw.output %2, %35, %26 : i1, i0, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_memory_out_ui64_id0(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : i1, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %c0_i0 = hw.constant 0 : i0
  %_handshake_memory_0 = sv.reg : !hw.inout<uarray<3xi64>> 
  %0 = comb.extract %ldAddr0 from 0 : (i64) -> i2
  %1 = sv.array_index_inout %_handshake_memory_0[%0] : !hw.inout<uarray<3xi64>>, i2
  %2 = sv.read_inout %1 : !hw.inout<i64>
  %3 = comb.xor %17, %true : i1
  %4 = comb.and %9, %3 : i1
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %5 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %6 = comb.xor %5, %true : i1
  %7 = comb.and %6, %ldAddr0_valid : i1
  %8 = comb.and %ldData0_ready, %7 : i1
  %9 = comb.or %8, %5 {sv.namehint = "done0"} : i1
  %10 = comb.xor %17, %true : i1
  %11 = comb.and %16, %10 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %12 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %13 = comb.xor %12, %true : i1
  %14 = comb.and %13, %ldAddr0_valid : i1
  %15 = comb.and %ldDone0_ready, %14 : i1
  %16 = comb.or %15, %12 {sv.namehint = "done1"} : i1
  %17 = comb.and %9, %16 {sv.namehint = "allDone"} : i1
  %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
  %18 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
  %19 = comb.and %stDone0_ready, %18 {sv.namehint = "storeCompleted"} : i1
  %20 = comb.xor %18, %true : i1
  %21 = comb.or %20, %19 {sv.namehint = "emptyOrComplete"} : i1
  %22 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
  %23 = comb.mux %21, %22, %18 : i1
  %24 = comb.extract %stAddr0 from 0 : (i64) -> i2
  %writeValidBuffer_0 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
  %25 = sv.read_inout %writeValidBuffer_0 : !hw.inout<i1>
  %26 = comb.and %stDone1_ready, %25 {sv.namehint = "storeCompleted"} : i1
  %27 = comb.xor %25, %true : i1
  %28 = comb.or %27, %26 {sv.namehint = "emptyOrComplete"} : i1
  %29 = comb.and %stAddr1_valid, %stData1_valid {sv.namehint = "writeValid"} : i1
  %30 = comb.mux %28, %29, %25 : i1
  %31 = comb.extract %stAddr1 from 0 : (i64) -> i2
  %writeValidBuffer_1 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
  %32 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.if %36 {
      %39 = sv.array_index_inout %_handshake_memory_0[%38] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %39, %stData2 : i64
    }
    sv.if %29 {
      %39 = sv.array_index_inout %_handshake_memory_0[%31] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %39, %stData1 : i64
    }
    sv.if %22 {
      %39 = sv.array_index_inout %_handshake_memory_0[%24] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %39, %stData0 : i64
    }
    sv.passign %emitted_0, %4 : i1
    sv.passign %emitted_1, %11 : i1
    sv.passign %writeValidBuffer, %23 : i1
    sv.passign %writeValidBuffer_0, %30 : i1
    sv.passign %writeValidBuffer_1, %37 : i1
  }(syncreset : posedge %reset) {
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %writeValidBuffer, %false : i1
    sv.passign %writeValidBuffer_0, %false : i1
    sv.passign %writeValidBuffer_1, %false : i1
  }
  %33 = comb.and %stDone2_ready, %32 {sv.namehint = "storeCompleted"} : i1
  %34 = comb.xor %32, %true : i1
  %35 = comb.or %34, %33 {sv.namehint = "emptyOrComplete"} : i1
  %36 = comb.and %stAddr2_valid, %stData2_valid {sv.namehint = "writeValid"} : i1
  %37 = comb.mux %35, %36, %32 : i1
  %38 = comb.extract %stAddr2 from 0 : (i64) -> i2
  hw.output %21, %21, %28, %28, %35, %35, %17, %2, %7, %c0_i0, %18, %c0_i0, %25, %c0_i0, %32, %c0_i0, %14 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_memory_out_ui64_id0(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : i1, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %c0_i0 = hw.constant 0 : i0
  %_handshake_memory_0 = sv.reg : !hw.inout<uarray<3xi64>> 
  %0 = comb.extract %ldAddr0 from 0 : (i64) -> i2
  %1 = sv.array_index_inout %_handshake_memory_0[%0] : !hw.inout<uarray<3xi64>>, i2
  %2 = sv.read_inout %1 : !hw.inout<i64>
  %3 = comb.xor %17, %true : i1
  %4 = comb.and %9, %3 : i1
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %5 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %6 = comb.xor %5, %true : i1
  %7 = comb.and %6, %ldAddr0_valid : i1
  %8 = comb.and %ldData0_ready, %7 : i1
  %9 = comb.or %8, %5 {sv.namehint = "done0"} : i1
  %10 = comb.xor %17, %true : i1
  %11 = comb.and %16, %10 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %12 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %13 = comb.xor %12, %true : i1
  %14 = comb.and %13, %ldAddr0_valid : i1
  %15 = comb.and %ldDone0_ready, %14 : i1
  %16 = comb.or %15, %12 {sv.namehint = "done1"} : i1
  %17 = comb.and %9, %16 {sv.namehint = "allDone"} : i1
  %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
  %18 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
  %19 = comb.and %stDone0_ready, %18 {sv.namehint = "storeCompleted"} : i1
  %20 = comb.xor %18, %true : i1
  %21 = comb.or %20, %19 {sv.namehint = "emptyOrComplete"} : i1
  %22 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
  %23 = comb.mux %21, %22, %18 : i1
  %24 = comb.extract %stAddr0 from 0 : (i64) -> i2
  %writeValidBuffer_0 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
  %25 = sv.read_inout %writeValidBuffer_0 : !hw.inout<i1>
  %26 = comb.and %stDone1_ready, %25 {sv.namehint = "storeCompleted"} : i1
  %27 = comb.xor %25, %true : i1
  %28 = comb.or %27, %26 {sv.namehint = "emptyOrComplete"} : i1
  %29 = comb.and %stAddr1_valid, %stData1_valid {sv.namehint = "writeValid"} : i1
  %30 = comb.mux %28, %29, %25 : i1
  %31 = comb.extract %stAddr1 from 0 : (i64) -> i2
  %writeValidBuffer_1 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
  %32 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.if %36 {
      %39 = sv.array_index_inout %_handshake_memory_0[%38] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %39, %stData2 : i64
    }
    sv.if %29 {
      %39 = sv.array_index_inout %_handshake_memory_0[%31] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %39, %stData1 : i64
    }
    sv.if %22 {
      %39 = sv.array_index_inout %_handshake_memory_0[%24] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %39, %stData0 : i64
    }
    sv.passign %emitted_0, %4 : i1
    sv.passign %emitted_1, %11 : i1
    sv.passign %writeValidBuffer, %23 : i1
    sv.passign %writeValidBuffer_0, %30 : i1
    sv.passign %writeValidBuffer_1, %37 : i1
  }(syncreset : posedge %reset) {
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %writeValidBuffer, %false : i1
    sv.passign %writeValidBuffer_0, %false : i1
    sv.passign %writeValidBuffer_1, %false : i1
  }
  %33 = comb.and %stDone2_ready, %32 {sv.namehint = "storeCompleted"} : i1
  %34 = comb.xor %32, %true : i1
  %35 = comb.or %34, %33 {sv.namehint = "emptyOrComplete"} : i1
  %36 = comb.and %stAddr2_valid, %stData2_valid {sv.namehint = "writeValid"} : i1
  %37 = comb.mux %35, %36, %32 : i1
  %38 = comb.extract %stAddr2 from 0 : (i64) -> i2
  hw.output %21, %21, %28, %28, %35, %35, %17, %2, %7, %c0_i0, %18, %c0_i0, %25, %c0_i0, %32, %c0_i0, %14 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_constant_c0_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c0_i64 = hw.constant 0 : i64
  hw.output %out0_ready, %c0_i64, %ctrl_valid : i1, i64, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_constant_c0_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c0_i64 = hw.constant 0 : i64
  hw.output %out0_ready, %c0_i64, %ctrl_valid : i1, i64, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_memory_out_ui64_id2(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %clock : i1, in %reset : i1, in %stDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stDone0 : i0, out stDone0_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %c0_i0 = hw.constant 0 : i0
  %_handshake_memory_2 = sv.reg : !hw.inout<uarray<3xi64>> 
  %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
  %0 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.if %4 {
      %7 = sv.array_index_inout %_handshake_memory_2[%6] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %7, %stData0 : i64
    }
    sv.passign %writeValidBuffer, %5 : i1
  }(syncreset : posedge %reset) {
    sv.passign %writeValidBuffer, %false : i1
  }
  %1 = comb.and %stDone0_ready, %0 {sv.namehint = "storeCompleted"} : i1
  %2 = comb.xor %0, %true : i1
  %3 = comb.or %2, %1 {sv.namehint = "emptyOrComplete"} : i1
  %4 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
  %5 = comb.mux %3, %4, %0 : i1
  %6 = comb.extract %stAddr0 from 0 : (i64) -> i2
  hw.output %3, %3, %c0_i0, %0 : i1, i1, i0, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_join_2ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c0_i0 = hw.constant 0 : i0
  %0 = comb.and %in0_valid, %in1_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  hw.output %1, %1, %c0_i0, %0 : i1, i1, i0, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_constant_c2_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c2_i64 = hw.constant 2 : i64
  hw.output %out0_ready, %c2_i64, %ctrl_valid : i1, i64, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_join_3ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c0_i0 = hw.constant 0 : i0
  %0 = comb.and %in0_valid, %in1_valid, %in2_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  hw.output %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i0, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_join_3ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c0_i0 = hw.constant 0 : i0
  %0 = comb.and %in0_valid, %in1_valid, %in2_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  hw.output %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i0, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_fork_in_ui64_out_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %14, %true : i1
  %1 = comb.and %6, %0 : i1
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.and %3, %in0_valid : i1
  %5 = comb.and %out0_ready, %4 : i1
  %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
  %7 = comb.xor %14, %true : i1
  %8 = comb.and %13, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.passign %emitted_0, %1 : i1
    sv.passign %emitted_1, %8 : i1
  }(syncreset : posedge %reset) {
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
  }
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %in0_valid : i1
  %12 = comb.and %out1_ready, %11 : i1
  %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
  %14 = comb.and %6, %13 {sv.namehint = "allDone"} : i1
  hw.output %14, %in0, %4, %in0, %11 : i1, i64, i1, i64, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_buffer_in_ui64_out_ui64_2slots_seq(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %c0_i64 = hw.constant 0 : i64
  %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
  %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.or %1, %8 : i1
  %3 = comb.mux %2, %in0_valid, %0 : i1
  %4 = comb.mux %2, %in0, %5 : i64
  %data0_reg = sv.reg sym @data0_reg : !hw.inout<i64> 
  %5 = sv.read_inout %data0_reg : !hw.inout<i64>
  %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
  %6 = sv.read_inout %ready0_reg : !hw.inout<i1>
  %7 = comb.mux %6, %6, %0 : i1
  %8 = comb.xor %6, %true : i1
  %9 = comb.xor %21, %true : i1
  %10 = comb.and %9, %8 : i1
  %11 = comb.mux %10, %0, %6 : i1
  %12 = comb.and %21, %6 : i1
  %13 = comb.xor %12, %true : i1
  %14 = comb.and %13, %11 : i1
  %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i64> 
  %15 = sv.read_inout %ctrl_data0_reg : !hw.inout<i64>
  %16 = comb.mux %6, %15, %5 : i64
  %17 = comb.mux %10, %5, %15 : i64
  %18 = comb.mux %12, %c0_i64, %17 : i64
  %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
  %19 = sv.read_inout %valid1_reg : !hw.inout<i1>
  %20 = comb.xor %19, %true : i1
  %21 = comb.or %20, %27 : i1
  %22 = comb.mux %21, %7, %19 : i1
  %23 = comb.mux %21, %16, %24 : i64
  %data1_reg = sv.reg sym @data1_reg : !hw.inout<i64> 
  %24 = sv.read_inout %data1_reg : !hw.inout<i64>
  %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
  %25 = sv.read_inout %ready1_reg : !hw.inout<i1>
  %26 = comb.mux %25, %25, %19 : i1
  %27 = comb.xor %25, %true : i1
  %28 = comb.xor %out0_ready, %true : i1
  %29 = comb.and %28, %27 : i1
  %30 = comb.mux %29, %19, %25 : i1
  %31 = comb.and %out0_ready, %25 : i1
  %32 = comb.xor %31, %true : i1
  %33 = comb.and %32, %30 : i1
  %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i64> 
  %34 = sv.read_inout %ctrl_data1_reg : !hw.inout<i64>
  sv.alwaysff(posedge %clock) {
    sv.passign %valid0_reg, %3 : i1
    sv.passign %data0_reg, %4 : i64
    sv.passign %ready0_reg, %14 : i1
    sv.passign %ctrl_data0_reg, %18 : i64
    sv.passign %valid1_reg, %22 : i1
    sv.passign %data1_reg, %23 : i64
    sv.passign %ready1_reg, %33 : i1
    sv.passign %ctrl_data1_reg, %37 : i64
  }(syncreset : posedge %reset) {
    sv.passign %valid0_reg, %false : i1
    sv.passign %data0_reg, %c0_i64 : i64
    sv.passign %ready0_reg, %false : i1
    sv.passign %ctrl_data0_reg, %c0_i64 : i64
    sv.passign %valid1_reg, %false : i1
    sv.passign %data1_reg, %c0_i64 : i64
    sv.passign %ready1_reg, %false : i1
    sv.passign %ctrl_data1_reg, %c0_i64 : i64
  }
  %35 = comb.mux %25, %34, %24 : i64
  %36 = comb.mux %29, %24, %34 : i64
  %37 = comb.mux %31, %c0_i64, %36 : i64
  hw.output %2, %35, %26 : i1, i64, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_buffer_in_ui64_out_ui64_2slots_seq(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %c0_i64 = hw.constant 0 : i64
  %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
  %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.or %1, %8 : i1
  %3 = comb.mux %2, %in0_valid, %0 : i1
  %4 = comb.mux %2, %in0, %5 : i64
  %data0_reg = sv.reg sym @data0_reg : !hw.inout<i64> 
  %5 = sv.read_inout %data0_reg : !hw.inout<i64>
  %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
  %6 = sv.read_inout %ready0_reg : !hw.inout<i1>
  %7 = comb.mux %6, %6, %0 : i1
  %8 = comb.xor %6, %true : i1
  %9 = comb.xor %21, %true : i1
  %10 = comb.and %9, %8 : i1
  %11 = comb.mux %10, %0, %6 : i1
  %12 = comb.and %21, %6 : i1
  %13 = comb.xor %12, %true : i1
  %14 = comb.and %13, %11 : i1
  %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i64> 
  %15 = sv.read_inout %ctrl_data0_reg : !hw.inout<i64>
  %16 = comb.mux %6, %15, %5 : i64
  %17 = comb.mux %10, %5, %15 : i64
  %18 = comb.mux %12, %c0_i64, %17 : i64
  %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
  %19 = sv.read_inout %valid1_reg : !hw.inout<i1>
  %20 = comb.xor %19, %true : i1
  %21 = comb.or %20, %27 : i1
  %22 = comb.mux %21, %7, %19 : i1
  %23 = comb.mux %21, %16, %24 : i64
  %data1_reg = sv.reg sym @data1_reg : !hw.inout<i64> 
  %24 = sv.read_inout %data1_reg : !hw.inout<i64>
  %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
  %25 = sv.read_inout %ready1_reg : !hw.inout<i1>
  %26 = comb.mux %25, %25, %19 : i1
  %27 = comb.xor %25, %true : i1
  %28 = comb.xor %out0_ready, %true : i1
  %29 = comb.and %28, %27 : i1
  %30 = comb.mux %29, %19, %25 : i1
  %31 = comb.and %out0_ready, %25 : i1
  %32 = comb.xor %31, %true : i1
  %33 = comb.and %32, %30 : i1
  %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i64> 
  %34 = sv.read_inout %ctrl_data1_reg : !hw.inout<i64>
  sv.alwaysff(posedge %clock) {
    sv.passign %valid0_reg, %3 : i1
    sv.passign %data0_reg, %4 : i64
    sv.passign %ready0_reg, %14 : i1
    sv.passign %ctrl_data0_reg, %18 : i64
    sv.passign %valid1_reg, %22 : i1
    sv.passign %data1_reg, %23 : i64
    sv.passign %ready1_reg, %33 : i1
    sv.passign %ctrl_data1_reg, %37 : i64
  }(syncreset : posedge %reset) {
    sv.passign %valid0_reg, %false : i1
    sv.passign %data0_reg, %c0_i64 : i64
    sv.passign %ready0_reg, %false : i1
    sv.passign %ctrl_data0_reg, %c0_i64 : i64
    sv.passign %valid1_reg, %false : i1
    sv.passign %data1_reg, %c0_i64 : i64
    sv.passign %ready1_reg, %false : i1
    sv.passign %ctrl_data1_reg, %c0_i64 : i64
  }
  %35 = comb.mux %25, %34, %24 : i64
  %36 = comb.mux %29, %24, %34 : i64
  %37 = comb.mux %31, %c0_i64, %36 : i64
  hw.output %2, %35, %26 : i1, i64, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_fork_1ins_14outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, in %out5_ready : i1, in %out6_ready : i1, in %out7_ready : i1, in %out8_ready : i1, in %out9_ready : i1, in %out10_ready : i1, in %out11_ready : i1, in %out12_ready : i1, in %out13_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1, out out4 : i0, out out4_valid : i1, out out5 : i0, out out5_valid : i1, out out6 : i0, out out6_valid : i1, out out7 : i0, out out7_valid : i1, out out8 : i0, out out8_valid : i1, out out9 : i0, out out9_valid : i1, out out10 : i0, out out10_valid : i1, out out11 : i0, out out11_valid : i1, out out12 : i0, out out12_valid : i1, out out13 : i0, out out13_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %98, %true : i1
  %1 = comb.and %6, %0 : i1
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.and %3, %in0_valid : i1
  %5 = comb.and %out0_ready, %4 : i1
  %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
  %7 = comb.xor %98, %true : i1
  %8 = comb.and %13, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %in0_valid : i1
  %12 = comb.and %out1_ready, %11 : i1
  %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
  %14 = comb.xor %98, %true : i1
  %15 = comb.and %20, %14 : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %17 = comb.xor %16, %true : i1
  %18 = comb.and %17, %in0_valid : i1
  %19 = comb.and %out2_ready, %18 : i1
  %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
  %21 = comb.xor %98, %true : i1
  %22 = comb.and %27, %21 : i1
  %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
  %23 = sv.read_inout %emitted_3 : !hw.inout<i1>
  %24 = comb.xor %23, %true : i1
  %25 = comb.and %24, %in0_valid : i1
  %26 = comb.and %out3_ready, %25 : i1
  %27 = comb.or %26, %23 {sv.namehint = "done3"} : i1
  %28 = comb.xor %98, %true : i1
  %29 = comb.and %34, %28 : i1
  %emitted_4 = sv.reg sym @emitted_4 : !hw.inout<i1> 
  %30 = sv.read_inout %emitted_4 : !hw.inout<i1>
  %31 = comb.xor %30, %true : i1
  %32 = comb.and %31, %in0_valid : i1
  %33 = comb.and %out4_ready, %32 : i1
  %34 = comb.or %33, %30 {sv.namehint = "done4"} : i1
  %35 = comb.xor %98, %true : i1
  %36 = comb.and %41, %35 : i1
  %emitted_5 = sv.reg sym @emitted_5 : !hw.inout<i1> 
  %37 = sv.read_inout %emitted_5 : !hw.inout<i1>
  %38 = comb.xor %37, %true : i1
  %39 = comb.and %38, %in0_valid : i1
  %40 = comb.and %out5_ready, %39 : i1
  %41 = comb.or %40, %37 {sv.namehint = "done5"} : i1
  %42 = comb.xor %98, %true : i1
  %43 = comb.and %48, %42 : i1
  %emitted_6 = sv.reg sym @emitted_6 : !hw.inout<i1> 
  %44 = sv.read_inout %emitted_6 : !hw.inout<i1>
  %45 = comb.xor %44, %true : i1
  %46 = comb.and %45, %in0_valid : i1
  %47 = comb.and %out6_ready, %46 : i1
  %48 = comb.or %47, %44 {sv.namehint = "done6"} : i1
  %49 = comb.xor %98, %true : i1
  %50 = comb.and %55, %49 : i1
  %emitted_7 = sv.reg sym @emitted_7 : !hw.inout<i1> 
  %51 = sv.read_inout %emitted_7 : !hw.inout<i1>
  %52 = comb.xor %51, %true : i1
  %53 = comb.and %52, %in0_valid : i1
  %54 = comb.and %out7_ready, %53 : i1
  %55 = comb.or %54, %51 {sv.namehint = "done7"} : i1
  %56 = comb.xor %98, %true : i1
  %57 = comb.and %62, %56 : i1
  %emitted_8 = sv.reg sym @emitted_8 : !hw.inout<i1> 
  %58 = sv.read_inout %emitted_8 : !hw.inout<i1>
  %59 = comb.xor %58, %true : i1
  %60 = comb.and %59, %in0_valid : i1
  %61 = comb.and %out8_ready, %60 : i1
  %62 = comb.or %61, %58 {sv.namehint = "done8"} : i1
  %63 = comb.xor %98, %true : i1
  %64 = comb.and %69, %63 : i1
  %emitted_9 = sv.reg sym @emitted_9 : !hw.inout<i1> 
  %65 = sv.read_inout %emitted_9 : !hw.inout<i1>
  %66 = comb.xor %65, %true : i1
  %67 = comb.and %66, %in0_valid : i1
  %68 = comb.and %out9_ready, %67 : i1
  %69 = comb.or %68, %65 {sv.namehint = "done9"} : i1
  %70 = comb.xor %98, %true : i1
  %71 = comb.and %76, %70 : i1
  %emitted_10 = sv.reg sym @emitted_10 : !hw.inout<i1> 
  %72 = sv.read_inout %emitted_10 : !hw.inout<i1>
  %73 = comb.xor %72, %true : i1
  %74 = comb.and %73, %in0_valid : i1
  %75 = comb.and %out10_ready, %74 : i1
  %76 = comb.or %75, %72 {sv.namehint = "done10"} : i1
  %77 = comb.xor %98, %true : i1
  %78 = comb.and %83, %77 : i1
  %emitted_11 = sv.reg sym @emitted_11 : !hw.inout<i1> 
  %79 = sv.read_inout %emitted_11 : !hw.inout<i1>
  %80 = comb.xor %79, %true : i1
  %81 = comb.and %80, %in0_valid : i1
  %82 = comb.and %out11_ready, %81 : i1
  %83 = comb.or %82, %79 {sv.namehint = "done11"} : i1
  %84 = comb.xor %98, %true : i1
  %85 = comb.and %90, %84 : i1
  %emitted_12 = sv.reg sym @emitted_12 : !hw.inout<i1> 
  %86 = sv.read_inout %emitted_12 : !hw.inout<i1>
  %87 = comb.xor %86, %true : i1
  %88 = comb.and %87, %in0_valid : i1
  %89 = comb.and %out12_ready, %88 : i1
  %90 = comb.or %89, %86 {sv.namehint = "done12"} : i1
  %91 = comb.xor %98, %true : i1
  %92 = comb.and %97, %91 : i1
  %emitted_13 = sv.reg sym @emitted_13 : !hw.inout<i1> 
  %93 = sv.read_inout %emitted_13 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.passign %emitted_0, %1 : i1
    sv.passign %emitted_1, %8 : i1
    sv.passign %emitted_2, %15 : i1
    sv.passign %emitted_3, %22 : i1
    sv.passign %emitted_4, %29 : i1
    sv.passign %emitted_5, %36 : i1
    sv.passign %emitted_6, %43 : i1
    sv.passign %emitted_7, %50 : i1
    sv.passign %emitted_8, %57 : i1
    sv.passign %emitted_9, %64 : i1
    sv.passign %emitted_10, %71 : i1
    sv.passign %emitted_11, %78 : i1
    sv.passign %emitted_12, %85 : i1
    sv.passign %emitted_13, %92 : i1
  }(syncreset : posedge %reset) {
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
    sv.passign %emitted_3, %false : i1
    sv.passign %emitted_4, %false : i1
    sv.passign %emitted_5, %false : i1
    sv.passign %emitted_6, %false : i1
    sv.passign %emitted_7, %false : i1
    sv.passign %emitted_8, %false : i1
    sv.passign %emitted_9, %false : i1
    sv.passign %emitted_10, %false : i1
    sv.passign %emitted_11, %false : i1
    sv.passign %emitted_12, %false : i1
    sv.passign %emitted_13, %false : i1
  }
  %94 = comb.xor %93, %true : i1
  %95 = comb.and %94, %in0_valid : i1
  %96 = comb.and %out13_ready, %95 : i1
  %97 = comb.or %96, %93 {sv.namehint = "done13"} : i1
  %98 = comb.and %6, %13, %20, %27, %34, %41, %48, %55, %62, %69, %76, %83, %90, %97 {sv.namehint = "allDone"} : i1
  hw.output %98, %in0, %4, %in0, %11, %in0, %18, %in0, %25, %in0, %32, %in0, %39, %in0, %46, %in0, %53, %in0, %60, %in0, %67, %in0, %74, %in0, %81, %in0, %88, %in0, %95 : i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %28, %true : i1
  %1 = comb.and %6, %0 : i1
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.and %3, %in0_valid : i1
  %5 = comb.and %out0_ready, %4 : i1
  %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
  %7 = comb.xor %28, %true : i1
  %8 = comb.and %13, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %in0_valid : i1
  %12 = comb.and %out1_ready, %11 : i1
  %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
  %14 = comb.xor %28, %true : i1
  %15 = comb.and %20, %14 : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %17 = comb.xor %16, %true : i1
  %18 = comb.and %17, %in0_valid : i1
  %19 = comb.and %out2_ready, %18 : i1
  %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
  %21 = comb.xor %28, %true : i1
  %22 = comb.and %27, %21 : i1
  %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
  %23 = sv.read_inout %emitted_3 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.passign %emitted_0, %1 : i1
    sv.passign %emitted_1, %8 : i1
    sv.passign %emitted_2, %15 : i1
    sv.passign %emitted_3, %22 : i1
  }(syncreset : posedge %reset) {
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
    sv.passign %emitted_3, %false : i1
  }
  %24 = comb.xor %23, %true : i1
  %25 = comb.and %24, %in0_valid : i1
  %26 = comb.and %out3_ready, %25 : i1
  %27 = comb.or %26, %23 {sv.namehint = "done3"} : i1
  %28 = comb.and %6, %13, %20, %27 {sv.namehint = "allDone"} : i1
  hw.output %28, %in0, %4, %in0, %11, %in0, %18, %in0, %25 : i1, i1, i1, i1, i1, i1, i1, i1, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %28, %true : i1
  %1 = comb.and %6, %0 : i1
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.and %3, %in0_valid : i1
  %5 = comb.and %out0_ready, %4 : i1
  %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
  %7 = comb.xor %28, %true : i1
  %8 = comb.and %13, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %in0_valid : i1
  %12 = comb.and %out1_ready, %11 : i1
  %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
  %14 = comb.xor %28, %true : i1
  %15 = comb.and %20, %14 : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %17 = comb.xor %16, %true : i1
  %18 = comb.and %17, %in0_valid : i1
  %19 = comb.and %out2_ready, %18 : i1
  %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
  %21 = comb.xor %28, %true : i1
  %22 = comb.and %27, %21 : i1
  %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
  %23 = sv.read_inout %emitted_3 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.passign %emitted_0, %1 : i1
    sv.passign %emitted_1, %8 : i1
    sv.passign %emitted_2, %15 : i1
    sv.passign %emitted_3, %22 : i1
  }(syncreset : posedge %reset) {
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
    sv.passign %emitted_3, %false : i1
  }
  %24 = comb.xor %23, %true : i1
  %25 = comb.and %24, %in0_valid : i1
  %26 = comb.and %out3_ready, %25 : i1
  %27 = comb.or %26, %23 {sv.namehint = "done3"} : i1
  %28 = comb.and %6, %13, %20, %27 {sv.namehint = "allDone"} : i1
  hw.output %28, %in0, %4, %in0, %11, %in0, %18, %in0, %25 : i1, i1, i1, i1, i1, i1, i1, i1, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_constant_c2_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c2_i64 = hw.constant 2 : i64
  hw.output %out0_ready, %c2_i64, %ctrl_valid : i1, i64, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_constant_c1_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c1_i64 = hw.constant 1 : i64
  hw.output %out0_ready, %c1_i64, %ctrl_valid : i1, i64, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_sink_in_ui64(in %in0 : i64, in %in0_valid : i1, out in0_ready : i1) {
  %true = hw.constant true
  hw.output %true : i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_sink_in_ui64(in %in0 : i64, in %in0_valid : i1, out in0_ready : i1) {
  %true = hw.constant true
  hw.output %true : i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_join_7ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %in4 : i0, in %in4_valid : i1, in %in5 : i0, in %in5_valid : i1, in %in6 : i0, in %in6_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out in4_ready : i1, out in5_ready : i1, out in6_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c0_i0 = hw.constant 0 : i0
  %0 = comb.and %in0_valid, %in1_valid, %in2_valid, %in3_valid, %in4_valid, %in5_valid, %in6_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  hw.output %1, %1, %1, %1, %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i1, i1, i1, i1, i0, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %c0_i0 = hw.constant 0 : i0
  %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
  %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.or %1, %8 : i1
  %3 = comb.mux %2, %in0_valid, %0 : i1
  %4 = comb.mux %2, %in0, %5 : i0
  %data0_reg = sv.reg sym @data0_reg : !hw.inout<i0> 
  %5 = sv.read_inout %data0_reg : !hw.inout<i0>
  %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
  %6 = sv.read_inout %ready0_reg : !hw.inout<i1>
  %7 = comb.mux %6, %6, %0 : i1
  %8 = comb.xor %6, %true : i1
  %9 = comb.xor %21, %true : i1
  %10 = comb.and %9, %8 : i1
  %11 = comb.mux %10, %0, %6 : i1
  %12 = comb.and %21, %6 : i1
  %13 = comb.xor %12, %true : i1
  %14 = comb.and %13, %11 : i1
  %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i0> 
  %15 = sv.read_inout %ctrl_data0_reg : !hw.inout<i0>
  %16 = comb.mux %6, %15, %5 : i0
  %17 = comb.mux %10, %5, %15 : i0
  %18 = comb.mux %12, %c0_i0, %17 : i0
  %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
  %19 = sv.read_inout %valid1_reg : !hw.inout<i1>
  %20 = comb.xor %19, %true : i1
  %21 = comb.or %20, %27 : i1
  %22 = comb.mux %21, %7, %19 : i1
  %23 = comb.mux %21, %16, %24 : i0
  %data1_reg = sv.reg sym @data1_reg : !hw.inout<i0> 
  %24 = sv.read_inout %data1_reg : !hw.inout<i0>
  %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
  %25 = sv.read_inout %ready1_reg : !hw.inout<i1>
  %26 = comb.mux %25, %25, %19 : i1
  %27 = comb.xor %25, %true : i1
  %28 = comb.xor %out0_ready, %true : i1
  %29 = comb.and %28, %27 : i1
  %30 = comb.mux %29, %19, %25 : i1
  %31 = comb.and %out0_ready, %25 : i1
  %32 = comb.xor %31, %true : i1
  %33 = comb.and %32, %30 : i1
  %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i0> 
  %34 = sv.read_inout %ctrl_data1_reg : !hw.inout<i0>
  sv.alwaysff(posedge %clock) {
    sv.passign %valid0_reg, %3 : i1
    sv.passign %data0_reg, %4 : i0
    sv.passign %ready0_reg, %14 : i1
    sv.passign %ctrl_data0_reg, %18 : i0
    sv.passign %valid1_reg, %22 : i1
    sv.passign %data1_reg, %23 : i0
    sv.passign %ready1_reg, %33 : i1
    sv.passign %ctrl_data1_reg, %37 : i0
  }(syncreset : posedge %reset) {
    sv.passign %valid0_reg, %false : i1
    sv.passign %data0_reg, %c0_i0 : i0
    sv.passign %ready0_reg, %false : i1
    sv.passign %ctrl_data0_reg, %c0_i0 : i0
    sv.passign %valid1_reg, %false : i1
    sv.passign %data1_reg, %c0_i0 : i0
    sv.passign %ready1_reg, %false : i1
    sv.passign %ctrl_data1_reg, %c0_i0 : i0
  }
  %35 = comb.mux %25, %34, %24 : i0
  %36 = comb.mux %29, %24, %34 : i0
  %37 = comb.mux %31, %c0_i0, %36 : i0
  hw.output %2, %35, %26 : i1, i0, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_fork_1ins_3outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %21, %true : i1
  %1 = comb.and %6, %0 : i1
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.and %3, %in0_valid : i1
  %5 = comb.and %out0_ready, %4 : i1
  %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
  %7 = comb.xor %21, %true : i1
  %8 = comb.and %13, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %in0_valid : i1
  %12 = comb.and %out1_ready, %11 : i1
  %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
  %14 = comb.xor %21, %true : i1
  %15 = comb.and %20, %14 : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.passign %emitted_0, %1 : i1
    sv.passign %emitted_1, %8 : i1
    sv.passign %emitted_2, %15 : i1
  }(syncreset : posedge %reset) {
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
  }
  %17 = comb.xor %16, %true : i1
  %18 = comb.and %17, %in0_valid : i1
  %19 = comb.and %out2_ready, %18 : i1
  %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
  %21 = comb.and %6, %13, %20 {sv.namehint = "allDone"} : i1
  hw.output %21, %in0, %4, %in0, %11, %in0, %18 : i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_store_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataIn : i64, in %dataIn_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataToMem_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataIn_ready : i1, out ctrl_ready : i1, out dataToMem : i64, out dataToMem_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
  %0 = comb.and %dataIn_valid, %addrIn0_valid, %ctrl_valid : i1
  %1 = comb.and %dataToMem_ready, %addrOut0_ready, %0 : i1
  hw.output %1, %1, %1, %dataIn, %0, %addrIn0, %0 : i1, i1, i1, i64, i1, i64, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_store_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataIn : i64, in %dataIn_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataToMem_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataIn_ready : i1, out ctrl_ready : i1, out dataToMem : i64, out dataToMem_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
  %0 = comb.and %dataIn_valid, %addrIn0_valid, %ctrl_valid : i1
  %1 = comb.and %dataToMem_ready, %addrOut0_ready, %0 : i1
  hw.output %1, %1, %1, %dataIn, %0, %addrIn0, %0 : i1, i1, i1, i64, i1, i64, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_mux_in_ui1_3ins_1outs_ctrl(in %select : i1, in %select_valid : i1, in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c1_i2 = hw.constant 1 : i2
  %false = hw.constant false
  %0 = comb.concat %false, %select : i1, i1
  %1 = comb.shl %c1_i2, %0 : i2
  %2 = comb.mux %select, %in1_valid, %in0_valid : i1
  %3 = comb.and %2, %select_valid : i1
  %4 = comb.and %3, %out0_ready : i1
  %5 = comb.extract %1 from 0 : (i2) -> i1
  %6 = comb.and %5, %4 : i1
  %7 = comb.extract %1 from 1 : (i2) -> i1
  %8 = comb.and %7, %4 : i1
  %9 = comb.mux %select, %in1, %in0 : i0
  hw.output %4, %6, %8, %9, %3 : i1, i1, i1, i0, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(in %cond : i1, in %cond_valid : i1, in %data : i64, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i64, out outTrue_valid : i1, out outFalse : i64, out outFalse_valid : i1) {
  %true = hw.constant true
  %0 = comb.and %cond_valid, %data_valid : i1
  %1 = comb.and %cond, %0 : i1
  %2 = comb.xor %cond, %true : i1
  %3 = comb.and %2, %0 : i1
  %4 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
  %5 = comb.and %4, %0 : i1
  hw.output %5, %5, %data, %1, %data, %3 : i1, i1, i64, i1, i64, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(in %cond : i1, in %cond_valid : i1, in %data : i64, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i64, out outTrue_valid : i1, out outFalse : i64, out outFalse_valid : i1) {
  %true = hw.constant true
  %0 = comb.and %cond_valid, %data_valid : i1
  %1 = comb.and %cond, %0 : i1
  %2 = comb.xor %cond, %true : i1
  %3 = comb.and %2, %0 : i1
  %4 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
  %5 = comb.and %4, %0 : i1
  hw.output %5, %5, %data, %1, %data, %3 : i1, i1, i64, i1, i64, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %21, %true : i1
  %1 = comb.and %6, %0 : i1
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.and %3, %in0_valid : i1
  %5 = comb.and %out0_ready, %4 : i1
  %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
  %7 = comb.xor %21, %true : i1
  %8 = comb.and %13, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %in0_valid : i1
  %12 = comb.and %out1_ready, %11 : i1
  %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
  %14 = comb.xor %21, %true : i1
  %15 = comb.and %20, %14 : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.passign %emitted_0, %1 : i1
    sv.passign %emitted_1, %8 : i1
    sv.passign %emitted_2, %15 : i1
  }(syncreset : posedge %reset) {
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
  }
  %17 = comb.xor %16, %true : i1
  %18 = comb.and %17, %in0_valid : i1
  %19 = comb.and %out2_ready, %18 : i1
  %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
  %21 = comb.and %6, %13, %20 {sv.namehint = "allDone"} : i1
  hw.output %21, %in0, %4, %in0, %11, %in0, %18 : i1, i64, i1, i64, i1, i64, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_fork_in_ui64_out_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %14, %true : i1
  %1 = comb.and %6, %0 : i1
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.and %3, %in0_valid : i1
  %5 = comb.and %out0_ready, %4 : i1
  %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
  %7 = comb.xor %14, %true : i1
  %8 = comb.and %13, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.passign %emitted_0, %1 : i1
    sv.passign %emitted_1, %8 : i1
  }(syncreset : posedge %reset) {
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
  }
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %in0_valid : i1
  %12 = comb.and %out1_ready, %11 : i1
  %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
  %14 = comb.and %6, %13 {sv.namehint = "allDone"} : i1
  hw.output %14, %in0, %4, %in0, %11 : i1, i64, i1, i64, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @arith_addi_in_ui64_ui64_out_ui64(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
  %0 = comb.and %in0_valid, %in1_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  %2 = comb.add %in0, %in1 : i64
  hw.output %1, %1, %2, %0 : i1, i1, i64, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @arith_addi_in_ui64_ui64_out_ui64(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
  %0 = comb.and %in0_valid, %in1_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  %2 = comb.add %in0, %in1 : i64
  hw.output %1, %1, %2, %0 : i1, i1, i64, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_fork_1ins_3outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %21, %true : i1
  %1 = comb.and %6, %0 : i1
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.and %3, %in0_valid : i1
  %5 = comb.and %out0_ready, %4 : i1
  %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
  %7 = comb.xor %21, %true : i1
  %8 = comb.and %13, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %in0_valid : i1
  %12 = comb.and %out1_ready, %11 : i1
  %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
  %14 = comb.xor %21, %true : i1
  %15 = comb.and %20, %14 : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.passign %emitted_0, %1 : i1
    sv.passign %emitted_1, %8 : i1
    sv.passign %emitted_2, %15 : i1
  }(syncreset : posedge %reset) {
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
  }
  %17 = comb.xor %16, %true : i1
  %18 = comb.and %17, %in0_valid : i1
  %19 = comb.and %out2_ready, %18 : i1
  %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
  %21 = comb.and %6, %13, %20 {sv.namehint = "allDone"} : i1
  hw.output %21, %in0, %4, %in0, %11, %in0, %18 : i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_fork_1ins_14outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, in %out5_ready : i1, in %out6_ready : i1, in %out7_ready : i1, in %out8_ready : i1, in %out9_ready : i1, in %out10_ready : i1, in %out11_ready : i1, in %out12_ready : i1, in %out13_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1, out out4 : i0, out out4_valid : i1, out out5 : i0, out out5_valid : i1, out out6 : i0, out out6_valid : i1, out out7 : i0, out out7_valid : i1, out out8 : i0, out out8_valid : i1, out out9 : i0, out out9_valid : i1, out out10 : i0, out out10_valid : i1, out out11 : i0, out out11_valid : i1, out out12 : i0, out out12_valid : i1, out out13 : i0, out out13_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %98, %true : i1
  %1 = comb.and %6, %0 : i1
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.and %3, %in0_valid : i1
  %5 = comb.and %out0_ready, %4 : i1
  %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
  %7 = comb.xor %98, %true : i1
  %8 = comb.and %13, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %in0_valid : i1
  %12 = comb.and %out1_ready, %11 : i1
  %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
  %14 = comb.xor %98, %true : i1
  %15 = comb.and %20, %14 : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %17 = comb.xor %16, %true : i1
  %18 = comb.and %17, %in0_valid : i1
  %19 = comb.and %out2_ready, %18 : i1
  %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
  %21 = comb.xor %98, %true : i1
  %22 = comb.and %27, %21 : i1
  %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
  %23 = sv.read_inout %emitted_3 : !hw.inout<i1>
  %24 = comb.xor %23, %true : i1
  %25 = comb.and %24, %in0_valid : i1
  %26 = comb.and %out3_ready, %25 : i1
  %27 = comb.or %26, %23 {sv.namehint = "done3"} : i1
  %28 = comb.xor %98, %true : i1
  %29 = comb.and %34, %28 : i1
  %emitted_4 = sv.reg sym @emitted_4 : !hw.inout<i1> 
  %30 = sv.read_inout %emitted_4 : !hw.inout<i1>
  %31 = comb.xor %30, %true : i1
  %32 = comb.and %31, %in0_valid : i1
  %33 = comb.and %out4_ready, %32 : i1
  %34 = comb.or %33, %30 {sv.namehint = "done4"} : i1
  %35 = comb.xor %98, %true : i1
  %36 = comb.and %41, %35 : i1
  %emitted_5 = sv.reg sym @emitted_5 : !hw.inout<i1> 
  %37 = sv.read_inout %emitted_5 : !hw.inout<i1>
  %38 = comb.xor %37, %true : i1
  %39 = comb.and %38, %in0_valid : i1
  %40 = comb.and %out5_ready, %39 : i1
  %41 = comb.or %40, %37 {sv.namehint = "done5"} : i1
  %42 = comb.xor %98, %true : i1
  %43 = comb.and %48, %42 : i1
  %emitted_6 = sv.reg sym @emitted_6 : !hw.inout<i1> 
  %44 = sv.read_inout %emitted_6 : !hw.inout<i1>
  %45 = comb.xor %44, %true : i1
  %46 = comb.and %45, %in0_valid : i1
  %47 = comb.and %out6_ready, %46 : i1
  %48 = comb.or %47, %44 {sv.namehint = "done6"} : i1
  %49 = comb.xor %98, %true : i1
  %50 = comb.and %55, %49 : i1
  %emitted_7 = sv.reg sym @emitted_7 : !hw.inout<i1> 
  %51 = sv.read_inout %emitted_7 : !hw.inout<i1>
  %52 = comb.xor %51, %true : i1
  %53 = comb.and %52, %in0_valid : i1
  %54 = comb.and %out7_ready, %53 : i1
  %55 = comb.or %54, %51 {sv.namehint = "done7"} : i1
  %56 = comb.xor %98, %true : i1
  %57 = comb.and %62, %56 : i1
  %emitted_8 = sv.reg sym @emitted_8 : !hw.inout<i1> 
  %58 = sv.read_inout %emitted_8 : !hw.inout<i1>
  %59 = comb.xor %58, %true : i1
  %60 = comb.and %59, %in0_valid : i1
  %61 = comb.and %out8_ready, %60 : i1
  %62 = comb.or %61, %58 {sv.namehint = "done8"} : i1
  %63 = comb.xor %98, %true : i1
  %64 = comb.and %69, %63 : i1
  %emitted_9 = sv.reg sym @emitted_9 : !hw.inout<i1> 
  %65 = sv.read_inout %emitted_9 : !hw.inout<i1>
  %66 = comb.xor %65, %true : i1
  %67 = comb.and %66, %in0_valid : i1
  %68 = comb.and %out9_ready, %67 : i1
  %69 = comb.or %68, %65 {sv.namehint = "done9"} : i1
  %70 = comb.xor %98, %true : i1
  %71 = comb.and %76, %70 : i1
  %emitted_10 = sv.reg sym @emitted_10 : !hw.inout<i1> 
  %72 = sv.read_inout %emitted_10 : !hw.inout<i1>
  %73 = comb.xor %72, %true : i1
  %74 = comb.and %73, %in0_valid : i1
  %75 = comb.and %out10_ready, %74 : i1
  %76 = comb.or %75, %72 {sv.namehint = "done10"} : i1
  %77 = comb.xor %98, %true : i1
  %78 = comb.and %83, %77 : i1
  %emitted_11 = sv.reg sym @emitted_11 : !hw.inout<i1> 
  %79 = sv.read_inout %emitted_11 : !hw.inout<i1>
  %80 = comb.xor %79, %true : i1
  %81 = comb.and %80, %in0_valid : i1
  %82 = comb.and %out11_ready, %81 : i1
  %83 = comb.or %82, %79 {sv.namehint = "done11"} : i1
  %84 = comb.xor %98, %true : i1
  %85 = comb.and %90, %84 : i1
  %emitted_12 = sv.reg sym @emitted_12 : !hw.inout<i1> 
  %86 = sv.read_inout %emitted_12 : !hw.inout<i1>
  %87 = comb.xor %86, %true : i1
  %88 = comb.and %87, %in0_valid : i1
  %89 = comb.and %out12_ready, %88 : i1
  %90 = comb.or %89, %86 {sv.namehint = "done12"} : i1
  %91 = comb.xor %98, %true : i1
  %92 = comb.and %97, %91 : i1
  %emitted_13 = sv.reg sym @emitted_13 : !hw.inout<i1> 
  %93 = sv.read_inout %emitted_13 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.passign %emitted_0, %1 : i1
    sv.passign %emitted_1, %8 : i1
    sv.passign %emitted_2, %15 : i1
    sv.passign %emitted_3, %22 : i1
    sv.passign %emitted_4, %29 : i1
    sv.passign %emitted_5, %36 : i1
    sv.passign %emitted_6, %43 : i1
    sv.passign %emitted_7, %50 : i1
    sv.passign %emitted_8, %57 : i1
    sv.passign %emitted_9, %64 : i1
    sv.passign %emitted_10, %71 : i1
    sv.passign %emitted_11, %78 : i1
    sv.passign %emitted_12, %85 : i1
    sv.passign %emitted_13, %92 : i1
  }(syncreset : posedge %reset) {
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
    sv.passign %emitted_3, %false : i1
    sv.passign %emitted_4, %false : i1
    sv.passign %emitted_5, %false : i1
    sv.passign %emitted_6, %false : i1
    sv.passign %emitted_7, %false : i1
    sv.passign %emitted_8, %false : i1
    sv.passign %emitted_9, %false : i1
    sv.passign %emitted_10, %false : i1
    sv.passign %emitted_11, %false : i1
    sv.passign %emitted_12, %false : i1
    sv.passign %emitted_13, %false : i1
  }
  %94 = comb.xor %93, %true : i1
  %95 = comb.and %94, %in0_valid : i1
  %96 = comb.and %out13_ready, %95 : i1
  %97 = comb.or %96, %93 {sv.namehint = "done13"} : i1
  %98 = comb.and %6, %13, %20, %27, %34, %41, %48, %55, %62, %69, %76, %83, %90, %97 {sv.namehint = "allDone"} : i1
  hw.output %98, %in0, %4, %in0, %11, %in0, %18, %in0, %25, %in0, %32, %in0, %39, %in0, %46, %in0, %53, %in0, %60, %in0, %67, %in0, %74, %in0, %81, %in0, %88, %in0, %95 : i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_join_2ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c0_i0 = hw.constant 0 : i0
  %0 = comb.and %in0_valid, %in1_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  hw.output %1, %1, %c0_i0, %0 : i1, i1, i0, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_join_4ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c0_i0 = hw.constant 0 : i0
  %0 = comb.and %in0_valid, %in1_valid, %in2_valid, %in3_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  hw.output %1, %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i1, i0, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_join_4ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c0_i0 = hw.constant 0 : i0
  %0 = comb.and %in0_valid, %in1_valid, %in2_valid, %in3_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  hw.output %1, %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i1, i0, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %21, %true : i1
  %1 = comb.and %6, %0 : i1
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.and %3, %in0_valid : i1
  %5 = comb.and %out0_ready, %4 : i1
  %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
  %7 = comb.xor %21, %true : i1
  %8 = comb.and %13, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %in0_valid : i1
  %12 = comb.and %out1_ready, %11 : i1
  %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
  %14 = comb.xor %21, %true : i1
  %15 = comb.and %20, %14 : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.passign %emitted_0, %1 : i1
    sv.passign %emitted_1, %8 : i1
    sv.passign %emitted_2, %15 : i1
  }(syncreset : posedge %reset) {
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
  }
  %17 = comb.xor %16, %true : i1
  %18 = comb.and %17, %in0_valid : i1
  %19 = comb.and %out2_ready, %18 : i1
  %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
  %21 = comb.and %6, %13, %20 {sv.namehint = "allDone"} : i1
  hw.output %21, %in0, %4, %in0, %11, %in0, %18 : i1, i64, i1, i64, i1, i64, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
  %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.or %1, %8 : i1
  %3 = comb.mux %2, %in0_valid, %0 : i1
  %4 = comb.mux %2, %in0, %5 : i1
  %data0_reg = sv.reg sym @data0_reg : !hw.inout<i1> 
  %5 = sv.read_inout %data0_reg : !hw.inout<i1>
  %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
  %6 = sv.read_inout %ready0_reg : !hw.inout<i1>
  %7 = comb.mux %6, %6, %0 : i1
  %8 = comb.xor %6, %true : i1
  %9 = comb.xor %out0_ready, %true : i1
  %10 = comb.and %9, %8 : i1
  %11 = comb.mux %10, %0, %6 : i1
  %12 = comb.and %out0_ready, %6 : i1
  %13 = comb.xor %12, %true : i1
  %14 = comb.and %13, %11 : i1
  %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i1> 
  %15 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.passign %valid0_reg, %3 : i1
    sv.passign %data0_reg, %4 : i1
    sv.passign %ready0_reg, %14 : i1
    sv.passign %ctrl_data0_reg, %19 : i1
  }(syncreset : posedge %reset) {
    sv.passign %valid0_reg, %true : i1
    sv.passign %data0_reg, %false : i1
    sv.passign %ready0_reg, %false : i1
    sv.passign %ctrl_data0_reg, %false : i1
  }
  %16 = comb.mux %6, %15, %5 : i1
  %17 = comb.mux %10, %5, %15 : i1
  %18 = comb.xor %12, %true : i1
  %19 = comb.and %18, %17 : i1
  hw.output %2, %16, %7 : i1, i1, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1, out out3 : i64, out out3_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %28, %true : i1
  %1 = comb.and %6, %0 : i1
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.and %3, %in0_valid : i1
  %5 = comb.and %out0_ready, %4 : i1
  %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
  %7 = comb.xor %28, %true : i1
  %8 = comb.and %13, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %in0_valid : i1
  %12 = comb.and %out1_ready, %11 : i1
  %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
  %14 = comb.xor %28, %true : i1
  %15 = comb.and %20, %14 : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %17 = comb.xor %16, %true : i1
  %18 = comb.and %17, %in0_valid : i1
  %19 = comb.and %out2_ready, %18 : i1
  %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
  %21 = comb.xor %28, %true : i1
  %22 = comb.and %27, %21 : i1
  %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
  %23 = sv.read_inout %emitted_3 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.passign %emitted_0, %1 : i1
    sv.passign %emitted_1, %8 : i1
    sv.passign %emitted_2, %15 : i1
    sv.passign %emitted_3, %22 : i1
  }(syncreset : posedge %reset) {
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
    sv.passign %emitted_3, %false : i1
  }
  %24 = comb.xor %23, %true : i1
  %25 = comb.and %24, %in0_valid : i1
  %26 = comb.and %out3_ready, %25 : i1
  %27 = comb.or %26, %23 {sv.namehint = "done3"} : i1
  %28 = comb.and %6, %13, %20, %27 {sv.namehint = "allDone"} : i1
  hw.output %28, %in0, %4, %in0, %11, %in0, %18, %in0, %25 : i1, i64, i1, i64, i1, i64, i1, i64, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1, out out3 : i64, out out3_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %28, %true : i1
  %1 = comb.and %6, %0 : i1
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.and %3, %in0_valid : i1
  %5 = comb.and %out0_ready, %4 : i1
  %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
  %7 = comb.xor %28, %true : i1
  %8 = comb.and %13, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %in0_valid : i1
  %12 = comb.and %out1_ready, %11 : i1
  %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
  %14 = comb.xor %28, %true : i1
  %15 = comb.and %20, %14 : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %17 = comb.xor %16, %true : i1
  %18 = comb.and %17, %in0_valid : i1
  %19 = comb.and %out2_ready, %18 : i1
  %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
  %21 = comb.xor %28, %true : i1
  %22 = comb.and %27, %21 : i1
  %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
  %23 = sv.read_inout %emitted_3 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.passign %emitted_0, %1 : i1
    sv.passign %emitted_1, %8 : i1
    sv.passign %emitted_2, %15 : i1
    sv.passign %emitted_3, %22 : i1
  }(syncreset : posedge %reset) {
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
    sv.passign %emitted_3, %false : i1
  }
  %24 = comb.xor %23, %true : i1
  %25 = comb.and %24, %in0_valid : i1
  %26 = comb.and %out3_ready, %25 : i1
  %27 = comb.or %26, %23 {sv.namehint = "done3"} : i1
  %28 = comb.and %6, %13, %20, %27 {sv.namehint = "allDone"} : i1
  hw.output %28, %in0, %4, %in0, %11, %in0, %18, %in0, %25 : i1, i64, i1, i64, i1, i64, i1, i64, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_buffer_in_ui1_out_ui1_2slots_seq(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
  %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.or %1, %8 : i1
  %3 = comb.mux %2, %in0_valid, %0 : i1
  %4 = comb.mux %2, %in0, %5 : i1
  %data0_reg = sv.reg sym @data0_reg : !hw.inout<i1> 
  %5 = sv.read_inout %data0_reg : !hw.inout<i1>
  %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
  %6 = sv.read_inout %ready0_reg : !hw.inout<i1>
  %7 = comb.mux %6, %6, %0 : i1
  %8 = comb.xor %6, %true : i1
  %9 = comb.xor %22, %true : i1
  %10 = comb.and %9, %8 : i1
  %11 = comb.mux %10, %0, %6 : i1
  %12 = comb.and %22, %6 : i1
  %13 = comb.xor %12, %true : i1
  %14 = comb.and %13, %11 : i1
  %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i1> 
  %15 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
  %16 = comb.mux %6, %15, %5 : i1
  %17 = comb.mux %10, %5, %15 : i1
  %18 = comb.xor %12, %true : i1
  %19 = comb.and %18, %17 : i1
  %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
  %20 = sv.read_inout %valid1_reg : !hw.inout<i1>
  %21 = comb.xor %20, %true : i1
  %22 = comb.or %21, %28 : i1
  %23 = comb.mux %22, %7, %20 : i1
  %24 = comb.mux %22, %16, %25 : i1
  %data1_reg = sv.reg sym @data1_reg : !hw.inout<i1> 
  %25 = sv.read_inout %data1_reg : !hw.inout<i1>
  %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
  %26 = sv.read_inout %ready1_reg : !hw.inout<i1>
  %27 = comb.mux %26, %26, %20 : i1
  %28 = comb.xor %26, %true : i1
  %29 = comb.xor %out0_ready, %true : i1
  %30 = comb.and %29, %28 : i1
  %31 = comb.mux %30, %20, %26 : i1
  %32 = comb.and %out0_ready, %26 : i1
  %33 = comb.xor %32, %true : i1
  %34 = comb.and %33, %31 : i1
  %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i1> 
  %35 = sv.read_inout %ctrl_data1_reg : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.passign %valid0_reg, %3 : i1
    sv.passign %data0_reg, %4 : i1
    sv.passign %ready0_reg, %14 : i1
    sv.passign %ctrl_data0_reg, %19 : i1
    sv.passign %valid1_reg, %23 : i1
    sv.passign %data1_reg, %24 : i1
    sv.passign %ready1_reg, %34 : i1
    sv.passign %ctrl_data1_reg, %39 : i1
  }(syncreset : posedge %reset) {
    sv.passign %valid0_reg, %false : i1
    sv.passign %data0_reg, %false : i1
    sv.passign %ready0_reg, %false : i1
    sv.passign %ctrl_data0_reg, %false : i1
    sv.passign %valid1_reg, %false : i1
    sv.passign %data1_reg, %false : i1
    sv.passign %ready1_reg, %false : i1
    sv.passign %ctrl_data1_reg, %false : i1
  }
  %36 = comb.mux %26, %35, %25 : i1
  %37 = comb.mux %30, %25, %35 : i1
  %38 = comb.xor %32, %true : i1
  %39 = comb.and %38, %37 : i1
  hw.output %2, %36, %27 : i1, i1, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_mux_in_ui1_3ins_1outs_ctrl(in %select : i1, in %select_valid : i1, in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c1_i2 = hw.constant 1 : i2
  %false = hw.constant false
  %0 = comb.concat %false, %select : i1, i1
  %1 = comb.shl %c1_i2, %0 : i2
  %2 = comb.mux %select, %in1_valid, %in0_valid : i1
  %3 = comb.and %2, %select_valid : i1
  %4 = comb.and %3, %out0_ready : i1
  %5 = comb.extract %1 from 0 : (i2) -> i1
  %6 = comb.and %5, %4 : i1
  %7 = comb.extract %1 from 1 : (i2) -> i1
  %8 = comb.and %7, %4 : i1
  %9 = comb.mux %select, %in1, %in0 : i0
  hw.output %4, %6, %8, %9, %3 : i1, i1, i1, i0, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1, out out4 : i1, out out4_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %35, %true : i1
  %1 = comb.and %6, %0 : i1
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.and %3, %in0_valid : i1
  %5 = comb.and %out0_ready, %4 : i1
  %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
  %7 = comb.xor %35, %true : i1
  %8 = comb.and %13, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %in0_valid : i1
  %12 = comb.and %out1_ready, %11 : i1
  %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
  %14 = comb.xor %35, %true : i1
  %15 = comb.and %20, %14 : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %17 = comb.xor %16, %true : i1
  %18 = comb.and %17, %in0_valid : i1
  %19 = comb.and %out2_ready, %18 : i1
  %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
  %21 = comb.xor %35, %true : i1
  %22 = comb.and %27, %21 : i1
  %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
  %23 = sv.read_inout %emitted_3 : !hw.inout<i1>
  %24 = comb.xor %23, %true : i1
  %25 = comb.and %24, %in0_valid : i1
  %26 = comb.and %out3_ready, %25 : i1
  %27 = comb.or %26, %23 {sv.namehint = "done3"} : i1
  %28 = comb.xor %35, %true : i1
  %29 = comb.and %34, %28 : i1
  %emitted_4 = sv.reg sym @emitted_4 : !hw.inout<i1> 
  %30 = sv.read_inout %emitted_4 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.passign %emitted_0, %1 : i1
    sv.passign %emitted_1, %8 : i1
    sv.passign %emitted_2, %15 : i1
    sv.passign %emitted_3, %22 : i1
    sv.passign %emitted_4, %29 : i1
  }(syncreset : posedge %reset) {
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
    sv.passign %emitted_3, %false : i1
    sv.passign %emitted_4, %false : i1
  }
  %31 = comb.xor %30, %true : i1
  %32 = comb.and %31, %in0_valid : i1
  %33 = comb.and %out4_ready, %32 : i1
  %34 = comb.or %33, %30 {sv.namehint = "done4"} : i1
  %35 = comb.and %6, %13, %20, %27, %34 {sv.namehint = "allDone"} : i1
  hw.output %35, %in0, %4, %in0, %11, %in0, %18, %in0, %25, %in0, %32 : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1, out out4 : i1, out out4_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %35, %true : i1
  %1 = comb.and %6, %0 : i1
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.and %3, %in0_valid : i1
  %5 = comb.and %out0_ready, %4 : i1
  %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
  %7 = comb.xor %35, %true : i1
  %8 = comb.and %13, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %in0_valid : i1
  %12 = comb.and %out1_ready, %11 : i1
  %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
  %14 = comb.xor %35, %true : i1
  %15 = comb.and %20, %14 : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %17 = comb.xor %16, %true : i1
  %18 = comb.and %17, %in0_valid : i1
  %19 = comb.and %out2_ready, %18 : i1
  %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
  %21 = comb.xor %35, %true : i1
  %22 = comb.and %27, %21 : i1
  %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
  %23 = sv.read_inout %emitted_3 : !hw.inout<i1>
  %24 = comb.xor %23, %true : i1
  %25 = comb.and %24, %in0_valid : i1
  %26 = comb.and %out3_ready, %25 : i1
  %27 = comb.or %26, %23 {sv.namehint = "done3"} : i1
  %28 = comb.xor %35, %true : i1
  %29 = comb.and %34, %28 : i1
  %emitted_4 = sv.reg sym @emitted_4 : !hw.inout<i1> 
  %30 = sv.read_inout %emitted_4 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.passign %emitted_0, %1 : i1
    sv.passign %emitted_1, %8 : i1
    sv.passign %emitted_2, %15 : i1
    sv.passign %emitted_3, %22 : i1
    sv.passign %emitted_4, %29 : i1
  }(syncreset : posedge %reset) {
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
    sv.passign %emitted_3, %false : i1
    sv.passign %emitted_4, %false : i1
  }
  %31 = comb.xor %30, %true : i1
  %32 = comb.and %31, %in0_valid : i1
  %33 = comb.and %out4_ready, %32 : i1
  %34 = comb.or %33, %30 {sv.namehint = "done4"} : i1
  %35 = comb.and %6, %13, %20, %27, %34 {sv.namehint = "allDone"} : i1
  hw.output %35, %in0, %4, %in0, %11, %in0, %18, %in0, %25, %in0, %32 : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_cond_br_in_ui1_2ins_2outs_ctrl(in %cond : i1, in %cond_valid : i1, in %data : i0, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i0, out outTrue_valid : i1, out outFalse : i0, out outFalse_valid : i1) {
  %true = hw.constant true
  %0 = comb.and %cond_valid, %data_valid : i1
  %1 = comb.and %cond, %0 : i1
  %2 = comb.xor %cond, %true : i1
  %3 = comb.and %2, %0 : i1
  %4 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
  %5 = comb.and %4, %0 : i1
  hw.output %5, %5, %data, %1, %data, %3 : i1, i1, i0, i1, i0, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
  %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.or %1, %8 : i1
  %3 = comb.mux %2, %in0_valid, %0 : i1
  %4 = comb.mux %2, %in0, %5 : i1
  %data0_reg = sv.reg sym @data0_reg : !hw.inout<i1> 
  %5 = sv.read_inout %data0_reg : !hw.inout<i1>
  %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
  %6 = sv.read_inout %ready0_reg : !hw.inout<i1>
  %7 = comb.mux %6, %6, %0 : i1
  %8 = comb.xor %6, %true : i1
  %9 = comb.xor %out0_ready, %true : i1
  %10 = comb.and %9, %8 : i1
  %11 = comb.mux %10, %0, %6 : i1
  %12 = comb.and %out0_ready, %6 : i1
  %13 = comb.xor %12, %true : i1
  %14 = comb.and %13, %11 : i1
  %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i1> 
  %15 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.passign %valid0_reg, %3 : i1
    sv.passign %data0_reg, %4 : i1
    sv.passign %ready0_reg, %14 : i1
    sv.passign %ctrl_data0_reg, %19 : i1
  }(syncreset : posedge %reset) {
    sv.passign %valid0_reg, %true : i1
    sv.passign %data0_reg, %false : i1
    sv.passign %ready0_reg, %false : i1
    sv.passign %ctrl_data0_reg, %false : i1
  }
  %16 = comb.mux %6, %15, %5 : i1
  %17 = comb.mux %10, %5, %15 : i1
  %18 = comb.xor %12, %true : i1
  %19 = comb.and %18, %17 : i1
  hw.output %2, %16, %7 : i1, i1, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @main(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
  %handshake_buffer0.in0_ready, %handshake_buffer0.out0, %handshake_buffer0.out0_valid = hw.instance "handshake_buffer0" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %in0: i0, in0_valid: %in0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_fork0.in0_ready, %handshake_fork0.out0, %handshake_fork0.out0_valid, %handshake_fork0.out1, %handshake_fork0.out1_valid, %handshake_fork0.out2, %handshake_fork0.out2_valid, %handshake_fork0.out3, %handshake_fork0.out3_valid, %handshake_fork0.out4, %handshake_fork0.out4_valid, %handshake_fork0.out5, %handshake_fork0.out5_valid, %handshake_fork0.out6, %handshake_fork0.out6_valid, %handshake_fork0.out7, %handshake_fork0.out7_valid, %handshake_fork0.out8, %handshake_fork0.out8_valid, %handshake_fork0.out9, %handshake_fork0.out9_valid, %handshake_fork0.out10, %handshake_fork0.out10_valid, %handshake_fork0.out11, %handshake_fork0.out11_valid, %handshake_fork0.out12, %handshake_fork0.out12_valid, %handshake_fork0.out13, %handshake_fork0.out13_valid = hw.instance "handshake_fork0" @handshake_fork_1ins_14outs_ctrl(in0: %handshake_buffer0.out0: i0, in0_valid: %handshake_buffer0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer14.in0_ready: i1, out1_ready: %handshake_buffer13.in0_ready: i1, out2_ready: %handshake_buffer12.in0_ready: i1, out3_ready: %handshake_buffer11.in0_ready: i1, out4_ready: %handshake_buffer10.in0_ready: i1, out5_ready: %handshake_buffer9.in0_ready: i1, out6_ready: %handshake_buffer8.in0_ready: i1, out7_ready: %handshake_buffer7.in0_ready: i1, out8_ready: %handshake_buffer6.in0_ready: i1, out9_ready: %handshake_buffer5.in0_ready: i1, out10_ready: %handshake_buffer4.in0_ready: i1, out11_ready: %handshake_buffer3.in0_ready: i1, out12_ready: %handshake_buffer2.in0_ready: i1, out13_ready: %handshake_buffer1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1, out4: i0, out4_valid: i1, out5: i0, out5_valid: i1, out6: i0, out6_valid: i1, out7: i0, out7_valid: i1, out8: i0, out8_valid: i1, out9: i0, out9_valid: i1, out10: i0, out10_valid: i1, out11: i0, out11_valid: i1, out12: i0, out12_valid: i1, out13: i0, out13_valid: i1)
  %handshake_buffer1.in0_ready, %handshake_buffer1.out0, %handshake_buffer1.out0_valid = hw.instance "handshake_buffer1" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out13: i0, in0_valid: %handshake_fork0.out13_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join4.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer2.in0_ready, %handshake_buffer2.out0, %handshake_buffer2.out0_valid = hw.instance "handshake_buffer2" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out12: i0, in0_valid: %handshake_fork0.out12_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join3.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer3.in0_ready, %handshake_buffer3.out0, %handshake_buffer3.out0_valid = hw.instance "handshake_buffer3" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out11: i0, in0_valid: %handshake_fork0.out11_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store3.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer4.in0_ready, %handshake_buffer4.out0, %handshake_buffer4.out0_valid = hw.instance "handshake_buffer4" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out10: i0, in0_valid: %handshake_fork0.out10_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer5.in0_ready, %handshake_buffer5.out0, %handshake_buffer5.out0_valid = hw.instance "handshake_buffer5" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out9: i0, in0_valid: %handshake_fork0.out9_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join2.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer6.in0_ready, %handshake_buffer6.out0, %handshake_buffer6.out0_valid = hw.instance "handshake_buffer6" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out8: i0, in0_valid: %handshake_fork0.out8_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer7.in0_ready, %handshake_buffer7.out0, %handshake_buffer7.out0_valid = hw.instance "handshake_buffer7" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out7: i0, in0_valid: %handshake_fork0.out7_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer8.in0_ready, %handshake_buffer8.out0, %handshake_buffer8.out0_valid = hw.instance "handshake_buffer8" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out6: i0, in0_valid: %handshake_fork0.out6_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant6.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer9.in0_ready, %handshake_buffer9.out0, %handshake_buffer9.out0_valid = hw.instance "handshake_buffer9" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out5: i0, in0_valid: %handshake_fork0.out5_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant5.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer10.in0_ready, %handshake_buffer10.out0, %handshake_buffer10.out0_valid = hw.instance "handshake_buffer10" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out4: i0, in0_valid: %handshake_fork0.out4_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant4.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer11.in0_ready, %handshake_buffer11.out0, %handshake_buffer11.out0_valid = hw.instance "handshake_buffer11" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out3: i0, in0_valid: %handshake_fork0.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant3.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer12.in0_ready, %handshake_buffer12.out0, %handshake_buffer12.out0_valid = hw.instance "handshake_buffer12" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out2: i0, in0_valid: %handshake_fork0.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant2.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer13.in0_ready, %handshake_buffer13.out0, %handshake_buffer13.out0_valid = hw.instance "handshake_buffer13" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out1: i0, in0_valid: %handshake_fork0.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer14.in0_ready, %handshake_buffer14.out0, %handshake_buffer14.out0_valid = hw.instance "handshake_buffer14" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out0: i0, in0_valid: %handshake_fork0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_memory0.stData0_ready, %handshake_memory0.stAddr0_ready, %handshake_memory0.stDone0, %handshake_memory0.stDone0_valid = hw.instance "handshake_memory0" @handshake_memory_out_ui64_id2(stData0: %handshake_buffer114.out0: i64, stData0_valid: %handshake_buffer114.out0_valid: i1, stAddr0: %handshake_buffer113.out0: i64, stAddr0_valid: %handshake_buffer113.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, stDone0_ready: %handshake_buffer15.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stDone0: i0, stDone0_valid: i1)
  %handshake_buffer15.in0_ready, %handshake_buffer15.out0, %handshake_buffer15.out0_valid = hw.instance "handshake_buffer15" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory0.stDone0: i0, in0_valid: %handshake_memory0.stDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in3_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_memory1.stData0_ready, %handshake_memory1.stAddr0_ready, %handshake_memory1.stData1_ready, %handshake_memory1.stAddr1_ready, %handshake_memory1.stData2_ready, %handshake_memory1.stAddr2_ready, %handshake_memory1.ldAddr0_ready, %handshake_memory1.ldData0, %handshake_memory1.ldData0_valid, %handshake_memory1.stDone0, %handshake_memory1.stDone0_valid, %handshake_memory1.stDone1, %handshake_memory1.stDone1_valid, %handshake_memory1.stDone2, %handshake_memory1.stDone2_valid, %handshake_memory1.ldDone0, %handshake_memory1.ldDone0_valid = hw.instance "handshake_memory1" @handshake_memory_out_ui64_id1(stData0: %handshake_buffer67.out0: i64, stData0_valid: %handshake_buffer67.out0_valid: i1, stAddr0: %handshake_buffer66.out0: i64, stAddr0_valid: %handshake_buffer66.out0_valid: i1, stData1: %handshake_buffer70.out0: i64, stData1_valid: %handshake_buffer70.out0_valid: i1, stAddr1: %handshake_buffer69.out0: i64, stAddr1_valid: %handshake_buffer69.out0_valid: i1, stData2: %handshake_buffer73.out0: i64, stData2_valid: %handshake_buffer73.out0_valid: i1, stAddr2: %handshake_buffer72.out0: i64, stAddr2_valid: %handshake_buffer72.out0_valid: i1, ldAddr0: %handshake_buffer110.out0: i64, ldAddr0_valid: %handshake_buffer110.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, ldData0_ready: %handshake_buffer20.in0_ready: i1, stDone0_ready: %handshake_buffer19.in0_ready: i1, stDone1_ready: %handshake_buffer18.in0_ready: i1, stDone2_ready: %handshake_buffer17.in0_ready: i1, ldDone0_ready: %handshake_buffer16.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
  %handshake_buffer16.in0_ready, %handshake_buffer16.out0, %handshake_buffer16.out0_valid = hw.instance "handshake_buffer16" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.ldDone0: i0, in0_valid: %handshake_memory1.ldDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer17.in0_ready, %handshake_buffer17.out0, %handshake_buffer17.out0_valid = hw.instance "handshake_buffer17" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone2: i0, in0_valid: %handshake_memory1.stDone2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in6_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer18.in0_ready, %handshake_buffer18.out0, %handshake_buffer18.out0_valid = hw.instance "handshake_buffer18" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone1: i0, in0_valid: %handshake_memory1.stDone1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer19.in0_ready, %handshake_buffer19.out0, %handshake_buffer19.out0_valid = hw.instance "handshake_buffer19" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone0: i0, in0_valid: %handshake_memory1.stDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork2.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer20.in0_ready, %handshake_buffer20.out0, %handshake_buffer20.out0_valid = hw.instance "handshake_buffer20" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory1.ldData0: i64, in0_valid: %handshake_memory1.ldData0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load1.dataFromMem_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork1.in0_ready, %handshake_fork1.out0, %handshake_fork1.out0_valid, %handshake_fork1.out1, %handshake_fork1.out1_valid = hw.instance "handshake_fork1" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer18.out0: i0, in0_valid: %handshake_buffer18.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer22.in0_ready: i1, out1_ready: %handshake_buffer21.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
  %handshake_buffer21.in0_ready, %handshake_buffer21.out0, %handshake_buffer21.out0_valid = hw.instance "handshake_buffer21" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out1: i0, in0_valid: %handshake_fork1.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in5_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer22.in0_ready, %handshake_buffer22.out0, %handshake_buffer22.out0_valid = hw.instance "handshake_buffer22" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out0: i0, in0_valid: %handshake_fork1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join4.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_fork2.in0_ready, %handshake_fork2.out0, %handshake_fork2.out0_valid, %handshake_fork2.out1, %handshake_fork2.out1_valid, %handshake_fork2.out2, %handshake_fork2.out2_valid = hw.instance "handshake_fork2" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer19.out0: i0, in0_valid: %handshake_buffer19.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer25.in0_ready: i1, out1_ready: %handshake_buffer24.in0_ready: i1, out2_ready: %handshake_buffer23.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
  %handshake_buffer23.in0_ready, %handshake_buffer23.out0, %handshake_buffer23.out0_valid = hw.instance "handshake_buffer23" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out2: i0, in0_valid: %handshake_fork2.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in4_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer24.in0_ready, %handshake_buffer24.out0, %handshake_buffer24.out0_valid = hw.instance "handshake_buffer24" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out1: i0, in0_valid: %handshake_fork2.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join3.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer25.in0_ready, %handshake_buffer25.out0, %handshake_buffer25.out0_valid = hw.instance "handshake_buffer25" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out0: i0, in0_valid: %handshake_fork2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join4.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_memory2.stData0_ready, %handshake_memory2.stAddr0_ready, %handshake_memory2.stData1_ready, %handshake_memory2.stAddr1_ready, %handshake_memory2.stData2_ready, %handshake_memory2.stAddr2_ready, %handshake_memory2.ldAddr0_ready, %handshake_memory2.ldData0, %handshake_memory2.ldData0_valid, %handshake_memory2.stDone0, %handshake_memory2.stDone0_valid, %handshake_memory2.stDone1, %handshake_memory2.stDone1_valid, %handshake_memory2.stDone2, %handshake_memory2.stDone2_valid, %handshake_memory2.ldDone0, %handshake_memory2.ldDone0_valid = hw.instance "handshake_memory2" @handshake_memory_out_ui64_id0(stData0: %handshake_buffer59.out0: i64, stData0_valid: %handshake_buffer59.out0_valid: i1, stAddr0: %handshake_buffer58.out0: i64, stAddr0_valid: %handshake_buffer58.out0_valid: i1, stData1: %handshake_buffer62.out0: i64, stData1_valid: %handshake_buffer62.out0_valid: i1, stAddr1: %handshake_buffer61.out0: i64, stAddr1_valid: %handshake_buffer61.out0_valid: i1, stData2: %handshake_buffer65.out0: i64, stData2_valid: %handshake_buffer65.out0_valid: i1, stAddr2: %handshake_buffer64.out0: i64, stAddr2_valid: %handshake_buffer64.out0_valid: i1, ldAddr0: %handshake_buffer108.out0: i64, ldAddr0_valid: %handshake_buffer108.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, ldData0_ready: %handshake_buffer30.in0_ready: i1, stDone0_ready: %handshake_buffer29.in0_ready: i1, stDone1_ready: %handshake_buffer28.in0_ready: i1, stDone2_ready: %handshake_buffer27.in0_ready: i1, ldDone0_ready: %handshake_buffer26.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
  %handshake_buffer26.in0_ready, %handshake_buffer26.out0, %handshake_buffer26.out0_valid = hw.instance "handshake_buffer26" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.ldDone0: i0, in0_valid: %handshake_memory2.ldDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer27.in0_ready, %handshake_buffer27.out0, %handshake_buffer27.out0_valid = hw.instance "handshake_buffer27" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone2: i0, in0_valid: %handshake_memory2.stDone2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in3_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer28.in0_ready, %handshake_buffer28.out0, %handshake_buffer28.out0_valid = hw.instance "handshake_buffer28" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone1: i0, in0_valid: %handshake_memory2.stDone1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork3.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer29.in0_ready, %handshake_buffer29.out0, %handshake_buffer29.out0_valid = hw.instance "handshake_buffer29" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone0: i0, in0_valid: %handshake_memory2.stDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork4.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer30.in0_ready, %handshake_buffer30.out0, %handshake_buffer30.out0_valid = hw.instance "handshake_buffer30" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory2.ldData0: i64, in0_valid: %handshake_memory2.ldData0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load0.dataFromMem_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork3.in0_ready, %handshake_fork3.out0, %handshake_fork3.out0_valid, %handshake_fork3.out1, %handshake_fork3.out1_valid = hw.instance "handshake_fork3" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer28.out0: i0, in0_valid: %handshake_buffer28.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer32.in0_ready: i1, out1_ready: %handshake_buffer31.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
  %handshake_buffer31.in0_ready, %handshake_buffer31.out0, %handshake_buffer31.out0_valid = hw.instance "handshake_buffer31" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out1: i0, in0_valid: %handshake_fork3.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join2.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer32.in0_ready, %handshake_buffer32.out0, %handshake_buffer32.out0_valid = hw.instance "handshake_buffer32" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out0: i0, in0_valid: %handshake_fork3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_fork4.in0_ready, %handshake_fork4.out0, %handshake_fork4.out0_valid, %handshake_fork4.out1, %handshake_fork4.out1_valid, %handshake_fork4.out2, %handshake_fork4.out2_valid = hw.instance "handshake_fork4" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer29.out0: i0, in0_valid: %handshake_buffer29.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer35.in0_ready: i1, out1_ready: %handshake_buffer34.in0_ready: i1, out2_ready: %handshake_buffer33.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
  %handshake_buffer33.in0_ready, %handshake_buffer33.out0, %handshake_buffer33.out0_valid = hw.instance "handshake_buffer33" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out2: i0, in0_valid: %handshake_fork4.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join1.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer34.in0_ready, %handshake_buffer34.out0, %handshake_buffer34.out0_valid = hw.instance "handshake_buffer34" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out1: i0, in0_valid: %handshake_fork4.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join2.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer35.in0_ready, %handshake_buffer35.out0, %handshake_buffer35.out0_valid = hw.instance "handshake_buffer35" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out0: i0, in0_valid: %handshake_fork4.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_join0.in0_ready, %handshake_join0.in1_ready, %handshake_join0.in2_ready, %handshake_join0.in3_ready, %handshake_join0.in4_ready, %handshake_join0.in5_ready, %handshake_join0.in6_ready, %handshake_join0.out0, %handshake_join0.out0_valid = hw.instance "handshake_join0" @handshake_join_7ins_1outs_ctrl(in0: %handshake_buffer4.out0: i0, in0_valid: %handshake_buffer4.out0_valid: i1, in1: %handshake_buffer35.out0: i0, in1_valid: %handshake_buffer35.out0_valid: i1, in2: %handshake_buffer32.out0: i0, in2_valid: %handshake_buffer32.out0_valid: i1, in3: %handshake_buffer27.out0: i0, in3_valid: %handshake_buffer27.out0_valid: i1, in4: %handshake_buffer23.out0: i0, in4_valid: %handshake_buffer23.out0_valid: i1, in5: %handshake_buffer21.out0: i0, in5_valid: %handshake_buffer21.out0_valid: i1, in6: %handshake_buffer17.out0: i0, in6_valid: %handshake_buffer17.out0_valid: i1, out0_ready: %handshake_buffer36.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, in4_ready: i1, in5_ready: i1, in6_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer36.in0_ready, %handshake_buffer36.out0, %handshake_buffer36.out0_valid = hw.instance "handshake_buffer36" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join0.out0: i0, in0_valid: %handshake_join0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_constant0.ctrl_ready, %handshake_constant0.out0, %handshake_constant0.out0_valid = hw.instance "handshake_constant0" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer14.out0: i0, ctrl_valid: %handshake_buffer14.out0_valid: i1, out0_ready: %handshake_buffer37.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer37.in0_ready, %handshake_buffer37.out0, %handshake_buffer37.out0_valid = hw.instance "handshake_buffer37" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant0.out0: i64, in0_valid: %handshake_constant0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux2.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant1.ctrl_ready, %handshake_constant1.out0, %handshake_constant1.out0_valid = hw.instance "handshake_constant1" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer13.out0: i0, ctrl_valid: %handshake_buffer13.out0_valid: i1, out0_ready: %handshake_buffer38.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer38.in0_ready, %handshake_buffer38.out0, %handshake_buffer38.out0_valid = hw.instance "handshake_buffer38" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant1.out0: i64, in0_valid: %handshake_constant1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork5.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork5.in0_ready, %handshake_fork5.out0, %handshake_fork5.out0_valid, %handshake_fork5.out1, %handshake_fork5.out1_valid = hw.instance "handshake_fork5" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer38.out0: i64, in0_valid: %handshake_buffer38.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer40.in0_ready: i1, out1_ready: %handshake_buffer39.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer39.in0_ready, %handshake_buffer39.out0, %handshake_buffer39.out0_valid = hw.instance "handshake_buffer39" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out1: i64, in0_valid: %handshake_fork5.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store2.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer40.in0_ready, %handshake_buffer40.out0, %handshake_buffer40.out0_valid = hw.instance "handshake_buffer40" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out0: i64, in0_valid: %handshake_fork5.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store5.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant2.ctrl_ready, %handshake_constant2.out0, %handshake_constant2.out0_valid = hw.instance "handshake_constant2" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer12.out0: i0, ctrl_valid: %handshake_buffer12.out0_valid: i1, out0_ready: %handshake_buffer41.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer41.in0_ready, %handshake_buffer41.out0, %handshake_buffer41.out0_valid = hw.instance "handshake_buffer41" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant2.out0: i64, in0_valid: %handshake_constant2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork6.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork6.in0_ready, %handshake_fork6.out0, %handshake_fork6.out0_valid, %handshake_fork6.out1, %handshake_fork6.out1_valid = hw.instance "handshake_fork6" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer41.out0: i64, in0_valid: %handshake_buffer41.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer43.in0_ready: i1, out1_ready: %handshake_buffer42.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer42.in0_ready, %handshake_buffer42.out0, %handshake_buffer42.out0_valid = hw.instance "handshake_buffer42" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out1: i64, in0_valid: %handshake_fork6.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store1.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer43.in0_ready, %handshake_buffer43.out0, %handshake_buffer43.out0_valid = hw.instance "handshake_buffer43" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out0: i64, in0_valid: %handshake_fork6.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store4.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant3.ctrl_ready, %handshake_constant3.out0, %handshake_constant3.out0_valid = hw.instance "handshake_constant3" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer11.out0: i0, ctrl_valid: %handshake_buffer11.out0_valid: i1, out0_ready: %handshake_buffer44.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer44.in0_ready, %handshake_buffer44.out0, %handshake_buffer44.out0_valid = hw.instance "handshake_buffer44" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant3.out0: i64, in0_valid: %handshake_constant3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork7.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork7.in0_ready, %handshake_fork7.out0, %handshake_fork7.out0_valid, %handshake_fork7.out1, %handshake_fork7.out1_valid = hw.instance "handshake_fork7" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer44.out0: i64, in0_valid: %handshake_buffer44.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer46.in0_ready: i1, out1_ready: %handshake_buffer45.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer45.in0_ready, %handshake_buffer45.out0, %handshake_buffer45.out0_valid = hw.instance "handshake_buffer45" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out1: i64, in0_valid: %handshake_fork7.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store0.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer46.in0_ready, %handshake_buffer46.out0, %handshake_buffer46.out0_valid = hw.instance "handshake_buffer46" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out0: i64, in0_valid: %handshake_fork7.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store3.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant4.ctrl_ready, %handshake_constant4.out0, %handshake_constant4.out0_valid = hw.instance "handshake_constant4" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer10.out0: i0, ctrl_valid: %handshake_buffer10.out0_valid: i1, out0_ready: %handshake_buffer47.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer47.in0_ready, %handshake_buffer47.out0, %handshake_buffer47.out0_valid = hw.instance "handshake_buffer47" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant4.out0: i64, in0_valid: %handshake_constant4.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork8.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork8.in0_ready, %handshake_fork8.out0, %handshake_fork8.out0_valid, %handshake_fork8.out1, %handshake_fork8.out1_valid = hw.instance "handshake_fork8" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer47.out0: i64, in0_valid: %handshake_buffer47.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer49.in0_ready: i1, out1_ready: %handshake_buffer48.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer48.in0_ready, %handshake_buffer48.out0, %handshake_buffer48.out0_valid = hw.instance "handshake_buffer48" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out1: i64, in0_valid: %handshake_fork8.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store2.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer49.in0_ready, %handshake_buffer49.out0, %handshake_buffer49.out0_valid = hw.instance "handshake_buffer49" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out0: i64, in0_valid: %handshake_fork8.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store5.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant5.ctrl_ready, %handshake_constant5.out0, %handshake_constant5.out0_valid = hw.instance "handshake_constant5" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer9.out0: i0, ctrl_valid: %handshake_buffer9.out0_valid: i1, out0_ready: %handshake_buffer50.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer50.in0_ready, %handshake_buffer50.out0, %handshake_buffer50.out0_valid = hw.instance "handshake_buffer50" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant5.out0: i64, in0_valid: %handshake_constant5.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork9.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork9.in0_ready, %handshake_fork9.out0, %handshake_fork9.out0_valid, %handshake_fork9.out1, %handshake_fork9.out1_valid, %handshake_fork9.out2, %handshake_fork9.out2_valid = hw.instance "handshake_fork9" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer50.out0: i64, in0_valid: %handshake_buffer50.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer53.in0_ready: i1, out1_ready: %handshake_buffer52.in0_ready: i1, out2_ready: %handshake_buffer51.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
  %handshake_buffer51.in0_ready, %handshake_buffer51.out0, %handshake_buffer51.out0_valid = hw.instance "handshake_buffer51" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out2: i64, in0_valid: %handshake_fork9.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store1.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer52.in0_ready, %handshake_buffer52.out0, %handshake_buffer52.out0_valid = hw.instance "handshake_buffer52" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out1: i64, in0_valid: %handshake_fork9.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store4.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer53.in0_ready, %handshake_buffer53.out0, %handshake_buffer53.out0_valid = hw.instance "handshake_buffer53" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out0: i64, in0_valid: %handshake_fork9.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux3.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant6.ctrl_ready, %handshake_constant6.out0, %handshake_constant6.out0_valid = hw.instance "handshake_constant6" @handshake_constant_c0_out_ui64(ctrl: %handshake_buffer8.out0: i0, ctrl_valid: %handshake_buffer8.out0_valid: i1, out0_ready: %handshake_buffer54.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer54.in0_ready, %handshake_buffer54.out0, %handshake_buffer54.out0_valid = hw.instance "handshake_buffer54" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant6.out0: i64, in0_valid: %handshake_constant6.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork10.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork10.in0_ready, %handshake_fork10.out0, %handshake_fork10.out0_valid, %handshake_fork10.out1, %handshake_fork10.out1_valid, %handshake_fork10.out2, %handshake_fork10.out2_valid = hw.instance "handshake_fork10" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer54.out0: i64, in0_valid: %handshake_buffer54.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer57.in0_ready: i1, out1_ready: %handshake_buffer56.in0_ready: i1, out2_ready: %handshake_buffer55.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
  %handshake_buffer55.in0_ready, %handshake_buffer55.out0, %handshake_buffer55.out0_valid = hw.instance "handshake_buffer55" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out2: i64, in0_valid: %handshake_fork10.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store0.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer56.in0_ready, %handshake_buffer56.out0, %handshake_buffer56.out0_valid = hw.instance "handshake_buffer56" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out1: i64, in0_valid: %handshake_fork10.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store3.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer57.in0_ready, %handshake_buffer57.out0, %handshake_buffer57.out0_valid = hw.instance "handshake_buffer57" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out0: i64, in0_valid: %handshake_fork10.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux1.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_store0.addrIn0_ready, %handshake_store0.dataIn_ready, %handshake_store0.ctrl_ready, %handshake_store0.dataToMem, %handshake_store0.dataToMem_valid, %handshake_store0.addrOut0, %handshake_store0.addrOut0_valid = hw.instance "handshake_store0" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer55.out0: i64, addrIn0_valid: %handshake_buffer55.out0_valid: i1, dataIn: %handshake_buffer45.out0: i64, dataIn_valid: %handshake_buffer45.out0_valid: i1, ctrl: %handshake_buffer7.out0: i0, ctrl_valid: %handshake_buffer7.out0_valid: i1, dataToMem_ready: %handshake_buffer59.in0_ready: i1, addrOut0_ready: %handshake_buffer58.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer58.in0_ready, %handshake_buffer58.out0, %handshake_buffer58.out0_valid = hw.instance "handshake_buffer58" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.addrOut0: i64, in0_valid: %handshake_store0.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer59.in0_ready, %handshake_buffer59.out0, %handshake_buffer59.out0_valid = hw.instance "handshake_buffer59" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.dataToMem: i64, in0_valid: %handshake_store0.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_join1.in0_ready, %handshake_join1.in1_ready, %handshake_join1.out0, %handshake_join1.out0_valid = hw.instance "handshake_join1" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer6.out0: i0, in0_valid: %handshake_buffer6.out0_valid: i1, in1: %handshake_buffer33.out0: i0, in1_valid: %handshake_buffer33.out0_valid: i1, out0_ready: %handshake_buffer60.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer60.in0_ready, %handshake_buffer60.out0, %handshake_buffer60.out0_valid = hw.instance "handshake_buffer60" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join1.out0: i0, in0_valid: %handshake_join1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_store1.addrIn0_ready, %handshake_store1.dataIn_ready, %handshake_store1.ctrl_ready, %handshake_store1.dataToMem, %handshake_store1.dataToMem_valid, %handshake_store1.addrOut0, %handshake_store1.addrOut0_valid = hw.instance "handshake_store1" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer51.out0: i64, addrIn0_valid: %handshake_buffer51.out0_valid: i1, dataIn: %handshake_buffer42.out0: i64, dataIn_valid: %handshake_buffer42.out0_valid: i1, ctrl: %handshake_buffer60.out0: i0, ctrl_valid: %handshake_buffer60.out0_valid: i1, dataToMem_ready: %handshake_buffer62.in0_ready: i1, addrOut0_ready: %handshake_buffer61.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer61.in0_ready, %handshake_buffer61.out0, %handshake_buffer61.out0_valid = hw.instance "handshake_buffer61" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.addrOut0: i64, in0_valid: %handshake_store1.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer62.in0_ready, %handshake_buffer62.out0, %handshake_buffer62.out0_valid = hw.instance "handshake_buffer62" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.dataToMem: i64, in0_valid: %handshake_store1.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stData1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_join2.in0_ready, %handshake_join2.in1_ready, %handshake_join2.in2_ready, %handshake_join2.out0, %handshake_join2.out0_valid = hw.instance "handshake_join2" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer5.out0: i0, in0_valid: %handshake_buffer5.out0_valid: i1, in1: %handshake_buffer34.out0: i0, in1_valid: %handshake_buffer34.out0_valid: i1, in2: %handshake_buffer31.out0: i0, in2_valid: %handshake_buffer31.out0_valid: i1, out0_ready: %handshake_buffer63.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer63.in0_ready, %handshake_buffer63.out0, %handshake_buffer63.out0_valid = hw.instance "handshake_buffer63" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join2.out0: i0, in0_valid: %handshake_join2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store2.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_store2.addrIn0_ready, %handshake_store2.dataIn_ready, %handshake_store2.ctrl_ready, %handshake_store2.dataToMem, %handshake_store2.dataToMem_valid, %handshake_store2.addrOut0, %handshake_store2.addrOut0_valid = hw.instance "handshake_store2" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer48.out0: i64, addrIn0_valid: %handshake_buffer48.out0_valid: i1, dataIn: %handshake_buffer39.out0: i64, dataIn_valid: %handshake_buffer39.out0_valid: i1, ctrl: %handshake_buffer63.out0: i0, ctrl_valid: %handshake_buffer63.out0_valid: i1, dataToMem_ready: %handshake_buffer65.in0_ready: i1, addrOut0_ready: %handshake_buffer64.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer64.in0_ready, %handshake_buffer64.out0, %handshake_buffer64.out0_valid = hw.instance "handshake_buffer64" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.addrOut0: i64, in0_valid: %handshake_store2.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer65.in0_ready, %handshake_buffer65.out0, %handshake_buffer65.out0_valid = hw.instance "handshake_buffer65" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.dataToMem: i64, in0_valid: %handshake_store2.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stData2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_store3.addrIn0_ready, %handshake_store3.dataIn_ready, %handshake_store3.ctrl_ready, %handshake_store3.dataToMem, %handshake_store3.dataToMem_valid, %handshake_store3.addrOut0, %handshake_store3.addrOut0_valid = hw.instance "handshake_store3" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer56.out0: i64, addrIn0_valid: %handshake_buffer56.out0_valid: i1, dataIn: %handshake_buffer46.out0: i64, dataIn_valid: %handshake_buffer46.out0_valid: i1, ctrl: %handshake_buffer3.out0: i0, ctrl_valid: %handshake_buffer3.out0_valid: i1, dataToMem_ready: %handshake_buffer67.in0_ready: i1, addrOut0_ready: %handshake_buffer66.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer66.in0_ready, %handshake_buffer66.out0, %handshake_buffer66.out0_valid = hw.instance "handshake_buffer66" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.addrOut0: i64, in0_valid: %handshake_store3.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer67.in0_ready, %handshake_buffer67.out0, %handshake_buffer67.out0_valid = hw.instance "handshake_buffer67" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.dataToMem: i64, in0_valid: %handshake_store3.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_join3.in0_ready, %handshake_join3.in1_ready, %handshake_join3.out0, %handshake_join3.out0_valid = hw.instance "handshake_join3" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer2.out0: i0, in0_valid: %handshake_buffer2.out0_valid: i1, in1: %handshake_buffer24.out0: i0, in1_valid: %handshake_buffer24.out0_valid: i1, out0_ready: %handshake_buffer68.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer68.in0_ready, %handshake_buffer68.out0, %handshake_buffer68.out0_valid = hw.instance "handshake_buffer68" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join3.out0: i0, in0_valid: %handshake_join3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store4.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_store4.addrIn0_ready, %handshake_store4.dataIn_ready, %handshake_store4.ctrl_ready, %handshake_store4.dataToMem, %handshake_store4.dataToMem_valid, %handshake_store4.addrOut0, %handshake_store4.addrOut0_valid = hw.instance "handshake_store4" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer52.out0: i64, addrIn0_valid: %handshake_buffer52.out0_valid: i1, dataIn: %handshake_buffer43.out0: i64, dataIn_valid: %handshake_buffer43.out0_valid: i1, ctrl: %handshake_buffer68.out0: i0, ctrl_valid: %handshake_buffer68.out0_valid: i1, dataToMem_ready: %handshake_buffer70.in0_ready: i1, addrOut0_ready: %handshake_buffer69.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer69.in0_ready, %handshake_buffer69.out0, %handshake_buffer69.out0_valid = hw.instance "handshake_buffer69" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.addrOut0: i64, in0_valid: %handshake_store4.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer70.in0_ready, %handshake_buffer70.out0, %handshake_buffer70.out0_valid = hw.instance "handshake_buffer70" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.dataToMem: i64, in0_valid: %handshake_store4.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stData1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_join4.in0_ready, %handshake_join4.in1_ready, %handshake_join4.in2_ready, %handshake_join4.out0, %handshake_join4.out0_valid = hw.instance "handshake_join4" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer1.out0: i0, in0_valid: %handshake_buffer1.out0_valid: i1, in1: %handshake_buffer25.out0: i0, in1_valid: %handshake_buffer25.out0_valid: i1, in2: %handshake_buffer22.out0: i0, in2_valid: %handshake_buffer22.out0_valid: i1, out0_ready: %handshake_buffer71.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer71.in0_ready, %handshake_buffer71.out0, %handshake_buffer71.out0_valid = hw.instance "handshake_buffer71" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join4.out0: i0, in0_valid: %handshake_join4.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store5.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_store5.addrIn0_ready, %handshake_store5.dataIn_ready, %handshake_store5.ctrl_ready, %handshake_store5.dataToMem, %handshake_store5.dataToMem_valid, %handshake_store5.addrOut0, %handshake_store5.addrOut0_valid = hw.instance "handshake_store5" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer49.out0: i64, addrIn0_valid: %handshake_buffer49.out0_valid: i1, dataIn: %handshake_buffer40.out0: i64, dataIn_valid: %handshake_buffer40.out0_valid: i1, ctrl: %handshake_buffer71.out0: i0, ctrl_valid: %handshake_buffer71.out0_valid: i1, dataToMem_ready: %handshake_buffer73.in0_ready: i1, addrOut0_ready: %handshake_buffer72.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer72.in0_ready, %handshake_buffer72.out0, %handshake_buffer72.out0_valid = hw.instance "handshake_buffer72" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.addrOut0: i64, in0_valid: %handshake_store5.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer73.in0_ready, %handshake_buffer73.out0, %handshake_buffer73.out0_valid = hw.instance "handshake_buffer73" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.dataToMem: i64, in0_valid: %handshake_store5.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stData2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer74.in0_ready, %handshake_buffer74.out0, %handshake_buffer74.out0_valid = hw.instance "handshake_buffer74" @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in0: %handshake_fork14.out0: i1, in0_valid: %handshake_fork14.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork11.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_fork11.in0_ready, %handshake_fork11.out0, %handshake_fork11.out0_valid, %handshake_fork11.out1, %handshake_fork11.out1_valid, %handshake_fork11.out2, %handshake_fork11.out2_valid, %handshake_fork11.out3, %handshake_fork11.out3_valid = hw.instance "handshake_fork11" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in0: %handshake_buffer74.out0: i1, in0_valid: %handshake_buffer74.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer78.in0_ready: i1, out1_ready: %handshake_buffer77.in0_ready: i1, out2_ready: %handshake_buffer76.in0_ready: i1, out3_ready: %handshake_buffer75.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1)
  %handshake_buffer75.in0_ready, %handshake_buffer75.out0, %handshake_buffer75.out0_valid = hw.instance "handshake_buffer75" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out3: i1, in0_valid: %handshake_fork11.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux0.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer76.in0_ready, %handshake_buffer76.out0, %handshake_buffer76.out0_valid = hw.instance "handshake_buffer76" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out2: i1, in0_valid: %handshake_fork11.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux1.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer77.in0_ready, %handshake_buffer77.out0, %handshake_buffer77.out0_valid = hw.instance "handshake_buffer77" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out1: i1, in0_valid: %handshake_fork11.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux2.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer78.in0_ready, %handshake_buffer78.out0, %handshake_buffer78.out0_valid = hw.instance "handshake_buffer78" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out0: i1, in0_valid: %handshake_fork11.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux3.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_mux0.select_ready, %handshake_mux0.in0_ready, %handshake_mux0.in1_ready, %handshake_mux0.out0, %handshake_mux0.out0_valid = hw.instance "handshake_mux0" @handshake_mux_in_ui1_3ins_1outs_ctrl(select: %handshake_buffer75.out0: i1, select_valid: %handshake_buffer75.out0_valid: i1, in0: %handshake_buffer36.out0: i0, in0_valid: %handshake_buffer36.out0_valid: i1, in1: %handshake_buffer107.out0: i0, in1_valid: %handshake_buffer107.out0_valid: i1, out0_ready: %handshake_buffer79.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer79.in0_ready, %handshake_buffer79.out0, %handshake_buffer79.out0_valid = hw.instance "handshake_buffer79" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_mux0.out0: i0, in0_valid: %handshake_mux0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br3.data_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_mux1.select_ready, %handshake_mux1.in0_ready, %handshake_mux1.in1_ready, %handshake_mux1.out0, %handshake_mux1.out0_valid = hw.instance "handshake_mux1" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer76.out0: i1, select_valid: %handshake_buffer76.out0_valid: i1, in0: %handshake_buffer57.out0: i64, in0_valid: %handshake_buffer57.out0_valid: i1, in1: %handshake_buffer115.out0: i64, in1_valid: %handshake_buffer115.out0_valid: i1, out0_ready: %handshake_buffer80.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer80.in0_ready, %handshake_buffer80.out0, %handshake_buffer80.out0_valid = hw.instance "handshake_buffer80" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux1.out0: i64, in0_valid: %handshake_mux1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork12.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork12.in0_ready, %handshake_fork12.out0, %handshake_fork12.out0_valid, %handshake_fork12.out1, %handshake_fork12.out1_valid = hw.instance "handshake_fork12" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer80.out0: i64, in0_valid: %handshake_buffer80.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer82.in0_ready: i1, out1_ready: %handshake_buffer81.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer81.in0_ready, %handshake_buffer81.out0, %handshake_buffer81.out0_valid = hw.instance "handshake_buffer81" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out1: i64, in0_valid: %handshake_fork12.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br0.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer82.in0_ready, %handshake_buffer82.out0, %handshake_buffer82.out0_valid = hw.instance "handshake_buffer82" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out0: i64, in0_valid: %handshake_fork12.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_cmpi0.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_mux2.select_ready, %handshake_mux2.in0_ready, %handshake_mux2.in1_ready, %handshake_mux2.out0, %handshake_mux2.out0_valid = hw.instance "handshake_mux2" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer77.out0: i1, select_valid: %handshake_buffer77.out0_valid: i1, in0: %handshake_buffer37.out0: i64, in0_valid: %handshake_buffer37.out0_valid: i1, in1: %handshake_buffer97.out0: i64, in1_valid: %handshake_buffer97.out0_valid: i1, out0_ready: %handshake_buffer83.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer83.in0_ready, %handshake_buffer83.out0, %handshake_buffer83.out0_valid = hw.instance "handshake_buffer83" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux2.out0: i64, in0_valid: %handshake_mux2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork13.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork13.in0_ready, %handshake_fork13.out0, %handshake_fork13.out0_valid, %handshake_fork13.out1, %handshake_fork13.out1_valid = hw.instance "handshake_fork13" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer83.out0: i64, in0_valid: %handshake_buffer83.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer85.in0_ready: i1, out1_ready: %handshake_buffer84.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer84.in0_ready, %handshake_buffer84.out0, %handshake_buffer84.out0_valid = hw.instance "handshake_buffer84" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out1: i64, in0_valid: %handshake_fork13.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br1.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer85.in0_ready, %handshake_buffer85.out0, %handshake_buffer85.out0_valid = hw.instance "handshake_buffer85" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out0: i64, in0_valid: %handshake_fork13.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_cmpi0.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_mux3.select_ready, %handshake_mux3.in0_ready, %handshake_mux3.in1_ready, %handshake_mux3.out0, %handshake_mux3.out0_valid = hw.instance "handshake_mux3" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer78.out0: i1, select_valid: %handshake_buffer78.out0_valid: i1, in0: %handshake_buffer53.out0: i64, in0_valid: %handshake_buffer53.out0_valid: i1, in1: %handshake_buffer100.out0: i64, in1_valid: %handshake_buffer100.out0_valid: i1, out0_ready: %handshake_buffer86.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer86.in0_ready, %handshake_buffer86.out0, %handshake_buffer86.out0_valid = hw.instance "handshake_buffer86" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux3.out0: i64, in0_valid: %handshake_mux3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br2.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %arith_cmpi0.in0_ready, %arith_cmpi0.in1_ready, %arith_cmpi0.out0, %arith_cmpi0.out0_valid = hw.instance "arith_cmpi0" @arith_cmpi_in_ui64_ui64_out_ui1_slt(in0: %handshake_buffer82.out0: i64, in0_valid: %handshake_buffer82.out0_valid: i1, in1: %handshake_buffer85.out0: i64, in1_valid: %handshake_buffer85.out0_valid: i1, out0_ready: %handshake_buffer87.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer87.in0_ready, %handshake_buffer87.out0, %handshake_buffer87.out0_valid = hw.instance "handshake_buffer87" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %arith_cmpi0.out0: i1, in0_valid: %arith_cmpi0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork14.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_fork14.in0_ready, %handshake_fork14.out0, %handshake_fork14.out0_valid, %handshake_fork14.out1, %handshake_fork14.out1_valid, %handshake_fork14.out2, %handshake_fork14.out2_valid, %handshake_fork14.out3, %handshake_fork14.out3_valid, %handshake_fork14.out4, %handshake_fork14.out4_valid = hw.instance "handshake_fork14" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in0: %handshake_buffer87.out0: i1, in0_valid: %handshake_buffer87.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer74.in0_ready: i1, out1_ready: %handshake_buffer91.in0_ready: i1, out2_ready: %handshake_buffer90.in0_ready: i1, out3_ready: %handshake_buffer89.in0_ready: i1, out4_ready: %handshake_buffer88.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1, out4: i1, out4_valid: i1)
  %handshake_buffer88.in0_ready, %handshake_buffer88.out0, %handshake_buffer88.out0_valid = hw.instance "handshake_buffer88" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out4: i1, in0_valid: %handshake_fork14.out4_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br0.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer89.in0_ready, %handshake_buffer89.out0, %handshake_buffer89.out0_valid = hw.instance "handshake_buffer89" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out3: i1, in0_valid: %handshake_fork14.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br1.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer90.in0_ready, %handshake_buffer90.out0, %handshake_buffer90.out0_valid = hw.instance "handshake_buffer90" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out2: i1, in0_valid: %handshake_fork14.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br2.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer91.in0_ready, %handshake_buffer91.out0, %handshake_buffer91.out0_valid = hw.instance "handshake_buffer91" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out1: i1, in0_valid: %handshake_fork14.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br3.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_cond_br0.cond_ready, %handshake_cond_br0.data_ready, %handshake_cond_br0.outTrue, %handshake_cond_br0.outTrue_valid, %handshake_cond_br0.outFalse, %handshake_cond_br0.outFalse_valid = hw.instance "handshake_cond_br0" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer88.out0: i1, cond_valid: %handshake_buffer88.out0_valid: i1, data: %handshake_buffer81.out0: i64, data_valid: %handshake_buffer81.out0_valid: i1, outTrue_ready: %handshake_buffer92.in0_ready: i1, outFalse_ready: %handshake_sink0.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
  %handshake_buffer92.in0_ready, %handshake_buffer92.out0, %handshake_buffer92.out0_valid = hw.instance "handshake_buffer92" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br0.outTrue: i64, in0_valid: %handshake_cond_br0.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork15.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_sink0.in0_ready = hw.instance "handshake_sink0" @handshake_sink_in_ui64(in0: %handshake_cond_br0.outFalse: i64, in0_valid: %handshake_cond_br0.outFalse_valid: i1) -> (in0_ready: i1)
  %handshake_fork15.in0_ready, %handshake_fork15.out0, %handshake_fork15.out0_valid, %handshake_fork15.out1, %handshake_fork15.out1_valid, %handshake_fork15.out2, %handshake_fork15.out2_valid, %handshake_fork15.out3, %handshake_fork15.out3_valid = hw.instance "handshake_fork15" @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in0: %handshake_buffer92.out0: i64, in0_valid: %handshake_buffer92.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer96.in0_ready: i1, out1_ready: %handshake_buffer95.in0_ready: i1, out2_ready: %handshake_buffer94.in0_ready: i1, out3_ready: %handshake_buffer93.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1, out3: i64, out3_valid: i1)
  %handshake_buffer93.in0_ready, %handshake_buffer93.out0, %handshake_buffer93.out0_valid = hw.instance "handshake_buffer93" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out3: i64, in0_valid: %handshake_fork15.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store6.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer94.in0_ready, %handshake_buffer94.out0, %handshake_buffer94.out0_valid = hw.instance "handshake_buffer94" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out2: i64, in0_valid: %handshake_fork15.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load1.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer95.in0_ready, %handshake_buffer95.out0, %handshake_buffer95.out0_valid = hw.instance "handshake_buffer95" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out1: i64, in0_valid: %handshake_fork15.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load0.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer96.in0_ready, %handshake_buffer96.out0, %handshake_buffer96.out0_valid = hw.instance "handshake_buffer96" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out0: i64, in0_valid: %handshake_fork15.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi1.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_cond_br1.cond_ready, %handshake_cond_br1.data_ready, %handshake_cond_br1.outTrue, %handshake_cond_br1.outTrue_valid, %handshake_cond_br1.outFalse, %handshake_cond_br1.outFalse_valid = hw.instance "handshake_cond_br1" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer89.out0: i1, cond_valid: %handshake_buffer89.out0_valid: i1, data: %handshake_buffer84.out0: i64, data_valid: %handshake_buffer84.out0_valid: i1, outTrue_ready: %handshake_buffer97.in0_ready: i1, outFalse_ready: %handshake_sink1.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
  %handshake_buffer97.in0_ready, %handshake_buffer97.out0, %handshake_buffer97.out0_valid = hw.instance "handshake_buffer97" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br1.outTrue: i64, in0_valid: %handshake_cond_br1.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux2.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_sink1.in0_ready = hw.instance "handshake_sink1" @handshake_sink_in_ui64(in0: %handshake_cond_br1.outFalse: i64, in0_valid: %handshake_cond_br1.outFalse_valid: i1) -> (in0_ready: i1)
  %handshake_cond_br2.cond_ready, %handshake_cond_br2.data_ready, %handshake_cond_br2.outTrue, %handshake_cond_br2.outTrue_valid, %handshake_cond_br2.outFalse, %handshake_cond_br2.outFalse_valid = hw.instance "handshake_cond_br2" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer90.out0: i1, cond_valid: %handshake_buffer90.out0_valid: i1, data: %handshake_buffer86.out0: i64, data_valid: %handshake_buffer86.out0_valid: i1, outTrue_ready: %handshake_buffer98.in0_ready: i1, outFalse_ready: %handshake_sink2.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
  %handshake_buffer98.in0_ready, %handshake_buffer98.out0, %handshake_buffer98.out0_valid = hw.instance "handshake_buffer98" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br2.outTrue: i64, in0_valid: %handshake_cond_br2.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork16.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_sink2.in0_ready = hw.instance "handshake_sink2" @handshake_sink_in_ui64(in0: %handshake_cond_br2.outFalse: i64, in0_valid: %handshake_cond_br2.outFalse_valid: i1) -> (in0_ready: i1)
  %handshake_fork16.in0_ready, %handshake_fork16.out0, %handshake_fork16.out0_valid, %handshake_fork16.out1, %handshake_fork16.out1_valid = hw.instance "handshake_fork16" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer98.out0: i64, in0_valid: %handshake_buffer98.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer100.in0_ready: i1, out1_ready: %handshake_buffer99.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer99.in0_ready, %handshake_buffer99.out0, %handshake_buffer99.out0_valid = hw.instance "handshake_buffer99" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out1: i64, in0_valid: %handshake_fork16.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi1.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer100.in0_ready, %handshake_buffer100.out0, %handshake_buffer100.out0_valid = hw.instance "handshake_buffer100" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out0: i64, in0_valid: %handshake_fork16.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux3.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_cond_br3.cond_ready, %handshake_cond_br3.data_ready, %handshake_cond_br3.outTrue, %handshake_cond_br3.outTrue_valid, %handshake_cond_br3.outFalse, %handshake_cond_br3.outFalse_valid = hw.instance "handshake_cond_br3" @handshake_cond_br_in_ui1_2ins_2outs_ctrl(cond: %handshake_buffer91.out0: i1, cond_valid: %handshake_buffer91.out0_valid: i1, data: %handshake_buffer79.out0: i0, data_valid: %handshake_buffer79.out0_valid: i1, outTrue_ready: %handshake_buffer102.in0_ready: i1, outFalse_ready: %handshake_buffer101.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i0, outTrue_valid: i1, outFalse: i0, outFalse_valid: i1)
  %handshake_buffer101.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid = hw.instance "handshake_buffer101" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outFalse: i0, in0_valid: %handshake_cond_br3.outFalse_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %out0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer102.in0_ready, %handshake_buffer102.out0, %handshake_buffer102.out0_valid = hw.instance "handshake_buffer102" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outTrue: i0, in0_valid: %handshake_cond_br3.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork17.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_fork17.in0_ready, %handshake_fork17.out0, %handshake_fork17.out0_valid, %handshake_fork17.out1, %handshake_fork17.out1_valid, %handshake_fork17.out2, %handshake_fork17.out2_valid, %handshake_fork17.out3, %handshake_fork17.out3_valid = hw.instance "handshake_fork17" @handshake_fork_1ins_4outs_ctrl(in0: %handshake_buffer102.out0: i0, in0_valid: %handshake_buffer102.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer106.in0_ready: i1, out1_ready: %handshake_buffer105.in0_ready: i1, out2_ready: %handshake_buffer104.in0_ready: i1, out3_ready: %handshake_buffer103.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1)
  %handshake_buffer103.in0_ready, %handshake_buffer103.out0, %handshake_buffer103.out0_valid = hw.instance "handshake_buffer103" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out3: i0, in0_valid: %handshake_fork17.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer104.in0_ready, %handshake_buffer104.out0, %handshake_buffer104.out0_valid = hw.instance "handshake_buffer104" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out2: i0, in0_valid: %handshake_fork17.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer105.in0_ready, %handshake_buffer105.out0, %handshake_buffer105.out0_valid = hw.instance "handshake_buffer105" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out1: i0, in0_valid: %handshake_fork17.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer106.in0_ready, %handshake_buffer106.out0, %handshake_buffer106.out0_valid = hw.instance "handshake_buffer106" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out0: i0, in0_valid: %handshake_fork17.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store6.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_join5.in0_ready, %handshake_join5.in1_ready, %handshake_join5.in2_ready, %handshake_join5.in3_ready, %handshake_join5.out0, %handshake_join5.out0_valid = hw.instance "handshake_join5" @handshake_join_4ins_1outs_ctrl(in0: %handshake_buffer105.out0: i0, in0_valid: %handshake_buffer105.out0_valid: i1, in1: %handshake_buffer26.out0: i0, in1_valid: %handshake_buffer26.out0_valid: i1, in2: %handshake_buffer16.out0: i0, in2_valid: %handshake_buffer16.out0_valid: i1, in3: %handshake_buffer15.out0: i0, in3_valid: %handshake_buffer15.out0_valid: i1, out0_ready: %handshake_buffer107.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer107.in0_ready, %handshake_buffer107.out0, %handshake_buffer107.out0_valid = hw.instance "handshake_buffer107" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join5.out0: i0, in0_valid: %handshake_join5.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux0.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_load0.addrIn0_ready, %handshake_load0.dataFromMem_ready, %handshake_load0.ctrl_ready, %handshake_load0.dataOut, %handshake_load0.dataOut_valid, %handshake_load0.addrOut0, %handshake_load0.addrOut0_valid = hw.instance "handshake_load0" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer95.out0: i64, addrIn0_valid: %handshake_buffer95.out0_valid: i1, dataFromMem: %handshake_buffer30.out0: i64, dataFromMem_valid: %handshake_buffer30.out0_valid: i1, ctrl: %handshake_buffer103.out0: i0, ctrl_valid: %handshake_buffer103.out0_valid: i1, dataOut_ready: %handshake_buffer109.in0_ready: i1, addrOut0_ready: %handshake_buffer108.in0_ready: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer108.in0_ready, %handshake_buffer108.out0, %handshake_buffer108.out0_valid = hw.instance "handshake_buffer108" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.addrOut0: i64, in0_valid: %handshake_load0.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.ldAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer109.in0_ready, %handshake_buffer109.out0, %handshake_buffer109.out0_valid = hw.instance "handshake_buffer109" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.dataOut: i64, in0_valid: %handshake_load0.dataOut_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi0.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_load1.addrIn0_ready, %handshake_load1.dataFromMem_ready, %handshake_load1.ctrl_ready, %handshake_load1.dataOut, %handshake_load1.dataOut_valid, %handshake_load1.addrOut0, %handshake_load1.addrOut0_valid = hw.instance "handshake_load1" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer94.out0: i64, addrIn0_valid: %handshake_buffer94.out0_valid: i1, dataFromMem: %handshake_buffer20.out0: i64, dataFromMem_valid: %handshake_buffer20.out0_valid: i1, ctrl: %handshake_buffer104.out0: i0, ctrl_valid: %handshake_buffer104.out0_valid: i1, dataOut_ready: %handshake_buffer111.in0_ready: i1, addrOut0_ready: %handshake_buffer110.in0_ready: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer110.in0_ready, %handshake_buffer110.out0, %handshake_buffer110.out0_valid = hw.instance "handshake_buffer110" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.addrOut0: i64, in0_valid: %handshake_load1.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.ldAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer111.in0_ready, %handshake_buffer111.out0, %handshake_buffer111.out0_valid = hw.instance "handshake_buffer111" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.dataOut: i64, in0_valid: %handshake_load1.dataOut_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi0.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %arith_addi0.in0_ready, %arith_addi0.in1_ready, %arith_addi0.out0, %arith_addi0.out0_valid = hw.instance "arith_addi0" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer109.out0: i64, in0_valid: %handshake_buffer109.out0_valid: i1, in1: %handshake_buffer111.out0: i64, in1_valid: %handshake_buffer111.out0_valid: i1, out0_ready: %handshake_buffer112.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer112.in0_ready, %handshake_buffer112.out0, %handshake_buffer112.out0_valid = hw.instance "handshake_buffer112" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi0.out0: i64, in0_valid: %arith_addi0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store6.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_store6.addrIn0_ready, %handshake_store6.dataIn_ready, %handshake_store6.ctrl_ready, %handshake_store6.dataToMem, %handshake_store6.dataToMem_valid, %handshake_store6.addrOut0, %handshake_store6.addrOut0_valid = hw.instance "handshake_store6" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer93.out0: i64, addrIn0_valid: %handshake_buffer93.out0_valid: i1, dataIn: %handshake_buffer112.out0: i64, dataIn_valid: %handshake_buffer112.out0_valid: i1, ctrl: %handshake_buffer106.out0: i0, ctrl_valid: %handshake_buffer106.out0_valid: i1, dataToMem_ready: %handshake_buffer114.in0_ready: i1, addrOut0_ready: %handshake_buffer113.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer113.in0_ready, %handshake_buffer113.out0, %handshake_buffer113.out0_valid = hw.instance "handshake_buffer113" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.addrOut0: i64, in0_valid: %handshake_store6.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory0.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer114.in0_ready, %handshake_buffer114.out0, %handshake_buffer114.out0_valid = hw.instance "handshake_buffer114" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.dataToMem: i64, in0_valid: %handshake_store6.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory0.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %arith_addi1.in0_ready, %arith_addi1.in1_ready, %arith_addi1.out0, %arith_addi1.out0_valid = hw.instance "arith_addi1" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer96.out0: i64, in0_valid: %handshake_buffer96.out0_valid: i1, in1: %handshake_buffer99.out0: i64, in1_valid: %handshake_buffer99.out0_valid: i1, out0_ready: %handshake_buffer115.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer115.in0_ready, %handshake_buffer115.out0, %handshake_buffer115.out0_valid = hw.instance "handshake_buffer115" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi1.out0: i64, in0_valid: %arith_addi1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux1.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  hw.output %handshake_buffer0.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid : i1, i0, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_fork_1ins_4outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %28, %true : i1
  %1 = comb.and %6, %0 : i1
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.and %3, %in0_valid : i1
  %5 = comb.and %out0_ready, %4 : i1
  %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
  %7 = comb.xor %28, %true : i1
  %8 = comb.and %13, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %in0_valid : i1
  %12 = comb.and %out1_ready, %11 : i1
  %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
  %14 = comb.xor %28, %true : i1
  %15 = comb.and %20, %14 : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %17 = comb.xor %16, %true : i1
  %18 = comb.and %17, %in0_valid : i1
  %19 = comb.and %out2_ready, %18 : i1
  %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
  %21 = comb.xor %28, %true : i1
  %22 = comb.and %27, %21 : i1
  %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
  %23 = sv.read_inout %emitted_3 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.passign %emitted_0, %1 : i1
    sv.passign %emitted_1, %8 : i1
    sv.passign %emitted_2, %15 : i1
    sv.passign %emitted_3, %22 : i1
  }(syncreset : posedge %reset) {
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
    sv.passign %emitted_3, %false : i1
  }
  %24 = comb.xor %23, %true : i1
  %25 = comb.and %24, %in0_valid : i1
  %26 = comb.and %out3_ready, %25 : i1
  %27 = comb.or %26, %23 {sv.namehint = "done3"} : i1
  %28 = comb.and %6, %13, %20, %27 {sv.namehint = "allDone"} : i1
  hw.output %28, %in0, %4, %in0, %11, %in0, %18, %in0, %25 : i1, i0, i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_mux_in_ui1_ui64_ui64_out_ui64(in %select : i1, in %select_valid : i1, in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c1_i2 = hw.constant 1 : i2
  %false = hw.constant false
  %0 = comb.concat %false, %select : i1, i1
  %1 = comb.shl %c1_i2, %0 : i2
  %2 = comb.mux %select, %in1_valid, %in0_valid : i1
  %3 = comb.and %2, %select_valid : i1
  %4 = comb.and %3, %out0_ready : i1
  %5 = comb.extract %1 from 0 : (i2) -> i1
  %6 = comb.and %5, %4 : i1
  %7 = comb.extract %1 from 1 : (i2) -> i1
  %8 = comb.and %7, %4 : i1
  %9 = comb.mux %select, %in1, %in0 : i64
  hw.output %4, %6, %8, %9, %3 : i1, i1, i1, i64, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @arith_cmpi_in_ui64_ui64_out_ui1_slt(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i1, out out0_valid : i1) {
  %0 = comb.and %in0_valid, %in1_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  %2 = comb.icmp slt %in0, %in1 : i64
  hw.output %1, %1, %2, %0 : i1, i1, i1, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_cond_br_in_ui1_2ins_2outs_ctrl(in %cond : i1, in %cond_valid : i1, in %data : i0, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i0, out outTrue_valid : i1, out outFalse : i0, out outFalse_valid : i1) {
  %true = hw.constant true
  %0 = comb.and %cond_valid, %data_valid : i1
  %1 = comb.and %cond, %0 : i1
  %2 = comb.xor %cond, %true : i1
  %3 = comb.and %2, %0 : i1
  %4 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
  %5 = comb.and %4, %0 : i1
  hw.output %5, %5, %data, %1, %data, %3 : i1, i1, i0, i1, i0, i1
}

// -----// IR Dump After HWCleanup (hw-cleanup) //----- //
hw.module @handshake_load_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataFromMem : i64, in %dataFromMem_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataOut_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataFromMem_ready : i1, out ctrl_ready : i1, out dataOut : i64, out dataOut_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
  %0 = comb.and %addrIn0_valid, %ctrl_valid : i1
  %1 = comb.and %addrOut0_ready, %0 : i1
  hw.output %1, %dataOut_ready, %1, %dataFromMem, %dataFromMem_valid, %addrIn0, %0 : i1, i1, i1, i64, i1, i64, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_load_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataFromMem : i64, in %dataFromMem_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataOut_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataFromMem_ready : i1, out ctrl_ready : i1, out dataOut : i64, out dataOut_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
  %0 = comb.and %addrIn0_valid, %ctrl_valid : i1
  %1 = comb.and %addrOut0_ready, %0 : i1
  hw.output %1, %dataOut_ready, %1, %dataFromMem, %dataFromMem_valid, %addrIn0, %0 : i1, i1, i1, i64, i1, i64, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_mux_in_ui1_ui64_ui64_out_ui64(in %select : i1, in %select_valid : i1, in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c1_i2 = hw.constant 1 : i2
  %false = hw.constant false
  %0 = comb.concat %false, %select : i1, i1
  %1 = comb.shl %c1_i2, %0 : i2
  %2 = comb.mux %select, %in1_valid, %in0_valid : i1
  %3 = comb.and %2, %select_valid : i1
  %4 = comb.and %3, %out0_ready : i1
  %5 = comb.extract %1 from 0 : (i2) -> i1
  %6 = comb.and %5, %4 : i1
  %7 = comb.extract %1 from 1 : (i2) -> i1
  %8 = comb.and %7, %4 : i1
  %9 = comb.mux %select, %in1, %in0 : i64
  hw.output %4, %6, %8, %9, %3 : i1, i1, i1, i64, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @arith_cmpi_in_ui64_ui64_out_ui1_slt(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i1, out out0_valid : i1) {
  %0 = comb.and %in0_valid, %in1_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  %2 = comb.icmp slt %in0, %in1 : i64
  hw.output %1, %1, %2, %0 : i1, i1, i1, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_fork_1ins_4outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %0 = comb.xor %28, %true : i1
  %1 = comb.and %6, %0 : i1
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.and %3, %in0_valid : i1
  %5 = comb.and %out0_ready, %4 : i1
  %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
  %7 = comb.xor %28, %true : i1
  %8 = comb.and %13, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %in0_valid : i1
  %12 = comb.and %out1_ready, %11 : i1
  %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
  %14 = comb.xor %28, %true : i1
  %15 = comb.and %20, %14 : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %17 = comb.xor %16, %true : i1
  %18 = comb.and %17, %in0_valid : i1
  %19 = comb.and %out2_ready, %18 : i1
  %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
  %21 = comb.xor %28, %true : i1
  %22 = comb.and %27, %21 : i1
  %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
  %23 = sv.read_inout %emitted_3 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.passign %emitted_0, %1 : i1
    sv.passign %emitted_1, %8 : i1
    sv.passign %emitted_2, %15 : i1
    sv.passign %emitted_3, %22 : i1
  }(syncreset : posedge %reset) {
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
    sv.passign %emitted_3, %false : i1
  }
  %24 = comb.xor %23, %true : i1
  %25 = comb.and %24, %in0_valid : i1
  %26 = comb.and %out3_ready, %25 : i1
  %27 = comb.or %26, %23 {sv.namehint = "done3"} : i1
  %28 = comb.and %6, %13, %20, %27 {sv.namehint = "allDone"} : i1
  hw.output %28, %in0, %4, %in0, %11, %in0, %18, %in0, %25 : i1, i0, i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @handshake_buffer_in_ui1_out_ui1_2slots_seq(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
  %true = hw.constant true
  %false = hw.constant false
  %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
  %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.or %1, %8 : i1
  %3 = comb.mux %2, %in0_valid, %0 : i1
  %4 = comb.mux %2, %in0, %5 : i1
  %data0_reg = sv.reg sym @data0_reg : !hw.inout<i1> 
  %5 = sv.read_inout %data0_reg : !hw.inout<i1>
  %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
  %6 = sv.read_inout %ready0_reg : !hw.inout<i1>
  %7 = comb.mux %6, %6, %0 : i1
  %8 = comb.xor %6, %true : i1
  %9 = comb.xor %22, %true : i1
  %10 = comb.and %9, %8 : i1
  %11 = comb.mux %10, %0, %6 : i1
  %12 = comb.and %22, %6 : i1
  %13 = comb.xor %12, %true : i1
  %14 = comb.and %13, %11 : i1
  %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i1> 
  %15 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
  %16 = comb.mux %6, %15, %5 : i1
  %17 = comb.mux %10, %5, %15 : i1
  %18 = comb.xor %12, %true : i1
  %19 = comb.and %18, %17 : i1
  %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
  %20 = sv.read_inout %valid1_reg : !hw.inout<i1>
  %21 = comb.xor %20, %true : i1
  %22 = comb.or %21, %28 : i1
  %23 = comb.mux %22, %7, %20 : i1
  %24 = comb.mux %22, %16, %25 : i1
  %data1_reg = sv.reg sym @data1_reg : !hw.inout<i1> 
  %25 = sv.read_inout %data1_reg : !hw.inout<i1>
  %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
  %26 = sv.read_inout %ready1_reg : !hw.inout<i1>
  %27 = comb.mux %26, %26, %20 : i1
  %28 = comb.xor %26, %true : i1
  %29 = comb.xor %out0_ready, %true : i1
  %30 = comb.and %29, %28 : i1
  %31 = comb.mux %30, %20, %26 : i1
  %32 = comb.and %out0_ready, %26 : i1
  %33 = comb.xor %32, %true : i1
  %34 = comb.and %33, %31 : i1
  %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i1> 
  %35 = sv.read_inout %ctrl_data1_reg : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    sv.passign %valid0_reg, %3 : i1
    sv.passign %data0_reg, %4 : i1
    sv.passign %ready0_reg, %14 : i1
    sv.passign %ctrl_data0_reg, %19 : i1
    sv.passign %valid1_reg, %23 : i1
    sv.passign %data1_reg, %24 : i1
    sv.passign %ready1_reg, %34 : i1
    sv.passign %ctrl_data1_reg, %39 : i1
  }(syncreset : posedge %reset) {
    sv.passign %valid0_reg, %false : i1
    sv.passign %data0_reg, %false : i1
    sv.passign %ready0_reg, %false : i1
    sv.passign %ctrl_data0_reg, %false : i1
    sv.passign %valid1_reg, %false : i1
    sv.passign %data1_reg, %false : i1
    sv.passign %ready1_reg, %false : i1
    sv.passign %ctrl_data1_reg, %false : i1
  }
  %36 = comb.mux %26, %35, %25 : i1
  %37 = comb.mux %30, %25, %35 : i1
  %38 = comb.xor %32, %true : i1
  %39 = comb.and %38, %37 : i1
  hw.output %2, %36, %27 : i1, i1, i1
}

// -----// IR Dump After HWLegalizeModules (hw-legalize-modules) //----- //
hw.module @main(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
  %handshake_buffer0.in0_ready, %handshake_buffer0.out0, %handshake_buffer0.out0_valid = hw.instance "handshake_buffer0" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %in0: i0, in0_valid: %in0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_fork0.in0_ready, %handshake_fork0.out0, %handshake_fork0.out0_valid, %handshake_fork0.out1, %handshake_fork0.out1_valid, %handshake_fork0.out2, %handshake_fork0.out2_valid, %handshake_fork0.out3, %handshake_fork0.out3_valid, %handshake_fork0.out4, %handshake_fork0.out4_valid, %handshake_fork0.out5, %handshake_fork0.out5_valid, %handshake_fork0.out6, %handshake_fork0.out6_valid, %handshake_fork0.out7, %handshake_fork0.out7_valid, %handshake_fork0.out8, %handshake_fork0.out8_valid, %handshake_fork0.out9, %handshake_fork0.out9_valid, %handshake_fork0.out10, %handshake_fork0.out10_valid, %handshake_fork0.out11, %handshake_fork0.out11_valid, %handshake_fork0.out12, %handshake_fork0.out12_valid, %handshake_fork0.out13, %handshake_fork0.out13_valid = hw.instance "handshake_fork0" @handshake_fork_1ins_14outs_ctrl(in0: %handshake_buffer0.out0: i0, in0_valid: %handshake_buffer0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer14.in0_ready: i1, out1_ready: %handshake_buffer13.in0_ready: i1, out2_ready: %handshake_buffer12.in0_ready: i1, out3_ready: %handshake_buffer11.in0_ready: i1, out4_ready: %handshake_buffer10.in0_ready: i1, out5_ready: %handshake_buffer9.in0_ready: i1, out6_ready: %handshake_buffer8.in0_ready: i1, out7_ready: %handshake_buffer7.in0_ready: i1, out8_ready: %handshake_buffer6.in0_ready: i1, out9_ready: %handshake_buffer5.in0_ready: i1, out10_ready: %handshake_buffer4.in0_ready: i1, out11_ready: %handshake_buffer3.in0_ready: i1, out12_ready: %handshake_buffer2.in0_ready: i1, out13_ready: %handshake_buffer1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1, out4: i0, out4_valid: i1, out5: i0, out5_valid: i1, out6: i0, out6_valid: i1, out7: i0, out7_valid: i1, out8: i0, out8_valid: i1, out9: i0, out9_valid: i1, out10: i0, out10_valid: i1, out11: i0, out11_valid: i1, out12: i0, out12_valid: i1, out13: i0, out13_valid: i1)
  %handshake_buffer1.in0_ready, %handshake_buffer1.out0, %handshake_buffer1.out0_valid = hw.instance "handshake_buffer1" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out13: i0, in0_valid: %handshake_fork0.out13_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join4.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer2.in0_ready, %handshake_buffer2.out0, %handshake_buffer2.out0_valid = hw.instance "handshake_buffer2" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out12: i0, in0_valid: %handshake_fork0.out12_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join3.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer3.in0_ready, %handshake_buffer3.out0, %handshake_buffer3.out0_valid = hw.instance "handshake_buffer3" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out11: i0, in0_valid: %handshake_fork0.out11_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store3.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer4.in0_ready, %handshake_buffer4.out0, %handshake_buffer4.out0_valid = hw.instance "handshake_buffer4" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out10: i0, in0_valid: %handshake_fork0.out10_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer5.in0_ready, %handshake_buffer5.out0, %handshake_buffer5.out0_valid = hw.instance "handshake_buffer5" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out9: i0, in0_valid: %handshake_fork0.out9_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join2.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer6.in0_ready, %handshake_buffer6.out0, %handshake_buffer6.out0_valid = hw.instance "handshake_buffer6" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out8: i0, in0_valid: %handshake_fork0.out8_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer7.in0_ready, %handshake_buffer7.out0, %handshake_buffer7.out0_valid = hw.instance "handshake_buffer7" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out7: i0, in0_valid: %handshake_fork0.out7_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer8.in0_ready, %handshake_buffer8.out0, %handshake_buffer8.out0_valid = hw.instance "handshake_buffer8" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out6: i0, in0_valid: %handshake_fork0.out6_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant6.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer9.in0_ready, %handshake_buffer9.out0, %handshake_buffer9.out0_valid = hw.instance "handshake_buffer9" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out5: i0, in0_valid: %handshake_fork0.out5_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant5.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer10.in0_ready, %handshake_buffer10.out0, %handshake_buffer10.out0_valid = hw.instance "handshake_buffer10" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out4: i0, in0_valid: %handshake_fork0.out4_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant4.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer11.in0_ready, %handshake_buffer11.out0, %handshake_buffer11.out0_valid = hw.instance "handshake_buffer11" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out3: i0, in0_valid: %handshake_fork0.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant3.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer12.in0_ready, %handshake_buffer12.out0, %handshake_buffer12.out0_valid = hw.instance "handshake_buffer12" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out2: i0, in0_valid: %handshake_fork0.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant2.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer13.in0_ready, %handshake_buffer13.out0, %handshake_buffer13.out0_valid = hw.instance "handshake_buffer13" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out1: i0, in0_valid: %handshake_fork0.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer14.in0_ready, %handshake_buffer14.out0, %handshake_buffer14.out0_valid = hw.instance "handshake_buffer14" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out0: i0, in0_valid: %handshake_fork0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_memory0.stData0_ready, %handshake_memory0.stAddr0_ready, %handshake_memory0.stDone0, %handshake_memory0.stDone0_valid = hw.instance "handshake_memory0" @handshake_memory_out_ui64_id2(stData0: %handshake_buffer114.out0: i64, stData0_valid: %handshake_buffer114.out0_valid: i1, stAddr0: %handshake_buffer113.out0: i64, stAddr0_valid: %handshake_buffer113.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, stDone0_ready: %handshake_buffer15.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stDone0: i0, stDone0_valid: i1)
  %handshake_buffer15.in0_ready, %handshake_buffer15.out0, %handshake_buffer15.out0_valid = hw.instance "handshake_buffer15" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory0.stDone0: i0, in0_valid: %handshake_memory0.stDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in3_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_memory1.stData0_ready, %handshake_memory1.stAddr0_ready, %handshake_memory1.stData1_ready, %handshake_memory1.stAddr1_ready, %handshake_memory1.stData2_ready, %handshake_memory1.stAddr2_ready, %handshake_memory1.ldAddr0_ready, %handshake_memory1.ldData0, %handshake_memory1.ldData0_valid, %handshake_memory1.stDone0, %handshake_memory1.stDone0_valid, %handshake_memory1.stDone1, %handshake_memory1.stDone1_valid, %handshake_memory1.stDone2, %handshake_memory1.stDone2_valid, %handshake_memory1.ldDone0, %handshake_memory1.ldDone0_valid = hw.instance "handshake_memory1" @handshake_memory_out_ui64_id1(stData0: %handshake_buffer67.out0: i64, stData0_valid: %handshake_buffer67.out0_valid: i1, stAddr0: %handshake_buffer66.out0: i64, stAddr0_valid: %handshake_buffer66.out0_valid: i1, stData1: %handshake_buffer70.out0: i64, stData1_valid: %handshake_buffer70.out0_valid: i1, stAddr1: %handshake_buffer69.out0: i64, stAddr1_valid: %handshake_buffer69.out0_valid: i1, stData2: %handshake_buffer73.out0: i64, stData2_valid: %handshake_buffer73.out0_valid: i1, stAddr2: %handshake_buffer72.out0: i64, stAddr2_valid: %handshake_buffer72.out0_valid: i1, ldAddr0: %handshake_buffer110.out0: i64, ldAddr0_valid: %handshake_buffer110.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, ldData0_ready: %handshake_buffer20.in0_ready: i1, stDone0_ready: %handshake_buffer19.in0_ready: i1, stDone1_ready: %handshake_buffer18.in0_ready: i1, stDone2_ready: %handshake_buffer17.in0_ready: i1, ldDone0_ready: %handshake_buffer16.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
  %handshake_buffer16.in0_ready, %handshake_buffer16.out0, %handshake_buffer16.out0_valid = hw.instance "handshake_buffer16" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.ldDone0: i0, in0_valid: %handshake_memory1.ldDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer17.in0_ready, %handshake_buffer17.out0, %handshake_buffer17.out0_valid = hw.instance "handshake_buffer17" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone2: i0, in0_valid: %handshake_memory1.stDone2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in6_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer18.in0_ready, %handshake_buffer18.out0, %handshake_buffer18.out0_valid = hw.instance "handshake_buffer18" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone1: i0, in0_valid: %handshake_memory1.stDone1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer19.in0_ready, %handshake_buffer19.out0, %handshake_buffer19.out0_valid = hw.instance "handshake_buffer19" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone0: i0, in0_valid: %handshake_memory1.stDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork2.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer20.in0_ready, %handshake_buffer20.out0, %handshake_buffer20.out0_valid = hw.instance "handshake_buffer20" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory1.ldData0: i64, in0_valid: %handshake_memory1.ldData0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load1.dataFromMem_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork1.in0_ready, %handshake_fork1.out0, %handshake_fork1.out0_valid, %handshake_fork1.out1, %handshake_fork1.out1_valid = hw.instance "handshake_fork1" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer18.out0: i0, in0_valid: %handshake_buffer18.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer22.in0_ready: i1, out1_ready: %handshake_buffer21.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
  %handshake_buffer21.in0_ready, %handshake_buffer21.out0, %handshake_buffer21.out0_valid = hw.instance "handshake_buffer21" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out1: i0, in0_valid: %handshake_fork1.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in5_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer22.in0_ready, %handshake_buffer22.out0, %handshake_buffer22.out0_valid = hw.instance "handshake_buffer22" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out0: i0, in0_valid: %handshake_fork1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join4.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_fork2.in0_ready, %handshake_fork2.out0, %handshake_fork2.out0_valid, %handshake_fork2.out1, %handshake_fork2.out1_valid, %handshake_fork2.out2, %handshake_fork2.out2_valid = hw.instance "handshake_fork2" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer19.out0: i0, in0_valid: %handshake_buffer19.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer25.in0_ready: i1, out1_ready: %handshake_buffer24.in0_ready: i1, out2_ready: %handshake_buffer23.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
  %handshake_buffer23.in0_ready, %handshake_buffer23.out0, %handshake_buffer23.out0_valid = hw.instance "handshake_buffer23" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out2: i0, in0_valid: %handshake_fork2.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in4_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer24.in0_ready, %handshake_buffer24.out0, %handshake_buffer24.out0_valid = hw.instance "handshake_buffer24" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out1: i0, in0_valid: %handshake_fork2.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join3.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer25.in0_ready, %handshake_buffer25.out0, %handshake_buffer25.out0_valid = hw.instance "handshake_buffer25" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out0: i0, in0_valid: %handshake_fork2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join4.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_memory2.stData0_ready, %handshake_memory2.stAddr0_ready, %handshake_memory2.stData1_ready, %handshake_memory2.stAddr1_ready, %handshake_memory2.stData2_ready, %handshake_memory2.stAddr2_ready, %handshake_memory2.ldAddr0_ready, %handshake_memory2.ldData0, %handshake_memory2.ldData0_valid, %handshake_memory2.stDone0, %handshake_memory2.stDone0_valid, %handshake_memory2.stDone1, %handshake_memory2.stDone1_valid, %handshake_memory2.stDone2, %handshake_memory2.stDone2_valid, %handshake_memory2.ldDone0, %handshake_memory2.ldDone0_valid = hw.instance "handshake_memory2" @handshake_memory_out_ui64_id0(stData0: %handshake_buffer59.out0: i64, stData0_valid: %handshake_buffer59.out0_valid: i1, stAddr0: %handshake_buffer58.out0: i64, stAddr0_valid: %handshake_buffer58.out0_valid: i1, stData1: %handshake_buffer62.out0: i64, stData1_valid: %handshake_buffer62.out0_valid: i1, stAddr1: %handshake_buffer61.out0: i64, stAddr1_valid: %handshake_buffer61.out0_valid: i1, stData2: %handshake_buffer65.out0: i64, stData2_valid: %handshake_buffer65.out0_valid: i1, stAddr2: %handshake_buffer64.out0: i64, stAddr2_valid: %handshake_buffer64.out0_valid: i1, ldAddr0: %handshake_buffer108.out0: i64, ldAddr0_valid: %handshake_buffer108.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, ldData0_ready: %handshake_buffer30.in0_ready: i1, stDone0_ready: %handshake_buffer29.in0_ready: i1, stDone1_ready: %handshake_buffer28.in0_ready: i1, stDone2_ready: %handshake_buffer27.in0_ready: i1, ldDone0_ready: %handshake_buffer26.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
  %handshake_buffer26.in0_ready, %handshake_buffer26.out0, %handshake_buffer26.out0_valid = hw.instance "handshake_buffer26" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.ldDone0: i0, in0_valid: %handshake_memory2.ldDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer27.in0_ready, %handshake_buffer27.out0, %handshake_buffer27.out0_valid = hw.instance "handshake_buffer27" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone2: i0, in0_valid: %handshake_memory2.stDone2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in3_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer28.in0_ready, %handshake_buffer28.out0, %handshake_buffer28.out0_valid = hw.instance "handshake_buffer28" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone1: i0, in0_valid: %handshake_memory2.stDone1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork3.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer29.in0_ready, %handshake_buffer29.out0, %handshake_buffer29.out0_valid = hw.instance "handshake_buffer29" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone0: i0, in0_valid: %handshake_memory2.stDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork4.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer30.in0_ready, %handshake_buffer30.out0, %handshake_buffer30.out0_valid = hw.instance "handshake_buffer30" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory2.ldData0: i64, in0_valid: %handshake_memory2.ldData0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load0.dataFromMem_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork3.in0_ready, %handshake_fork3.out0, %handshake_fork3.out0_valid, %handshake_fork3.out1, %handshake_fork3.out1_valid = hw.instance "handshake_fork3" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer28.out0: i0, in0_valid: %handshake_buffer28.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer32.in0_ready: i1, out1_ready: %handshake_buffer31.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
  %handshake_buffer31.in0_ready, %handshake_buffer31.out0, %handshake_buffer31.out0_valid = hw.instance "handshake_buffer31" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out1: i0, in0_valid: %handshake_fork3.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join2.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer32.in0_ready, %handshake_buffer32.out0, %handshake_buffer32.out0_valid = hw.instance "handshake_buffer32" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out0: i0, in0_valid: %handshake_fork3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_fork4.in0_ready, %handshake_fork4.out0, %handshake_fork4.out0_valid, %handshake_fork4.out1, %handshake_fork4.out1_valid, %handshake_fork4.out2, %handshake_fork4.out2_valid = hw.instance "handshake_fork4" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer29.out0: i0, in0_valid: %handshake_buffer29.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer35.in0_ready: i1, out1_ready: %handshake_buffer34.in0_ready: i1, out2_ready: %handshake_buffer33.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
  %handshake_buffer33.in0_ready, %handshake_buffer33.out0, %handshake_buffer33.out0_valid = hw.instance "handshake_buffer33" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out2: i0, in0_valid: %handshake_fork4.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join1.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer34.in0_ready, %handshake_buffer34.out0, %handshake_buffer34.out0_valid = hw.instance "handshake_buffer34" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out1: i0, in0_valid: %handshake_fork4.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join2.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer35.in0_ready, %handshake_buffer35.out0, %handshake_buffer35.out0_valid = hw.instance "handshake_buffer35" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out0: i0, in0_valid: %handshake_fork4.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_join0.in0_ready, %handshake_join0.in1_ready, %handshake_join0.in2_ready, %handshake_join0.in3_ready, %handshake_join0.in4_ready, %handshake_join0.in5_ready, %handshake_join0.in6_ready, %handshake_join0.out0, %handshake_join0.out0_valid = hw.instance "handshake_join0" @handshake_join_7ins_1outs_ctrl(in0: %handshake_buffer4.out0: i0, in0_valid: %handshake_buffer4.out0_valid: i1, in1: %handshake_buffer35.out0: i0, in1_valid: %handshake_buffer35.out0_valid: i1, in2: %handshake_buffer32.out0: i0, in2_valid: %handshake_buffer32.out0_valid: i1, in3: %handshake_buffer27.out0: i0, in3_valid: %handshake_buffer27.out0_valid: i1, in4: %handshake_buffer23.out0: i0, in4_valid: %handshake_buffer23.out0_valid: i1, in5: %handshake_buffer21.out0: i0, in5_valid: %handshake_buffer21.out0_valid: i1, in6: %handshake_buffer17.out0: i0, in6_valid: %handshake_buffer17.out0_valid: i1, out0_ready: %handshake_buffer36.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, in4_ready: i1, in5_ready: i1, in6_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer36.in0_ready, %handshake_buffer36.out0, %handshake_buffer36.out0_valid = hw.instance "handshake_buffer36" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join0.out0: i0, in0_valid: %handshake_join0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_constant0.ctrl_ready, %handshake_constant0.out0, %handshake_constant0.out0_valid = hw.instance "handshake_constant0" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer14.out0: i0, ctrl_valid: %handshake_buffer14.out0_valid: i1, out0_ready: %handshake_buffer37.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer37.in0_ready, %handshake_buffer37.out0, %handshake_buffer37.out0_valid = hw.instance "handshake_buffer37" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant0.out0: i64, in0_valid: %handshake_constant0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux2.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant1.ctrl_ready, %handshake_constant1.out0, %handshake_constant1.out0_valid = hw.instance "handshake_constant1" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer13.out0: i0, ctrl_valid: %handshake_buffer13.out0_valid: i1, out0_ready: %handshake_buffer38.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer38.in0_ready, %handshake_buffer38.out0, %handshake_buffer38.out0_valid = hw.instance "handshake_buffer38" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant1.out0: i64, in0_valid: %handshake_constant1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork5.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork5.in0_ready, %handshake_fork5.out0, %handshake_fork5.out0_valid, %handshake_fork5.out1, %handshake_fork5.out1_valid = hw.instance "handshake_fork5" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer38.out0: i64, in0_valid: %handshake_buffer38.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer40.in0_ready: i1, out1_ready: %handshake_buffer39.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer39.in0_ready, %handshake_buffer39.out0, %handshake_buffer39.out0_valid = hw.instance "handshake_buffer39" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out1: i64, in0_valid: %handshake_fork5.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store2.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer40.in0_ready, %handshake_buffer40.out0, %handshake_buffer40.out0_valid = hw.instance "handshake_buffer40" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out0: i64, in0_valid: %handshake_fork5.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store5.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant2.ctrl_ready, %handshake_constant2.out0, %handshake_constant2.out0_valid = hw.instance "handshake_constant2" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer12.out0: i0, ctrl_valid: %handshake_buffer12.out0_valid: i1, out0_ready: %handshake_buffer41.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer41.in0_ready, %handshake_buffer41.out0, %handshake_buffer41.out0_valid = hw.instance "handshake_buffer41" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant2.out0: i64, in0_valid: %handshake_constant2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork6.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork6.in0_ready, %handshake_fork6.out0, %handshake_fork6.out0_valid, %handshake_fork6.out1, %handshake_fork6.out1_valid = hw.instance "handshake_fork6" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer41.out0: i64, in0_valid: %handshake_buffer41.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer43.in0_ready: i1, out1_ready: %handshake_buffer42.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer42.in0_ready, %handshake_buffer42.out0, %handshake_buffer42.out0_valid = hw.instance "handshake_buffer42" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out1: i64, in0_valid: %handshake_fork6.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store1.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer43.in0_ready, %handshake_buffer43.out0, %handshake_buffer43.out0_valid = hw.instance "handshake_buffer43" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out0: i64, in0_valid: %handshake_fork6.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store4.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant3.ctrl_ready, %handshake_constant3.out0, %handshake_constant3.out0_valid = hw.instance "handshake_constant3" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer11.out0: i0, ctrl_valid: %handshake_buffer11.out0_valid: i1, out0_ready: %handshake_buffer44.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer44.in0_ready, %handshake_buffer44.out0, %handshake_buffer44.out0_valid = hw.instance "handshake_buffer44" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant3.out0: i64, in0_valid: %handshake_constant3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork7.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork7.in0_ready, %handshake_fork7.out0, %handshake_fork7.out0_valid, %handshake_fork7.out1, %handshake_fork7.out1_valid = hw.instance "handshake_fork7" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer44.out0: i64, in0_valid: %handshake_buffer44.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer46.in0_ready: i1, out1_ready: %handshake_buffer45.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer45.in0_ready, %handshake_buffer45.out0, %handshake_buffer45.out0_valid = hw.instance "handshake_buffer45" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out1: i64, in0_valid: %handshake_fork7.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store0.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer46.in0_ready, %handshake_buffer46.out0, %handshake_buffer46.out0_valid = hw.instance "handshake_buffer46" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out0: i64, in0_valid: %handshake_fork7.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store3.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant4.ctrl_ready, %handshake_constant4.out0, %handshake_constant4.out0_valid = hw.instance "handshake_constant4" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer10.out0: i0, ctrl_valid: %handshake_buffer10.out0_valid: i1, out0_ready: %handshake_buffer47.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer47.in0_ready, %handshake_buffer47.out0, %handshake_buffer47.out0_valid = hw.instance "handshake_buffer47" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant4.out0: i64, in0_valid: %handshake_constant4.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork8.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork8.in0_ready, %handshake_fork8.out0, %handshake_fork8.out0_valid, %handshake_fork8.out1, %handshake_fork8.out1_valid = hw.instance "handshake_fork8" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer47.out0: i64, in0_valid: %handshake_buffer47.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer49.in0_ready: i1, out1_ready: %handshake_buffer48.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer48.in0_ready, %handshake_buffer48.out0, %handshake_buffer48.out0_valid = hw.instance "handshake_buffer48" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out1: i64, in0_valid: %handshake_fork8.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store2.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer49.in0_ready, %handshake_buffer49.out0, %handshake_buffer49.out0_valid = hw.instance "handshake_buffer49" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out0: i64, in0_valid: %handshake_fork8.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store5.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant5.ctrl_ready, %handshake_constant5.out0, %handshake_constant5.out0_valid = hw.instance "handshake_constant5" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer9.out0: i0, ctrl_valid: %handshake_buffer9.out0_valid: i1, out0_ready: %handshake_buffer50.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer50.in0_ready, %handshake_buffer50.out0, %handshake_buffer50.out0_valid = hw.instance "handshake_buffer50" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant5.out0: i64, in0_valid: %handshake_constant5.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork9.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork9.in0_ready, %handshake_fork9.out0, %handshake_fork9.out0_valid, %handshake_fork9.out1, %handshake_fork9.out1_valid, %handshake_fork9.out2, %handshake_fork9.out2_valid = hw.instance "handshake_fork9" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer50.out0: i64, in0_valid: %handshake_buffer50.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer53.in0_ready: i1, out1_ready: %handshake_buffer52.in0_ready: i1, out2_ready: %handshake_buffer51.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
  %handshake_buffer51.in0_ready, %handshake_buffer51.out0, %handshake_buffer51.out0_valid = hw.instance "handshake_buffer51" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out2: i64, in0_valid: %handshake_fork9.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store1.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer52.in0_ready, %handshake_buffer52.out0, %handshake_buffer52.out0_valid = hw.instance "handshake_buffer52" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out1: i64, in0_valid: %handshake_fork9.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store4.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer53.in0_ready, %handshake_buffer53.out0, %handshake_buffer53.out0_valid = hw.instance "handshake_buffer53" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out0: i64, in0_valid: %handshake_fork9.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux3.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant6.ctrl_ready, %handshake_constant6.out0, %handshake_constant6.out0_valid = hw.instance "handshake_constant6" @handshake_constant_c0_out_ui64(ctrl: %handshake_buffer8.out0: i0, ctrl_valid: %handshake_buffer8.out0_valid: i1, out0_ready: %handshake_buffer54.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer54.in0_ready, %handshake_buffer54.out0, %handshake_buffer54.out0_valid = hw.instance "handshake_buffer54" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant6.out0: i64, in0_valid: %handshake_constant6.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork10.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork10.in0_ready, %handshake_fork10.out0, %handshake_fork10.out0_valid, %handshake_fork10.out1, %handshake_fork10.out1_valid, %handshake_fork10.out2, %handshake_fork10.out2_valid = hw.instance "handshake_fork10" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer54.out0: i64, in0_valid: %handshake_buffer54.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer57.in0_ready: i1, out1_ready: %handshake_buffer56.in0_ready: i1, out2_ready: %handshake_buffer55.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
  %handshake_buffer55.in0_ready, %handshake_buffer55.out0, %handshake_buffer55.out0_valid = hw.instance "handshake_buffer55" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out2: i64, in0_valid: %handshake_fork10.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store0.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer56.in0_ready, %handshake_buffer56.out0, %handshake_buffer56.out0_valid = hw.instance "handshake_buffer56" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out1: i64, in0_valid: %handshake_fork10.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store3.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer57.in0_ready, %handshake_buffer57.out0, %handshake_buffer57.out0_valid = hw.instance "handshake_buffer57" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out0: i64, in0_valid: %handshake_fork10.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux1.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_store0.addrIn0_ready, %handshake_store0.dataIn_ready, %handshake_store0.ctrl_ready, %handshake_store0.dataToMem, %handshake_store0.dataToMem_valid, %handshake_store0.addrOut0, %handshake_store0.addrOut0_valid = hw.instance "handshake_store0" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer55.out0: i64, addrIn0_valid: %handshake_buffer55.out0_valid: i1, dataIn: %handshake_buffer45.out0: i64, dataIn_valid: %handshake_buffer45.out0_valid: i1, ctrl: %handshake_buffer7.out0: i0, ctrl_valid: %handshake_buffer7.out0_valid: i1, dataToMem_ready: %handshake_buffer59.in0_ready: i1, addrOut0_ready: %handshake_buffer58.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer58.in0_ready, %handshake_buffer58.out0, %handshake_buffer58.out0_valid = hw.instance "handshake_buffer58" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.addrOut0: i64, in0_valid: %handshake_store0.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer59.in0_ready, %handshake_buffer59.out0, %handshake_buffer59.out0_valid = hw.instance "handshake_buffer59" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.dataToMem: i64, in0_valid: %handshake_store0.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_join1.in0_ready, %handshake_join1.in1_ready, %handshake_join1.out0, %handshake_join1.out0_valid = hw.instance "handshake_join1" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer6.out0: i0, in0_valid: %handshake_buffer6.out0_valid: i1, in1: %handshake_buffer33.out0: i0, in1_valid: %handshake_buffer33.out0_valid: i1, out0_ready: %handshake_buffer60.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer60.in0_ready, %handshake_buffer60.out0, %handshake_buffer60.out0_valid = hw.instance "handshake_buffer60" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join1.out0: i0, in0_valid: %handshake_join1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_store1.addrIn0_ready, %handshake_store1.dataIn_ready, %handshake_store1.ctrl_ready, %handshake_store1.dataToMem, %handshake_store1.dataToMem_valid, %handshake_store1.addrOut0, %handshake_store1.addrOut0_valid = hw.instance "handshake_store1" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer51.out0: i64, addrIn0_valid: %handshake_buffer51.out0_valid: i1, dataIn: %handshake_buffer42.out0: i64, dataIn_valid: %handshake_buffer42.out0_valid: i1, ctrl: %handshake_buffer60.out0: i0, ctrl_valid: %handshake_buffer60.out0_valid: i1, dataToMem_ready: %handshake_buffer62.in0_ready: i1, addrOut0_ready: %handshake_buffer61.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer61.in0_ready, %handshake_buffer61.out0, %handshake_buffer61.out0_valid = hw.instance "handshake_buffer61" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.addrOut0: i64, in0_valid: %handshake_store1.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer62.in0_ready, %handshake_buffer62.out0, %handshake_buffer62.out0_valid = hw.instance "handshake_buffer62" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.dataToMem: i64, in0_valid: %handshake_store1.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stData1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_join2.in0_ready, %handshake_join2.in1_ready, %handshake_join2.in2_ready, %handshake_join2.out0, %handshake_join2.out0_valid = hw.instance "handshake_join2" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer5.out0: i0, in0_valid: %handshake_buffer5.out0_valid: i1, in1: %handshake_buffer34.out0: i0, in1_valid: %handshake_buffer34.out0_valid: i1, in2: %handshake_buffer31.out0: i0, in2_valid: %handshake_buffer31.out0_valid: i1, out0_ready: %handshake_buffer63.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer63.in0_ready, %handshake_buffer63.out0, %handshake_buffer63.out0_valid = hw.instance "handshake_buffer63" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join2.out0: i0, in0_valid: %handshake_join2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store2.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_store2.addrIn0_ready, %handshake_store2.dataIn_ready, %handshake_store2.ctrl_ready, %handshake_store2.dataToMem, %handshake_store2.dataToMem_valid, %handshake_store2.addrOut0, %handshake_store2.addrOut0_valid = hw.instance "handshake_store2" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer48.out0: i64, addrIn0_valid: %handshake_buffer48.out0_valid: i1, dataIn: %handshake_buffer39.out0: i64, dataIn_valid: %handshake_buffer39.out0_valid: i1, ctrl: %handshake_buffer63.out0: i0, ctrl_valid: %handshake_buffer63.out0_valid: i1, dataToMem_ready: %handshake_buffer65.in0_ready: i1, addrOut0_ready: %handshake_buffer64.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer64.in0_ready, %handshake_buffer64.out0, %handshake_buffer64.out0_valid = hw.instance "handshake_buffer64" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.addrOut0: i64, in0_valid: %handshake_store2.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer65.in0_ready, %handshake_buffer65.out0, %handshake_buffer65.out0_valid = hw.instance "handshake_buffer65" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.dataToMem: i64, in0_valid: %handshake_store2.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stData2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_store3.addrIn0_ready, %handshake_store3.dataIn_ready, %handshake_store3.ctrl_ready, %handshake_store3.dataToMem, %handshake_store3.dataToMem_valid, %handshake_store3.addrOut0, %handshake_store3.addrOut0_valid = hw.instance "handshake_store3" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer56.out0: i64, addrIn0_valid: %handshake_buffer56.out0_valid: i1, dataIn: %handshake_buffer46.out0: i64, dataIn_valid: %handshake_buffer46.out0_valid: i1, ctrl: %handshake_buffer3.out0: i0, ctrl_valid: %handshake_buffer3.out0_valid: i1, dataToMem_ready: %handshake_buffer67.in0_ready: i1, addrOut0_ready: %handshake_buffer66.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer66.in0_ready, %handshake_buffer66.out0, %handshake_buffer66.out0_valid = hw.instance "handshake_buffer66" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.addrOut0: i64, in0_valid: %handshake_store3.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer67.in0_ready, %handshake_buffer67.out0, %handshake_buffer67.out0_valid = hw.instance "handshake_buffer67" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.dataToMem: i64, in0_valid: %handshake_store3.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_join3.in0_ready, %handshake_join3.in1_ready, %handshake_join3.out0, %handshake_join3.out0_valid = hw.instance "handshake_join3" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer2.out0: i0, in0_valid: %handshake_buffer2.out0_valid: i1, in1: %handshake_buffer24.out0: i0, in1_valid: %handshake_buffer24.out0_valid: i1, out0_ready: %handshake_buffer68.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer68.in0_ready, %handshake_buffer68.out0, %handshake_buffer68.out0_valid = hw.instance "handshake_buffer68" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join3.out0: i0, in0_valid: %handshake_join3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store4.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_store4.addrIn0_ready, %handshake_store4.dataIn_ready, %handshake_store4.ctrl_ready, %handshake_store4.dataToMem, %handshake_store4.dataToMem_valid, %handshake_store4.addrOut0, %handshake_store4.addrOut0_valid = hw.instance "handshake_store4" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer52.out0: i64, addrIn0_valid: %handshake_buffer52.out0_valid: i1, dataIn: %handshake_buffer43.out0: i64, dataIn_valid: %handshake_buffer43.out0_valid: i1, ctrl: %handshake_buffer68.out0: i0, ctrl_valid: %handshake_buffer68.out0_valid: i1, dataToMem_ready: %handshake_buffer70.in0_ready: i1, addrOut0_ready: %handshake_buffer69.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer69.in0_ready, %handshake_buffer69.out0, %handshake_buffer69.out0_valid = hw.instance "handshake_buffer69" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.addrOut0: i64, in0_valid: %handshake_store4.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer70.in0_ready, %handshake_buffer70.out0, %handshake_buffer70.out0_valid = hw.instance "handshake_buffer70" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.dataToMem: i64, in0_valid: %handshake_store4.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stData1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_join4.in0_ready, %handshake_join4.in1_ready, %handshake_join4.in2_ready, %handshake_join4.out0, %handshake_join4.out0_valid = hw.instance "handshake_join4" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer1.out0: i0, in0_valid: %handshake_buffer1.out0_valid: i1, in1: %handshake_buffer25.out0: i0, in1_valid: %handshake_buffer25.out0_valid: i1, in2: %handshake_buffer22.out0: i0, in2_valid: %handshake_buffer22.out0_valid: i1, out0_ready: %handshake_buffer71.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer71.in0_ready, %handshake_buffer71.out0, %handshake_buffer71.out0_valid = hw.instance "handshake_buffer71" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join4.out0: i0, in0_valid: %handshake_join4.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store5.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_store5.addrIn0_ready, %handshake_store5.dataIn_ready, %handshake_store5.ctrl_ready, %handshake_store5.dataToMem, %handshake_store5.dataToMem_valid, %handshake_store5.addrOut0, %handshake_store5.addrOut0_valid = hw.instance "handshake_store5" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer49.out0: i64, addrIn0_valid: %handshake_buffer49.out0_valid: i1, dataIn: %handshake_buffer40.out0: i64, dataIn_valid: %handshake_buffer40.out0_valid: i1, ctrl: %handshake_buffer71.out0: i0, ctrl_valid: %handshake_buffer71.out0_valid: i1, dataToMem_ready: %handshake_buffer73.in0_ready: i1, addrOut0_ready: %handshake_buffer72.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer72.in0_ready, %handshake_buffer72.out0, %handshake_buffer72.out0_valid = hw.instance "handshake_buffer72" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.addrOut0: i64, in0_valid: %handshake_store5.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer73.in0_ready, %handshake_buffer73.out0, %handshake_buffer73.out0_valid = hw.instance "handshake_buffer73" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.dataToMem: i64, in0_valid: %handshake_store5.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stData2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer74.in0_ready, %handshake_buffer74.out0, %handshake_buffer74.out0_valid = hw.instance "handshake_buffer74" @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in0: %handshake_fork14.out0: i1, in0_valid: %handshake_fork14.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork11.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_fork11.in0_ready, %handshake_fork11.out0, %handshake_fork11.out0_valid, %handshake_fork11.out1, %handshake_fork11.out1_valid, %handshake_fork11.out2, %handshake_fork11.out2_valid, %handshake_fork11.out3, %handshake_fork11.out3_valid = hw.instance "handshake_fork11" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in0: %handshake_buffer74.out0: i1, in0_valid: %handshake_buffer74.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer78.in0_ready: i1, out1_ready: %handshake_buffer77.in0_ready: i1, out2_ready: %handshake_buffer76.in0_ready: i1, out3_ready: %handshake_buffer75.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1)
  %handshake_buffer75.in0_ready, %handshake_buffer75.out0, %handshake_buffer75.out0_valid = hw.instance "handshake_buffer75" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out3: i1, in0_valid: %handshake_fork11.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux0.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer76.in0_ready, %handshake_buffer76.out0, %handshake_buffer76.out0_valid = hw.instance "handshake_buffer76" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out2: i1, in0_valid: %handshake_fork11.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux1.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer77.in0_ready, %handshake_buffer77.out0, %handshake_buffer77.out0_valid = hw.instance "handshake_buffer77" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out1: i1, in0_valid: %handshake_fork11.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux2.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer78.in0_ready, %handshake_buffer78.out0, %handshake_buffer78.out0_valid = hw.instance "handshake_buffer78" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out0: i1, in0_valid: %handshake_fork11.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux3.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_mux0.select_ready, %handshake_mux0.in0_ready, %handshake_mux0.in1_ready, %handshake_mux0.out0, %handshake_mux0.out0_valid = hw.instance "handshake_mux0" @handshake_mux_in_ui1_3ins_1outs_ctrl(select: %handshake_buffer75.out0: i1, select_valid: %handshake_buffer75.out0_valid: i1, in0: %handshake_buffer36.out0: i0, in0_valid: %handshake_buffer36.out0_valid: i1, in1: %handshake_buffer107.out0: i0, in1_valid: %handshake_buffer107.out0_valid: i1, out0_ready: %handshake_buffer79.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer79.in0_ready, %handshake_buffer79.out0, %handshake_buffer79.out0_valid = hw.instance "handshake_buffer79" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_mux0.out0: i0, in0_valid: %handshake_mux0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br3.data_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_mux1.select_ready, %handshake_mux1.in0_ready, %handshake_mux1.in1_ready, %handshake_mux1.out0, %handshake_mux1.out0_valid = hw.instance "handshake_mux1" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer76.out0: i1, select_valid: %handshake_buffer76.out0_valid: i1, in0: %handshake_buffer57.out0: i64, in0_valid: %handshake_buffer57.out0_valid: i1, in1: %handshake_buffer115.out0: i64, in1_valid: %handshake_buffer115.out0_valid: i1, out0_ready: %handshake_buffer80.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer80.in0_ready, %handshake_buffer80.out0, %handshake_buffer80.out0_valid = hw.instance "handshake_buffer80" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux1.out0: i64, in0_valid: %handshake_mux1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork12.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork12.in0_ready, %handshake_fork12.out0, %handshake_fork12.out0_valid, %handshake_fork12.out1, %handshake_fork12.out1_valid = hw.instance "handshake_fork12" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer80.out0: i64, in0_valid: %handshake_buffer80.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer82.in0_ready: i1, out1_ready: %handshake_buffer81.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer81.in0_ready, %handshake_buffer81.out0, %handshake_buffer81.out0_valid = hw.instance "handshake_buffer81" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out1: i64, in0_valid: %handshake_fork12.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br0.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer82.in0_ready, %handshake_buffer82.out0, %handshake_buffer82.out0_valid = hw.instance "handshake_buffer82" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out0: i64, in0_valid: %handshake_fork12.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_cmpi0.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_mux2.select_ready, %handshake_mux2.in0_ready, %handshake_mux2.in1_ready, %handshake_mux2.out0, %handshake_mux2.out0_valid = hw.instance "handshake_mux2" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer77.out0: i1, select_valid: %handshake_buffer77.out0_valid: i1, in0: %handshake_buffer37.out0: i64, in0_valid: %handshake_buffer37.out0_valid: i1, in1: %handshake_buffer97.out0: i64, in1_valid: %handshake_buffer97.out0_valid: i1, out0_ready: %handshake_buffer83.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer83.in0_ready, %handshake_buffer83.out0, %handshake_buffer83.out0_valid = hw.instance "handshake_buffer83" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux2.out0: i64, in0_valid: %handshake_mux2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork13.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork13.in0_ready, %handshake_fork13.out0, %handshake_fork13.out0_valid, %handshake_fork13.out1, %handshake_fork13.out1_valid = hw.instance "handshake_fork13" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer83.out0: i64, in0_valid: %handshake_buffer83.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer85.in0_ready: i1, out1_ready: %handshake_buffer84.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer84.in0_ready, %handshake_buffer84.out0, %handshake_buffer84.out0_valid = hw.instance "handshake_buffer84" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out1: i64, in0_valid: %handshake_fork13.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br1.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer85.in0_ready, %handshake_buffer85.out0, %handshake_buffer85.out0_valid = hw.instance "handshake_buffer85" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out0: i64, in0_valid: %handshake_fork13.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_cmpi0.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_mux3.select_ready, %handshake_mux3.in0_ready, %handshake_mux3.in1_ready, %handshake_mux3.out0, %handshake_mux3.out0_valid = hw.instance "handshake_mux3" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer78.out0: i1, select_valid: %handshake_buffer78.out0_valid: i1, in0: %handshake_buffer53.out0: i64, in0_valid: %handshake_buffer53.out0_valid: i1, in1: %handshake_buffer100.out0: i64, in1_valid: %handshake_buffer100.out0_valid: i1, out0_ready: %handshake_buffer86.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer86.in0_ready, %handshake_buffer86.out0, %handshake_buffer86.out0_valid = hw.instance "handshake_buffer86" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux3.out0: i64, in0_valid: %handshake_mux3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br2.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %arith_cmpi0.in0_ready, %arith_cmpi0.in1_ready, %arith_cmpi0.out0, %arith_cmpi0.out0_valid = hw.instance "arith_cmpi0" @arith_cmpi_in_ui64_ui64_out_ui1_slt(in0: %handshake_buffer82.out0: i64, in0_valid: %handshake_buffer82.out0_valid: i1, in1: %handshake_buffer85.out0: i64, in1_valid: %handshake_buffer85.out0_valid: i1, out0_ready: %handshake_buffer87.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer87.in0_ready, %handshake_buffer87.out0, %handshake_buffer87.out0_valid = hw.instance "handshake_buffer87" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %arith_cmpi0.out0: i1, in0_valid: %arith_cmpi0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork14.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_fork14.in0_ready, %handshake_fork14.out0, %handshake_fork14.out0_valid, %handshake_fork14.out1, %handshake_fork14.out1_valid, %handshake_fork14.out2, %handshake_fork14.out2_valid, %handshake_fork14.out3, %handshake_fork14.out3_valid, %handshake_fork14.out4, %handshake_fork14.out4_valid = hw.instance "handshake_fork14" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in0: %handshake_buffer87.out0: i1, in0_valid: %handshake_buffer87.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer74.in0_ready: i1, out1_ready: %handshake_buffer91.in0_ready: i1, out2_ready: %handshake_buffer90.in0_ready: i1, out3_ready: %handshake_buffer89.in0_ready: i1, out4_ready: %handshake_buffer88.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1, out4: i1, out4_valid: i1)
  %handshake_buffer88.in0_ready, %handshake_buffer88.out0, %handshake_buffer88.out0_valid = hw.instance "handshake_buffer88" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out4: i1, in0_valid: %handshake_fork14.out4_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br0.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer89.in0_ready, %handshake_buffer89.out0, %handshake_buffer89.out0_valid = hw.instance "handshake_buffer89" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out3: i1, in0_valid: %handshake_fork14.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br1.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer90.in0_ready, %handshake_buffer90.out0, %handshake_buffer90.out0_valid = hw.instance "handshake_buffer90" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out2: i1, in0_valid: %handshake_fork14.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br2.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer91.in0_ready, %handshake_buffer91.out0, %handshake_buffer91.out0_valid = hw.instance "handshake_buffer91" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out1: i1, in0_valid: %handshake_fork14.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br3.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_cond_br0.cond_ready, %handshake_cond_br0.data_ready, %handshake_cond_br0.outTrue, %handshake_cond_br0.outTrue_valid, %handshake_cond_br0.outFalse, %handshake_cond_br0.outFalse_valid = hw.instance "handshake_cond_br0" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer88.out0: i1, cond_valid: %handshake_buffer88.out0_valid: i1, data: %handshake_buffer81.out0: i64, data_valid: %handshake_buffer81.out0_valid: i1, outTrue_ready: %handshake_buffer92.in0_ready: i1, outFalse_ready: %handshake_sink0.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
  %handshake_buffer92.in0_ready, %handshake_buffer92.out0, %handshake_buffer92.out0_valid = hw.instance "handshake_buffer92" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br0.outTrue: i64, in0_valid: %handshake_cond_br0.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork15.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_sink0.in0_ready = hw.instance "handshake_sink0" @handshake_sink_in_ui64(in0: %handshake_cond_br0.outFalse: i64, in0_valid: %handshake_cond_br0.outFalse_valid: i1) -> (in0_ready: i1)
  %handshake_fork15.in0_ready, %handshake_fork15.out0, %handshake_fork15.out0_valid, %handshake_fork15.out1, %handshake_fork15.out1_valid, %handshake_fork15.out2, %handshake_fork15.out2_valid, %handshake_fork15.out3, %handshake_fork15.out3_valid = hw.instance "handshake_fork15" @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in0: %handshake_buffer92.out0: i64, in0_valid: %handshake_buffer92.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer96.in0_ready: i1, out1_ready: %handshake_buffer95.in0_ready: i1, out2_ready: %handshake_buffer94.in0_ready: i1, out3_ready: %handshake_buffer93.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1, out3: i64, out3_valid: i1)
  %handshake_buffer93.in0_ready, %handshake_buffer93.out0, %handshake_buffer93.out0_valid = hw.instance "handshake_buffer93" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out3: i64, in0_valid: %handshake_fork15.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store6.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer94.in0_ready, %handshake_buffer94.out0, %handshake_buffer94.out0_valid = hw.instance "handshake_buffer94" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out2: i64, in0_valid: %handshake_fork15.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load1.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer95.in0_ready, %handshake_buffer95.out0, %handshake_buffer95.out0_valid = hw.instance "handshake_buffer95" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out1: i64, in0_valid: %handshake_fork15.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load0.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer96.in0_ready, %handshake_buffer96.out0, %handshake_buffer96.out0_valid = hw.instance "handshake_buffer96" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out0: i64, in0_valid: %handshake_fork15.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi1.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_cond_br1.cond_ready, %handshake_cond_br1.data_ready, %handshake_cond_br1.outTrue, %handshake_cond_br1.outTrue_valid, %handshake_cond_br1.outFalse, %handshake_cond_br1.outFalse_valid = hw.instance "handshake_cond_br1" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer89.out0: i1, cond_valid: %handshake_buffer89.out0_valid: i1, data: %handshake_buffer84.out0: i64, data_valid: %handshake_buffer84.out0_valid: i1, outTrue_ready: %handshake_buffer97.in0_ready: i1, outFalse_ready: %handshake_sink1.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
  %handshake_buffer97.in0_ready, %handshake_buffer97.out0, %handshake_buffer97.out0_valid = hw.instance "handshake_buffer97" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br1.outTrue: i64, in0_valid: %handshake_cond_br1.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux2.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_sink1.in0_ready = hw.instance "handshake_sink1" @handshake_sink_in_ui64(in0: %handshake_cond_br1.outFalse: i64, in0_valid: %handshake_cond_br1.outFalse_valid: i1) -> (in0_ready: i1)
  %handshake_cond_br2.cond_ready, %handshake_cond_br2.data_ready, %handshake_cond_br2.outTrue, %handshake_cond_br2.outTrue_valid, %handshake_cond_br2.outFalse, %handshake_cond_br2.outFalse_valid = hw.instance "handshake_cond_br2" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer90.out0: i1, cond_valid: %handshake_buffer90.out0_valid: i1, data: %handshake_buffer86.out0: i64, data_valid: %handshake_buffer86.out0_valid: i1, outTrue_ready: %handshake_buffer98.in0_ready: i1, outFalse_ready: %handshake_sink2.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
  %handshake_buffer98.in0_ready, %handshake_buffer98.out0, %handshake_buffer98.out0_valid = hw.instance "handshake_buffer98" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br2.outTrue: i64, in0_valid: %handshake_cond_br2.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork16.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_sink2.in0_ready = hw.instance "handshake_sink2" @handshake_sink_in_ui64(in0: %handshake_cond_br2.outFalse: i64, in0_valid: %handshake_cond_br2.outFalse_valid: i1) -> (in0_ready: i1)
  %handshake_fork16.in0_ready, %handshake_fork16.out0, %handshake_fork16.out0_valid, %handshake_fork16.out1, %handshake_fork16.out1_valid = hw.instance "handshake_fork16" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer98.out0: i64, in0_valid: %handshake_buffer98.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer100.in0_ready: i1, out1_ready: %handshake_buffer99.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer99.in0_ready, %handshake_buffer99.out0, %handshake_buffer99.out0_valid = hw.instance "handshake_buffer99" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out1: i64, in0_valid: %handshake_fork16.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi1.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer100.in0_ready, %handshake_buffer100.out0, %handshake_buffer100.out0_valid = hw.instance "handshake_buffer100" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out0: i64, in0_valid: %handshake_fork16.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux3.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_cond_br3.cond_ready, %handshake_cond_br3.data_ready, %handshake_cond_br3.outTrue, %handshake_cond_br3.outTrue_valid, %handshake_cond_br3.outFalse, %handshake_cond_br3.outFalse_valid = hw.instance "handshake_cond_br3" @handshake_cond_br_in_ui1_2ins_2outs_ctrl(cond: %handshake_buffer91.out0: i1, cond_valid: %handshake_buffer91.out0_valid: i1, data: %handshake_buffer79.out0: i0, data_valid: %handshake_buffer79.out0_valid: i1, outTrue_ready: %handshake_buffer102.in0_ready: i1, outFalse_ready: %handshake_buffer101.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i0, outTrue_valid: i1, outFalse: i0, outFalse_valid: i1)
  %handshake_buffer101.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid = hw.instance "handshake_buffer101" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outFalse: i0, in0_valid: %handshake_cond_br3.outFalse_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %out0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer102.in0_ready, %handshake_buffer102.out0, %handshake_buffer102.out0_valid = hw.instance "handshake_buffer102" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outTrue: i0, in0_valid: %handshake_cond_br3.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork17.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_fork17.in0_ready, %handshake_fork17.out0, %handshake_fork17.out0_valid, %handshake_fork17.out1, %handshake_fork17.out1_valid, %handshake_fork17.out2, %handshake_fork17.out2_valid, %handshake_fork17.out3, %handshake_fork17.out3_valid = hw.instance "handshake_fork17" @handshake_fork_1ins_4outs_ctrl(in0: %handshake_buffer102.out0: i0, in0_valid: %handshake_buffer102.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer106.in0_ready: i1, out1_ready: %handshake_buffer105.in0_ready: i1, out2_ready: %handshake_buffer104.in0_ready: i1, out3_ready: %handshake_buffer103.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1)
  %handshake_buffer103.in0_ready, %handshake_buffer103.out0, %handshake_buffer103.out0_valid = hw.instance "handshake_buffer103" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out3: i0, in0_valid: %handshake_fork17.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer104.in0_ready, %handshake_buffer104.out0, %handshake_buffer104.out0_valid = hw.instance "handshake_buffer104" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out2: i0, in0_valid: %handshake_fork17.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer105.in0_ready, %handshake_buffer105.out0, %handshake_buffer105.out0_valid = hw.instance "handshake_buffer105" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out1: i0, in0_valid: %handshake_fork17.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer106.in0_ready, %handshake_buffer106.out0, %handshake_buffer106.out0_valid = hw.instance "handshake_buffer106" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out0: i0, in0_valid: %handshake_fork17.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store6.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_join5.in0_ready, %handshake_join5.in1_ready, %handshake_join5.in2_ready, %handshake_join5.in3_ready, %handshake_join5.out0, %handshake_join5.out0_valid = hw.instance "handshake_join5" @handshake_join_4ins_1outs_ctrl(in0: %handshake_buffer105.out0: i0, in0_valid: %handshake_buffer105.out0_valid: i1, in1: %handshake_buffer26.out0: i0, in1_valid: %handshake_buffer26.out0_valid: i1, in2: %handshake_buffer16.out0: i0, in2_valid: %handshake_buffer16.out0_valid: i1, in3: %handshake_buffer15.out0: i0, in3_valid: %handshake_buffer15.out0_valid: i1, out0_ready: %handshake_buffer107.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer107.in0_ready, %handshake_buffer107.out0, %handshake_buffer107.out0_valid = hw.instance "handshake_buffer107" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join5.out0: i0, in0_valid: %handshake_join5.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux0.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_load0.addrIn0_ready, %handshake_load0.dataFromMem_ready, %handshake_load0.ctrl_ready, %handshake_load0.dataOut, %handshake_load0.dataOut_valid, %handshake_load0.addrOut0, %handshake_load0.addrOut0_valid = hw.instance "handshake_load0" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer95.out0: i64, addrIn0_valid: %handshake_buffer95.out0_valid: i1, dataFromMem: %handshake_buffer30.out0: i64, dataFromMem_valid: %handshake_buffer30.out0_valid: i1, ctrl: %handshake_buffer103.out0: i0, ctrl_valid: %handshake_buffer103.out0_valid: i1, dataOut_ready: %handshake_buffer109.in0_ready: i1, addrOut0_ready: %handshake_buffer108.in0_ready: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer108.in0_ready, %handshake_buffer108.out0, %handshake_buffer108.out0_valid = hw.instance "handshake_buffer108" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.addrOut0: i64, in0_valid: %handshake_load0.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.ldAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer109.in0_ready, %handshake_buffer109.out0, %handshake_buffer109.out0_valid = hw.instance "handshake_buffer109" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.dataOut: i64, in0_valid: %handshake_load0.dataOut_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi0.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_load1.addrIn0_ready, %handshake_load1.dataFromMem_ready, %handshake_load1.ctrl_ready, %handshake_load1.dataOut, %handshake_load1.dataOut_valid, %handshake_load1.addrOut0, %handshake_load1.addrOut0_valid = hw.instance "handshake_load1" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer94.out0: i64, addrIn0_valid: %handshake_buffer94.out0_valid: i1, dataFromMem: %handshake_buffer20.out0: i64, dataFromMem_valid: %handshake_buffer20.out0_valid: i1, ctrl: %handshake_buffer104.out0: i0, ctrl_valid: %handshake_buffer104.out0_valid: i1, dataOut_ready: %handshake_buffer111.in0_ready: i1, addrOut0_ready: %handshake_buffer110.in0_ready: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer110.in0_ready, %handshake_buffer110.out0, %handshake_buffer110.out0_valid = hw.instance "handshake_buffer110" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.addrOut0: i64, in0_valid: %handshake_load1.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.ldAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer111.in0_ready, %handshake_buffer111.out0, %handshake_buffer111.out0_valid = hw.instance "handshake_buffer111" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.dataOut: i64, in0_valid: %handshake_load1.dataOut_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi0.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %arith_addi0.in0_ready, %arith_addi0.in1_ready, %arith_addi0.out0, %arith_addi0.out0_valid = hw.instance "arith_addi0" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer109.out0: i64, in0_valid: %handshake_buffer109.out0_valid: i1, in1: %handshake_buffer111.out0: i64, in1_valid: %handshake_buffer111.out0_valid: i1, out0_ready: %handshake_buffer112.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer112.in0_ready, %handshake_buffer112.out0, %handshake_buffer112.out0_valid = hw.instance "handshake_buffer112" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi0.out0: i64, in0_valid: %arith_addi0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store6.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_store6.addrIn0_ready, %handshake_store6.dataIn_ready, %handshake_store6.ctrl_ready, %handshake_store6.dataToMem, %handshake_store6.dataToMem_valid, %handshake_store6.addrOut0, %handshake_store6.addrOut0_valid = hw.instance "handshake_store6" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer93.out0: i64, addrIn0_valid: %handshake_buffer93.out0_valid: i1, dataIn: %handshake_buffer112.out0: i64, dataIn_valid: %handshake_buffer112.out0_valid: i1, ctrl: %handshake_buffer106.out0: i0, ctrl_valid: %handshake_buffer106.out0_valid: i1, dataToMem_ready: %handshake_buffer114.in0_ready: i1, addrOut0_ready: %handshake_buffer113.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer113.in0_ready, %handshake_buffer113.out0, %handshake_buffer113.out0_valid = hw.instance "handshake_buffer113" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.addrOut0: i64, in0_valid: %handshake_store6.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory0.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer114.in0_ready, %handshake_buffer114.out0, %handshake_buffer114.out0_valid = hw.instance "handshake_buffer114" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.dataToMem: i64, in0_valid: %handshake_store6.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory0.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %arith_addi1.in0_ready, %arith_addi1.in1_ready, %arith_addi1.out0, %arith_addi1.out0_valid = hw.instance "arith_addi1" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer96.out0: i64, in0_valid: %handshake_buffer96.out0_valid: i1, in1: %handshake_buffer99.out0: i64, in1_valid: %handshake_buffer99.out0_valid: i1, out0_ready: %handshake_buffer115.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer115.in0_ready, %handshake_buffer115.out0, %handshake_buffer115.out0_valid = hw.instance "handshake_buffer115" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi1.out0: i64, in0_valid: %arith_addi1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux1.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  hw.output %handshake_buffer0.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid : i1, i0, i1
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
module {
  hw.module @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
    %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.or %1, %8 : i1
    %3 = comb.mux %2, %in0_valid, %0 : i1
    %4 = comb.mux %2, %in0, %5 : i0
    %data0_reg = sv.reg sym @data0_reg : !hw.inout<i0> 
    %5 = sv.read_inout %data0_reg : !hw.inout<i0>
    %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
    %6 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %7 = comb.mux %6, %6, %0 : i1
    %8 = comb.xor %6, %true : i1
    %9 = comb.xor %21, %true : i1
    %10 = comb.and %9, %8 : i1
    %11 = comb.mux %10, %0, %6 : i1
    %12 = comb.and %21, %6 : i1
    %13 = comb.xor %12, %true : i1
    %14 = comb.and %13, %11 : i1
    %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i0> 
    %15 = sv.read_inout %ctrl_data0_reg : !hw.inout<i0>
    %16 = comb.mux %6, %15, %5 : i0
    %17 = comb.mux %10, %5, %15 : i0
    %18 = comb.mux %12, %c0_i0, %17 : i0
    %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
    %19 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %20 = comb.xor %19, %true : i1
    %21 = comb.or %20, %27 : i1
    %22 = comb.mux %21, %7, %19 : i1
    %23 = comb.mux %21, %16, %24 : i0
    %data1_reg = sv.reg sym @data1_reg : !hw.inout<i0> 
    %24 = sv.read_inout %data1_reg : !hw.inout<i0>
    %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
    %25 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %26 = comb.mux %25, %25, %19 : i1
    %27 = comb.xor %25, %true : i1
    %28 = comb.xor %out0_ready, %true : i1
    %29 = comb.and %28, %27 : i1
    %30 = comb.mux %29, %19, %25 : i1
    %31 = comb.and %out0_ready, %25 : i1
    %32 = comb.xor %31, %true : i1
    %33 = comb.and %32, %30 : i1
    %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i0> 
    %34 = sv.read_inout %ctrl_data1_reg : !hw.inout<i0>
    sv.alwaysff(posedge %clock) {
      sv.passign %valid0_reg, %3 : i1
      sv.passign %data0_reg, %4 : i0
      sv.passign %ready0_reg, %14 : i1
      sv.passign %ctrl_data0_reg, %18 : i0
      sv.passign %valid1_reg, %22 : i1
      sv.passign %data1_reg, %23 : i0
      sv.passign %ready1_reg, %33 : i1
      sv.passign %ctrl_data1_reg, %37 : i0
    }(syncreset : posedge %reset) {
      sv.passign %valid0_reg, %false : i1
      sv.passign %data0_reg, %c0_i0 : i0
      sv.passign %ready0_reg, %false : i1
      sv.passign %ctrl_data0_reg, %c0_i0 : i0
      sv.passign %valid1_reg, %false : i1
      sv.passign %data1_reg, %c0_i0 : i0
      sv.passign %ready1_reg, %false : i1
      sv.passign %ctrl_data1_reg, %c0_i0 : i0
    }
    %35 = comb.mux %25, %34, %24 : i0
    %36 = comb.mux %29, %24, %34 : i0
    %37 = comb.mux %31, %c0_i0, %36 : i0
    hw.output %2, %35, %26 : i1, i0, i1
  }
  hw.module @handshake_fork_1ins_14outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, in %out5_ready : i1, in %out6_ready : i1, in %out7_ready : i1, in %out8_ready : i1, in %out9_ready : i1, in %out10_ready : i1, in %out11_ready : i1, in %out12_ready : i1, in %out13_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1, out out4 : i0, out out4_valid : i1, out out5 : i0, out out5_valid : i1, out out6 : i0, out out6_valid : i1, out out7 : i0, out out7_valid : i1, out out8 : i0, out out8_valid : i1, out out9 : i0, out out9_valid : i1, out out10 : i0, out out10_valid : i1, out out11 : i0, out out11_valid : i1, out out12 : i0, out out12_valid : i1, out out13 : i0, out out13_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %98, %true : i1
    %1 = comb.and %6, %0 : i1
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %3 = comb.xor %2, %true : i1
    %4 = comb.and %3, %in0_valid : i1
    %5 = comb.and %out0_ready, %4 : i1
    %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
    %7 = comb.xor %98, %true : i1
    %8 = comb.and %13, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %in0_valid : i1
    %12 = comb.and %out1_ready, %11 : i1
    %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
    %14 = comb.xor %98, %true : i1
    %15 = comb.and %20, %14 : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %17 = comb.xor %16, %true : i1
    %18 = comb.and %17, %in0_valid : i1
    %19 = comb.and %out2_ready, %18 : i1
    %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
    %21 = comb.xor %98, %true : i1
    %22 = comb.and %27, %21 : i1
    %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
    %23 = sv.read_inout %emitted_3 : !hw.inout<i1>
    %24 = comb.xor %23, %true : i1
    %25 = comb.and %24, %in0_valid : i1
    %26 = comb.and %out3_ready, %25 : i1
    %27 = comb.or %26, %23 {sv.namehint = "done3"} : i1
    %28 = comb.xor %98, %true : i1
    %29 = comb.and %34, %28 : i1
    %emitted_4 = sv.reg sym @emitted_4 : !hw.inout<i1> 
    %30 = sv.read_inout %emitted_4 : !hw.inout<i1>
    %31 = comb.xor %30, %true : i1
    %32 = comb.and %31, %in0_valid : i1
    %33 = comb.and %out4_ready, %32 : i1
    %34 = comb.or %33, %30 {sv.namehint = "done4"} : i1
    %35 = comb.xor %98, %true : i1
    %36 = comb.and %41, %35 : i1
    %emitted_5 = sv.reg sym @emitted_5 : !hw.inout<i1> 
    %37 = sv.read_inout %emitted_5 : !hw.inout<i1>
    %38 = comb.xor %37, %true : i1
    %39 = comb.and %38, %in0_valid : i1
    %40 = comb.and %out5_ready, %39 : i1
    %41 = comb.or %40, %37 {sv.namehint = "done5"} : i1
    %42 = comb.xor %98, %true : i1
    %43 = comb.and %48, %42 : i1
    %emitted_6 = sv.reg sym @emitted_6 : !hw.inout<i1> 
    %44 = sv.read_inout %emitted_6 : !hw.inout<i1>
    %45 = comb.xor %44, %true : i1
    %46 = comb.and %45, %in0_valid : i1
    %47 = comb.and %out6_ready, %46 : i1
    %48 = comb.or %47, %44 {sv.namehint = "done6"} : i1
    %49 = comb.xor %98, %true : i1
    %50 = comb.and %55, %49 : i1
    %emitted_7 = sv.reg sym @emitted_7 : !hw.inout<i1> 
    %51 = sv.read_inout %emitted_7 : !hw.inout<i1>
    %52 = comb.xor %51, %true : i1
    %53 = comb.and %52, %in0_valid : i1
    %54 = comb.and %out7_ready, %53 : i1
    %55 = comb.or %54, %51 {sv.namehint = "done7"} : i1
    %56 = comb.xor %98, %true : i1
    %57 = comb.and %62, %56 : i1
    %emitted_8 = sv.reg sym @emitted_8 : !hw.inout<i1> 
    %58 = sv.read_inout %emitted_8 : !hw.inout<i1>
    %59 = comb.xor %58, %true : i1
    %60 = comb.and %59, %in0_valid : i1
    %61 = comb.and %out8_ready, %60 : i1
    %62 = comb.or %61, %58 {sv.namehint = "done8"} : i1
    %63 = comb.xor %98, %true : i1
    %64 = comb.and %69, %63 : i1
    %emitted_9 = sv.reg sym @emitted_9 : !hw.inout<i1> 
    %65 = sv.read_inout %emitted_9 : !hw.inout<i1>
    %66 = comb.xor %65, %true : i1
    %67 = comb.and %66, %in0_valid : i1
    %68 = comb.and %out9_ready, %67 : i1
    %69 = comb.or %68, %65 {sv.namehint = "done9"} : i1
    %70 = comb.xor %98, %true : i1
    %71 = comb.and %76, %70 : i1
    %emitted_10 = sv.reg sym @emitted_10 : !hw.inout<i1> 
    %72 = sv.read_inout %emitted_10 : !hw.inout<i1>
    %73 = comb.xor %72, %true : i1
    %74 = comb.and %73, %in0_valid : i1
    %75 = comb.and %out10_ready, %74 : i1
    %76 = comb.or %75, %72 {sv.namehint = "done10"} : i1
    %77 = comb.xor %98, %true : i1
    %78 = comb.and %83, %77 : i1
    %emitted_11 = sv.reg sym @emitted_11 : !hw.inout<i1> 
    %79 = sv.read_inout %emitted_11 : !hw.inout<i1>
    %80 = comb.xor %79, %true : i1
    %81 = comb.and %80, %in0_valid : i1
    %82 = comb.and %out11_ready, %81 : i1
    %83 = comb.or %82, %79 {sv.namehint = "done11"} : i1
    %84 = comb.xor %98, %true : i1
    %85 = comb.and %90, %84 : i1
    %emitted_12 = sv.reg sym @emitted_12 : !hw.inout<i1> 
    %86 = sv.read_inout %emitted_12 : !hw.inout<i1>
    %87 = comb.xor %86, %true : i1
    %88 = comb.and %87, %in0_valid : i1
    %89 = comb.and %out12_ready, %88 : i1
    %90 = comb.or %89, %86 {sv.namehint = "done12"} : i1
    %91 = comb.xor %98, %true : i1
    %92 = comb.and %97, %91 : i1
    %emitted_13 = sv.reg sym @emitted_13 : !hw.inout<i1> 
    %93 = sv.read_inout %emitted_13 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_0, %1 : i1
      sv.passign %emitted_1, %8 : i1
      sv.passign %emitted_2, %15 : i1
      sv.passign %emitted_3, %22 : i1
      sv.passign %emitted_4, %29 : i1
      sv.passign %emitted_5, %36 : i1
      sv.passign %emitted_6, %43 : i1
      sv.passign %emitted_7, %50 : i1
      sv.passign %emitted_8, %57 : i1
      sv.passign %emitted_9, %64 : i1
      sv.passign %emitted_10, %71 : i1
      sv.passign %emitted_11, %78 : i1
      sv.passign %emitted_12, %85 : i1
      sv.passign %emitted_13, %92 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
      sv.passign %emitted_3, %false : i1
      sv.passign %emitted_4, %false : i1
      sv.passign %emitted_5, %false : i1
      sv.passign %emitted_6, %false : i1
      sv.passign %emitted_7, %false : i1
      sv.passign %emitted_8, %false : i1
      sv.passign %emitted_9, %false : i1
      sv.passign %emitted_10, %false : i1
      sv.passign %emitted_11, %false : i1
      sv.passign %emitted_12, %false : i1
      sv.passign %emitted_13, %false : i1
    }
    %94 = comb.xor %93, %true : i1
    %95 = comb.and %94, %in0_valid : i1
    %96 = comb.and %out13_ready, %95 : i1
    %97 = comb.or %96, %93 {sv.namehint = "done13"} : i1
    %98 = comb.and %6, %13, %20, %27, %34, %41, %48, %55, %62, %69, %76, %83, %90, %97 {sv.namehint = "allDone"} : i1
    hw.output %98, %in0, %4, %in0, %11, %in0, %18, %in0, %25, %in0, %32, %in0, %39, %in0, %46, %in0, %53, %in0, %60, %in0, %67, %in0, %74, %in0, %81, %in0, %88, %in0, %95 : i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id2(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %clock : i1, in %reset : i1, in %stDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stDone0 : i0, out stDone0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_2 = sv.reg : !hw.inout<uarray<3xi64>> 
    %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
    %0 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.if %4 {
        %7 = sv.array_index_inout %_handshake_memory_2[%6] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %7, %stData0 : i64
      }
      sv.passign %writeValidBuffer, %5 : i1
    }(syncreset : posedge %reset) {
      sv.passign %writeValidBuffer, %false : i1
    }
    %1 = comb.and %stDone0_ready, %0 {sv.namehint = "storeCompleted"} : i1
    %2 = comb.xor %0, %true : i1
    %3 = comb.or %2, %1 {sv.namehint = "emptyOrComplete"} : i1
    %4 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
    %5 = comb.mux %3, %4, %0 : i1
    %6 = comb.extract %stAddr0 from 0 : (i64) -> i2
    hw.output %3, %3, %c0_i0, %0 : i1, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id1(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : i1, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_1 = sv.reg : !hw.inout<uarray<3xi64>> 
    %0 = comb.extract %ldAddr0 from 0 : (i64) -> i2
    %1 = sv.array_index_inout %_handshake_memory_1[%0] : !hw.inout<uarray<3xi64>>, i2
    %2 = sv.read_inout %1 : !hw.inout<i64>
    %3 = comb.xor %17, %true : i1
    %4 = comb.and %9, %3 : i1
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %5 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %ldAddr0_valid : i1
    %8 = comb.and %ldData0_ready, %7 : i1
    %9 = comb.or %8, %5 {sv.namehint = "done0"} : i1
    %10 = comb.xor %17, %true : i1
    %11 = comb.and %16, %10 : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %12 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %13 = comb.xor %12, %true : i1
    %14 = comb.and %13, %ldAddr0_valid : i1
    %15 = comb.and %ldDone0_ready, %14 : i1
    %16 = comb.or %15, %12 {sv.namehint = "done1"} : i1
    %17 = comb.and %9, %16 {sv.namehint = "allDone"} : i1
    %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
    %18 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    %19 = comb.and %stDone0_ready, %18 {sv.namehint = "storeCompleted"} : i1
    %20 = comb.xor %18, %true : i1
    %21 = comb.or %20, %19 {sv.namehint = "emptyOrComplete"} : i1
    %22 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
    %23 = comb.mux %21, %22, %18 : i1
    %24 = comb.extract %stAddr0 from 0 : (i64) -> i2
    %writeValidBuffer_0 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
    %25 = sv.read_inout %writeValidBuffer_0 : !hw.inout<i1>
    %26 = comb.and %stDone1_ready, %25 {sv.namehint = "storeCompleted"} : i1
    %27 = comb.xor %25, %true : i1
    %28 = comb.or %27, %26 {sv.namehint = "emptyOrComplete"} : i1
    %29 = comb.and %stAddr1_valid, %stData1_valid {sv.namehint = "writeValid"} : i1
    %30 = comb.mux %28, %29, %25 : i1
    %31 = comb.extract %stAddr1 from 0 : (i64) -> i2
    %writeValidBuffer_1 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
    %32 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.if %36 {
        %39 = sv.array_index_inout %_handshake_memory_1[%38] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %39, %stData2 : i64
      }
      sv.if %29 {
        %39 = sv.array_index_inout %_handshake_memory_1[%31] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %39, %stData1 : i64
      }
      sv.if %22 {
        %39 = sv.array_index_inout %_handshake_memory_1[%24] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %39, %stData0 : i64
      }
      sv.passign %emitted_0, %4 : i1
      sv.passign %emitted_1, %11 : i1
      sv.passign %writeValidBuffer, %23 : i1
      sv.passign %writeValidBuffer_0, %30 : i1
      sv.passign %writeValidBuffer_1, %37 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %writeValidBuffer, %false : i1
      sv.passign %writeValidBuffer_0, %false : i1
      sv.passign %writeValidBuffer_1, %false : i1
    }
    %33 = comb.and %stDone2_ready, %32 {sv.namehint = "storeCompleted"} : i1
    %34 = comb.xor %32, %true : i1
    %35 = comb.or %34, %33 {sv.namehint = "emptyOrComplete"} : i1
    %36 = comb.and %stAddr2_valid, %stData2_valid {sv.namehint = "writeValid"} : i1
    %37 = comb.mux %35, %36, %32 : i1
    %38 = comb.extract %stAddr2 from 0 : (i64) -> i2
    hw.output %21, %21, %28, %28, %35, %35, %17, %2, %7, %c0_i0, %18, %c0_i0, %25, %c0_i0, %32, %c0_i0, %14 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_buffer_in_ui64_out_ui64_2slots_seq(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i64 = hw.constant 0 : i64
    %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
    %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.or %1, %8 : i1
    %3 = comb.mux %2, %in0_valid, %0 : i1
    %4 = comb.mux %2, %in0, %5 : i64
    %data0_reg = sv.reg sym @data0_reg : !hw.inout<i64> 
    %5 = sv.read_inout %data0_reg : !hw.inout<i64>
    %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
    %6 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %7 = comb.mux %6, %6, %0 : i1
    %8 = comb.xor %6, %true : i1
    %9 = comb.xor %21, %true : i1
    %10 = comb.and %9, %8 : i1
    %11 = comb.mux %10, %0, %6 : i1
    %12 = comb.and %21, %6 : i1
    %13 = comb.xor %12, %true : i1
    %14 = comb.and %13, %11 : i1
    %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i64> 
    %15 = sv.read_inout %ctrl_data0_reg : !hw.inout<i64>
    %16 = comb.mux %6, %15, %5 : i64
    %17 = comb.mux %10, %5, %15 : i64
    %18 = comb.mux %12, %c0_i64, %17 : i64
    %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
    %19 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %20 = comb.xor %19, %true : i1
    %21 = comb.or %20, %27 : i1
    %22 = comb.mux %21, %7, %19 : i1
    %23 = comb.mux %21, %16, %24 : i64
    %data1_reg = sv.reg sym @data1_reg : !hw.inout<i64> 
    %24 = sv.read_inout %data1_reg : !hw.inout<i64>
    %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
    %25 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %26 = comb.mux %25, %25, %19 : i1
    %27 = comb.xor %25, %true : i1
    %28 = comb.xor %out0_ready, %true : i1
    %29 = comb.and %28, %27 : i1
    %30 = comb.mux %29, %19, %25 : i1
    %31 = comb.and %out0_ready, %25 : i1
    %32 = comb.xor %31, %true : i1
    %33 = comb.and %32, %30 : i1
    %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i64> 
    %34 = sv.read_inout %ctrl_data1_reg : !hw.inout<i64>
    sv.alwaysff(posedge %clock) {
      sv.passign %valid0_reg, %3 : i1
      sv.passign %data0_reg, %4 : i64
      sv.passign %ready0_reg, %14 : i1
      sv.passign %ctrl_data0_reg, %18 : i64
      sv.passign %valid1_reg, %22 : i1
      sv.passign %data1_reg, %23 : i64
      sv.passign %ready1_reg, %33 : i1
      sv.passign %ctrl_data1_reg, %37 : i64
    }(syncreset : posedge %reset) {
      sv.passign %valid0_reg, %false : i1
      sv.passign %data0_reg, %c0_i64 : i64
      sv.passign %ready0_reg, %false : i1
      sv.passign %ctrl_data0_reg, %c0_i64 : i64
      sv.passign %valid1_reg, %false : i1
      sv.passign %data1_reg, %c0_i64 : i64
      sv.passign %ready1_reg, %false : i1
      sv.passign %ctrl_data1_reg, %c0_i64 : i64
    }
    %35 = comb.mux %25, %34, %24 : i64
    %36 = comb.mux %29, %24, %34 : i64
    %37 = comb.mux %31, %c0_i64, %36 : i64
    hw.output %2, %35, %26 : i1, i64, i1
  }
  hw.module @handshake_fork_1ins_2outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %14, %true : i1
    %1 = comb.and %6, %0 : i1
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %3 = comb.xor %2, %true : i1
    %4 = comb.and %3, %in0_valid : i1
    %5 = comb.and %out0_ready, %4 : i1
    %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
    %7 = comb.xor %14, %true : i1
    %8 = comb.and %13, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_0, %1 : i1
      sv.passign %emitted_1, %8 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
    }
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %in0_valid : i1
    %12 = comb.and %out1_ready, %11 : i1
    %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
    %14 = comb.and %6, %13 {sv.namehint = "allDone"} : i1
    hw.output %14, %in0, %4, %in0, %11 : i1, i0, i1, i0, i1
  }
  hw.module @handshake_fork_1ins_3outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %21, %true : i1
    %1 = comb.and %6, %0 : i1
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %3 = comb.xor %2, %true : i1
    %4 = comb.and %3, %in0_valid : i1
    %5 = comb.and %out0_ready, %4 : i1
    %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
    %7 = comb.xor %21, %true : i1
    %8 = comb.and %13, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %in0_valid : i1
    %12 = comb.and %out1_ready, %11 : i1
    %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
    %14 = comb.xor %21, %true : i1
    %15 = comb.and %20, %14 : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_0, %1 : i1
      sv.passign %emitted_1, %8 : i1
      sv.passign %emitted_2, %15 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
    }
    %17 = comb.xor %16, %true : i1
    %18 = comb.and %17, %in0_valid : i1
    %19 = comb.and %out2_ready, %18 : i1
    %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
    %21 = comb.and %6, %13, %20 {sv.namehint = "allDone"} : i1
    hw.output %21, %in0, %4, %in0, %11, %in0, %18 : i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id0(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : i1, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_0 = sv.reg : !hw.inout<uarray<3xi64>> 
    %0 = comb.extract %ldAddr0 from 0 : (i64) -> i2
    %1 = sv.array_index_inout %_handshake_memory_0[%0] : !hw.inout<uarray<3xi64>>, i2
    %2 = sv.read_inout %1 : !hw.inout<i64>
    %3 = comb.xor %17, %true : i1
    %4 = comb.and %9, %3 : i1
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %5 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %ldAddr0_valid : i1
    %8 = comb.and %ldData0_ready, %7 : i1
    %9 = comb.or %8, %5 {sv.namehint = "done0"} : i1
    %10 = comb.xor %17, %true : i1
    %11 = comb.and %16, %10 : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %12 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %13 = comb.xor %12, %true : i1
    %14 = comb.and %13, %ldAddr0_valid : i1
    %15 = comb.and %ldDone0_ready, %14 : i1
    %16 = comb.or %15, %12 {sv.namehint = "done1"} : i1
    %17 = comb.and %9, %16 {sv.namehint = "allDone"} : i1
    %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
    %18 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    %19 = comb.and %stDone0_ready, %18 {sv.namehint = "storeCompleted"} : i1
    %20 = comb.xor %18, %true : i1
    %21 = comb.or %20, %19 {sv.namehint = "emptyOrComplete"} : i1
    %22 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
    %23 = comb.mux %21, %22, %18 : i1
    %24 = comb.extract %stAddr0 from 0 : (i64) -> i2
    %writeValidBuffer_0 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
    %25 = sv.read_inout %writeValidBuffer_0 : !hw.inout<i1>
    %26 = comb.and %stDone1_ready, %25 {sv.namehint = "storeCompleted"} : i1
    %27 = comb.xor %25, %true : i1
    %28 = comb.or %27, %26 {sv.namehint = "emptyOrComplete"} : i1
    %29 = comb.and %stAddr1_valid, %stData1_valid {sv.namehint = "writeValid"} : i1
    %30 = comb.mux %28, %29, %25 : i1
    %31 = comb.extract %stAddr1 from 0 : (i64) -> i2
    %writeValidBuffer_1 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
    %32 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.if %36 {
        %39 = sv.array_index_inout %_handshake_memory_0[%38] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %39, %stData2 : i64
      }
      sv.if %29 {
        %39 = sv.array_index_inout %_handshake_memory_0[%31] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %39, %stData1 : i64
      }
      sv.if %22 {
        %39 = sv.array_index_inout %_handshake_memory_0[%24] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %39, %stData0 : i64
      }
      sv.passign %emitted_0, %4 : i1
      sv.passign %emitted_1, %11 : i1
      sv.passign %writeValidBuffer, %23 : i1
      sv.passign %writeValidBuffer_0, %30 : i1
      sv.passign %writeValidBuffer_1, %37 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %writeValidBuffer, %false : i1
      sv.passign %writeValidBuffer_0, %false : i1
      sv.passign %writeValidBuffer_1, %false : i1
    }
    %33 = comb.and %stDone2_ready, %32 {sv.namehint = "storeCompleted"} : i1
    %34 = comb.xor %32, %true : i1
    %35 = comb.or %34, %33 {sv.namehint = "emptyOrComplete"} : i1
    %36 = comb.and %stAddr2_valid, %stData2_valid {sv.namehint = "writeValid"} : i1
    %37 = comb.mux %35, %36, %32 : i1
    %38 = comb.extract %stAddr2 from 0 : (i64) -> i2
    hw.output %21, %21, %28, %28, %35, %35, %17, %2, %7, %c0_i0, %18, %c0_i0, %25, %c0_i0, %32, %c0_i0, %14 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_join_7ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %in4 : i0, in %in4_valid : i1, in %in5 : i0, in %in5_valid : i1, in %in6 : i0, in %in6_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out in4_ready : i1, out in5_ready : i1, out in6_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid, %in2_valid, %in3_valid, %in4_valid, %in5_valid, %in6_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %1, %1, %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i1, i1, i1, i1, i0, i1
  }
  hw.module @handshake_constant_c3_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c3_i64 = hw.constant 3 : i64
    hw.output %out0_ready, %c3_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %14, %true : i1
    %1 = comb.and %6, %0 : i1
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %3 = comb.xor %2, %true : i1
    %4 = comb.and %3, %in0_valid : i1
    %5 = comb.and %out0_ready, %4 : i1
    %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
    %7 = comb.xor %14, %true : i1
    %8 = comb.and %13, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_0, %1 : i1
      sv.passign %emitted_1, %8 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
    }
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %in0_valid : i1
    %12 = comb.and %out1_ready, %11 : i1
    %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
    %14 = comb.and %6, %13 {sv.namehint = "allDone"} : i1
    hw.output %14, %in0, %4, %in0, %11 : i1, i64, i1, i64, i1
  }
  hw.module @handshake_constant_c2_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c2_i64 = hw.constant 2 : i64
    hw.output %out0_ready, %c2_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_constant_c1_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c1_i64 = hw.constant 1 : i64
    hw.output %out0_ready, %c1_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %21, %true : i1
    %1 = comb.and %6, %0 : i1
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %3 = comb.xor %2, %true : i1
    %4 = comb.and %3, %in0_valid : i1
    %5 = comb.and %out0_ready, %4 : i1
    %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
    %7 = comb.xor %21, %true : i1
    %8 = comb.and %13, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %in0_valid : i1
    %12 = comb.and %out1_ready, %11 : i1
    %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
    %14 = comb.xor %21, %true : i1
    %15 = comb.and %20, %14 : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_0, %1 : i1
      sv.passign %emitted_1, %8 : i1
      sv.passign %emitted_2, %15 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
    }
    %17 = comb.xor %16, %true : i1
    %18 = comb.and %17, %in0_valid : i1
    %19 = comb.and %out2_ready, %18 : i1
    %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
    %21 = comb.and %6, %13, %20 {sv.namehint = "allDone"} : i1
    hw.output %21, %in0, %4, %in0, %11, %in0, %18 : i1, i64, i1, i64, i1, i64, i1
  }
  hw.module @handshake_constant_c0_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c0_i64 = hw.constant 0 : i64
    hw.output %out0_ready, %c0_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_store_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataIn : i64, in %dataIn_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataToMem_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataIn_ready : i1, out ctrl_ready : i1, out dataToMem : i64, out dataToMem_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
    %0 = comb.and %dataIn_valid, %addrIn0_valid, %ctrl_valid : i1
    %1 = comb.and %dataToMem_ready, %addrOut0_ready, %0 : i1
    hw.output %1, %1, %1, %dataIn, %0, %addrIn0, %0 : i1, i1, i1, i64, i1, i64, i1
  }
  hw.module @handshake_join_2ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %c0_i0, %0 : i1, i1, i0, i1
  }
  hw.module @handshake_join_3ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid, %in2_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i0, i1
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
    %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.or %1, %8 : i1
    %3 = comb.mux %2, %in0_valid, %0 : i1
    %4 = comb.mux %2, %in0, %5 : i1
    %data0_reg = sv.reg sym @data0_reg : !hw.inout<i1> 
    %5 = sv.read_inout %data0_reg : !hw.inout<i1>
    %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
    %6 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %7 = comb.mux %6, %6, %0 : i1
    %8 = comb.xor %6, %true : i1
    %9 = comb.xor %out0_ready, %true : i1
    %10 = comb.and %9, %8 : i1
    %11 = comb.mux %10, %0, %6 : i1
    %12 = comb.and %out0_ready, %6 : i1
    %13 = comb.xor %12, %true : i1
    %14 = comb.and %13, %11 : i1
    %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i1> 
    %15 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %valid0_reg, %3 : i1
      sv.passign %data0_reg, %4 : i1
      sv.passign %ready0_reg, %14 : i1
      sv.passign %ctrl_data0_reg, %19 : i1
    }(syncreset : posedge %reset) {
      sv.passign %valid0_reg, %true : i1
      sv.passign %data0_reg, %false : i1
      sv.passign %ready0_reg, %false : i1
      sv.passign %ctrl_data0_reg, %false : i1
    }
    %16 = comb.mux %6, %15, %5 : i1
    %17 = comb.mux %10, %5, %15 : i1
    %18 = comb.xor %12, %true : i1
    %19 = comb.and %18, %17 : i1
    hw.output %2, %16, %7 : i1, i1, i1
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %28, %true : i1
    %1 = comb.and %6, %0 : i1
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %3 = comb.xor %2, %true : i1
    %4 = comb.and %3, %in0_valid : i1
    %5 = comb.and %out0_ready, %4 : i1
    %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
    %7 = comb.xor %28, %true : i1
    %8 = comb.and %13, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %in0_valid : i1
    %12 = comb.and %out1_ready, %11 : i1
    %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
    %14 = comb.xor %28, %true : i1
    %15 = comb.and %20, %14 : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %17 = comb.xor %16, %true : i1
    %18 = comb.and %17, %in0_valid : i1
    %19 = comb.and %out2_ready, %18 : i1
    %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
    %21 = comb.xor %28, %true : i1
    %22 = comb.and %27, %21 : i1
    %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
    %23 = sv.read_inout %emitted_3 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_0, %1 : i1
      sv.passign %emitted_1, %8 : i1
      sv.passign %emitted_2, %15 : i1
      sv.passign %emitted_3, %22 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
      sv.passign %emitted_3, %false : i1
    }
    %24 = comb.xor %23, %true : i1
    %25 = comb.and %24, %in0_valid : i1
    %26 = comb.and %out3_ready, %25 : i1
    %27 = comb.or %26, %23 {sv.namehint = "done3"} : i1
    %28 = comb.and %6, %13, %20, %27 {sv.namehint = "allDone"} : i1
    hw.output %28, %in0, %4, %in0, %11, %in0, %18, %in0, %25 : i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_2slots_seq(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
    %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.or %1, %8 : i1
    %3 = comb.mux %2, %in0_valid, %0 : i1
    %4 = comb.mux %2, %in0, %5 : i1
    %data0_reg = sv.reg sym @data0_reg : !hw.inout<i1> 
    %5 = sv.read_inout %data0_reg : !hw.inout<i1>
    %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
    %6 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %7 = comb.mux %6, %6, %0 : i1
    %8 = comb.xor %6, %true : i1
    %9 = comb.xor %22, %true : i1
    %10 = comb.and %9, %8 : i1
    %11 = comb.mux %10, %0, %6 : i1
    %12 = comb.and %22, %6 : i1
    %13 = comb.xor %12, %true : i1
    %14 = comb.and %13, %11 : i1
    %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i1> 
    %15 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
    %16 = comb.mux %6, %15, %5 : i1
    %17 = comb.mux %10, %5, %15 : i1
    %18 = comb.xor %12, %true : i1
    %19 = comb.and %18, %17 : i1
    %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
    %20 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %21 = comb.xor %20, %true : i1
    %22 = comb.or %21, %28 : i1
    %23 = comb.mux %22, %7, %20 : i1
    %24 = comb.mux %22, %16, %25 : i1
    %data1_reg = sv.reg sym @data1_reg : !hw.inout<i1> 
    %25 = sv.read_inout %data1_reg : !hw.inout<i1>
    %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
    %26 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %27 = comb.mux %26, %26, %20 : i1
    %28 = comb.xor %26, %true : i1
    %29 = comb.xor %out0_ready, %true : i1
    %30 = comb.and %29, %28 : i1
    %31 = comb.mux %30, %20, %26 : i1
    %32 = comb.and %out0_ready, %26 : i1
    %33 = comb.xor %32, %true : i1
    %34 = comb.and %33, %31 : i1
    %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i1> 
    %35 = sv.read_inout %ctrl_data1_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %valid0_reg, %3 : i1
      sv.passign %data0_reg, %4 : i1
      sv.passign %ready0_reg, %14 : i1
      sv.passign %ctrl_data0_reg, %19 : i1
      sv.passign %valid1_reg, %23 : i1
      sv.passign %data1_reg, %24 : i1
      sv.passign %ready1_reg, %34 : i1
      sv.passign %ctrl_data1_reg, %39 : i1
    }(syncreset : posedge %reset) {
      sv.passign %valid0_reg, %false : i1
      sv.passign %data0_reg, %false : i1
      sv.passign %ready0_reg, %false : i1
      sv.passign %ctrl_data0_reg, %false : i1
      sv.passign %valid1_reg, %false : i1
      sv.passign %data1_reg, %false : i1
      sv.passign %ready1_reg, %false : i1
      sv.passign %ctrl_data1_reg, %false : i1
    }
    %36 = comb.mux %26, %35, %25 : i1
    %37 = comb.mux %30, %25, %35 : i1
    %38 = comb.xor %32, %true : i1
    %39 = comb.and %38, %37 : i1
    hw.output %2, %36, %27 : i1, i1, i1
  }
  hw.module @handshake_mux_in_ui1_3ins_1outs_ctrl(in %select : i1, in %select_valid : i1, in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %0 = comb.concat %false, %select : i1, i1
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = comb.mux %select, %in1_valid, %in0_valid : i1
    %3 = comb.and %2, %select_valid : i1
    %4 = comb.and %3, %out0_ready : i1
    %5 = comb.extract %1 from 0 : (i2) -> i1
    %6 = comb.and %5, %4 : i1
    %7 = comb.extract %1 from 1 : (i2) -> i1
    %8 = comb.and %7, %4 : i1
    %9 = comb.mux %select, %in1, %in0 : i0
    hw.output %4, %6, %8, %9, %3 : i1, i1, i1, i0, i1
  }
  hw.module @handshake_mux_in_ui1_ui64_ui64_out_ui64(in %select : i1, in %select_valid : i1, in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %0 = comb.concat %false, %select : i1, i1
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = comb.mux %select, %in1_valid, %in0_valid : i1
    %3 = comb.and %2, %select_valid : i1
    %4 = comb.and %3, %out0_ready : i1
    %5 = comb.extract %1 from 0 : (i2) -> i1
    %6 = comb.and %5, %4 : i1
    %7 = comb.extract %1 from 1 : (i2) -> i1
    %8 = comb.and %7, %4 : i1
    %9 = comb.mux %select, %in1, %in0 : i64
    hw.output %4, %6, %8, %9, %3 : i1, i1, i1, i64, i1
  }
  hw.module @arith_cmpi_in_ui64_ui64_out_ui1_slt(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i1, out out0_valid : i1) {
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    %2 = comb.icmp slt %in0, %in1 : i64
    hw.output %1, %1, %2, %0 : i1, i1, i1, i1
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1, out out4 : i1, out out4_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %35, %true : i1
    %1 = comb.and %6, %0 : i1
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %3 = comb.xor %2, %true : i1
    %4 = comb.and %3, %in0_valid : i1
    %5 = comb.and %out0_ready, %4 : i1
    %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
    %7 = comb.xor %35, %true : i1
    %8 = comb.and %13, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %in0_valid : i1
    %12 = comb.and %out1_ready, %11 : i1
    %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
    %14 = comb.xor %35, %true : i1
    %15 = comb.and %20, %14 : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %17 = comb.xor %16, %true : i1
    %18 = comb.and %17, %in0_valid : i1
    %19 = comb.and %out2_ready, %18 : i1
    %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
    %21 = comb.xor %35, %true : i1
    %22 = comb.and %27, %21 : i1
    %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
    %23 = sv.read_inout %emitted_3 : !hw.inout<i1>
    %24 = comb.xor %23, %true : i1
    %25 = comb.and %24, %in0_valid : i1
    %26 = comb.and %out3_ready, %25 : i1
    %27 = comb.or %26, %23 {sv.namehint = "done3"} : i1
    %28 = comb.xor %35, %true : i1
    %29 = comb.and %34, %28 : i1
    %emitted_4 = sv.reg sym @emitted_4 : !hw.inout<i1> 
    %30 = sv.read_inout %emitted_4 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_0, %1 : i1
      sv.passign %emitted_1, %8 : i1
      sv.passign %emitted_2, %15 : i1
      sv.passign %emitted_3, %22 : i1
      sv.passign %emitted_4, %29 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
      sv.passign %emitted_3, %false : i1
      sv.passign %emitted_4, %false : i1
    }
    %31 = comb.xor %30, %true : i1
    %32 = comb.and %31, %in0_valid : i1
    %33 = comb.and %out4_ready, %32 : i1
    %34 = comb.or %33, %30 {sv.namehint = "done4"} : i1
    %35 = comb.and %6, %13, %20, %27, %34 {sv.namehint = "allDone"} : i1
    hw.output %35, %in0, %4, %in0, %11, %in0, %18, %in0, %25, %in0, %32 : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(in %cond : i1, in %cond_valid : i1, in %data : i64, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i64, out outTrue_valid : i1, out outFalse : i64, out outFalse_valid : i1) {
    %true = hw.constant true
    %0 = comb.and %cond_valid, %data_valid : i1
    %1 = comb.and %cond, %0 : i1
    %2 = comb.xor %cond, %true : i1
    %3 = comb.and %2, %0 : i1
    %4 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
    %5 = comb.and %4, %0 : i1
    hw.output %5, %5, %data, %1, %data, %3 : i1, i1, i64, i1, i64, i1
  }
  hw.module @handshake_sink_in_ui64(in %in0 : i64, in %in0_valid : i1, out in0_ready : i1) {
    %true = hw.constant true
    hw.output %true : i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1, out out3 : i64, out out3_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %28, %true : i1
    %1 = comb.and %6, %0 : i1
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %3 = comb.xor %2, %true : i1
    %4 = comb.and %3, %in0_valid : i1
    %5 = comb.and %out0_ready, %4 : i1
    %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
    %7 = comb.xor %28, %true : i1
    %8 = comb.and %13, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %in0_valid : i1
    %12 = comb.and %out1_ready, %11 : i1
    %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
    %14 = comb.xor %28, %true : i1
    %15 = comb.and %20, %14 : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %17 = comb.xor %16, %true : i1
    %18 = comb.and %17, %in0_valid : i1
    %19 = comb.and %out2_ready, %18 : i1
    %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
    %21 = comb.xor %28, %true : i1
    %22 = comb.and %27, %21 : i1
    %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
    %23 = sv.read_inout %emitted_3 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_0, %1 : i1
      sv.passign %emitted_1, %8 : i1
      sv.passign %emitted_2, %15 : i1
      sv.passign %emitted_3, %22 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
      sv.passign %emitted_3, %false : i1
    }
    %24 = comb.xor %23, %true : i1
    %25 = comb.and %24, %in0_valid : i1
    %26 = comb.and %out3_ready, %25 : i1
    %27 = comb.or %26, %23 {sv.namehint = "done3"} : i1
    %28 = comb.and %6, %13, %20, %27 {sv.namehint = "allDone"} : i1
    hw.output %28, %in0, %4, %in0, %11, %in0, %18, %in0, %25 : i1, i64, i1, i64, i1, i64, i1, i64, i1
  }
  hw.module @handshake_cond_br_in_ui1_2ins_2outs_ctrl(in %cond : i1, in %cond_valid : i1, in %data : i0, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i0, out outTrue_valid : i1, out outFalse : i0, out outFalse_valid : i1) {
    %true = hw.constant true
    %0 = comb.and %cond_valid, %data_valid : i1
    %1 = comb.and %cond, %0 : i1
    %2 = comb.xor %cond, %true : i1
    %3 = comb.and %2, %0 : i1
    %4 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
    %5 = comb.and %4, %0 : i1
    hw.output %5, %5, %data, %1, %data, %3 : i1, i1, i0, i1, i0, i1
  }
  hw.module @handshake_fork_1ins_4outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.xor %28, %true : i1
    %1 = comb.and %6, %0 : i1
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %2 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %3 = comb.xor %2, %true : i1
    %4 = comb.and %3, %in0_valid : i1
    %5 = comb.and %out0_ready, %4 : i1
    %6 = comb.or %5, %2 {sv.namehint = "done0"} : i1
    %7 = comb.xor %28, %true : i1
    %8 = comb.and %13, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %in0_valid : i1
    %12 = comb.and %out1_ready, %11 : i1
    %13 = comb.or %12, %9 {sv.namehint = "done1"} : i1
    %14 = comb.xor %28, %true : i1
    %15 = comb.and %20, %14 : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %17 = comb.xor %16, %true : i1
    %18 = comb.and %17, %in0_valid : i1
    %19 = comb.and %out2_ready, %18 : i1
    %20 = comb.or %19, %16 {sv.namehint = "done2"} : i1
    %21 = comb.xor %28, %true : i1
    %22 = comb.and %27, %21 : i1
    %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
    %23 = sv.read_inout %emitted_3 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      sv.passign %emitted_0, %1 : i1
      sv.passign %emitted_1, %8 : i1
      sv.passign %emitted_2, %15 : i1
      sv.passign %emitted_3, %22 : i1
    }(syncreset : posedge %reset) {
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
      sv.passign %emitted_3, %false : i1
    }
    %24 = comb.xor %23, %true : i1
    %25 = comb.and %24, %in0_valid : i1
    %26 = comb.and %out3_ready, %25 : i1
    %27 = comb.or %26, %23 {sv.namehint = "done3"} : i1
    %28 = comb.and %6, %13, %20, %27 {sv.namehint = "allDone"} : i1
    hw.output %28, %in0, %4, %in0, %11, %in0, %18, %in0, %25 : i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_join_4ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid, %in2_valid, %in3_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i1, i0, i1
  }
  hw.module @handshake_load_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataFromMem : i64, in %dataFromMem_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataOut_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataFromMem_ready : i1, out ctrl_ready : i1, out dataOut : i64, out dataOut_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
    %0 = comb.and %addrIn0_valid, %ctrl_valid : i1
    %1 = comb.and %addrOut0_ready, %0 : i1
    hw.output %1, %dataOut_ready, %1, %dataFromMem, %dataFromMem_valid, %addrIn0, %0 : i1, i1, i1, i64, i1, i64, i1
  }
  hw.module @arith_addi_in_ui64_ui64_out_ui64(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    %2 = comb.add %in0, %in1 : i64
    hw.output %1, %1, %2, %0 : i1, i1, i64, i1
  }
  hw.module @main(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
    %handshake_buffer0.in0_ready, %handshake_buffer0.out0, %handshake_buffer0.out0_valid = hw.instance "handshake_buffer0" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %in0: i0, in0_valid: %in0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork0.in0_ready, %handshake_fork0.out0, %handshake_fork0.out0_valid, %handshake_fork0.out1, %handshake_fork0.out1_valid, %handshake_fork0.out2, %handshake_fork0.out2_valid, %handshake_fork0.out3, %handshake_fork0.out3_valid, %handshake_fork0.out4, %handshake_fork0.out4_valid, %handshake_fork0.out5, %handshake_fork0.out5_valid, %handshake_fork0.out6, %handshake_fork0.out6_valid, %handshake_fork0.out7, %handshake_fork0.out7_valid, %handshake_fork0.out8, %handshake_fork0.out8_valid, %handshake_fork0.out9, %handshake_fork0.out9_valid, %handshake_fork0.out10, %handshake_fork0.out10_valid, %handshake_fork0.out11, %handshake_fork0.out11_valid, %handshake_fork0.out12, %handshake_fork0.out12_valid, %handshake_fork0.out13, %handshake_fork0.out13_valid = hw.instance "handshake_fork0" @handshake_fork_1ins_14outs_ctrl(in0: %handshake_buffer0.out0: i0, in0_valid: %handshake_buffer0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer14.in0_ready: i1, out1_ready: %handshake_buffer13.in0_ready: i1, out2_ready: %handshake_buffer12.in0_ready: i1, out3_ready: %handshake_buffer11.in0_ready: i1, out4_ready: %handshake_buffer10.in0_ready: i1, out5_ready: %handshake_buffer9.in0_ready: i1, out6_ready: %handshake_buffer8.in0_ready: i1, out7_ready: %handshake_buffer7.in0_ready: i1, out8_ready: %handshake_buffer6.in0_ready: i1, out9_ready: %handshake_buffer5.in0_ready: i1, out10_ready: %handshake_buffer4.in0_ready: i1, out11_ready: %handshake_buffer3.in0_ready: i1, out12_ready: %handshake_buffer2.in0_ready: i1, out13_ready: %handshake_buffer1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1, out4: i0, out4_valid: i1, out5: i0, out5_valid: i1, out6: i0, out6_valid: i1, out7: i0, out7_valid: i1, out8: i0, out8_valid: i1, out9: i0, out9_valid: i1, out10: i0, out10_valid: i1, out11: i0, out11_valid: i1, out12: i0, out12_valid: i1, out13: i0, out13_valid: i1)
    %handshake_buffer1.in0_ready, %handshake_buffer1.out0, %handshake_buffer1.out0_valid = hw.instance "handshake_buffer1" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out13: i0, in0_valid: %handshake_fork0.out13_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join4.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer2.in0_ready, %handshake_buffer2.out0, %handshake_buffer2.out0_valid = hw.instance "handshake_buffer2" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out12: i0, in0_valid: %handshake_fork0.out12_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join3.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer3.in0_ready, %handshake_buffer3.out0, %handshake_buffer3.out0_valid = hw.instance "handshake_buffer3" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out11: i0, in0_valid: %handshake_fork0.out11_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store3.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer4.in0_ready, %handshake_buffer4.out0, %handshake_buffer4.out0_valid = hw.instance "handshake_buffer4" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out10: i0, in0_valid: %handshake_fork0.out10_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer5.in0_ready, %handshake_buffer5.out0, %handshake_buffer5.out0_valid = hw.instance "handshake_buffer5" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out9: i0, in0_valid: %handshake_fork0.out9_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join2.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer6.in0_ready, %handshake_buffer6.out0, %handshake_buffer6.out0_valid = hw.instance "handshake_buffer6" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out8: i0, in0_valid: %handshake_fork0.out8_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer7.in0_ready, %handshake_buffer7.out0, %handshake_buffer7.out0_valid = hw.instance "handshake_buffer7" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out7: i0, in0_valid: %handshake_fork0.out7_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer8.in0_ready, %handshake_buffer8.out0, %handshake_buffer8.out0_valid = hw.instance "handshake_buffer8" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out6: i0, in0_valid: %handshake_fork0.out6_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant6.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer9.in0_ready, %handshake_buffer9.out0, %handshake_buffer9.out0_valid = hw.instance "handshake_buffer9" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out5: i0, in0_valid: %handshake_fork0.out5_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant5.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer10.in0_ready, %handshake_buffer10.out0, %handshake_buffer10.out0_valid = hw.instance "handshake_buffer10" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out4: i0, in0_valid: %handshake_fork0.out4_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant4.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer11.in0_ready, %handshake_buffer11.out0, %handshake_buffer11.out0_valid = hw.instance "handshake_buffer11" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out3: i0, in0_valid: %handshake_fork0.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant3.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer12.in0_ready, %handshake_buffer12.out0, %handshake_buffer12.out0_valid = hw.instance "handshake_buffer12" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out2: i0, in0_valid: %handshake_fork0.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant2.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer13.in0_ready, %handshake_buffer13.out0, %handshake_buffer13.out0_valid = hw.instance "handshake_buffer13" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out1: i0, in0_valid: %handshake_fork0.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer14.in0_ready, %handshake_buffer14.out0, %handshake_buffer14.out0_valid = hw.instance "handshake_buffer14" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out0: i0, in0_valid: %handshake_fork0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_memory0.stData0_ready, %handshake_memory0.stAddr0_ready, %handshake_memory0.stDone0, %handshake_memory0.stDone0_valid = hw.instance "handshake_memory0" @handshake_memory_out_ui64_id2(stData0: %handshake_buffer114.out0: i64, stData0_valid: %handshake_buffer114.out0_valid: i1, stAddr0: %handshake_buffer113.out0: i64, stAddr0_valid: %handshake_buffer113.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, stDone0_ready: %handshake_buffer15.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stDone0: i0, stDone0_valid: i1)
    %handshake_buffer15.in0_ready, %handshake_buffer15.out0, %handshake_buffer15.out0_valid = hw.instance "handshake_buffer15" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory0.stDone0: i0, in0_valid: %handshake_memory0.stDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in3_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_memory1.stData0_ready, %handshake_memory1.stAddr0_ready, %handshake_memory1.stData1_ready, %handshake_memory1.stAddr1_ready, %handshake_memory1.stData2_ready, %handshake_memory1.stAddr2_ready, %handshake_memory1.ldAddr0_ready, %handshake_memory1.ldData0, %handshake_memory1.ldData0_valid, %handshake_memory1.stDone0, %handshake_memory1.stDone0_valid, %handshake_memory1.stDone1, %handshake_memory1.stDone1_valid, %handshake_memory1.stDone2, %handshake_memory1.stDone2_valid, %handshake_memory1.ldDone0, %handshake_memory1.ldDone0_valid = hw.instance "handshake_memory1" @handshake_memory_out_ui64_id1(stData0: %handshake_buffer67.out0: i64, stData0_valid: %handshake_buffer67.out0_valid: i1, stAddr0: %handshake_buffer66.out0: i64, stAddr0_valid: %handshake_buffer66.out0_valid: i1, stData1: %handshake_buffer70.out0: i64, stData1_valid: %handshake_buffer70.out0_valid: i1, stAddr1: %handshake_buffer69.out0: i64, stAddr1_valid: %handshake_buffer69.out0_valid: i1, stData2: %handshake_buffer73.out0: i64, stData2_valid: %handshake_buffer73.out0_valid: i1, stAddr2: %handshake_buffer72.out0: i64, stAddr2_valid: %handshake_buffer72.out0_valid: i1, ldAddr0: %handshake_buffer110.out0: i64, ldAddr0_valid: %handshake_buffer110.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, ldData0_ready: %handshake_buffer20.in0_ready: i1, stDone0_ready: %handshake_buffer19.in0_ready: i1, stDone1_ready: %handshake_buffer18.in0_ready: i1, stDone2_ready: %handshake_buffer17.in0_ready: i1, ldDone0_ready: %handshake_buffer16.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
    %handshake_buffer16.in0_ready, %handshake_buffer16.out0, %handshake_buffer16.out0_valid = hw.instance "handshake_buffer16" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.ldDone0: i0, in0_valid: %handshake_memory1.ldDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer17.in0_ready, %handshake_buffer17.out0, %handshake_buffer17.out0_valid = hw.instance "handshake_buffer17" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone2: i0, in0_valid: %handshake_memory1.stDone2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in6_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer18.in0_ready, %handshake_buffer18.out0, %handshake_buffer18.out0_valid = hw.instance "handshake_buffer18" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone1: i0, in0_valid: %handshake_memory1.stDone1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer19.in0_ready, %handshake_buffer19.out0, %handshake_buffer19.out0_valid = hw.instance "handshake_buffer19" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone0: i0, in0_valid: %handshake_memory1.stDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork2.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer20.in0_ready, %handshake_buffer20.out0, %handshake_buffer20.out0_valid = hw.instance "handshake_buffer20" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory1.ldData0: i64, in0_valid: %handshake_memory1.ldData0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load1.dataFromMem_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork1.in0_ready, %handshake_fork1.out0, %handshake_fork1.out0_valid, %handshake_fork1.out1, %handshake_fork1.out1_valid = hw.instance "handshake_fork1" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer18.out0: i0, in0_valid: %handshake_buffer18.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer22.in0_ready: i1, out1_ready: %handshake_buffer21.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
    %handshake_buffer21.in0_ready, %handshake_buffer21.out0, %handshake_buffer21.out0_valid = hw.instance "handshake_buffer21" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out1: i0, in0_valid: %handshake_fork1.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in5_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer22.in0_ready, %handshake_buffer22.out0, %handshake_buffer22.out0_valid = hw.instance "handshake_buffer22" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out0: i0, in0_valid: %handshake_fork1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join4.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork2.in0_ready, %handshake_fork2.out0, %handshake_fork2.out0_valid, %handshake_fork2.out1, %handshake_fork2.out1_valid, %handshake_fork2.out2, %handshake_fork2.out2_valid = hw.instance "handshake_fork2" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer19.out0: i0, in0_valid: %handshake_buffer19.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer25.in0_ready: i1, out1_ready: %handshake_buffer24.in0_ready: i1, out2_ready: %handshake_buffer23.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
    %handshake_buffer23.in0_ready, %handshake_buffer23.out0, %handshake_buffer23.out0_valid = hw.instance "handshake_buffer23" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out2: i0, in0_valid: %handshake_fork2.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in4_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer24.in0_ready, %handshake_buffer24.out0, %handshake_buffer24.out0_valid = hw.instance "handshake_buffer24" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out1: i0, in0_valid: %handshake_fork2.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join3.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer25.in0_ready, %handshake_buffer25.out0, %handshake_buffer25.out0_valid = hw.instance "handshake_buffer25" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out0: i0, in0_valid: %handshake_fork2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join4.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_memory2.stData0_ready, %handshake_memory2.stAddr0_ready, %handshake_memory2.stData1_ready, %handshake_memory2.stAddr1_ready, %handshake_memory2.stData2_ready, %handshake_memory2.stAddr2_ready, %handshake_memory2.ldAddr0_ready, %handshake_memory2.ldData0, %handshake_memory2.ldData0_valid, %handshake_memory2.stDone0, %handshake_memory2.stDone0_valid, %handshake_memory2.stDone1, %handshake_memory2.stDone1_valid, %handshake_memory2.stDone2, %handshake_memory2.stDone2_valid, %handshake_memory2.ldDone0, %handshake_memory2.ldDone0_valid = hw.instance "handshake_memory2" @handshake_memory_out_ui64_id0(stData0: %handshake_buffer59.out0: i64, stData0_valid: %handshake_buffer59.out0_valid: i1, stAddr0: %handshake_buffer58.out0: i64, stAddr0_valid: %handshake_buffer58.out0_valid: i1, stData1: %handshake_buffer62.out0: i64, stData1_valid: %handshake_buffer62.out0_valid: i1, stAddr1: %handshake_buffer61.out0: i64, stAddr1_valid: %handshake_buffer61.out0_valid: i1, stData2: %handshake_buffer65.out0: i64, stData2_valid: %handshake_buffer65.out0_valid: i1, stAddr2: %handshake_buffer64.out0: i64, stAddr2_valid: %handshake_buffer64.out0_valid: i1, ldAddr0: %handshake_buffer108.out0: i64, ldAddr0_valid: %handshake_buffer108.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, ldData0_ready: %handshake_buffer30.in0_ready: i1, stDone0_ready: %handshake_buffer29.in0_ready: i1, stDone1_ready: %handshake_buffer28.in0_ready: i1, stDone2_ready: %handshake_buffer27.in0_ready: i1, ldDone0_ready: %handshake_buffer26.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
    %handshake_buffer26.in0_ready, %handshake_buffer26.out0, %handshake_buffer26.out0_valid = hw.instance "handshake_buffer26" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.ldDone0: i0, in0_valid: %handshake_memory2.ldDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer27.in0_ready, %handshake_buffer27.out0, %handshake_buffer27.out0_valid = hw.instance "handshake_buffer27" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone2: i0, in0_valid: %handshake_memory2.stDone2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in3_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer28.in0_ready, %handshake_buffer28.out0, %handshake_buffer28.out0_valid = hw.instance "handshake_buffer28" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone1: i0, in0_valid: %handshake_memory2.stDone1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork3.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer29.in0_ready, %handshake_buffer29.out0, %handshake_buffer29.out0_valid = hw.instance "handshake_buffer29" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone0: i0, in0_valid: %handshake_memory2.stDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork4.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer30.in0_ready, %handshake_buffer30.out0, %handshake_buffer30.out0_valid = hw.instance "handshake_buffer30" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory2.ldData0: i64, in0_valid: %handshake_memory2.ldData0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load0.dataFromMem_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork3.in0_ready, %handshake_fork3.out0, %handshake_fork3.out0_valid, %handshake_fork3.out1, %handshake_fork3.out1_valid = hw.instance "handshake_fork3" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer28.out0: i0, in0_valid: %handshake_buffer28.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer32.in0_ready: i1, out1_ready: %handshake_buffer31.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
    %handshake_buffer31.in0_ready, %handshake_buffer31.out0, %handshake_buffer31.out0_valid = hw.instance "handshake_buffer31" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out1: i0, in0_valid: %handshake_fork3.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join2.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer32.in0_ready, %handshake_buffer32.out0, %handshake_buffer32.out0_valid = hw.instance "handshake_buffer32" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out0: i0, in0_valid: %handshake_fork3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork4.in0_ready, %handshake_fork4.out0, %handshake_fork4.out0_valid, %handshake_fork4.out1, %handshake_fork4.out1_valid, %handshake_fork4.out2, %handshake_fork4.out2_valid = hw.instance "handshake_fork4" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer29.out0: i0, in0_valid: %handshake_buffer29.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer35.in0_ready: i1, out1_ready: %handshake_buffer34.in0_ready: i1, out2_ready: %handshake_buffer33.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
    %handshake_buffer33.in0_ready, %handshake_buffer33.out0, %handshake_buffer33.out0_valid = hw.instance "handshake_buffer33" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out2: i0, in0_valid: %handshake_fork4.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join1.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer34.in0_ready, %handshake_buffer34.out0, %handshake_buffer34.out0_valid = hw.instance "handshake_buffer34" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out1: i0, in0_valid: %handshake_fork4.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join2.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer35.in0_ready, %handshake_buffer35.out0, %handshake_buffer35.out0_valid = hw.instance "handshake_buffer35" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out0: i0, in0_valid: %handshake_fork4.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_join0.in0_ready, %handshake_join0.in1_ready, %handshake_join0.in2_ready, %handshake_join0.in3_ready, %handshake_join0.in4_ready, %handshake_join0.in5_ready, %handshake_join0.in6_ready, %handshake_join0.out0, %handshake_join0.out0_valid = hw.instance "handshake_join0" @handshake_join_7ins_1outs_ctrl(in0: %handshake_buffer4.out0: i0, in0_valid: %handshake_buffer4.out0_valid: i1, in1: %handshake_buffer35.out0: i0, in1_valid: %handshake_buffer35.out0_valid: i1, in2: %handshake_buffer32.out0: i0, in2_valid: %handshake_buffer32.out0_valid: i1, in3: %handshake_buffer27.out0: i0, in3_valid: %handshake_buffer27.out0_valid: i1, in4: %handshake_buffer23.out0: i0, in4_valid: %handshake_buffer23.out0_valid: i1, in5: %handshake_buffer21.out0: i0, in5_valid: %handshake_buffer21.out0_valid: i1, in6: %handshake_buffer17.out0: i0, in6_valid: %handshake_buffer17.out0_valid: i1, out0_ready: %handshake_buffer36.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, in4_ready: i1, in5_ready: i1, in6_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer36.in0_ready, %handshake_buffer36.out0, %handshake_buffer36.out0_valid = hw.instance "handshake_buffer36" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join0.out0: i0, in0_valid: %handshake_join0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_constant0.ctrl_ready, %handshake_constant0.out0, %handshake_constant0.out0_valid = hw.instance "handshake_constant0" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer14.out0: i0, ctrl_valid: %handshake_buffer14.out0_valid: i1, out0_ready: %handshake_buffer37.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer37.in0_ready, %handshake_buffer37.out0, %handshake_buffer37.out0_valid = hw.instance "handshake_buffer37" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant0.out0: i64, in0_valid: %handshake_constant0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux2.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant1.ctrl_ready, %handshake_constant1.out0, %handshake_constant1.out0_valid = hw.instance "handshake_constant1" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer13.out0: i0, ctrl_valid: %handshake_buffer13.out0_valid: i1, out0_ready: %handshake_buffer38.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer38.in0_ready, %handshake_buffer38.out0, %handshake_buffer38.out0_valid = hw.instance "handshake_buffer38" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant1.out0: i64, in0_valid: %handshake_constant1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork5.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork5.in0_ready, %handshake_fork5.out0, %handshake_fork5.out0_valid, %handshake_fork5.out1, %handshake_fork5.out1_valid = hw.instance "handshake_fork5" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer38.out0: i64, in0_valid: %handshake_buffer38.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer40.in0_ready: i1, out1_ready: %handshake_buffer39.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer39.in0_ready, %handshake_buffer39.out0, %handshake_buffer39.out0_valid = hw.instance "handshake_buffer39" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out1: i64, in0_valid: %handshake_fork5.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store2.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer40.in0_ready, %handshake_buffer40.out0, %handshake_buffer40.out0_valid = hw.instance "handshake_buffer40" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out0: i64, in0_valid: %handshake_fork5.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store5.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant2.ctrl_ready, %handshake_constant2.out0, %handshake_constant2.out0_valid = hw.instance "handshake_constant2" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer12.out0: i0, ctrl_valid: %handshake_buffer12.out0_valid: i1, out0_ready: %handshake_buffer41.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer41.in0_ready, %handshake_buffer41.out0, %handshake_buffer41.out0_valid = hw.instance "handshake_buffer41" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant2.out0: i64, in0_valid: %handshake_constant2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork6.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork6.in0_ready, %handshake_fork6.out0, %handshake_fork6.out0_valid, %handshake_fork6.out1, %handshake_fork6.out1_valid = hw.instance "handshake_fork6" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer41.out0: i64, in0_valid: %handshake_buffer41.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer43.in0_ready: i1, out1_ready: %handshake_buffer42.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer42.in0_ready, %handshake_buffer42.out0, %handshake_buffer42.out0_valid = hw.instance "handshake_buffer42" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out1: i64, in0_valid: %handshake_fork6.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store1.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer43.in0_ready, %handshake_buffer43.out0, %handshake_buffer43.out0_valid = hw.instance "handshake_buffer43" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out0: i64, in0_valid: %handshake_fork6.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store4.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant3.ctrl_ready, %handshake_constant3.out0, %handshake_constant3.out0_valid = hw.instance "handshake_constant3" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer11.out0: i0, ctrl_valid: %handshake_buffer11.out0_valid: i1, out0_ready: %handshake_buffer44.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer44.in0_ready, %handshake_buffer44.out0, %handshake_buffer44.out0_valid = hw.instance "handshake_buffer44" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant3.out0: i64, in0_valid: %handshake_constant3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork7.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork7.in0_ready, %handshake_fork7.out0, %handshake_fork7.out0_valid, %handshake_fork7.out1, %handshake_fork7.out1_valid = hw.instance "handshake_fork7" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer44.out0: i64, in0_valid: %handshake_buffer44.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer46.in0_ready: i1, out1_ready: %handshake_buffer45.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer45.in0_ready, %handshake_buffer45.out0, %handshake_buffer45.out0_valid = hw.instance "handshake_buffer45" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out1: i64, in0_valid: %handshake_fork7.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store0.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer46.in0_ready, %handshake_buffer46.out0, %handshake_buffer46.out0_valid = hw.instance "handshake_buffer46" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out0: i64, in0_valid: %handshake_fork7.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store3.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant4.ctrl_ready, %handshake_constant4.out0, %handshake_constant4.out0_valid = hw.instance "handshake_constant4" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer10.out0: i0, ctrl_valid: %handshake_buffer10.out0_valid: i1, out0_ready: %handshake_buffer47.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer47.in0_ready, %handshake_buffer47.out0, %handshake_buffer47.out0_valid = hw.instance "handshake_buffer47" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant4.out0: i64, in0_valid: %handshake_constant4.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork8.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork8.in0_ready, %handshake_fork8.out0, %handshake_fork8.out0_valid, %handshake_fork8.out1, %handshake_fork8.out1_valid = hw.instance "handshake_fork8" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer47.out0: i64, in0_valid: %handshake_buffer47.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer49.in0_ready: i1, out1_ready: %handshake_buffer48.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer48.in0_ready, %handshake_buffer48.out0, %handshake_buffer48.out0_valid = hw.instance "handshake_buffer48" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out1: i64, in0_valid: %handshake_fork8.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store2.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer49.in0_ready, %handshake_buffer49.out0, %handshake_buffer49.out0_valid = hw.instance "handshake_buffer49" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out0: i64, in0_valid: %handshake_fork8.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store5.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant5.ctrl_ready, %handshake_constant5.out0, %handshake_constant5.out0_valid = hw.instance "handshake_constant5" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer9.out0: i0, ctrl_valid: %handshake_buffer9.out0_valid: i1, out0_ready: %handshake_buffer50.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer50.in0_ready, %handshake_buffer50.out0, %handshake_buffer50.out0_valid = hw.instance "handshake_buffer50" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant5.out0: i64, in0_valid: %handshake_constant5.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork9.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork9.in0_ready, %handshake_fork9.out0, %handshake_fork9.out0_valid, %handshake_fork9.out1, %handshake_fork9.out1_valid, %handshake_fork9.out2, %handshake_fork9.out2_valid = hw.instance "handshake_fork9" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer50.out0: i64, in0_valid: %handshake_buffer50.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer53.in0_ready: i1, out1_ready: %handshake_buffer52.in0_ready: i1, out2_ready: %handshake_buffer51.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
    %handshake_buffer51.in0_ready, %handshake_buffer51.out0, %handshake_buffer51.out0_valid = hw.instance "handshake_buffer51" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out2: i64, in0_valid: %handshake_fork9.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store1.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer52.in0_ready, %handshake_buffer52.out0, %handshake_buffer52.out0_valid = hw.instance "handshake_buffer52" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out1: i64, in0_valid: %handshake_fork9.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store4.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer53.in0_ready, %handshake_buffer53.out0, %handshake_buffer53.out0_valid = hw.instance "handshake_buffer53" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out0: i64, in0_valid: %handshake_fork9.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux3.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant6.ctrl_ready, %handshake_constant6.out0, %handshake_constant6.out0_valid = hw.instance "handshake_constant6" @handshake_constant_c0_out_ui64(ctrl: %handshake_buffer8.out0: i0, ctrl_valid: %handshake_buffer8.out0_valid: i1, out0_ready: %handshake_buffer54.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer54.in0_ready, %handshake_buffer54.out0, %handshake_buffer54.out0_valid = hw.instance "handshake_buffer54" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant6.out0: i64, in0_valid: %handshake_constant6.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork10.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork10.in0_ready, %handshake_fork10.out0, %handshake_fork10.out0_valid, %handshake_fork10.out1, %handshake_fork10.out1_valid, %handshake_fork10.out2, %handshake_fork10.out2_valid = hw.instance "handshake_fork10" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer54.out0: i64, in0_valid: %handshake_buffer54.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer57.in0_ready: i1, out1_ready: %handshake_buffer56.in0_ready: i1, out2_ready: %handshake_buffer55.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
    %handshake_buffer55.in0_ready, %handshake_buffer55.out0, %handshake_buffer55.out0_valid = hw.instance "handshake_buffer55" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out2: i64, in0_valid: %handshake_fork10.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store0.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer56.in0_ready, %handshake_buffer56.out0, %handshake_buffer56.out0_valid = hw.instance "handshake_buffer56" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out1: i64, in0_valid: %handshake_fork10.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store3.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer57.in0_ready, %handshake_buffer57.out0, %handshake_buffer57.out0_valid = hw.instance "handshake_buffer57" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out0: i64, in0_valid: %handshake_fork10.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux1.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_store0.addrIn0_ready, %handshake_store0.dataIn_ready, %handshake_store0.ctrl_ready, %handshake_store0.dataToMem, %handshake_store0.dataToMem_valid, %handshake_store0.addrOut0, %handshake_store0.addrOut0_valid = hw.instance "handshake_store0" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer55.out0: i64, addrIn0_valid: %handshake_buffer55.out0_valid: i1, dataIn: %handshake_buffer45.out0: i64, dataIn_valid: %handshake_buffer45.out0_valid: i1, ctrl: %handshake_buffer7.out0: i0, ctrl_valid: %handshake_buffer7.out0_valid: i1, dataToMem_ready: %handshake_buffer59.in0_ready: i1, addrOut0_ready: %handshake_buffer58.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer58.in0_ready, %handshake_buffer58.out0, %handshake_buffer58.out0_valid = hw.instance "handshake_buffer58" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.addrOut0: i64, in0_valid: %handshake_store0.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer59.in0_ready, %handshake_buffer59.out0, %handshake_buffer59.out0_valid = hw.instance "handshake_buffer59" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.dataToMem: i64, in0_valid: %handshake_store0.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join1.in0_ready, %handshake_join1.in1_ready, %handshake_join1.out0, %handshake_join1.out0_valid = hw.instance "handshake_join1" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer6.out0: i0, in0_valid: %handshake_buffer6.out0_valid: i1, in1: %handshake_buffer33.out0: i0, in1_valid: %handshake_buffer33.out0_valid: i1, out0_ready: %handshake_buffer60.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer60.in0_ready, %handshake_buffer60.out0, %handshake_buffer60.out0_valid = hw.instance "handshake_buffer60" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join1.out0: i0, in0_valid: %handshake_join1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store1.addrIn0_ready, %handshake_store1.dataIn_ready, %handshake_store1.ctrl_ready, %handshake_store1.dataToMem, %handshake_store1.dataToMem_valid, %handshake_store1.addrOut0, %handshake_store1.addrOut0_valid = hw.instance "handshake_store1" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer51.out0: i64, addrIn0_valid: %handshake_buffer51.out0_valid: i1, dataIn: %handshake_buffer42.out0: i64, dataIn_valid: %handshake_buffer42.out0_valid: i1, ctrl: %handshake_buffer60.out0: i0, ctrl_valid: %handshake_buffer60.out0_valid: i1, dataToMem_ready: %handshake_buffer62.in0_ready: i1, addrOut0_ready: %handshake_buffer61.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer61.in0_ready, %handshake_buffer61.out0, %handshake_buffer61.out0_valid = hw.instance "handshake_buffer61" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.addrOut0: i64, in0_valid: %handshake_store1.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer62.in0_ready, %handshake_buffer62.out0, %handshake_buffer62.out0_valid = hw.instance "handshake_buffer62" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.dataToMem: i64, in0_valid: %handshake_store1.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stData1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join2.in0_ready, %handshake_join2.in1_ready, %handshake_join2.in2_ready, %handshake_join2.out0, %handshake_join2.out0_valid = hw.instance "handshake_join2" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer5.out0: i0, in0_valid: %handshake_buffer5.out0_valid: i1, in1: %handshake_buffer34.out0: i0, in1_valid: %handshake_buffer34.out0_valid: i1, in2: %handshake_buffer31.out0: i0, in2_valid: %handshake_buffer31.out0_valid: i1, out0_ready: %handshake_buffer63.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer63.in0_ready, %handshake_buffer63.out0, %handshake_buffer63.out0_valid = hw.instance "handshake_buffer63" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join2.out0: i0, in0_valid: %handshake_join2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store2.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store2.addrIn0_ready, %handshake_store2.dataIn_ready, %handshake_store2.ctrl_ready, %handshake_store2.dataToMem, %handshake_store2.dataToMem_valid, %handshake_store2.addrOut0, %handshake_store2.addrOut0_valid = hw.instance "handshake_store2" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer48.out0: i64, addrIn0_valid: %handshake_buffer48.out0_valid: i1, dataIn: %handshake_buffer39.out0: i64, dataIn_valid: %handshake_buffer39.out0_valid: i1, ctrl: %handshake_buffer63.out0: i0, ctrl_valid: %handshake_buffer63.out0_valid: i1, dataToMem_ready: %handshake_buffer65.in0_ready: i1, addrOut0_ready: %handshake_buffer64.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer64.in0_ready, %handshake_buffer64.out0, %handshake_buffer64.out0_valid = hw.instance "handshake_buffer64" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.addrOut0: i64, in0_valid: %handshake_store2.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer65.in0_ready, %handshake_buffer65.out0, %handshake_buffer65.out0_valid = hw.instance "handshake_buffer65" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.dataToMem: i64, in0_valid: %handshake_store2.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stData2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_store3.addrIn0_ready, %handshake_store3.dataIn_ready, %handshake_store3.ctrl_ready, %handshake_store3.dataToMem, %handshake_store3.dataToMem_valid, %handshake_store3.addrOut0, %handshake_store3.addrOut0_valid = hw.instance "handshake_store3" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer56.out0: i64, addrIn0_valid: %handshake_buffer56.out0_valid: i1, dataIn: %handshake_buffer46.out0: i64, dataIn_valid: %handshake_buffer46.out0_valid: i1, ctrl: %handshake_buffer3.out0: i0, ctrl_valid: %handshake_buffer3.out0_valid: i1, dataToMem_ready: %handshake_buffer67.in0_ready: i1, addrOut0_ready: %handshake_buffer66.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer66.in0_ready, %handshake_buffer66.out0, %handshake_buffer66.out0_valid = hw.instance "handshake_buffer66" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.addrOut0: i64, in0_valid: %handshake_store3.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer67.in0_ready, %handshake_buffer67.out0, %handshake_buffer67.out0_valid = hw.instance "handshake_buffer67" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.dataToMem: i64, in0_valid: %handshake_store3.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join3.in0_ready, %handshake_join3.in1_ready, %handshake_join3.out0, %handshake_join3.out0_valid = hw.instance "handshake_join3" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer2.out0: i0, in0_valid: %handshake_buffer2.out0_valid: i1, in1: %handshake_buffer24.out0: i0, in1_valid: %handshake_buffer24.out0_valid: i1, out0_ready: %handshake_buffer68.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer68.in0_ready, %handshake_buffer68.out0, %handshake_buffer68.out0_valid = hw.instance "handshake_buffer68" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join3.out0: i0, in0_valid: %handshake_join3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store4.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store4.addrIn0_ready, %handshake_store4.dataIn_ready, %handshake_store4.ctrl_ready, %handshake_store4.dataToMem, %handshake_store4.dataToMem_valid, %handshake_store4.addrOut0, %handshake_store4.addrOut0_valid = hw.instance "handshake_store4" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer52.out0: i64, addrIn0_valid: %handshake_buffer52.out0_valid: i1, dataIn: %handshake_buffer43.out0: i64, dataIn_valid: %handshake_buffer43.out0_valid: i1, ctrl: %handshake_buffer68.out0: i0, ctrl_valid: %handshake_buffer68.out0_valid: i1, dataToMem_ready: %handshake_buffer70.in0_ready: i1, addrOut0_ready: %handshake_buffer69.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer69.in0_ready, %handshake_buffer69.out0, %handshake_buffer69.out0_valid = hw.instance "handshake_buffer69" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.addrOut0: i64, in0_valid: %handshake_store4.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer70.in0_ready, %handshake_buffer70.out0, %handshake_buffer70.out0_valid = hw.instance "handshake_buffer70" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.dataToMem: i64, in0_valid: %handshake_store4.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stData1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join4.in0_ready, %handshake_join4.in1_ready, %handshake_join4.in2_ready, %handshake_join4.out0, %handshake_join4.out0_valid = hw.instance "handshake_join4" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer1.out0: i0, in0_valid: %handshake_buffer1.out0_valid: i1, in1: %handshake_buffer25.out0: i0, in1_valid: %handshake_buffer25.out0_valid: i1, in2: %handshake_buffer22.out0: i0, in2_valid: %handshake_buffer22.out0_valid: i1, out0_ready: %handshake_buffer71.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer71.in0_ready, %handshake_buffer71.out0, %handshake_buffer71.out0_valid = hw.instance "handshake_buffer71" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join4.out0: i0, in0_valid: %handshake_join4.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store5.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store5.addrIn0_ready, %handshake_store5.dataIn_ready, %handshake_store5.ctrl_ready, %handshake_store5.dataToMem, %handshake_store5.dataToMem_valid, %handshake_store5.addrOut0, %handshake_store5.addrOut0_valid = hw.instance "handshake_store5" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer49.out0: i64, addrIn0_valid: %handshake_buffer49.out0_valid: i1, dataIn: %handshake_buffer40.out0: i64, dataIn_valid: %handshake_buffer40.out0_valid: i1, ctrl: %handshake_buffer71.out0: i0, ctrl_valid: %handshake_buffer71.out0_valid: i1, dataToMem_ready: %handshake_buffer73.in0_ready: i1, addrOut0_ready: %handshake_buffer72.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer72.in0_ready, %handshake_buffer72.out0, %handshake_buffer72.out0_valid = hw.instance "handshake_buffer72" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.addrOut0: i64, in0_valid: %handshake_store5.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer73.in0_ready, %handshake_buffer73.out0, %handshake_buffer73.out0_valid = hw.instance "handshake_buffer73" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.dataToMem: i64, in0_valid: %handshake_store5.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stData2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer74.in0_ready, %handshake_buffer74.out0, %handshake_buffer74.out0_valid = hw.instance "handshake_buffer74" @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in0: %handshake_fork14.out0: i1, in0_valid: %handshake_fork14.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork11.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_fork11.in0_ready, %handshake_fork11.out0, %handshake_fork11.out0_valid, %handshake_fork11.out1, %handshake_fork11.out1_valid, %handshake_fork11.out2, %handshake_fork11.out2_valid, %handshake_fork11.out3, %handshake_fork11.out3_valid = hw.instance "handshake_fork11" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in0: %handshake_buffer74.out0: i1, in0_valid: %handshake_buffer74.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer78.in0_ready: i1, out1_ready: %handshake_buffer77.in0_ready: i1, out2_ready: %handshake_buffer76.in0_ready: i1, out3_ready: %handshake_buffer75.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1)
    %handshake_buffer75.in0_ready, %handshake_buffer75.out0, %handshake_buffer75.out0_valid = hw.instance "handshake_buffer75" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out3: i1, in0_valid: %handshake_fork11.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux0.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer76.in0_ready, %handshake_buffer76.out0, %handshake_buffer76.out0_valid = hw.instance "handshake_buffer76" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out2: i1, in0_valid: %handshake_fork11.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux1.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer77.in0_ready, %handshake_buffer77.out0, %handshake_buffer77.out0_valid = hw.instance "handshake_buffer77" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out1: i1, in0_valid: %handshake_fork11.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux2.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer78.in0_ready, %handshake_buffer78.out0, %handshake_buffer78.out0_valid = hw.instance "handshake_buffer78" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out0: i1, in0_valid: %handshake_fork11.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux3.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_mux0.select_ready, %handshake_mux0.in0_ready, %handshake_mux0.in1_ready, %handshake_mux0.out0, %handshake_mux0.out0_valid = hw.instance "handshake_mux0" @handshake_mux_in_ui1_3ins_1outs_ctrl(select: %handshake_buffer75.out0: i1, select_valid: %handshake_buffer75.out0_valid: i1, in0: %handshake_buffer36.out0: i0, in0_valid: %handshake_buffer36.out0_valid: i1, in1: %handshake_buffer107.out0: i0, in1_valid: %handshake_buffer107.out0_valid: i1, out0_ready: %handshake_buffer79.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer79.in0_ready, %handshake_buffer79.out0, %handshake_buffer79.out0_valid = hw.instance "handshake_buffer79" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_mux0.out0: i0, in0_valid: %handshake_mux0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br3.data_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_mux1.select_ready, %handshake_mux1.in0_ready, %handshake_mux1.in1_ready, %handshake_mux1.out0, %handshake_mux1.out0_valid = hw.instance "handshake_mux1" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer76.out0: i1, select_valid: %handshake_buffer76.out0_valid: i1, in0: %handshake_buffer57.out0: i64, in0_valid: %handshake_buffer57.out0_valid: i1, in1: %handshake_buffer115.out0: i64, in1_valid: %handshake_buffer115.out0_valid: i1, out0_ready: %handshake_buffer80.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer80.in0_ready, %handshake_buffer80.out0, %handshake_buffer80.out0_valid = hw.instance "handshake_buffer80" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux1.out0: i64, in0_valid: %handshake_mux1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork12.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork12.in0_ready, %handshake_fork12.out0, %handshake_fork12.out0_valid, %handshake_fork12.out1, %handshake_fork12.out1_valid = hw.instance "handshake_fork12" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer80.out0: i64, in0_valid: %handshake_buffer80.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer82.in0_ready: i1, out1_ready: %handshake_buffer81.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer81.in0_ready, %handshake_buffer81.out0, %handshake_buffer81.out0_valid = hw.instance "handshake_buffer81" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out1: i64, in0_valid: %handshake_fork12.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br0.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer82.in0_ready, %handshake_buffer82.out0, %handshake_buffer82.out0_valid = hw.instance "handshake_buffer82" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out0: i64, in0_valid: %handshake_fork12.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_cmpi0.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_mux2.select_ready, %handshake_mux2.in0_ready, %handshake_mux2.in1_ready, %handshake_mux2.out0, %handshake_mux2.out0_valid = hw.instance "handshake_mux2" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer77.out0: i1, select_valid: %handshake_buffer77.out0_valid: i1, in0: %handshake_buffer37.out0: i64, in0_valid: %handshake_buffer37.out0_valid: i1, in1: %handshake_buffer97.out0: i64, in1_valid: %handshake_buffer97.out0_valid: i1, out0_ready: %handshake_buffer83.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer83.in0_ready, %handshake_buffer83.out0, %handshake_buffer83.out0_valid = hw.instance "handshake_buffer83" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux2.out0: i64, in0_valid: %handshake_mux2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork13.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork13.in0_ready, %handshake_fork13.out0, %handshake_fork13.out0_valid, %handshake_fork13.out1, %handshake_fork13.out1_valid = hw.instance "handshake_fork13" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer83.out0: i64, in0_valid: %handshake_buffer83.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer85.in0_ready: i1, out1_ready: %handshake_buffer84.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer84.in0_ready, %handshake_buffer84.out0, %handshake_buffer84.out0_valid = hw.instance "handshake_buffer84" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out1: i64, in0_valid: %handshake_fork13.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br1.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer85.in0_ready, %handshake_buffer85.out0, %handshake_buffer85.out0_valid = hw.instance "handshake_buffer85" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out0: i64, in0_valid: %handshake_fork13.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_cmpi0.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_mux3.select_ready, %handshake_mux3.in0_ready, %handshake_mux3.in1_ready, %handshake_mux3.out0, %handshake_mux3.out0_valid = hw.instance "handshake_mux3" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer78.out0: i1, select_valid: %handshake_buffer78.out0_valid: i1, in0: %handshake_buffer53.out0: i64, in0_valid: %handshake_buffer53.out0_valid: i1, in1: %handshake_buffer100.out0: i64, in1_valid: %handshake_buffer100.out0_valid: i1, out0_ready: %handshake_buffer86.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer86.in0_ready, %handshake_buffer86.out0, %handshake_buffer86.out0_valid = hw.instance "handshake_buffer86" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux3.out0: i64, in0_valid: %handshake_mux3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br2.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %arith_cmpi0.in0_ready, %arith_cmpi0.in1_ready, %arith_cmpi0.out0, %arith_cmpi0.out0_valid = hw.instance "arith_cmpi0" @arith_cmpi_in_ui64_ui64_out_ui1_slt(in0: %handshake_buffer82.out0: i64, in0_valid: %handshake_buffer82.out0_valid: i1, in1: %handshake_buffer85.out0: i64, in1_valid: %handshake_buffer85.out0_valid: i1, out0_ready: %handshake_buffer87.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer87.in0_ready, %handshake_buffer87.out0, %handshake_buffer87.out0_valid = hw.instance "handshake_buffer87" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %arith_cmpi0.out0: i1, in0_valid: %arith_cmpi0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork14.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_fork14.in0_ready, %handshake_fork14.out0, %handshake_fork14.out0_valid, %handshake_fork14.out1, %handshake_fork14.out1_valid, %handshake_fork14.out2, %handshake_fork14.out2_valid, %handshake_fork14.out3, %handshake_fork14.out3_valid, %handshake_fork14.out4, %handshake_fork14.out4_valid = hw.instance "handshake_fork14" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in0: %handshake_buffer87.out0: i1, in0_valid: %handshake_buffer87.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer74.in0_ready: i1, out1_ready: %handshake_buffer91.in0_ready: i1, out2_ready: %handshake_buffer90.in0_ready: i1, out3_ready: %handshake_buffer89.in0_ready: i1, out4_ready: %handshake_buffer88.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1, out4: i1, out4_valid: i1)
    %handshake_buffer88.in0_ready, %handshake_buffer88.out0, %handshake_buffer88.out0_valid = hw.instance "handshake_buffer88" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out4: i1, in0_valid: %handshake_fork14.out4_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br0.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer89.in0_ready, %handshake_buffer89.out0, %handshake_buffer89.out0_valid = hw.instance "handshake_buffer89" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out3: i1, in0_valid: %handshake_fork14.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br1.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer90.in0_ready, %handshake_buffer90.out0, %handshake_buffer90.out0_valid = hw.instance "handshake_buffer90" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out2: i1, in0_valid: %handshake_fork14.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br2.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer91.in0_ready, %handshake_buffer91.out0, %handshake_buffer91.out0_valid = hw.instance "handshake_buffer91" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out1: i1, in0_valid: %handshake_fork14.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br3.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_cond_br0.cond_ready, %handshake_cond_br0.data_ready, %handshake_cond_br0.outTrue, %handshake_cond_br0.outTrue_valid, %handshake_cond_br0.outFalse, %handshake_cond_br0.outFalse_valid = hw.instance "handshake_cond_br0" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer88.out0: i1, cond_valid: %handshake_buffer88.out0_valid: i1, data: %handshake_buffer81.out0: i64, data_valid: %handshake_buffer81.out0_valid: i1, outTrue_ready: %handshake_buffer92.in0_ready: i1, outFalse_ready: %handshake_sink0.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %handshake_buffer92.in0_ready, %handshake_buffer92.out0, %handshake_buffer92.out0_valid = hw.instance "handshake_buffer92" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br0.outTrue: i64, in0_valid: %handshake_cond_br0.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork15.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_sink0.in0_ready = hw.instance "handshake_sink0" @handshake_sink_in_ui64(in0: %handshake_cond_br0.outFalse: i64, in0_valid: %handshake_cond_br0.outFalse_valid: i1) -> (in0_ready: i1)
    %handshake_fork15.in0_ready, %handshake_fork15.out0, %handshake_fork15.out0_valid, %handshake_fork15.out1, %handshake_fork15.out1_valid, %handshake_fork15.out2, %handshake_fork15.out2_valid, %handshake_fork15.out3, %handshake_fork15.out3_valid = hw.instance "handshake_fork15" @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in0: %handshake_buffer92.out0: i64, in0_valid: %handshake_buffer92.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer96.in0_ready: i1, out1_ready: %handshake_buffer95.in0_ready: i1, out2_ready: %handshake_buffer94.in0_ready: i1, out3_ready: %handshake_buffer93.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1, out3: i64, out3_valid: i1)
    %handshake_buffer93.in0_ready, %handshake_buffer93.out0, %handshake_buffer93.out0_valid = hw.instance "handshake_buffer93" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out3: i64, in0_valid: %handshake_fork15.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store6.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer94.in0_ready, %handshake_buffer94.out0, %handshake_buffer94.out0_valid = hw.instance "handshake_buffer94" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out2: i64, in0_valid: %handshake_fork15.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load1.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer95.in0_ready, %handshake_buffer95.out0, %handshake_buffer95.out0_valid = hw.instance "handshake_buffer95" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out1: i64, in0_valid: %handshake_fork15.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load0.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer96.in0_ready, %handshake_buffer96.out0, %handshake_buffer96.out0_valid = hw.instance "handshake_buffer96" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out0: i64, in0_valid: %handshake_fork15.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi1.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_cond_br1.cond_ready, %handshake_cond_br1.data_ready, %handshake_cond_br1.outTrue, %handshake_cond_br1.outTrue_valid, %handshake_cond_br1.outFalse, %handshake_cond_br1.outFalse_valid = hw.instance "handshake_cond_br1" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer89.out0: i1, cond_valid: %handshake_buffer89.out0_valid: i1, data: %handshake_buffer84.out0: i64, data_valid: %handshake_buffer84.out0_valid: i1, outTrue_ready: %handshake_buffer97.in0_ready: i1, outFalse_ready: %handshake_sink1.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %handshake_buffer97.in0_ready, %handshake_buffer97.out0, %handshake_buffer97.out0_valid = hw.instance "handshake_buffer97" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br1.outTrue: i64, in0_valid: %handshake_cond_br1.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux2.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_sink1.in0_ready = hw.instance "handshake_sink1" @handshake_sink_in_ui64(in0: %handshake_cond_br1.outFalse: i64, in0_valid: %handshake_cond_br1.outFalse_valid: i1) -> (in0_ready: i1)
    %handshake_cond_br2.cond_ready, %handshake_cond_br2.data_ready, %handshake_cond_br2.outTrue, %handshake_cond_br2.outTrue_valid, %handshake_cond_br2.outFalse, %handshake_cond_br2.outFalse_valid = hw.instance "handshake_cond_br2" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer90.out0: i1, cond_valid: %handshake_buffer90.out0_valid: i1, data: %handshake_buffer86.out0: i64, data_valid: %handshake_buffer86.out0_valid: i1, outTrue_ready: %handshake_buffer98.in0_ready: i1, outFalse_ready: %handshake_sink2.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %handshake_buffer98.in0_ready, %handshake_buffer98.out0, %handshake_buffer98.out0_valid = hw.instance "handshake_buffer98" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br2.outTrue: i64, in0_valid: %handshake_cond_br2.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork16.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_sink2.in0_ready = hw.instance "handshake_sink2" @handshake_sink_in_ui64(in0: %handshake_cond_br2.outFalse: i64, in0_valid: %handshake_cond_br2.outFalse_valid: i1) -> (in0_ready: i1)
    %handshake_fork16.in0_ready, %handshake_fork16.out0, %handshake_fork16.out0_valid, %handshake_fork16.out1, %handshake_fork16.out1_valid = hw.instance "handshake_fork16" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer98.out0: i64, in0_valid: %handshake_buffer98.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer100.in0_ready: i1, out1_ready: %handshake_buffer99.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer99.in0_ready, %handshake_buffer99.out0, %handshake_buffer99.out0_valid = hw.instance "handshake_buffer99" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out1: i64, in0_valid: %handshake_fork16.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi1.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer100.in0_ready, %handshake_buffer100.out0, %handshake_buffer100.out0_valid = hw.instance "handshake_buffer100" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out0: i64, in0_valid: %handshake_fork16.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux3.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_cond_br3.cond_ready, %handshake_cond_br3.data_ready, %handshake_cond_br3.outTrue, %handshake_cond_br3.outTrue_valid, %handshake_cond_br3.outFalse, %handshake_cond_br3.outFalse_valid = hw.instance "handshake_cond_br3" @handshake_cond_br_in_ui1_2ins_2outs_ctrl(cond: %handshake_buffer91.out0: i1, cond_valid: %handshake_buffer91.out0_valid: i1, data: %handshake_buffer79.out0: i0, data_valid: %handshake_buffer79.out0_valid: i1, outTrue_ready: %handshake_buffer102.in0_ready: i1, outFalse_ready: %handshake_buffer101.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i0, outTrue_valid: i1, outFalse: i0, outFalse_valid: i1)
    %handshake_buffer101.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid = hw.instance "handshake_buffer101" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outFalse: i0, in0_valid: %handshake_cond_br3.outFalse_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %out0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer102.in0_ready, %handshake_buffer102.out0, %handshake_buffer102.out0_valid = hw.instance "handshake_buffer102" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outTrue: i0, in0_valid: %handshake_cond_br3.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork17.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork17.in0_ready, %handshake_fork17.out0, %handshake_fork17.out0_valid, %handshake_fork17.out1, %handshake_fork17.out1_valid, %handshake_fork17.out2, %handshake_fork17.out2_valid, %handshake_fork17.out3, %handshake_fork17.out3_valid = hw.instance "handshake_fork17" @handshake_fork_1ins_4outs_ctrl(in0: %handshake_buffer102.out0: i0, in0_valid: %handshake_buffer102.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer106.in0_ready: i1, out1_ready: %handshake_buffer105.in0_ready: i1, out2_ready: %handshake_buffer104.in0_ready: i1, out3_ready: %handshake_buffer103.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1)
    %handshake_buffer103.in0_ready, %handshake_buffer103.out0, %handshake_buffer103.out0_valid = hw.instance "handshake_buffer103" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out3: i0, in0_valid: %handshake_fork17.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer104.in0_ready, %handshake_buffer104.out0, %handshake_buffer104.out0_valid = hw.instance "handshake_buffer104" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out2: i0, in0_valid: %handshake_fork17.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer105.in0_ready, %handshake_buffer105.out0, %handshake_buffer105.out0_valid = hw.instance "handshake_buffer105" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out1: i0, in0_valid: %handshake_fork17.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer106.in0_ready, %handshake_buffer106.out0, %handshake_buffer106.out0_valid = hw.instance "handshake_buffer106" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out0: i0, in0_valid: %handshake_fork17.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store6.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_join5.in0_ready, %handshake_join5.in1_ready, %handshake_join5.in2_ready, %handshake_join5.in3_ready, %handshake_join5.out0, %handshake_join5.out0_valid = hw.instance "handshake_join5" @handshake_join_4ins_1outs_ctrl(in0: %handshake_buffer105.out0: i0, in0_valid: %handshake_buffer105.out0_valid: i1, in1: %handshake_buffer26.out0: i0, in1_valid: %handshake_buffer26.out0_valid: i1, in2: %handshake_buffer16.out0: i0, in2_valid: %handshake_buffer16.out0_valid: i1, in3: %handshake_buffer15.out0: i0, in3_valid: %handshake_buffer15.out0_valid: i1, out0_ready: %handshake_buffer107.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer107.in0_ready, %handshake_buffer107.out0, %handshake_buffer107.out0_valid = hw.instance "handshake_buffer107" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join5.out0: i0, in0_valid: %handshake_join5.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux0.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_load0.addrIn0_ready, %handshake_load0.dataFromMem_ready, %handshake_load0.ctrl_ready, %handshake_load0.dataOut, %handshake_load0.dataOut_valid, %handshake_load0.addrOut0, %handshake_load0.addrOut0_valid = hw.instance "handshake_load0" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer95.out0: i64, addrIn0_valid: %handshake_buffer95.out0_valid: i1, dataFromMem: %handshake_buffer30.out0: i64, dataFromMem_valid: %handshake_buffer30.out0_valid: i1, ctrl: %handshake_buffer103.out0: i0, ctrl_valid: %handshake_buffer103.out0_valid: i1, dataOut_ready: %handshake_buffer109.in0_ready: i1, addrOut0_ready: %handshake_buffer108.in0_ready: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer108.in0_ready, %handshake_buffer108.out0, %handshake_buffer108.out0_valid = hw.instance "handshake_buffer108" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.addrOut0: i64, in0_valid: %handshake_load0.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.ldAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer109.in0_ready, %handshake_buffer109.out0, %handshake_buffer109.out0_valid = hw.instance "handshake_buffer109" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.dataOut: i64, in0_valid: %handshake_load0.dataOut_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi0.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_load1.addrIn0_ready, %handshake_load1.dataFromMem_ready, %handshake_load1.ctrl_ready, %handshake_load1.dataOut, %handshake_load1.dataOut_valid, %handshake_load1.addrOut0, %handshake_load1.addrOut0_valid = hw.instance "handshake_load1" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer94.out0: i64, addrIn0_valid: %handshake_buffer94.out0_valid: i1, dataFromMem: %handshake_buffer20.out0: i64, dataFromMem_valid: %handshake_buffer20.out0_valid: i1, ctrl: %handshake_buffer104.out0: i0, ctrl_valid: %handshake_buffer104.out0_valid: i1, dataOut_ready: %handshake_buffer111.in0_ready: i1, addrOut0_ready: %handshake_buffer110.in0_ready: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer110.in0_ready, %handshake_buffer110.out0, %handshake_buffer110.out0_valid = hw.instance "handshake_buffer110" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.addrOut0: i64, in0_valid: %handshake_load1.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.ldAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer111.in0_ready, %handshake_buffer111.out0, %handshake_buffer111.out0_valid = hw.instance "handshake_buffer111" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.dataOut: i64, in0_valid: %handshake_load1.dataOut_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi0.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %arith_addi0.in0_ready, %arith_addi0.in1_ready, %arith_addi0.out0, %arith_addi0.out0_valid = hw.instance "arith_addi0" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer109.out0: i64, in0_valid: %handshake_buffer109.out0_valid: i1, in1: %handshake_buffer111.out0: i64, in1_valid: %handshake_buffer111.out0_valid: i1, out0_ready: %handshake_buffer112.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer112.in0_ready, %handshake_buffer112.out0, %handshake_buffer112.out0_valid = hw.instance "handshake_buffer112" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi0.out0: i64, in0_valid: %arith_addi0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store6.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_store6.addrIn0_ready, %handshake_store6.dataIn_ready, %handshake_store6.ctrl_ready, %handshake_store6.dataToMem, %handshake_store6.dataToMem_valid, %handshake_store6.addrOut0, %handshake_store6.addrOut0_valid = hw.instance "handshake_store6" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer93.out0: i64, addrIn0_valid: %handshake_buffer93.out0_valid: i1, dataIn: %handshake_buffer112.out0: i64, dataIn_valid: %handshake_buffer112.out0_valid: i1, ctrl: %handshake_buffer106.out0: i0, ctrl_valid: %handshake_buffer106.out0_valid: i1, dataToMem_ready: %handshake_buffer114.in0_ready: i1, addrOut0_ready: %handshake_buffer113.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer113.in0_ready, %handshake_buffer113.out0, %handshake_buffer113.out0_valid = hw.instance "handshake_buffer113" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.addrOut0: i64, in0_valid: %handshake_store6.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory0.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer114.in0_ready, %handshake_buffer114.out0, %handshake_buffer114.out0_valid = hw.instance "handshake_buffer114" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.dataToMem: i64, in0_valid: %handshake_store6.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory0.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %arith_addi1.in0_ready, %arith_addi1.in1_ready, %arith_addi1.out0, %arith_addi1.out0_valid = hw.instance "arith_addi1" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer96.out0: i64, in0_valid: %handshake_buffer96.out0_valid: i1, in1: %handshake_buffer99.out0: i64, in1_valid: %handshake_buffer99.out0_valid: i1, out0_ready: %handshake_buffer115.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer115.in0_ready, %handshake_buffer115.out0, %handshake_buffer115.out0_valid = hw.instance "handshake_buffer115" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi1.out0: i64, in0_valid: %arith_addi1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux1.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    hw.output %handshake_buffer0.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid : i1, i0, i1
  }
}


// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_constant_c1_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c1_i64 = hw.constant 1 : i64
  hw.output %out0_ready, %c1_i64, %ctrl_valid : i1, i64, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_constant_c2_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c2_i64 = hw.constant 2 : i64
  hw.output %out0_ready, %c2_i64, %ctrl_valid : i1, i64, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_constant_c3_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c3_i64 = hw.constant 3 : i64
  hw.output %out0_ready, %c3_i64, %ctrl_valid : i1, i64, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_constant_c0_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c0_i64 = hw.constant 0 : i64
  hw.output %out0_ready, %c0_i64, %ctrl_valid : i1, i64, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_join_7ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %in4 : i0, in %in4_valid : i1, in %in5 : i0, in %in5_valid : i1, in %in6 : i0, in %in6_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out in4_ready : i1, out in5_ready : i1, out in6_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c0_i0 = hw.constant 0 : i0
  %0 = comb.and %in0_valid, %in1_valid, %in2_valid, %in3_valid, %in4_valid, %in5_valid, %in6_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  hw.output %1, %1, %1, %1, %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i1, i1, i1, i1, i0, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_memory_out_ui64_id2(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %clock : i1, in %reset : i1, in %stDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stDone0 : i0, out stDone0_valid : i1) {
  %true = hw.constant true
  %c0_i0 = hw.constant 0 : i0
  %_handshake_memory_2 = sv.reg : !hw.inout<uarray<3xi64>> 
  %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
  %0 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    %4 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    %5 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
    sv.if %5 {
      %7 = comb.extract %stAddr0 from 0 : (i64) -> i2
      %8 = sv.array_index_inout %_handshake_memory_2[%7] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %8, %stData0 : i64
    }
    %6 = comb.mux %3, %5, %4 : i1
    sv.passign %writeValidBuffer, %6 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %writeValidBuffer, %false : i1
  }
  %1 = comb.and %stDone0_ready, %0 {sv.namehint = "storeCompleted"} : i1
  %2 = comb.xor %0, %true : i1
  %3 = comb.or %2, %1 {sv.namehint = "emptyOrComplete"} : i1
  hw.output %3, %3, %c0_i0, %0 : i1, i1, i0, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_fork_1ins_2outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1) {
  %true = hw.constant true
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.and %1, %in0_valid : i1
  %3 = comb.and %out0_ready, %2 : i1
  %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    %true_0 = hw.constant true
    %11 = comb.xor %10, %true_0 : i1
    %12 = comb.and %4, %11 : i1
    sv.passign %emitted_0, %12 : i1
    %13 = comb.xor %10, %true_0 : i1
    %14 = comb.and %9, %13 : i1
    sv.passign %emitted_1, %14 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
  }
  %6 = comb.xor %5, %true : i1
  %7 = comb.and %6, %in0_valid : i1
  %8 = comb.and %out1_ready, %7 : i1
  %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
  %10 = comb.and %4, %9 {sv.namehint = "allDone"} : i1
  hw.output %10, %in0, %2, %in0, %7 : i1, i0, i1, i0, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1) {
  %true = hw.constant true
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.and %1, %in0_valid : i1
  %3 = comb.and %out0_ready, %2 : i1
  %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %6 = comb.xor %5, %true : i1
  %7 = comb.and %6, %in0_valid : i1
  %8 = comb.and %out1_ready, %7 : i1
  %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %10 = sv.read_inout %emitted_2 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    %true_0 = hw.constant true
    %16 = comb.xor %15, %true_0 : i1
    %17 = comb.and %4, %16 : i1
    sv.passign %emitted_0, %17 : i1
    %18 = comb.xor %15, %true_0 : i1
    %19 = comb.and %9, %18 : i1
    sv.passign %emitted_1, %19 : i1
    %20 = comb.xor %15, %true_0 : i1
    %21 = comb.and %14, %20 : i1
    sv.passign %emitted_2, %21 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
  }
  %11 = comb.xor %10, %true : i1
  %12 = comb.and %11, %in0_valid : i1
  %13 = comb.and %out2_ready, %12 : i1
  %14 = comb.or %13, %10 {sv.namehint = "done2"} : i1
  %15 = comb.and %4, %9, %14 {sv.namehint = "allDone"} : i1
  hw.output %15, %in0, %2, %in0, %7, %in0, %12 : i1, i64, i1, i64, i1, i64, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_fork_1ins_3outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1) {
  %true = hw.constant true
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.and %1, %in0_valid : i1
  %3 = comb.and %out0_ready, %2 : i1
  %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %6 = comb.xor %5, %true : i1
  %7 = comb.and %6, %in0_valid : i1
  %8 = comb.and %out1_ready, %7 : i1
  %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %10 = sv.read_inout %emitted_2 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    %true_0 = hw.constant true
    %16 = comb.xor %15, %true_0 : i1
    %17 = comb.and %4, %16 : i1
    sv.passign %emitted_0, %17 : i1
    %18 = comb.xor %15, %true_0 : i1
    %19 = comb.and %9, %18 : i1
    sv.passign %emitted_1, %19 : i1
    %20 = comb.xor %15, %true_0 : i1
    %21 = comb.and %14, %20 : i1
    sv.passign %emitted_2, %21 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
  }
  %11 = comb.xor %10, %true : i1
  %12 = comb.and %11, %in0_valid : i1
  %13 = comb.and %out2_ready, %12 : i1
  %14 = comb.or %13, %10 {sv.namehint = "done2"} : i1
  %15 = comb.and %4, %9, %14 {sv.namehint = "allDone"} : i1
  hw.output %15, %in0, %2, %in0, %7, %in0, %12 : i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_memory_out_ui64_id0(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : i1, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
  %true = hw.constant true
  %c0_i0 = hw.constant 0 : i0
  %_handshake_memory_0 = sv.reg : !hw.inout<uarray<3xi64>> 
  %0 = comb.extract %ldAddr0 from 0 : (i64) -> i2
  %1 = sv.array_index_inout %_handshake_memory_0[%0] : !hw.inout<uarray<3xi64>>, i2
  %2 = sv.read_inout %1 : !hw.inout<i64>
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %3 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %4 = comb.xor %3, %true : i1
  %5 = comb.and %4, %ldAddr0_valid : i1
  %6 = comb.and %ldData0_ready, %5 : i1
  %7 = comb.or %6, %3 {sv.namehint = "done0"} : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %9 = comb.xor %8, %true : i1
  %10 = comb.and %9, %ldAddr0_valid : i1
  %11 = comb.and %ldDone0_ready, %10 : i1
  %12 = comb.or %11, %8 {sv.namehint = "done1"} : i1
  %13 = comb.and %7, %12 {sv.namehint = "allDone"} : i1
  %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
  %14 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
  %15 = comb.and %stDone0_ready, %14 {sv.namehint = "storeCompleted"} : i1
  %16 = comb.xor %14, %true : i1
  %17 = comb.or %16, %15 {sv.namehint = "emptyOrComplete"} : i1
  %writeValidBuffer_0 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
  %18 = sv.read_inout %writeValidBuffer_0 : !hw.inout<i1>
  %19 = comb.and %stDone1_ready, %18 {sv.namehint = "storeCompleted"} : i1
  %20 = comb.xor %18, %true : i1
  %21 = comb.or %20, %19 {sv.namehint = "emptyOrComplete"} : i1
  %writeValidBuffer_1 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
  %22 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    %true_2 = hw.constant true
    %26 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    %27 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
    %28 = sv.read_inout %writeValidBuffer_0 : !hw.inout<i1>
    %29 = comb.and %stAddr1_valid, %stData1_valid {sv.namehint = "writeValid"} : i1
    %30 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
    %31 = comb.and %stAddr2_valid, %stData2_valid {sv.namehint = "writeValid"} : i1
    sv.if %31 {
      %39 = comb.extract %stAddr2 from 0 : (i64) -> i2
      %40 = sv.array_index_inout %_handshake_memory_0[%39] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %40, %stData2 : i64
    }
    sv.if %29 {
      %39 = comb.extract %stAddr1 from 0 : (i64) -> i2
      %40 = sv.array_index_inout %_handshake_memory_0[%39] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %40, %stData1 : i64
    }
    sv.if %27 {
      %39 = comb.extract %stAddr0 from 0 : (i64) -> i2
      %40 = sv.array_index_inout %_handshake_memory_0[%39] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %40, %stData0 : i64
    }
    %32 = comb.xor %13, %true_2 : i1
    %33 = comb.and %7, %32 : i1
    sv.passign %emitted_0, %33 : i1
    %34 = comb.xor %13, %true_2 : i1
    %35 = comb.and %12, %34 : i1
    sv.passign %emitted_1, %35 : i1
    %36 = comb.mux %17, %27, %26 : i1
    sv.passign %writeValidBuffer, %36 : i1
    %37 = comb.mux %21, %29, %28 : i1
    sv.passign %writeValidBuffer_0, %37 : i1
    %38 = comb.mux %25, %31, %30 : i1
    sv.passign %writeValidBuffer_1, %38 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %writeValidBuffer, %false : i1
    sv.passign %writeValidBuffer_0, %false : i1
    sv.passign %writeValidBuffer_1, %false : i1
  }
  %23 = comb.and %stDone2_ready, %22 {sv.namehint = "storeCompleted"} : i1
  %24 = comb.xor %22, %true : i1
  %25 = comb.or %24, %23 {sv.namehint = "emptyOrComplete"} : i1
  hw.output %17, %17, %21, %21, %25, %25, %13, %2, %5, %c0_i0, %14, %c0_i0, %18, %c0_i0, %22, %c0_i0, %10 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_buffer_in_ui64_out_ui64_2slots_seq(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1) {
  %true = hw.constant true
  %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
  %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.xor %5, %true : i1
  %3 = comb.or %1, %2 : i1
  %data0_reg = sv.reg sym @data0_reg : !hw.inout<i64> 
  %4 = sv.read_inout %data0_reg : !hw.inout<i64>
  %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
  %5 = sv.read_inout %ready0_reg : !hw.inout<i1>
  %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i64> 
  %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
  %6 = sv.read_inout %valid1_reg : !hw.inout<i1>
  %7 = comb.xor %6, %true : i1
  %8 = comb.xor %11, %true : i1
  %9 = comb.or %7, %8 : i1
  %data1_reg = sv.reg sym @data1_reg : !hw.inout<i64> 
  %10 = sv.read_inout %data1_reg : !hw.inout<i64>
  %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
  %11 = sv.read_inout %ready1_reg : !hw.inout<i1>
  %12 = comb.mux %11, %11, %6 : i1
  %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i64> 
  %13 = sv.read_inout %ctrl_data1_reg : !hw.inout<i64>
  sv.alwaysff(posedge %clock) {
    %true_0 = hw.constant true
    %c0_i64 = hw.constant 0 : i64
    %15 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %16 = sv.read_inout %data0_reg : !hw.inout<i64>
    %17 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %18 = comb.xor %9, %true_0 : i1
    %true_1 = hw.constant true
    %19 = comb.xor %17, %true_1 : i1
    %20 = comb.and %18, %19 : i1
    %21 = comb.and %9, %17 : i1
    %22 = sv.read_inout %ctrl_data0_reg : !hw.inout<i64>
    %23 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %24 = sv.read_inout %data1_reg : !hw.inout<i64>
    %25 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %26 = comb.xor %out0_ready, %true_0 : i1
    %true_2 = hw.constant true
    %27 = comb.xor %25, %true_2 : i1
    %28 = comb.and %26, %27 : i1
    %29 = comb.and %out0_ready, %25 : i1
    %30 = sv.read_inout %ctrl_data1_reg : !hw.inout<i64>
    %31 = comb.mux %3, %in0_valid, %15 : i1
    sv.passign %valid0_reg, %31 : i1
    %32 = comb.mux %3, %in0, %4 : i64
    sv.passign %data0_reg, %32 : i64
    %33 = comb.xor %21, %true_0 : i1
    %34 = comb.mux %20, %15, %17 : i1
    %35 = comb.and %33, %34 : i1
    sv.passign %ready0_reg, %35 : i1
    %36 = comb.mux %20, %16, %22 : i64
    %37 = comb.mux %21, %c0_i64, %36 : i64
    sv.passign %ctrl_data0_reg, %37 : i64
    %38 = comb.mux %17, %17, %15 : i1
    %39 = comb.mux %9, %38, %23 : i1
    sv.passign %valid1_reg, %39 : i1
    %40 = comb.mux %17, %22, %16 : i64
    %41 = comb.mux %9, %40, %10 : i64
    sv.passign %data1_reg, %41 : i64
    %42 = comb.xor %29, %true_0 : i1
    %43 = comb.mux %28, %23, %25 : i1
    %44 = comb.and %42, %43 : i1
    sv.passign %ready1_reg, %44 : i1
    %45 = comb.mux %28, %24, %30 : i64
    %46 = comb.mux %29, %c0_i64, %45 : i64
    sv.passign %ctrl_data1_reg, %46 : i64
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    %c0_i64 = hw.constant 0 : i64
    sv.passign %valid0_reg, %false : i1
    sv.passign %data0_reg, %c0_i64 : i64
    sv.passign %ready0_reg, %false : i1
    sv.passign %ctrl_data0_reg, %c0_i64 : i64
    sv.passign %valid1_reg, %false : i1
    sv.passign %data1_reg, %c0_i64 : i64
    sv.passign %ready1_reg, %false : i1
    sv.passign %ctrl_data1_reg, %c0_i64 : i64
  }
  %14 = comb.mux %11, %13, %10 : i64
  hw.output %3, %14, %12 : i1, i64, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_fork_1ins_14outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, in %out5_ready : i1, in %out6_ready : i1, in %out7_ready : i1, in %out8_ready : i1, in %out9_ready : i1, in %out10_ready : i1, in %out11_ready : i1, in %out12_ready : i1, in %out13_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1, out out4 : i0, out out4_valid : i1, out out5 : i0, out out5_valid : i1, out out6 : i0, out out6_valid : i1, out out7 : i0, out out7_valid : i1, out out8 : i0, out out8_valid : i1, out out9 : i0, out out9_valid : i1, out out10 : i0, out out10_valid : i1, out out11 : i0, out out11_valid : i1, out out12 : i0, out out12_valid : i1, out out13 : i0, out out13_valid : i1) {
  %true = hw.constant true
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.and %1, %in0_valid : i1
  %3 = comb.and %out0_ready, %2 : i1
  %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %6 = comb.xor %5, %true : i1
  %7 = comb.and %6, %in0_valid : i1
  %8 = comb.and %out1_ready, %7 : i1
  %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %10 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %11 = comb.xor %10, %true : i1
  %12 = comb.and %11, %in0_valid : i1
  %13 = comb.and %out2_ready, %12 : i1
  %14 = comb.or %13, %10 {sv.namehint = "done2"} : i1
  %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
  %15 = sv.read_inout %emitted_3 : !hw.inout<i1>
  %16 = comb.xor %15, %true : i1
  %17 = comb.and %16, %in0_valid : i1
  %18 = comb.and %out3_ready, %17 : i1
  %19 = comb.or %18, %15 {sv.namehint = "done3"} : i1
  %emitted_4 = sv.reg sym @emitted_4 : !hw.inout<i1> 
  %20 = sv.read_inout %emitted_4 : !hw.inout<i1>
  %21 = comb.xor %20, %true : i1
  %22 = comb.and %21, %in0_valid : i1
  %23 = comb.and %out4_ready, %22 : i1
  %24 = comb.or %23, %20 {sv.namehint = "done4"} : i1
  %emitted_5 = sv.reg sym @emitted_5 : !hw.inout<i1> 
  %25 = sv.read_inout %emitted_5 : !hw.inout<i1>
  %26 = comb.xor %25, %true : i1
  %27 = comb.and %26, %in0_valid : i1
  %28 = comb.and %out5_ready, %27 : i1
  %29 = comb.or %28, %25 {sv.namehint = "done5"} : i1
  %emitted_6 = sv.reg sym @emitted_6 : !hw.inout<i1> 
  %30 = sv.read_inout %emitted_6 : !hw.inout<i1>
  %31 = comb.xor %30, %true : i1
  %32 = comb.and %31, %in0_valid : i1
  %33 = comb.and %out6_ready, %32 : i1
  %34 = comb.or %33, %30 {sv.namehint = "done6"} : i1
  %emitted_7 = sv.reg sym @emitted_7 : !hw.inout<i1> 
  %35 = sv.read_inout %emitted_7 : !hw.inout<i1>
  %36 = comb.xor %35, %true : i1
  %37 = comb.and %36, %in0_valid : i1
  %38 = comb.and %out7_ready, %37 : i1
  %39 = comb.or %38, %35 {sv.namehint = "done7"} : i1
  %emitted_8 = sv.reg sym @emitted_8 : !hw.inout<i1> 
  %40 = sv.read_inout %emitted_8 : !hw.inout<i1>
  %41 = comb.xor %40, %true : i1
  %42 = comb.and %41, %in0_valid : i1
  %43 = comb.and %out8_ready, %42 : i1
  %44 = comb.or %43, %40 {sv.namehint = "done8"} : i1
  %emitted_9 = sv.reg sym @emitted_9 : !hw.inout<i1> 
  %45 = sv.read_inout %emitted_9 : !hw.inout<i1>
  %46 = comb.xor %45, %true : i1
  %47 = comb.and %46, %in0_valid : i1
  %48 = comb.and %out9_ready, %47 : i1
  %49 = comb.or %48, %45 {sv.namehint = "done9"} : i1
  %emitted_10 = sv.reg sym @emitted_10 : !hw.inout<i1> 
  %50 = sv.read_inout %emitted_10 : !hw.inout<i1>
  %51 = comb.xor %50, %true : i1
  %52 = comb.and %51, %in0_valid : i1
  %53 = comb.and %out10_ready, %52 : i1
  %54 = comb.or %53, %50 {sv.namehint = "done10"} : i1
  %emitted_11 = sv.reg sym @emitted_11 : !hw.inout<i1> 
  %55 = sv.read_inout %emitted_11 : !hw.inout<i1>
  %56 = comb.xor %55, %true : i1
  %57 = comb.and %56, %in0_valid : i1
  %58 = comb.and %out11_ready, %57 : i1
  %59 = comb.or %58, %55 {sv.namehint = "done11"} : i1
  %emitted_12 = sv.reg sym @emitted_12 : !hw.inout<i1> 
  %60 = sv.read_inout %emitted_12 : !hw.inout<i1>
  %61 = comb.xor %60, %true : i1
  %62 = comb.and %61, %in0_valid : i1
  %63 = comb.and %out12_ready, %62 : i1
  %64 = comb.or %63, %60 {sv.namehint = "done12"} : i1
  %emitted_13 = sv.reg sym @emitted_13 : !hw.inout<i1> 
  %65 = sv.read_inout %emitted_13 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    %true_0 = hw.constant true
    %71 = comb.xor %70, %true_0 : i1
    %72 = comb.and %4, %71 : i1
    sv.passign %emitted_0, %72 : i1
    %73 = comb.xor %70, %true_0 : i1
    %74 = comb.and %9, %73 : i1
    sv.passign %emitted_1, %74 : i1
    %75 = comb.xor %70, %true_0 : i1
    %76 = comb.and %14, %75 : i1
    sv.passign %emitted_2, %76 : i1
    %77 = comb.xor %70, %true_0 : i1
    %78 = comb.and %19, %77 : i1
    sv.passign %emitted_3, %78 : i1
    %79 = comb.xor %70, %true_0 : i1
    %80 = comb.and %24, %79 : i1
    sv.passign %emitted_4, %80 : i1
    %81 = comb.xor %70, %true_0 : i1
    %82 = comb.and %29, %81 : i1
    sv.passign %emitted_5, %82 : i1
    %83 = comb.xor %70, %true_0 : i1
    %84 = comb.and %34, %83 : i1
    sv.passign %emitted_6, %84 : i1
    %85 = comb.xor %70, %true_0 : i1
    %86 = comb.and %39, %85 : i1
    sv.passign %emitted_7, %86 : i1
    %87 = comb.xor %70, %true_0 : i1
    %88 = comb.and %44, %87 : i1
    sv.passign %emitted_8, %88 : i1
    %89 = comb.xor %70, %true_0 : i1
    %90 = comb.and %49, %89 : i1
    sv.passign %emitted_9, %90 : i1
    %91 = comb.xor %70, %true_0 : i1
    %92 = comb.and %54, %91 : i1
    sv.passign %emitted_10, %92 : i1
    %93 = comb.xor %70, %true_0 : i1
    %94 = comb.and %59, %93 : i1
    sv.passign %emitted_11, %94 : i1
    %95 = comb.xor %70, %true_0 : i1
    %96 = comb.and %64, %95 : i1
    sv.passign %emitted_12, %96 : i1
    %97 = comb.xor %70, %true_0 : i1
    %98 = comb.and %69, %97 : i1
    sv.passign %emitted_13, %98 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
    sv.passign %emitted_3, %false : i1
    sv.passign %emitted_4, %false : i1
    sv.passign %emitted_5, %false : i1
    sv.passign %emitted_6, %false : i1
    sv.passign %emitted_7, %false : i1
    sv.passign %emitted_8, %false : i1
    sv.passign %emitted_9, %false : i1
    sv.passign %emitted_10, %false : i1
    sv.passign %emitted_11, %false : i1
    sv.passign %emitted_12, %false : i1
    sv.passign %emitted_13, %false : i1
  }
  %66 = comb.xor %65, %true : i1
  %67 = comb.and %66, %in0_valid : i1
  %68 = comb.and %out13_ready, %67 : i1
  %69 = comb.or %68, %65 {sv.namehint = "done13"} : i1
  %70 = comb.and %4, %9, %14, %19, %24, %29, %34, %39, %44, %49, %54, %59, %64, %69 {sv.namehint = "allDone"} : i1
  hw.output %70, %in0, %2, %in0, %7, %in0, %12, %in0, %17, %in0, %22, %in0, %27, %in0, %32, %in0, %37, %in0, %42, %in0, %47, %in0, %52, %in0, %57, %in0, %62, %in0, %67 : i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_fork_in_ui64_out_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1) {
  %true = hw.constant true
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.and %1, %in0_valid : i1
  %3 = comb.and %out0_ready, %2 : i1
  %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    %true_0 = hw.constant true
    %11 = comb.xor %10, %true_0 : i1
    %12 = comb.and %4, %11 : i1
    sv.passign %emitted_0, %12 : i1
    %13 = comb.xor %10, %true_0 : i1
    %14 = comb.and %9, %13 : i1
    sv.passign %emitted_1, %14 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
  }
  %6 = comb.xor %5, %true : i1
  %7 = comb.and %6, %in0_valid : i1
  %8 = comb.and %out1_ready, %7 : i1
  %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
  %10 = comb.and %4, %9 {sv.namehint = "allDone"} : i1
  hw.output %10, %in0, %2, %in0, %7 : i1, i64, i1, i64, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_store_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataIn : i64, in %dataIn_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataToMem_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataIn_ready : i1, out ctrl_ready : i1, out dataToMem : i64, out dataToMem_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
  %0 = comb.and %dataIn_valid, %addrIn0_valid, %ctrl_valid : i1
  %1 = comb.and %dataToMem_ready, %addrOut0_ready, %0 : i1
  hw.output %1, %1, %1, %dataIn, %0, %addrIn0, %0 : i1, i1, i1, i64, i1, i64, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_buffer_in_ui1_out_ui1_2slots_seq(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
  %true = hw.constant true
  %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
  %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.xor %5, %true : i1
  %3 = comb.or %1, %2 : i1
  %data0_reg = sv.reg sym @data0_reg : !hw.inout<i1> 
  %4 = sv.read_inout %data0_reg : !hw.inout<i1>
  %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
  %5 = sv.read_inout %ready0_reg : !hw.inout<i1>
  %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i1> 
  %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
  %6 = sv.read_inout %valid1_reg : !hw.inout<i1>
  %7 = comb.xor %6, %true : i1
  %8 = comb.xor %11, %true : i1
  %9 = comb.or %7, %8 : i1
  %data1_reg = sv.reg sym @data1_reg : !hw.inout<i1> 
  %10 = sv.read_inout %data1_reg : !hw.inout<i1>
  %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
  %11 = sv.read_inout %ready1_reg : !hw.inout<i1>
  %12 = comb.mux %11, %11, %6 : i1
  %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i1> 
  %13 = sv.read_inout %ctrl_data1_reg : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    %true_0 = hw.constant true
    %15 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %16 = sv.read_inout %data0_reg : !hw.inout<i1>
    %17 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %18 = comb.xor %9, %true_0 : i1
    %true_1 = hw.constant true
    %19 = comb.xor %17, %true_1 : i1
    %20 = comb.and %18, %19 : i1
    %21 = comb.and %9, %17 : i1
    %22 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
    %23 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %24 = sv.read_inout %data1_reg : !hw.inout<i1>
    %25 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %26 = comb.xor %out0_ready, %true_0 : i1
    %true_2 = hw.constant true
    %27 = comb.xor %25, %true_2 : i1
    %28 = comb.and %26, %27 : i1
    %29 = comb.and %out0_ready, %25 : i1
    %30 = sv.read_inout %ctrl_data1_reg : !hw.inout<i1>
    %31 = comb.mux %3, %in0_valid, %15 : i1
    sv.passign %valid0_reg, %31 : i1
    %32 = comb.mux %3, %in0, %4 : i1
    sv.passign %data0_reg, %32 : i1
    %33 = comb.xor %21, %true_0 : i1
    %34 = comb.mux %20, %15, %17 : i1
    %35 = comb.and %33, %34 : i1
    sv.passign %ready0_reg, %35 : i1
    %36 = comb.xor %21, %true_0 : i1
    %37 = comb.mux %20, %16, %22 : i1
    %38 = comb.and %36, %37 : i1
    sv.passign %ctrl_data0_reg, %38 : i1
    %39 = comb.mux %17, %17, %15 : i1
    %40 = comb.mux %9, %39, %23 : i1
    sv.passign %valid1_reg, %40 : i1
    %41 = comb.mux %17, %22, %16 : i1
    %42 = comb.mux %9, %41, %10 : i1
    sv.passign %data1_reg, %42 : i1
    %43 = comb.xor %29, %true_0 : i1
    %44 = comb.mux %28, %23, %25 : i1
    %45 = comb.and %43, %44 : i1
    sv.passign %ready1_reg, %45 : i1
    %46 = comb.xor %29, %true_0 : i1
    %47 = comb.mux %28, %24, %30 : i1
    %48 = comb.and %46, %47 : i1
    sv.passign %ctrl_data1_reg, %48 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %valid0_reg, %false : i1
    sv.passign %data0_reg, %false : i1
    sv.passign %ready0_reg, %false : i1
    sv.passign %ctrl_data0_reg, %false : i1
    sv.passign %valid1_reg, %false : i1
    sv.passign %data1_reg, %false : i1
    sv.passign %ready1_reg, %false : i1
    sv.passign %ctrl_data1_reg, %false : i1
  }
  %14 = comb.mux %11, %13, %10 : i1
  hw.output %3, %14, %12 : i1, i1, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
  %true = hw.constant true
  %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
  %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.xor %5, %true : i1
  %3 = comb.or %1, %2 : i1
  %data0_reg = sv.reg sym @data0_reg : !hw.inout<i0> 
  %4 = sv.read_inout %data0_reg : !hw.inout<i0>
  %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
  %5 = sv.read_inout %ready0_reg : !hw.inout<i1>
  %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i0> 
  %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
  %6 = sv.read_inout %valid1_reg : !hw.inout<i1>
  %7 = comb.xor %6, %true : i1
  %8 = comb.xor %11, %true : i1
  %9 = comb.or %7, %8 : i1
  %data1_reg = sv.reg sym @data1_reg : !hw.inout<i0> 
  %10 = sv.read_inout %data1_reg : !hw.inout<i0>
  %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
  %11 = sv.read_inout %ready1_reg : !hw.inout<i1>
  %12 = comb.mux %11, %11, %6 : i1
  %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i0> 
  %13 = sv.read_inout %ctrl_data1_reg : !hw.inout<i0>
  sv.alwaysff(posedge %clock) {
    %true_0 = hw.constant true
    %c0_i0 = hw.constant 0 : i0
    %15 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %16 = sv.read_inout %data0_reg : !hw.inout<i0>
    %17 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %18 = comb.xor %9, %true_0 : i1
    %true_1 = hw.constant true
    %19 = comb.xor %17, %true_1 : i1
    %20 = comb.and %18, %19 : i1
    %21 = comb.and %9, %17 : i1
    %22 = sv.read_inout %ctrl_data0_reg : !hw.inout<i0>
    %23 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %24 = sv.read_inout %data1_reg : !hw.inout<i0>
    %25 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %26 = comb.xor %out0_ready, %true_0 : i1
    %true_2 = hw.constant true
    %27 = comb.xor %25, %true_2 : i1
    %28 = comb.and %26, %27 : i1
    %29 = comb.and %out0_ready, %25 : i1
    %30 = sv.read_inout %ctrl_data1_reg : !hw.inout<i0>
    %31 = comb.mux %3, %in0_valid, %15 : i1
    sv.passign %valid0_reg, %31 : i1
    %32 = comb.mux %3, %in0, %4 : i0
    sv.passign %data0_reg, %32 : i0
    %33 = comb.xor %21, %true_0 : i1
    %34 = comb.mux %20, %15, %17 : i1
    %35 = comb.and %33, %34 : i1
    sv.passign %ready0_reg, %35 : i1
    %36 = comb.mux %20, %16, %22 : i0
    %37 = comb.mux %21, %c0_i0, %36 : i0
    sv.passign %ctrl_data0_reg, %37 : i0
    %38 = comb.mux %17, %17, %15 : i1
    %39 = comb.mux %9, %38, %23 : i1
    sv.passign %valid1_reg, %39 : i1
    %40 = comb.mux %17, %22, %16 : i0
    %41 = comb.mux %9, %40, %10 : i0
    sv.passign %data1_reg, %41 : i0
    %42 = comb.xor %29, %true_0 : i1
    %43 = comb.mux %28, %23, %25 : i1
    %44 = comb.and %42, %43 : i1
    sv.passign %ready1_reg, %44 : i1
    %45 = comb.mux %28, %24, %30 : i0
    %46 = comb.mux %29, %c0_i0, %45 : i0
    sv.passign %ctrl_data1_reg, %46 : i0
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    %c0_i0 = hw.constant 0 : i0
    sv.passign %valid0_reg, %false : i1
    sv.passign %data0_reg, %c0_i0 : i0
    sv.passign %ready0_reg, %false : i1
    sv.passign %ctrl_data0_reg, %c0_i0 : i0
    sv.passign %valid1_reg, %false : i1
    sv.passign %data1_reg, %c0_i0 : i0
    sv.passign %ready1_reg, %false : i1
    sv.passign %ctrl_data1_reg, %c0_i0 : i0
  }
  %14 = comb.mux %11, %13, %10 : i0
  hw.output %3, %14, %12 : i1, i0, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
  %true = hw.constant true
  %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
  %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.xor %5, %true : i1
  %3 = comb.or %1, %2 : i1
  %data0_reg = sv.reg sym @data0_reg : !hw.inout<i1> 
  %4 = sv.read_inout %data0_reg : !hw.inout<i1>
  %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
  %5 = sv.read_inout %ready0_reg : !hw.inout<i1>
  %6 = comb.mux %5, %5, %0 : i1
  %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i1> 
  %7 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    %true_0 = hw.constant true
    %9 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %10 = sv.read_inout %data0_reg : !hw.inout<i1>
    %11 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %12 = comb.xor %out0_ready, %true_0 : i1
    %true_1 = hw.constant true
    %13 = comb.xor %11, %true_1 : i1
    %14 = comb.and %12, %13 : i1
    %15 = comb.and %out0_ready, %11 : i1
    %16 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
    %17 = comb.mux %3, %in0_valid, %9 : i1
    sv.passign %valid0_reg, %17 : i1
    %18 = comb.mux %3, %in0, %4 : i1
    sv.passign %data0_reg, %18 : i1
    %19 = comb.xor %15, %true_0 : i1
    %20 = comb.mux %14, %9, %11 : i1
    %21 = comb.and %19, %20 : i1
    sv.passign %ready0_reg, %21 : i1
    %22 = comb.xor %15, %true_0 : i1
    %23 = comb.mux %14, %10, %16 : i1
    %24 = comb.and %22, %23 : i1
    sv.passign %ctrl_data0_reg, %24 : i1
  }(syncreset : posedge %reset) {
    %true_0 = hw.constant true
    %false = hw.constant false
    sv.passign %valid0_reg, %true_0 : i1
    sv.passign %data0_reg, %false : i1
    sv.passign %ready0_reg, %false : i1
    sv.passign %ctrl_data0_reg, %false : i1
  }
  %8 = comb.mux %5, %7, %4 : i1
  hw.output %3, %8, %6 : i1, i1, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_memory_out_ui64_id1(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : i1, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
  %true = hw.constant true
  %c0_i0 = hw.constant 0 : i0
  %_handshake_memory_1 = sv.reg : !hw.inout<uarray<3xi64>> 
  %0 = comb.extract %ldAddr0 from 0 : (i64) -> i2
  %1 = sv.array_index_inout %_handshake_memory_1[%0] : !hw.inout<uarray<3xi64>>, i2
  %2 = sv.read_inout %1 : !hw.inout<i64>
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %3 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %4 = comb.xor %3, %true : i1
  %5 = comb.and %4, %ldAddr0_valid : i1
  %6 = comb.and %ldData0_ready, %5 : i1
  %7 = comb.or %6, %3 {sv.namehint = "done0"} : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %9 = comb.xor %8, %true : i1
  %10 = comb.and %9, %ldAddr0_valid : i1
  %11 = comb.and %ldDone0_ready, %10 : i1
  %12 = comb.or %11, %8 {sv.namehint = "done1"} : i1
  %13 = comb.and %7, %12 {sv.namehint = "allDone"} : i1
  %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
  %14 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
  %15 = comb.and %stDone0_ready, %14 {sv.namehint = "storeCompleted"} : i1
  %16 = comb.xor %14, %true : i1
  %17 = comb.or %16, %15 {sv.namehint = "emptyOrComplete"} : i1
  %writeValidBuffer_0 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
  %18 = sv.read_inout %writeValidBuffer_0 : !hw.inout<i1>
  %19 = comb.and %stDone1_ready, %18 {sv.namehint = "storeCompleted"} : i1
  %20 = comb.xor %18, %true : i1
  %21 = comb.or %20, %19 {sv.namehint = "emptyOrComplete"} : i1
  %writeValidBuffer_1 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
  %22 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    %true_2 = hw.constant true
    %26 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    %27 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
    %28 = sv.read_inout %writeValidBuffer_0 : !hw.inout<i1>
    %29 = comb.and %stAddr1_valid, %stData1_valid {sv.namehint = "writeValid"} : i1
    %30 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
    %31 = comb.and %stAddr2_valid, %stData2_valid {sv.namehint = "writeValid"} : i1
    sv.if %31 {
      %39 = comb.extract %stAddr2 from 0 : (i64) -> i2
      %40 = sv.array_index_inout %_handshake_memory_1[%39] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %40, %stData2 : i64
    }
    sv.if %29 {
      %39 = comb.extract %stAddr1 from 0 : (i64) -> i2
      %40 = sv.array_index_inout %_handshake_memory_1[%39] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %40, %stData1 : i64
    }
    sv.if %27 {
      %39 = comb.extract %stAddr0 from 0 : (i64) -> i2
      %40 = sv.array_index_inout %_handshake_memory_1[%39] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %40, %stData0 : i64
    }
    %32 = comb.xor %13, %true_2 : i1
    %33 = comb.and %7, %32 : i1
    sv.passign %emitted_0, %33 : i1
    %34 = comb.xor %13, %true_2 : i1
    %35 = comb.and %12, %34 : i1
    sv.passign %emitted_1, %35 : i1
    %36 = comb.mux %17, %27, %26 : i1
    sv.passign %writeValidBuffer, %36 : i1
    %37 = comb.mux %21, %29, %28 : i1
    sv.passign %writeValidBuffer_0, %37 : i1
    %38 = comb.mux %25, %31, %30 : i1
    sv.passign %writeValidBuffer_1, %38 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %writeValidBuffer, %false : i1
    sv.passign %writeValidBuffer_0, %false : i1
    sv.passign %writeValidBuffer_1, %false : i1
  }
  %23 = comb.and %stDone2_ready, %22 {sv.namehint = "storeCompleted"} : i1
  %24 = comb.xor %22, %true : i1
  %25 = comb.or %24, %23 {sv.namehint = "emptyOrComplete"} : i1
  hw.output %17, %17, %21, %21, %25, %25, %13, %2, %5, %c0_i0, %14, %c0_i0, %18, %c0_i0, %22, %c0_i0, %10 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_sink_in_ui64(in %in0 : i64, in %in0_valid : i1, out in0_ready : i1) {
  %true = hw.constant true
  hw.output %true : i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1) {
  %true = hw.constant true
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.and %1, %in0_valid : i1
  %3 = comb.and %out0_ready, %2 : i1
  %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %6 = comb.xor %5, %true : i1
  %7 = comb.and %6, %in0_valid : i1
  %8 = comb.and %out1_ready, %7 : i1
  %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %10 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %11 = comb.xor %10, %true : i1
  %12 = comb.and %11, %in0_valid : i1
  %13 = comb.and %out2_ready, %12 : i1
  %14 = comb.or %13, %10 {sv.namehint = "done2"} : i1
  %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
  %15 = sv.read_inout %emitted_3 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    %true_0 = hw.constant true
    %21 = comb.xor %20, %true_0 : i1
    %22 = comb.and %4, %21 : i1
    sv.passign %emitted_0, %22 : i1
    %23 = comb.xor %20, %true_0 : i1
    %24 = comb.and %9, %23 : i1
    sv.passign %emitted_1, %24 : i1
    %25 = comb.xor %20, %true_0 : i1
    %26 = comb.and %14, %25 : i1
    sv.passign %emitted_2, %26 : i1
    %27 = comb.xor %20, %true_0 : i1
    %28 = comb.and %19, %27 : i1
    sv.passign %emitted_3, %28 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
    sv.passign %emitted_3, %false : i1
  }
  %16 = comb.xor %15, %true : i1
  %17 = comb.and %16, %in0_valid : i1
  %18 = comb.and %out3_ready, %17 : i1
  %19 = comb.or %18, %15 {sv.namehint = "done3"} : i1
  %20 = comb.and %4, %9, %14, %19 {sv.namehint = "allDone"} : i1
  hw.output %20, %in0, %2, %in0, %7, %in0, %12, %in0, %17 : i1, i1, i1, i1, i1, i1, i1, i1, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_join_2ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c0_i0 = hw.constant 0 : i0
  %0 = comb.and %in0_valid, %in1_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  hw.output %1, %1, %c0_i0, %0 : i1, i1, i0, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1, out out3 : i64, out out3_valid : i1) {
  %true = hw.constant true
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.and %1, %in0_valid : i1
  %3 = comb.and %out0_ready, %2 : i1
  %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %6 = comb.xor %5, %true : i1
  %7 = comb.and %6, %in0_valid : i1
  %8 = comb.and %out1_ready, %7 : i1
  %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %10 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %11 = comb.xor %10, %true : i1
  %12 = comb.and %11, %in0_valid : i1
  %13 = comb.and %out2_ready, %12 : i1
  %14 = comb.or %13, %10 {sv.namehint = "done2"} : i1
  %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
  %15 = sv.read_inout %emitted_3 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    %true_0 = hw.constant true
    %21 = comb.xor %20, %true_0 : i1
    %22 = comb.and %4, %21 : i1
    sv.passign %emitted_0, %22 : i1
    %23 = comb.xor %20, %true_0 : i1
    %24 = comb.and %9, %23 : i1
    sv.passign %emitted_1, %24 : i1
    %25 = comb.xor %20, %true_0 : i1
    %26 = comb.and %14, %25 : i1
    sv.passign %emitted_2, %26 : i1
    %27 = comb.xor %20, %true_0 : i1
    %28 = comb.and %19, %27 : i1
    sv.passign %emitted_3, %28 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
    sv.passign %emitted_3, %false : i1
  }
  %16 = comb.xor %15, %true : i1
  %17 = comb.and %16, %in0_valid : i1
  %18 = comb.and %out3_ready, %17 : i1
  %19 = comb.or %18, %15 {sv.namehint = "done3"} : i1
  %20 = comb.and %4, %9, %14, %19 {sv.namehint = "allDone"} : i1
  hw.output %20, %in0, %2, %in0, %7, %in0, %12, %in0, %17 : i1, i64, i1, i64, i1, i64, i1, i64, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_fork_1ins_4outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1) {
  %true = hw.constant true
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.and %1, %in0_valid : i1
  %3 = comb.and %out0_ready, %2 : i1
  %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %6 = comb.xor %5, %true : i1
  %7 = comb.and %6, %in0_valid : i1
  %8 = comb.and %out1_ready, %7 : i1
  %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %10 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %11 = comb.xor %10, %true : i1
  %12 = comb.and %11, %in0_valid : i1
  %13 = comb.and %out2_ready, %12 : i1
  %14 = comb.or %13, %10 {sv.namehint = "done2"} : i1
  %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
  %15 = sv.read_inout %emitted_3 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    %true_0 = hw.constant true
    %21 = comb.xor %20, %true_0 : i1
    %22 = comb.and %4, %21 : i1
    sv.passign %emitted_0, %22 : i1
    %23 = comb.xor %20, %true_0 : i1
    %24 = comb.and %9, %23 : i1
    sv.passign %emitted_1, %24 : i1
    %25 = comb.xor %20, %true_0 : i1
    %26 = comb.and %14, %25 : i1
    sv.passign %emitted_2, %26 : i1
    %27 = comb.xor %20, %true_0 : i1
    %28 = comb.and %19, %27 : i1
    sv.passign %emitted_3, %28 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
    sv.passign %emitted_3, %false : i1
  }
  %16 = comb.xor %15, %true : i1
  %17 = comb.and %16, %in0_valid : i1
  %18 = comb.and %out3_ready, %17 : i1
  %19 = comb.or %18, %15 {sv.namehint = "done3"} : i1
  %20 = comb.and %4, %9, %14, %19 {sv.namehint = "allDone"} : i1
  hw.output %20, %in0, %2, %in0, %7, %in0, %12, %in0, %17 : i1, i0, i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @arith_cmpi_in_ui64_ui64_out_ui1_slt(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i1, out out0_valid : i1) {
  %0 = comb.and %in0_valid, %in1_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  %2 = comb.icmp slt %in0, %in1 : i64
  hw.output %1, %1, %2, %0 : i1, i1, i1, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_mux_in_ui1_3ins_1outs_ctrl(in %select : i1, in %select_valid : i1, in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c1_i2 = hw.constant 1 : i2
  %false = hw.constant false
  %0 = comb.concat %false, %select : i1, i1
  %1 = comb.shl %c1_i2, %0 : i2
  %2 = comb.mux %select, %in1_valid, %in0_valid : i1
  %3 = comb.and %2, %select_valid : i1
  %4 = comb.and %3, %out0_ready : i1
  %5 = comb.extract %1 from 0 : (i2) -> i1
  %6 = comb.and %5, %4 : i1
  %7 = comb.extract %1 from 1 : (i2) -> i1
  %8 = comb.and %7, %4 : i1
  %9 = comb.mux %select, %in1, %in0 : i0
  hw.output %4, %6, %8, %9, %3 : i1, i1, i1, i0, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_mux_in_ui1_ui64_ui64_out_ui64(in %select : i1, in %select_valid : i1, in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c1_i2 = hw.constant 1 : i2
  %false = hw.constant false
  %0 = comb.concat %false, %select : i1, i1
  %1 = comb.shl %c1_i2, %0 : i2
  %2 = comb.mux %select, %in1_valid, %in0_valid : i1
  %3 = comb.and %2, %select_valid : i1
  %4 = comb.and %3, %out0_ready : i1
  %5 = comb.extract %1 from 0 : (i2) -> i1
  %6 = comb.and %5, %4 : i1
  %7 = comb.extract %1 from 1 : (i2) -> i1
  %8 = comb.and %7, %4 : i1
  %9 = comb.mux %select, %in1, %in0 : i64
  hw.output %4, %6, %8, %9, %3 : i1, i1, i1, i64, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1, out out4 : i1, out out4_valid : i1) {
  %true = hw.constant true
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.and %1, %in0_valid : i1
  %3 = comb.and %out0_ready, %2 : i1
  %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %6 = comb.xor %5, %true : i1
  %7 = comb.and %6, %in0_valid : i1
  %8 = comb.and %out1_ready, %7 : i1
  %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %10 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %11 = comb.xor %10, %true : i1
  %12 = comb.and %11, %in0_valid : i1
  %13 = comb.and %out2_ready, %12 : i1
  %14 = comb.or %13, %10 {sv.namehint = "done2"} : i1
  %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
  %15 = sv.read_inout %emitted_3 : !hw.inout<i1>
  %16 = comb.xor %15, %true : i1
  %17 = comb.and %16, %in0_valid : i1
  %18 = comb.and %out3_ready, %17 : i1
  %19 = comb.or %18, %15 {sv.namehint = "done3"} : i1
  %emitted_4 = sv.reg sym @emitted_4 : !hw.inout<i1> 
  %20 = sv.read_inout %emitted_4 : !hw.inout<i1>
  sv.alwaysff(posedge %clock) {
    %true_0 = hw.constant true
    %26 = comb.xor %25, %true_0 : i1
    %27 = comb.and %4, %26 : i1
    sv.passign %emitted_0, %27 : i1
    %28 = comb.xor %25, %true_0 : i1
    %29 = comb.and %9, %28 : i1
    sv.passign %emitted_1, %29 : i1
    %30 = comb.xor %25, %true_0 : i1
    %31 = comb.and %14, %30 : i1
    sv.passign %emitted_2, %31 : i1
    %32 = comb.xor %25, %true_0 : i1
    %33 = comb.and %19, %32 : i1
    sv.passign %emitted_3, %33 : i1
    %34 = comb.xor %25, %true_0 : i1
    %35 = comb.and %24, %34 : i1
    sv.passign %emitted_4, %35 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
    sv.passign %emitted_3, %false : i1
    sv.passign %emitted_4, %false : i1
  }
  %21 = comb.xor %20, %true : i1
  %22 = comb.and %21, %in0_valid : i1
  %23 = comb.and %out4_ready, %22 : i1
  %24 = comb.or %23, %20 {sv.namehint = "done4"} : i1
  %25 = comb.and %4, %9, %14, %19, %24 {sv.namehint = "allDone"} : i1
  hw.output %25, %in0, %2, %in0, %7, %in0, %12, %in0, %17, %in0, %22 : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @arith_addi_in_ui64_ui64_out_ui64(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
  %0 = comb.and %in0_valid, %in1_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  %2 = comb.add %in0, %in1 : i64
  hw.output %1, %1, %2, %0 : i1, i1, i64, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(in %cond : i1, in %cond_valid : i1, in %data : i64, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i64, out outTrue_valid : i1, out outFalse : i64, out outFalse_valid : i1) {
  %true = hw.constant true
  %0 = comb.and %cond_valid, %data_valid : i1
  %1 = comb.and %cond, %0 : i1
  %2 = comb.xor %cond, %true : i1
  %3 = comb.and %2, %0 : i1
  %4 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
  %5 = comb.and %4, %0 : i1
  hw.output %5, %5, %data, %1, %data, %3 : i1, i1, i64, i1, i64, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @main(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
  %handshake_buffer0.in0_ready, %handshake_buffer0.out0, %handshake_buffer0.out0_valid = hw.instance "handshake_buffer0" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %in0: i0, in0_valid: %in0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_fork0.in0_ready, %handshake_fork0.out0, %handshake_fork0.out0_valid, %handshake_fork0.out1, %handshake_fork0.out1_valid, %handshake_fork0.out2, %handshake_fork0.out2_valid, %handshake_fork0.out3, %handshake_fork0.out3_valid, %handshake_fork0.out4, %handshake_fork0.out4_valid, %handshake_fork0.out5, %handshake_fork0.out5_valid, %handshake_fork0.out6, %handshake_fork0.out6_valid, %handshake_fork0.out7, %handshake_fork0.out7_valid, %handshake_fork0.out8, %handshake_fork0.out8_valid, %handshake_fork0.out9, %handshake_fork0.out9_valid, %handshake_fork0.out10, %handshake_fork0.out10_valid, %handshake_fork0.out11, %handshake_fork0.out11_valid, %handshake_fork0.out12, %handshake_fork0.out12_valid, %handshake_fork0.out13, %handshake_fork0.out13_valid = hw.instance "handshake_fork0" @handshake_fork_1ins_14outs_ctrl(in0: %handshake_buffer0.out0: i0, in0_valid: %handshake_buffer0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer14.in0_ready: i1, out1_ready: %handshake_buffer13.in0_ready: i1, out2_ready: %handshake_buffer12.in0_ready: i1, out3_ready: %handshake_buffer11.in0_ready: i1, out4_ready: %handshake_buffer10.in0_ready: i1, out5_ready: %handshake_buffer9.in0_ready: i1, out6_ready: %handshake_buffer8.in0_ready: i1, out7_ready: %handshake_buffer7.in0_ready: i1, out8_ready: %handshake_buffer6.in0_ready: i1, out9_ready: %handshake_buffer5.in0_ready: i1, out10_ready: %handshake_buffer4.in0_ready: i1, out11_ready: %handshake_buffer3.in0_ready: i1, out12_ready: %handshake_buffer2.in0_ready: i1, out13_ready: %handshake_buffer1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1, out4: i0, out4_valid: i1, out5: i0, out5_valid: i1, out6: i0, out6_valid: i1, out7: i0, out7_valid: i1, out8: i0, out8_valid: i1, out9: i0, out9_valid: i1, out10: i0, out10_valid: i1, out11: i0, out11_valid: i1, out12: i0, out12_valid: i1, out13: i0, out13_valid: i1)
  %handshake_buffer1.in0_ready, %handshake_buffer1.out0, %handshake_buffer1.out0_valid = hw.instance "handshake_buffer1" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out13: i0, in0_valid: %handshake_fork0.out13_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join4.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer2.in0_ready, %handshake_buffer2.out0, %handshake_buffer2.out0_valid = hw.instance "handshake_buffer2" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out12: i0, in0_valid: %handshake_fork0.out12_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join3.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer3.in0_ready, %handshake_buffer3.out0, %handshake_buffer3.out0_valid = hw.instance "handshake_buffer3" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out11: i0, in0_valid: %handshake_fork0.out11_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store3.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer4.in0_ready, %handshake_buffer4.out0, %handshake_buffer4.out0_valid = hw.instance "handshake_buffer4" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out10: i0, in0_valid: %handshake_fork0.out10_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer5.in0_ready, %handshake_buffer5.out0, %handshake_buffer5.out0_valid = hw.instance "handshake_buffer5" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out9: i0, in0_valid: %handshake_fork0.out9_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join2.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer6.in0_ready, %handshake_buffer6.out0, %handshake_buffer6.out0_valid = hw.instance "handshake_buffer6" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out8: i0, in0_valid: %handshake_fork0.out8_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer7.in0_ready, %handshake_buffer7.out0, %handshake_buffer7.out0_valid = hw.instance "handshake_buffer7" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out7: i0, in0_valid: %handshake_fork0.out7_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer8.in0_ready, %handshake_buffer8.out0, %handshake_buffer8.out0_valid = hw.instance "handshake_buffer8" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out6: i0, in0_valid: %handshake_fork0.out6_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant6.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer9.in0_ready, %handshake_buffer9.out0, %handshake_buffer9.out0_valid = hw.instance "handshake_buffer9" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out5: i0, in0_valid: %handshake_fork0.out5_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant5.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer10.in0_ready, %handshake_buffer10.out0, %handshake_buffer10.out0_valid = hw.instance "handshake_buffer10" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out4: i0, in0_valid: %handshake_fork0.out4_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant4.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer11.in0_ready, %handshake_buffer11.out0, %handshake_buffer11.out0_valid = hw.instance "handshake_buffer11" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out3: i0, in0_valid: %handshake_fork0.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant3.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer12.in0_ready, %handshake_buffer12.out0, %handshake_buffer12.out0_valid = hw.instance "handshake_buffer12" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out2: i0, in0_valid: %handshake_fork0.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant2.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer13.in0_ready, %handshake_buffer13.out0, %handshake_buffer13.out0_valid = hw.instance "handshake_buffer13" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out1: i0, in0_valid: %handshake_fork0.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer14.in0_ready, %handshake_buffer14.out0, %handshake_buffer14.out0_valid = hw.instance "handshake_buffer14" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out0: i0, in0_valid: %handshake_fork0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_memory0.stData0_ready, %handshake_memory0.stAddr0_ready, %handshake_memory0.stDone0, %handshake_memory0.stDone0_valid = hw.instance "handshake_memory0" @handshake_memory_out_ui64_id2(stData0: %handshake_buffer114.out0: i64, stData0_valid: %handshake_buffer114.out0_valid: i1, stAddr0: %handshake_buffer113.out0: i64, stAddr0_valid: %handshake_buffer113.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, stDone0_ready: %handshake_buffer15.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stDone0: i0, stDone0_valid: i1)
  %handshake_buffer15.in0_ready, %handshake_buffer15.out0, %handshake_buffer15.out0_valid = hw.instance "handshake_buffer15" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory0.stDone0: i0, in0_valid: %handshake_memory0.stDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in3_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_memory1.stData0_ready, %handshake_memory1.stAddr0_ready, %handshake_memory1.stData1_ready, %handshake_memory1.stAddr1_ready, %handshake_memory1.stData2_ready, %handshake_memory1.stAddr2_ready, %handshake_memory1.ldAddr0_ready, %handshake_memory1.ldData0, %handshake_memory1.ldData0_valid, %handshake_memory1.stDone0, %handshake_memory1.stDone0_valid, %handshake_memory1.stDone1, %handshake_memory1.stDone1_valid, %handshake_memory1.stDone2, %handshake_memory1.stDone2_valid, %handshake_memory1.ldDone0, %handshake_memory1.ldDone0_valid = hw.instance "handshake_memory1" @handshake_memory_out_ui64_id1(stData0: %handshake_buffer67.out0: i64, stData0_valid: %handshake_buffer67.out0_valid: i1, stAddr0: %handshake_buffer66.out0: i64, stAddr0_valid: %handshake_buffer66.out0_valid: i1, stData1: %handshake_buffer70.out0: i64, stData1_valid: %handshake_buffer70.out0_valid: i1, stAddr1: %handshake_buffer69.out0: i64, stAddr1_valid: %handshake_buffer69.out0_valid: i1, stData2: %handshake_buffer73.out0: i64, stData2_valid: %handshake_buffer73.out0_valid: i1, stAddr2: %handshake_buffer72.out0: i64, stAddr2_valid: %handshake_buffer72.out0_valid: i1, ldAddr0: %handshake_buffer110.out0: i64, ldAddr0_valid: %handshake_buffer110.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, ldData0_ready: %handshake_buffer20.in0_ready: i1, stDone0_ready: %handshake_buffer19.in0_ready: i1, stDone1_ready: %handshake_buffer18.in0_ready: i1, stDone2_ready: %handshake_buffer17.in0_ready: i1, ldDone0_ready: %handshake_buffer16.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
  %handshake_buffer16.in0_ready, %handshake_buffer16.out0, %handshake_buffer16.out0_valid = hw.instance "handshake_buffer16" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.ldDone0: i0, in0_valid: %handshake_memory1.ldDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer17.in0_ready, %handshake_buffer17.out0, %handshake_buffer17.out0_valid = hw.instance "handshake_buffer17" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone2: i0, in0_valid: %handshake_memory1.stDone2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in6_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer18.in0_ready, %handshake_buffer18.out0, %handshake_buffer18.out0_valid = hw.instance "handshake_buffer18" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone1: i0, in0_valid: %handshake_memory1.stDone1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer19.in0_ready, %handshake_buffer19.out0, %handshake_buffer19.out0_valid = hw.instance "handshake_buffer19" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone0: i0, in0_valid: %handshake_memory1.stDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork2.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer20.in0_ready, %handshake_buffer20.out0, %handshake_buffer20.out0_valid = hw.instance "handshake_buffer20" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory1.ldData0: i64, in0_valid: %handshake_memory1.ldData0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load1.dataFromMem_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork1.in0_ready, %handshake_fork1.out0, %handshake_fork1.out0_valid, %handshake_fork1.out1, %handshake_fork1.out1_valid = hw.instance "handshake_fork1" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer18.out0: i0, in0_valid: %handshake_buffer18.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer22.in0_ready: i1, out1_ready: %handshake_buffer21.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
  %handshake_buffer21.in0_ready, %handshake_buffer21.out0, %handshake_buffer21.out0_valid = hw.instance "handshake_buffer21" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out1: i0, in0_valid: %handshake_fork1.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in5_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer22.in0_ready, %handshake_buffer22.out0, %handshake_buffer22.out0_valid = hw.instance "handshake_buffer22" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out0: i0, in0_valid: %handshake_fork1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join4.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_fork2.in0_ready, %handshake_fork2.out0, %handshake_fork2.out0_valid, %handshake_fork2.out1, %handshake_fork2.out1_valid, %handshake_fork2.out2, %handshake_fork2.out2_valid = hw.instance "handshake_fork2" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer19.out0: i0, in0_valid: %handshake_buffer19.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer25.in0_ready: i1, out1_ready: %handshake_buffer24.in0_ready: i1, out2_ready: %handshake_buffer23.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
  %handshake_buffer23.in0_ready, %handshake_buffer23.out0, %handshake_buffer23.out0_valid = hw.instance "handshake_buffer23" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out2: i0, in0_valid: %handshake_fork2.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in4_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer24.in0_ready, %handshake_buffer24.out0, %handshake_buffer24.out0_valid = hw.instance "handshake_buffer24" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out1: i0, in0_valid: %handshake_fork2.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join3.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer25.in0_ready, %handshake_buffer25.out0, %handshake_buffer25.out0_valid = hw.instance "handshake_buffer25" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out0: i0, in0_valid: %handshake_fork2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join4.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_memory2.stData0_ready, %handshake_memory2.stAddr0_ready, %handshake_memory2.stData1_ready, %handshake_memory2.stAddr1_ready, %handshake_memory2.stData2_ready, %handshake_memory2.stAddr2_ready, %handshake_memory2.ldAddr0_ready, %handshake_memory2.ldData0, %handshake_memory2.ldData0_valid, %handshake_memory2.stDone0, %handshake_memory2.stDone0_valid, %handshake_memory2.stDone1, %handshake_memory2.stDone1_valid, %handshake_memory2.stDone2, %handshake_memory2.stDone2_valid, %handshake_memory2.ldDone0, %handshake_memory2.ldDone0_valid = hw.instance "handshake_memory2" @handshake_memory_out_ui64_id0(stData0: %handshake_buffer59.out0: i64, stData0_valid: %handshake_buffer59.out0_valid: i1, stAddr0: %handshake_buffer58.out0: i64, stAddr0_valid: %handshake_buffer58.out0_valid: i1, stData1: %handshake_buffer62.out0: i64, stData1_valid: %handshake_buffer62.out0_valid: i1, stAddr1: %handshake_buffer61.out0: i64, stAddr1_valid: %handshake_buffer61.out0_valid: i1, stData2: %handshake_buffer65.out0: i64, stData2_valid: %handshake_buffer65.out0_valid: i1, stAddr2: %handshake_buffer64.out0: i64, stAddr2_valid: %handshake_buffer64.out0_valid: i1, ldAddr0: %handshake_buffer108.out0: i64, ldAddr0_valid: %handshake_buffer108.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, ldData0_ready: %handshake_buffer30.in0_ready: i1, stDone0_ready: %handshake_buffer29.in0_ready: i1, stDone1_ready: %handshake_buffer28.in0_ready: i1, stDone2_ready: %handshake_buffer27.in0_ready: i1, ldDone0_ready: %handshake_buffer26.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
  %handshake_buffer26.in0_ready, %handshake_buffer26.out0, %handshake_buffer26.out0_valid = hw.instance "handshake_buffer26" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.ldDone0: i0, in0_valid: %handshake_memory2.ldDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer27.in0_ready, %handshake_buffer27.out0, %handshake_buffer27.out0_valid = hw.instance "handshake_buffer27" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone2: i0, in0_valid: %handshake_memory2.stDone2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in3_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer28.in0_ready, %handshake_buffer28.out0, %handshake_buffer28.out0_valid = hw.instance "handshake_buffer28" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone1: i0, in0_valid: %handshake_memory2.stDone1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork3.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer29.in0_ready, %handshake_buffer29.out0, %handshake_buffer29.out0_valid = hw.instance "handshake_buffer29" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone0: i0, in0_valid: %handshake_memory2.stDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork4.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer30.in0_ready, %handshake_buffer30.out0, %handshake_buffer30.out0_valid = hw.instance "handshake_buffer30" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory2.ldData0: i64, in0_valid: %handshake_memory2.ldData0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load0.dataFromMem_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork3.in0_ready, %handshake_fork3.out0, %handshake_fork3.out0_valid, %handshake_fork3.out1, %handshake_fork3.out1_valid = hw.instance "handshake_fork3" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer28.out0: i0, in0_valid: %handshake_buffer28.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer32.in0_ready: i1, out1_ready: %handshake_buffer31.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
  %handshake_buffer31.in0_ready, %handshake_buffer31.out0, %handshake_buffer31.out0_valid = hw.instance "handshake_buffer31" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out1: i0, in0_valid: %handshake_fork3.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join2.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer32.in0_ready, %handshake_buffer32.out0, %handshake_buffer32.out0_valid = hw.instance "handshake_buffer32" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out0: i0, in0_valid: %handshake_fork3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_fork4.in0_ready, %handshake_fork4.out0, %handshake_fork4.out0_valid, %handshake_fork4.out1, %handshake_fork4.out1_valid, %handshake_fork4.out2, %handshake_fork4.out2_valid = hw.instance "handshake_fork4" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer29.out0: i0, in0_valid: %handshake_buffer29.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer35.in0_ready: i1, out1_ready: %handshake_buffer34.in0_ready: i1, out2_ready: %handshake_buffer33.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
  %handshake_buffer33.in0_ready, %handshake_buffer33.out0, %handshake_buffer33.out0_valid = hw.instance "handshake_buffer33" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out2: i0, in0_valid: %handshake_fork4.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join1.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer34.in0_ready, %handshake_buffer34.out0, %handshake_buffer34.out0_valid = hw.instance "handshake_buffer34" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out1: i0, in0_valid: %handshake_fork4.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join2.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer35.in0_ready, %handshake_buffer35.out0, %handshake_buffer35.out0_valid = hw.instance "handshake_buffer35" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out0: i0, in0_valid: %handshake_fork4.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_join0.in0_ready, %handshake_join0.in1_ready, %handshake_join0.in2_ready, %handshake_join0.in3_ready, %handshake_join0.in4_ready, %handshake_join0.in5_ready, %handshake_join0.in6_ready, %handshake_join0.out0, %handshake_join0.out0_valid = hw.instance "handshake_join0" @handshake_join_7ins_1outs_ctrl(in0: %handshake_buffer4.out0: i0, in0_valid: %handshake_buffer4.out0_valid: i1, in1: %handshake_buffer35.out0: i0, in1_valid: %handshake_buffer35.out0_valid: i1, in2: %handshake_buffer32.out0: i0, in2_valid: %handshake_buffer32.out0_valid: i1, in3: %handshake_buffer27.out0: i0, in3_valid: %handshake_buffer27.out0_valid: i1, in4: %handshake_buffer23.out0: i0, in4_valid: %handshake_buffer23.out0_valid: i1, in5: %handshake_buffer21.out0: i0, in5_valid: %handshake_buffer21.out0_valid: i1, in6: %handshake_buffer17.out0: i0, in6_valid: %handshake_buffer17.out0_valid: i1, out0_ready: %handshake_buffer36.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, in4_ready: i1, in5_ready: i1, in6_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer36.in0_ready, %handshake_buffer36.out0, %handshake_buffer36.out0_valid = hw.instance "handshake_buffer36" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join0.out0: i0, in0_valid: %handshake_join0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_constant0.ctrl_ready, %handshake_constant0.out0, %handshake_constant0.out0_valid = hw.instance "handshake_constant0" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer14.out0: i0, ctrl_valid: %handshake_buffer14.out0_valid: i1, out0_ready: %handshake_buffer37.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer37.in0_ready, %handshake_buffer37.out0, %handshake_buffer37.out0_valid = hw.instance "handshake_buffer37" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant0.out0: i64, in0_valid: %handshake_constant0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux2.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant1.ctrl_ready, %handshake_constant1.out0, %handshake_constant1.out0_valid = hw.instance "handshake_constant1" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer13.out0: i0, ctrl_valid: %handshake_buffer13.out0_valid: i1, out0_ready: %handshake_buffer38.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer38.in0_ready, %handshake_buffer38.out0, %handshake_buffer38.out0_valid = hw.instance "handshake_buffer38" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant1.out0: i64, in0_valid: %handshake_constant1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork5.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork5.in0_ready, %handshake_fork5.out0, %handshake_fork5.out0_valid, %handshake_fork5.out1, %handshake_fork5.out1_valid = hw.instance "handshake_fork5" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer38.out0: i64, in0_valid: %handshake_buffer38.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer40.in0_ready: i1, out1_ready: %handshake_buffer39.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer39.in0_ready, %handshake_buffer39.out0, %handshake_buffer39.out0_valid = hw.instance "handshake_buffer39" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out1: i64, in0_valid: %handshake_fork5.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store2.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer40.in0_ready, %handshake_buffer40.out0, %handshake_buffer40.out0_valid = hw.instance "handshake_buffer40" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out0: i64, in0_valid: %handshake_fork5.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store5.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant2.ctrl_ready, %handshake_constant2.out0, %handshake_constant2.out0_valid = hw.instance "handshake_constant2" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer12.out0: i0, ctrl_valid: %handshake_buffer12.out0_valid: i1, out0_ready: %handshake_buffer41.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer41.in0_ready, %handshake_buffer41.out0, %handshake_buffer41.out0_valid = hw.instance "handshake_buffer41" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant2.out0: i64, in0_valid: %handshake_constant2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork6.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork6.in0_ready, %handshake_fork6.out0, %handshake_fork6.out0_valid, %handshake_fork6.out1, %handshake_fork6.out1_valid = hw.instance "handshake_fork6" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer41.out0: i64, in0_valid: %handshake_buffer41.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer43.in0_ready: i1, out1_ready: %handshake_buffer42.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer42.in0_ready, %handshake_buffer42.out0, %handshake_buffer42.out0_valid = hw.instance "handshake_buffer42" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out1: i64, in0_valid: %handshake_fork6.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store1.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer43.in0_ready, %handshake_buffer43.out0, %handshake_buffer43.out0_valid = hw.instance "handshake_buffer43" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out0: i64, in0_valid: %handshake_fork6.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store4.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant3.ctrl_ready, %handshake_constant3.out0, %handshake_constant3.out0_valid = hw.instance "handshake_constant3" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer11.out0: i0, ctrl_valid: %handshake_buffer11.out0_valid: i1, out0_ready: %handshake_buffer44.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer44.in0_ready, %handshake_buffer44.out0, %handshake_buffer44.out0_valid = hw.instance "handshake_buffer44" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant3.out0: i64, in0_valid: %handshake_constant3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork7.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork7.in0_ready, %handshake_fork7.out0, %handshake_fork7.out0_valid, %handshake_fork7.out1, %handshake_fork7.out1_valid = hw.instance "handshake_fork7" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer44.out0: i64, in0_valid: %handshake_buffer44.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer46.in0_ready: i1, out1_ready: %handshake_buffer45.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer45.in0_ready, %handshake_buffer45.out0, %handshake_buffer45.out0_valid = hw.instance "handshake_buffer45" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out1: i64, in0_valid: %handshake_fork7.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store0.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer46.in0_ready, %handshake_buffer46.out0, %handshake_buffer46.out0_valid = hw.instance "handshake_buffer46" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out0: i64, in0_valid: %handshake_fork7.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store3.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant4.ctrl_ready, %handshake_constant4.out0, %handshake_constant4.out0_valid = hw.instance "handshake_constant4" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer10.out0: i0, ctrl_valid: %handshake_buffer10.out0_valid: i1, out0_ready: %handshake_buffer47.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer47.in0_ready, %handshake_buffer47.out0, %handshake_buffer47.out0_valid = hw.instance "handshake_buffer47" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant4.out0: i64, in0_valid: %handshake_constant4.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork8.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork8.in0_ready, %handshake_fork8.out0, %handshake_fork8.out0_valid, %handshake_fork8.out1, %handshake_fork8.out1_valid = hw.instance "handshake_fork8" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer47.out0: i64, in0_valid: %handshake_buffer47.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer49.in0_ready: i1, out1_ready: %handshake_buffer48.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer48.in0_ready, %handshake_buffer48.out0, %handshake_buffer48.out0_valid = hw.instance "handshake_buffer48" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out1: i64, in0_valid: %handshake_fork8.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store2.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer49.in0_ready, %handshake_buffer49.out0, %handshake_buffer49.out0_valid = hw.instance "handshake_buffer49" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out0: i64, in0_valid: %handshake_fork8.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store5.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant5.ctrl_ready, %handshake_constant5.out0, %handshake_constant5.out0_valid = hw.instance "handshake_constant5" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer9.out0: i0, ctrl_valid: %handshake_buffer9.out0_valid: i1, out0_ready: %handshake_buffer50.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer50.in0_ready, %handshake_buffer50.out0, %handshake_buffer50.out0_valid = hw.instance "handshake_buffer50" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant5.out0: i64, in0_valid: %handshake_constant5.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork9.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork9.in0_ready, %handshake_fork9.out0, %handshake_fork9.out0_valid, %handshake_fork9.out1, %handshake_fork9.out1_valid, %handshake_fork9.out2, %handshake_fork9.out2_valid = hw.instance "handshake_fork9" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer50.out0: i64, in0_valid: %handshake_buffer50.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer53.in0_ready: i1, out1_ready: %handshake_buffer52.in0_ready: i1, out2_ready: %handshake_buffer51.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
  %handshake_buffer51.in0_ready, %handshake_buffer51.out0, %handshake_buffer51.out0_valid = hw.instance "handshake_buffer51" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out2: i64, in0_valid: %handshake_fork9.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store1.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer52.in0_ready, %handshake_buffer52.out0, %handshake_buffer52.out0_valid = hw.instance "handshake_buffer52" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out1: i64, in0_valid: %handshake_fork9.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store4.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer53.in0_ready, %handshake_buffer53.out0, %handshake_buffer53.out0_valid = hw.instance "handshake_buffer53" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out0: i64, in0_valid: %handshake_fork9.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux3.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_constant6.ctrl_ready, %handshake_constant6.out0, %handshake_constant6.out0_valid = hw.instance "handshake_constant6" @handshake_constant_c0_out_ui64(ctrl: %handshake_buffer8.out0: i0, ctrl_valid: %handshake_buffer8.out0_valid: i1, out0_ready: %handshake_buffer54.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer54.in0_ready, %handshake_buffer54.out0, %handshake_buffer54.out0_valid = hw.instance "handshake_buffer54" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant6.out0: i64, in0_valid: %handshake_constant6.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork10.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork10.in0_ready, %handshake_fork10.out0, %handshake_fork10.out0_valid, %handshake_fork10.out1, %handshake_fork10.out1_valid, %handshake_fork10.out2, %handshake_fork10.out2_valid = hw.instance "handshake_fork10" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer54.out0: i64, in0_valid: %handshake_buffer54.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer57.in0_ready: i1, out1_ready: %handshake_buffer56.in0_ready: i1, out2_ready: %handshake_buffer55.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
  %handshake_buffer55.in0_ready, %handshake_buffer55.out0, %handshake_buffer55.out0_valid = hw.instance "handshake_buffer55" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out2: i64, in0_valid: %handshake_fork10.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store0.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer56.in0_ready, %handshake_buffer56.out0, %handshake_buffer56.out0_valid = hw.instance "handshake_buffer56" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out1: i64, in0_valid: %handshake_fork10.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store3.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer57.in0_ready, %handshake_buffer57.out0, %handshake_buffer57.out0_valid = hw.instance "handshake_buffer57" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out0: i64, in0_valid: %handshake_fork10.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux1.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_store0.addrIn0_ready, %handshake_store0.dataIn_ready, %handshake_store0.ctrl_ready, %handshake_store0.dataToMem, %handshake_store0.dataToMem_valid, %handshake_store0.addrOut0, %handshake_store0.addrOut0_valid = hw.instance "handshake_store0" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer55.out0: i64, addrIn0_valid: %handshake_buffer55.out0_valid: i1, dataIn: %handshake_buffer45.out0: i64, dataIn_valid: %handshake_buffer45.out0_valid: i1, ctrl: %handshake_buffer7.out0: i0, ctrl_valid: %handshake_buffer7.out0_valid: i1, dataToMem_ready: %handshake_buffer59.in0_ready: i1, addrOut0_ready: %handshake_buffer58.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer58.in0_ready, %handshake_buffer58.out0, %handshake_buffer58.out0_valid = hw.instance "handshake_buffer58" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.addrOut0: i64, in0_valid: %handshake_store0.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer59.in0_ready, %handshake_buffer59.out0, %handshake_buffer59.out0_valid = hw.instance "handshake_buffer59" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.dataToMem: i64, in0_valid: %handshake_store0.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_join1.in0_ready, %handshake_join1.in1_ready, %handshake_join1.out0, %handshake_join1.out0_valid = hw.instance "handshake_join1" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer6.out0: i0, in0_valid: %handshake_buffer6.out0_valid: i1, in1: %handshake_buffer33.out0: i0, in1_valid: %handshake_buffer33.out0_valid: i1, out0_ready: %handshake_buffer60.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer60.in0_ready, %handshake_buffer60.out0, %handshake_buffer60.out0_valid = hw.instance "handshake_buffer60" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join1.out0: i0, in0_valid: %handshake_join1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_store1.addrIn0_ready, %handshake_store1.dataIn_ready, %handshake_store1.ctrl_ready, %handshake_store1.dataToMem, %handshake_store1.dataToMem_valid, %handshake_store1.addrOut0, %handshake_store1.addrOut0_valid = hw.instance "handshake_store1" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer51.out0: i64, addrIn0_valid: %handshake_buffer51.out0_valid: i1, dataIn: %handshake_buffer42.out0: i64, dataIn_valid: %handshake_buffer42.out0_valid: i1, ctrl: %handshake_buffer60.out0: i0, ctrl_valid: %handshake_buffer60.out0_valid: i1, dataToMem_ready: %handshake_buffer62.in0_ready: i1, addrOut0_ready: %handshake_buffer61.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer61.in0_ready, %handshake_buffer61.out0, %handshake_buffer61.out0_valid = hw.instance "handshake_buffer61" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.addrOut0: i64, in0_valid: %handshake_store1.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer62.in0_ready, %handshake_buffer62.out0, %handshake_buffer62.out0_valid = hw.instance "handshake_buffer62" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.dataToMem: i64, in0_valid: %handshake_store1.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stData1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_join2.in0_ready, %handshake_join2.in1_ready, %handshake_join2.in2_ready, %handshake_join2.out0, %handshake_join2.out0_valid = hw.instance "handshake_join2" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer5.out0: i0, in0_valid: %handshake_buffer5.out0_valid: i1, in1: %handshake_buffer34.out0: i0, in1_valid: %handshake_buffer34.out0_valid: i1, in2: %handshake_buffer31.out0: i0, in2_valid: %handshake_buffer31.out0_valid: i1, out0_ready: %handshake_buffer63.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer63.in0_ready, %handshake_buffer63.out0, %handshake_buffer63.out0_valid = hw.instance "handshake_buffer63" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join2.out0: i0, in0_valid: %handshake_join2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store2.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_store2.addrIn0_ready, %handshake_store2.dataIn_ready, %handshake_store2.ctrl_ready, %handshake_store2.dataToMem, %handshake_store2.dataToMem_valid, %handshake_store2.addrOut0, %handshake_store2.addrOut0_valid = hw.instance "handshake_store2" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer48.out0: i64, addrIn0_valid: %handshake_buffer48.out0_valid: i1, dataIn: %handshake_buffer39.out0: i64, dataIn_valid: %handshake_buffer39.out0_valid: i1, ctrl: %handshake_buffer63.out0: i0, ctrl_valid: %handshake_buffer63.out0_valid: i1, dataToMem_ready: %handshake_buffer65.in0_ready: i1, addrOut0_ready: %handshake_buffer64.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer64.in0_ready, %handshake_buffer64.out0, %handshake_buffer64.out0_valid = hw.instance "handshake_buffer64" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.addrOut0: i64, in0_valid: %handshake_store2.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer65.in0_ready, %handshake_buffer65.out0, %handshake_buffer65.out0_valid = hw.instance "handshake_buffer65" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.dataToMem: i64, in0_valid: %handshake_store2.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stData2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_store3.addrIn0_ready, %handshake_store3.dataIn_ready, %handshake_store3.ctrl_ready, %handshake_store3.dataToMem, %handshake_store3.dataToMem_valid, %handshake_store3.addrOut0, %handshake_store3.addrOut0_valid = hw.instance "handshake_store3" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer56.out0: i64, addrIn0_valid: %handshake_buffer56.out0_valid: i1, dataIn: %handshake_buffer46.out0: i64, dataIn_valid: %handshake_buffer46.out0_valid: i1, ctrl: %handshake_buffer3.out0: i0, ctrl_valid: %handshake_buffer3.out0_valid: i1, dataToMem_ready: %handshake_buffer67.in0_ready: i1, addrOut0_ready: %handshake_buffer66.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer66.in0_ready, %handshake_buffer66.out0, %handshake_buffer66.out0_valid = hw.instance "handshake_buffer66" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.addrOut0: i64, in0_valid: %handshake_store3.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer67.in0_ready, %handshake_buffer67.out0, %handshake_buffer67.out0_valid = hw.instance "handshake_buffer67" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.dataToMem: i64, in0_valid: %handshake_store3.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_join3.in0_ready, %handshake_join3.in1_ready, %handshake_join3.out0, %handshake_join3.out0_valid = hw.instance "handshake_join3" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer2.out0: i0, in0_valid: %handshake_buffer2.out0_valid: i1, in1: %handshake_buffer24.out0: i0, in1_valid: %handshake_buffer24.out0_valid: i1, out0_ready: %handshake_buffer68.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer68.in0_ready, %handshake_buffer68.out0, %handshake_buffer68.out0_valid = hw.instance "handshake_buffer68" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join3.out0: i0, in0_valid: %handshake_join3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store4.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_store4.addrIn0_ready, %handshake_store4.dataIn_ready, %handshake_store4.ctrl_ready, %handshake_store4.dataToMem, %handshake_store4.dataToMem_valid, %handshake_store4.addrOut0, %handshake_store4.addrOut0_valid = hw.instance "handshake_store4" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer52.out0: i64, addrIn0_valid: %handshake_buffer52.out0_valid: i1, dataIn: %handshake_buffer43.out0: i64, dataIn_valid: %handshake_buffer43.out0_valid: i1, ctrl: %handshake_buffer68.out0: i0, ctrl_valid: %handshake_buffer68.out0_valid: i1, dataToMem_ready: %handshake_buffer70.in0_ready: i1, addrOut0_ready: %handshake_buffer69.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer69.in0_ready, %handshake_buffer69.out0, %handshake_buffer69.out0_valid = hw.instance "handshake_buffer69" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.addrOut0: i64, in0_valid: %handshake_store4.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer70.in0_ready, %handshake_buffer70.out0, %handshake_buffer70.out0_valid = hw.instance "handshake_buffer70" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.dataToMem: i64, in0_valid: %handshake_store4.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stData1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_join4.in0_ready, %handshake_join4.in1_ready, %handshake_join4.in2_ready, %handshake_join4.out0, %handshake_join4.out0_valid = hw.instance "handshake_join4" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer1.out0: i0, in0_valid: %handshake_buffer1.out0_valid: i1, in1: %handshake_buffer25.out0: i0, in1_valid: %handshake_buffer25.out0_valid: i1, in2: %handshake_buffer22.out0: i0, in2_valid: %handshake_buffer22.out0_valid: i1, out0_ready: %handshake_buffer71.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer71.in0_ready, %handshake_buffer71.out0, %handshake_buffer71.out0_valid = hw.instance "handshake_buffer71" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join4.out0: i0, in0_valid: %handshake_join4.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store5.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_store5.addrIn0_ready, %handshake_store5.dataIn_ready, %handshake_store5.ctrl_ready, %handshake_store5.dataToMem, %handshake_store5.dataToMem_valid, %handshake_store5.addrOut0, %handshake_store5.addrOut0_valid = hw.instance "handshake_store5" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer49.out0: i64, addrIn0_valid: %handshake_buffer49.out0_valid: i1, dataIn: %handshake_buffer40.out0: i64, dataIn_valid: %handshake_buffer40.out0_valid: i1, ctrl: %handshake_buffer71.out0: i0, ctrl_valid: %handshake_buffer71.out0_valid: i1, dataToMem_ready: %handshake_buffer73.in0_ready: i1, addrOut0_ready: %handshake_buffer72.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer72.in0_ready, %handshake_buffer72.out0, %handshake_buffer72.out0_valid = hw.instance "handshake_buffer72" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.addrOut0: i64, in0_valid: %handshake_store5.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer73.in0_ready, %handshake_buffer73.out0, %handshake_buffer73.out0_valid = hw.instance "handshake_buffer73" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.dataToMem: i64, in0_valid: %handshake_store5.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stData2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer74.in0_ready, %handshake_buffer74.out0, %handshake_buffer74.out0_valid = hw.instance "handshake_buffer74" @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in0: %handshake_fork14.out0: i1, in0_valid: %handshake_fork14.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork11.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_fork11.in0_ready, %handshake_fork11.out0, %handshake_fork11.out0_valid, %handshake_fork11.out1, %handshake_fork11.out1_valid, %handshake_fork11.out2, %handshake_fork11.out2_valid, %handshake_fork11.out3, %handshake_fork11.out3_valid = hw.instance "handshake_fork11" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in0: %handshake_buffer74.out0: i1, in0_valid: %handshake_buffer74.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer78.in0_ready: i1, out1_ready: %handshake_buffer77.in0_ready: i1, out2_ready: %handshake_buffer76.in0_ready: i1, out3_ready: %handshake_buffer75.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1)
  %handshake_buffer75.in0_ready, %handshake_buffer75.out0, %handshake_buffer75.out0_valid = hw.instance "handshake_buffer75" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out3: i1, in0_valid: %handshake_fork11.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux0.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer76.in0_ready, %handshake_buffer76.out0, %handshake_buffer76.out0_valid = hw.instance "handshake_buffer76" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out2: i1, in0_valid: %handshake_fork11.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux1.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer77.in0_ready, %handshake_buffer77.out0, %handshake_buffer77.out0_valid = hw.instance "handshake_buffer77" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out1: i1, in0_valid: %handshake_fork11.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux2.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer78.in0_ready, %handshake_buffer78.out0, %handshake_buffer78.out0_valid = hw.instance "handshake_buffer78" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out0: i1, in0_valid: %handshake_fork11.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux3.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_mux0.select_ready, %handshake_mux0.in0_ready, %handshake_mux0.in1_ready, %handshake_mux0.out0, %handshake_mux0.out0_valid = hw.instance "handshake_mux0" @handshake_mux_in_ui1_3ins_1outs_ctrl(select: %handshake_buffer75.out0: i1, select_valid: %handshake_buffer75.out0_valid: i1, in0: %handshake_buffer36.out0: i0, in0_valid: %handshake_buffer36.out0_valid: i1, in1: %handshake_buffer107.out0: i0, in1_valid: %handshake_buffer107.out0_valid: i1, out0_ready: %handshake_buffer79.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer79.in0_ready, %handshake_buffer79.out0, %handshake_buffer79.out0_valid = hw.instance "handshake_buffer79" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_mux0.out0: i0, in0_valid: %handshake_mux0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br3.data_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_mux1.select_ready, %handshake_mux1.in0_ready, %handshake_mux1.in1_ready, %handshake_mux1.out0, %handshake_mux1.out0_valid = hw.instance "handshake_mux1" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer76.out0: i1, select_valid: %handshake_buffer76.out0_valid: i1, in0: %handshake_buffer57.out0: i64, in0_valid: %handshake_buffer57.out0_valid: i1, in1: %handshake_buffer115.out0: i64, in1_valid: %handshake_buffer115.out0_valid: i1, out0_ready: %handshake_buffer80.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer80.in0_ready, %handshake_buffer80.out0, %handshake_buffer80.out0_valid = hw.instance "handshake_buffer80" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux1.out0: i64, in0_valid: %handshake_mux1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork12.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork12.in0_ready, %handshake_fork12.out0, %handshake_fork12.out0_valid, %handshake_fork12.out1, %handshake_fork12.out1_valid = hw.instance "handshake_fork12" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer80.out0: i64, in0_valid: %handshake_buffer80.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer82.in0_ready: i1, out1_ready: %handshake_buffer81.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer81.in0_ready, %handshake_buffer81.out0, %handshake_buffer81.out0_valid = hw.instance "handshake_buffer81" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out1: i64, in0_valid: %handshake_fork12.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br0.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer82.in0_ready, %handshake_buffer82.out0, %handshake_buffer82.out0_valid = hw.instance "handshake_buffer82" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out0: i64, in0_valid: %handshake_fork12.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_cmpi0.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_mux2.select_ready, %handshake_mux2.in0_ready, %handshake_mux2.in1_ready, %handshake_mux2.out0, %handshake_mux2.out0_valid = hw.instance "handshake_mux2" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer77.out0: i1, select_valid: %handshake_buffer77.out0_valid: i1, in0: %handshake_buffer37.out0: i64, in0_valid: %handshake_buffer37.out0_valid: i1, in1: %handshake_buffer97.out0: i64, in1_valid: %handshake_buffer97.out0_valid: i1, out0_ready: %handshake_buffer83.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer83.in0_ready, %handshake_buffer83.out0, %handshake_buffer83.out0_valid = hw.instance "handshake_buffer83" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux2.out0: i64, in0_valid: %handshake_mux2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork13.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_fork13.in0_ready, %handshake_fork13.out0, %handshake_fork13.out0_valid, %handshake_fork13.out1, %handshake_fork13.out1_valid = hw.instance "handshake_fork13" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer83.out0: i64, in0_valid: %handshake_buffer83.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer85.in0_ready: i1, out1_ready: %handshake_buffer84.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer84.in0_ready, %handshake_buffer84.out0, %handshake_buffer84.out0_valid = hw.instance "handshake_buffer84" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out1: i64, in0_valid: %handshake_fork13.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br1.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer85.in0_ready, %handshake_buffer85.out0, %handshake_buffer85.out0_valid = hw.instance "handshake_buffer85" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out0: i64, in0_valid: %handshake_fork13.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_cmpi0.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_mux3.select_ready, %handshake_mux3.in0_ready, %handshake_mux3.in1_ready, %handshake_mux3.out0, %handshake_mux3.out0_valid = hw.instance "handshake_mux3" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer78.out0: i1, select_valid: %handshake_buffer78.out0_valid: i1, in0: %handshake_buffer53.out0: i64, in0_valid: %handshake_buffer53.out0_valid: i1, in1: %handshake_buffer100.out0: i64, in1_valid: %handshake_buffer100.out0_valid: i1, out0_ready: %handshake_buffer86.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer86.in0_ready, %handshake_buffer86.out0, %handshake_buffer86.out0_valid = hw.instance "handshake_buffer86" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux3.out0: i64, in0_valid: %handshake_mux3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br2.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %arith_cmpi0.in0_ready, %arith_cmpi0.in1_ready, %arith_cmpi0.out0, %arith_cmpi0.out0_valid = hw.instance "arith_cmpi0" @arith_cmpi_in_ui64_ui64_out_ui1_slt(in0: %handshake_buffer82.out0: i64, in0_valid: %handshake_buffer82.out0_valid: i1, in1: %handshake_buffer85.out0: i64, in1_valid: %handshake_buffer85.out0_valid: i1, out0_ready: %handshake_buffer87.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer87.in0_ready, %handshake_buffer87.out0, %handshake_buffer87.out0_valid = hw.instance "handshake_buffer87" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %arith_cmpi0.out0: i1, in0_valid: %arith_cmpi0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork14.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_fork14.in0_ready, %handshake_fork14.out0, %handshake_fork14.out0_valid, %handshake_fork14.out1, %handshake_fork14.out1_valid, %handshake_fork14.out2, %handshake_fork14.out2_valid, %handshake_fork14.out3, %handshake_fork14.out3_valid, %handshake_fork14.out4, %handshake_fork14.out4_valid = hw.instance "handshake_fork14" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in0: %handshake_buffer87.out0: i1, in0_valid: %handshake_buffer87.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer74.in0_ready: i1, out1_ready: %handshake_buffer91.in0_ready: i1, out2_ready: %handshake_buffer90.in0_ready: i1, out3_ready: %handshake_buffer89.in0_ready: i1, out4_ready: %handshake_buffer88.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1, out4: i1, out4_valid: i1)
  %handshake_buffer88.in0_ready, %handshake_buffer88.out0, %handshake_buffer88.out0_valid = hw.instance "handshake_buffer88" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out4: i1, in0_valid: %handshake_fork14.out4_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br0.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer89.in0_ready, %handshake_buffer89.out0, %handshake_buffer89.out0_valid = hw.instance "handshake_buffer89" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out3: i1, in0_valid: %handshake_fork14.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br1.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer90.in0_ready, %handshake_buffer90.out0, %handshake_buffer90.out0_valid = hw.instance "handshake_buffer90" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out2: i1, in0_valid: %handshake_fork14.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br2.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_buffer91.in0_ready, %handshake_buffer91.out0, %handshake_buffer91.out0_valid = hw.instance "handshake_buffer91" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out1: i1, in0_valid: %handshake_fork14.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br3.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  %handshake_cond_br0.cond_ready, %handshake_cond_br0.data_ready, %handshake_cond_br0.outTrue, %handshake_cond_br0.outTrue_valid, %handshake_cond_br0.outFalse, %handshake_cond_br0.outFalse_valid = hw.instance "handshake_cond_br0" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer88.out0: i1, cond_valid: %handshake_buffer88.out0_valid: i1, data: %handshake_buffer81.out0: i64, data_valid: %handshake_buffer81.out0_valid: i1, outTrue_ready: %handshake_buffer92.in0_ready: i1, outFalse_ready: %handshake_sink0.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
  %handshake_buffer92.in0_ready, %handshake_buffer92.out0, %handshake_buffer92.out0_valid = hw.instance "handshake_buffer92" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br0.outTrue: i64, in0_valid: %handshake_cond_br0.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork15.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_sink0.in0_ready = hw.instance "handshake_sink0" @handshake_sink_in_ui64(in0: %handshake_cond_br0.outFalse: i64, in0_valid: %handshake_cond_br0.outFalse_valid: i1) -> (in0_ready: i1)
  %handshake_fork15.in0_ready, %handshake_fork15.out0, %handshake_fork15.out0_valid, %handshake_fork15.out1, %handshake_fork15.out1_valid, %handshake_fork15.out2, %handshake_fork15.out2_valid, %handshake_fork15.out3, %handshake_fork15.out3_valid = hw.instance "handshake_fork15" @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in0: %handshake_buffer92.out0: i64, in0_valid: %handshake_buffer92.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer96.in0_ready: i1, out1_ready: %handshake_buffer95.in0_ready: i1, out2_ready: %handshake_buffer94.in0_ready: i1, out3_ready: %handshake_buffer93.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1, out3: i64, out3_valid: i1)
  %handshake_buffer93.in0_ready, %handshake_buffer93.out0, %handshake_buffer93.out0_valid = hw.instance "handshake_buffer93" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out3: i64, in0_valid: %handshake_fork15.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store6.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer94.in0_ready, %handshake_buffer94.out0, %handshake_buffer94.out0_valid = hw.instance "handshake_buffer94" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out2: i64, in0_valid: %handshake_fork15.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load1.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer95.in0_ready, %handshake_buffer95.out0, %handshake_buffer95.out0_valid = hw.instance "handshake_buffer95" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out1: i64, in0_valid: %handshake_fork15.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load0.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer96.in0_ready, %handshake_buffer96.out0, %handshake_buffer96.out0_valid = hw.instance "handshake_buffer96" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out0: i64, in0_valid: %handshake_fork15.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi1.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_cond_br1.cond_ready, %handshake_cond_br1.data_ready, %handshake_cond_br1.outTrue, %handshake_cond_br1.outTrue_valid, %handshake_cond_br1.outFalse, %handshake_cond_br1.outFalse_valid = hw.instance "handshake_cond_br1" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer89.out0: i1, cond_valid: %handshake_buffer89.out0_valid: i1, data: %handshake_buffer84.out0: i64, data_valid: %handshake_buffer84.out0_valid: i1, outTrue_ready: %handshake_buffer97.in0_ready: i1, outFalse_ready: %handshake_sink1.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
  %handshake_buffer97.in0_ready, %handshake_buffer97.out0, %handshake_buffer97.out0_valid = hw.instance "handshake_buffer97" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br1.outTrue: i64, in0_valid: %handshake_cond_br1.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux2.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_sink1.in0_ready = hw.instance "handshake_sink1" @handshake_sink_in_ui64(in0: %handshake_cond_br1.outFalse: i64, in0_valid: %handshake_cond_br1.outFalse_valid: i1) -> (in0_ready: i1)
  %handshake_cond_br2.cond_ready, %handshake_cond_br2.data_ready, %handshake_cond_br2.outTrue, %handshake_cond_br2.outTrue_valid, %handshake_cond_br2.outFalse, %handshake_cond_br2.outFalse_valid = hw.instance "handshake_cond_br2" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer90.out0: i1, cond_valid: %handshake_buffer90.out0_valid: i1, data: %handshake_buffer86.out0: i64, data_valid: %handshake_buffer86.out0_valid: i1, outTrue_ready: %handshake_buffer98.in0_ready: i1, outFalse_ready: %handshake_sink2.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
  %handshake_buffer98.in0_ready, %handshake_buffer98.out0, %handshake_buffer98.out0_valid = hw.instance "handshake_buffer98" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br2.outTrue: i64, in0_valid: %handshake_cond_br2.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork16.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_sink2.in0_ready = hw.instance "handshake_sink2" @handshake_sink_in_ui64(in0: %handshake_cond_br2.outFalse: i64, in0_valid: %handshake_cond_br2.outFalse_valid: i1) -> (in0_ready: i1)
  %handshake_fork16.in0_ready, %handshake_fork16.out0, %handshake_fork16.out0_valid, %handshake_fork16.out1, %handshake_fork16.out1_valid = hw.instance "handshake_fork16" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer98.out0: i64, in0_valid: %handshake_buffer98.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer100.in0_ready: i1, out1_ready: %handshake_buffer99.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  %handshake_buffer99.in0_ready, %handshake_buffer99.out0, %handshake_buffer99.out0_valid = hw.instance "handshake_buffer99" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out1: i64, in0_valid: %handshake_fork16.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi1.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer100.in0_ready, %handshake_buffer100.out0, %handshake_buffer100.out0_valid = hw.instance "handshake_buffer100" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out0: i64, in0_valid: %handshake_fork16.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux3.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_cond_br3.cond_ready, %handshake_cond_br3.data_ready, %handshake_cond_br3.outTrue, %handshake_cond_br3.outTrue_valid, %handshake_cond_br3.outFalse, %handshake_cond_br3.outFalse_valid = hw.instance "handshake_cond_br3" @handshake_cond_br_in_ui1_2ins_2outs_ctrl(cond: %handshake_buffer91.out0: i1, cond_valid: %handshake_buffer91.out0_valid: i1, data: %handshake_buffer79.out0: i0, data_valid: %handshake_buffer79.out0_valid: i1, outTrue_ready: %handshake_buffer102.in0_ready: i1, outFalse_ready: %handshake_buffer101.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i0, outTrue_valid: i1, outFalse: i0, outFalse_valid: i1)
  %handshake_buffer101.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid = hw.instance "handshake_buffer101" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outFalse: i0, in0_valid: %handshake_cond_br3.outFalse_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %out0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer102.in0_ready, %handshake_buffer102.out0, %handshake_buffer102.out0_valid = hw.instance "handshake_buffer102" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outTrue: i0, in0_valid: %handshake_cond_br3.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork17.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_fork17.in0_ready, %handshake_fork17.out0, %handshake_fork17.out0_valid, %handshake_fork17.out1, %handshake_fork17.out1_valid, %handshake_fork17.out2, %handshake_fork17.out2_valid, %handshake_fork17.out3, %handshake_fork17.out3_valid = hw.instance "handshake_fork17" @handshake_fork_1ins_4outs_ctrl(in0: %handshake_buffer102.out0: i0, in0_valid: %handshake_buffer102.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer106.in0_ready: i1, out1_ready: %handshake_buffer105.in0_ready: i1, out2_ready: %handshake_buffer104.in0_ready: i1, out3_ready: %handshake_buffer103.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1)
  %handshake_buffer103.in0_ready, %handshake_buffer103.out0, %handshake_buffer103.out0_valid = hw.instance "handshake_buffer103" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out3: i0, in0_valid: %handshake_fork17.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer104.in0_ready, %handshake_buffer104.out0, %handshake_buffer104.out0_valid = hw.instance "handshake_buffer104" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out2: i0, in0_valid: %handshake_fork17.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer105.in0_ready, %handshake_buffer105.out0, %handshake_buffer105.out0_valid = hw.instance "handshake_buffer105" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out1: i0, in0_valid: %handshake_fork17.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer106.in0_ready, %handshake_buffer106.out0, %handshake_buffer106.out0_valid = hw.instance "handshake_buffer106" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out0: i0, in0_valid: %handshake_fork17.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store6.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_join5.in0_ready, %handshake_join5.in1_ready, %handshake_join5.in2_ready, %handshake_join5.in3_ready, %handshake_join5.out0, %handshake_join5.out0_valid = hw.instance "handshake_join5" @handshake_join_4ins_1outs_ctrl(in0: %handshake_buffer105.out0: i0, in0_valid: %handshake_buffer105.out0_valid: i1, in1: %handshake_buffer26.out0: i0, in1_valid: %handshake_buffer26.out0_valid: i1, in2: %handshake_buffer16.out0: i0, in2_valid: %handshake_buffer16.out0_valid: i1, in3: %handshake_buffer15.out0: i0, in3_valid: %handshake_buffer15.out0_valid: i1, out0_ready: %handshake_buffer107.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, out0: i0, out0_valid: i1)
  %handshake_buffer107.in0_ready, %handshake_buffer107.out0, %handshake_buffer107.out0_valid = hw.instance "handshake_buffer107" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join5.out0: i0, in0_valid: %handshake_join5.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux0.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  %handshake_load0.addrIn0_ready, %handshake_load0.dataFromMem_ready, %handshake_load0.ctrl_ready, %handshake_load0.dataOut, %handshake_load0.dataOut_valid, %handshake_load0.addrOut0, %handshake_load0.addrOut0_valid = hw.instance "handshake_load0" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer95.out0: i64, addrIn0_valid: %handshake_buffer95.out0_valid: i1, dataFromMem: %handshake_buffer30.out0: i64, dataFromMem_valid: %handshake_buffer30.out0_valid: i1, ctrl: %handshake_buffer103.out0: i0, ctrl_valid: %handshake_buffer103.out0_valid: i1, dataOut_ready: %handshake_buffer109.in0_ready: i1, addrOut0_ready: %handshake_buffer108.in0_ready: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer108.in0_ready, %handshake_buffer108.out0, %handshake_buffer108.out0_valid = hw.instance "handshake_buffer108" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.addrOut0: i64, in0_valid: %handshake_load0.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.ldAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer109.in0_ready, %handshake_buffer109.out0, %handshake_buffer109.out0_valid = hw.instance "handshake_buffer109" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.dataOut: i64, in0_valid: %handshake_load0.dataOut_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi0.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_load1.addrIn0_ready, %handshake_load1.dataFromMem_ready, %handshake_load1.ctrl_ready, %handshake_load1.dataOut, %handshake_load1.dataOut_valid, %handshake_load1.addrOut0, %handshake_load1.addrOut0_valid = hw.instance "handshake_load1" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer94.out0: i64, addrIn0_valid: %handshake_buffer94.out0_valid: i1, dataFromMem: %handshake_buffer20.out0: i64, dataFromMem_valid: %handshake_buffer20.out0_valid: i1, ctrl: %handshake_buffer104.out0: i0, ctrl_valid: %handshake_buffer104.out0_valid: i1, dataOut_ready: %handshake_buffer111.in0_ready: i1, addrOut0_ready: %handshake_buffer110.in0_ready: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer110.in0_ready, %handshake_buffer110.out0, %handshake_buffer110.out0_valid = hw.instance "handshake_buffer110" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.addrOut0: i64, in0_valid: %handshake_load1.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.ldAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer111.in0_ready, %handshake_buffer111.out0, %handshake_buffer111.out0_valid = hw.instance "handshake_buffer111" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.dataOut: i64, in0_valid: %handshake_load1.dataOut_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi0.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %arith_addi0.in0_ready, %arith_addi0.in1_ready, %arith_addi0.out0, %arith_addi0.out0_valid = hw.instance "arith_addi0" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer109.out0: i64, in0_valid: %handshake_buffer109.out0_valid: i1, in1: %handshake_buffer111.out0: i64, in1_valid: %handshake_buffer111.out0_valid: i1, out0_ready: %handshake_buffer112.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer112.in0_ready, %handshake_buffer112.out0, %handshake_buffer112.out0_valid = hw.instance "handshake_buffer112" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi0.out0: i64, in0_valid: %arith_addi0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store6.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_store6.addrIn0_ready, %handshake_store6.dataIn_ready, %handshake_store6.ctrl_ready, %handshake_store6.dataToMem, %handshake_store6.dataToMem_valid, %handshake_store6.addrOut0, %handshake_store6.addrOut0_valid = hw.instance "handshake_store6" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer93.out0: i64, addrIn0_valid: %handshake_buffer93.out0_valid: i1, dataIn: %handshake_buffer112.out0: i64, dataIn_valid: %handshake_buffer112.out0_valid: i1, ctrl: %handshake_buffer106.out0: i0, ctrl_valid: %handshake_buffer106.out0_valid: i1, dataToMem_ready: %handshake_buffer114.in0_ready: i1, addrOut0_ready: %handshake_buffer113.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  %handshake_buffer113.in0_ready, %handshake_buffer113.out0, %handshake_buffer113.out0_valid = hw.instance "handshake_buffer113" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.addrOut0: i64, in0_valid: %handshake_store6.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory0.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer114.in0_ready, %handshake_buffer114.out0, %handshake_buffer114.out0_valid = hw.instance "handshake_buffer114" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.dataToMem: i64, in0_valid: %handshake_store6.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory0.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  %arith_addi1.in0_ready, %arith_addi1.in1_ready, %arith_addi1.out0, %arith_addi1.out0_valid = hw.instance "arith_addi1" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer96.out0: i64, in0_valid: %handshake_buffer96.out0_valid: i1, in1: %handshake_buffer99.out0: i64, in1_valid: %handshake_buffer99.out0_valid: i1, out0_ready: %handshake_buffer115.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  %handshake_buffer115.in0_ready, %handshake_buffer115.out0, %handshake_buffer115.out0_valid = hw.instance "handshake_buffer115" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi1.out0: i64, in0_valid: %arith_addi1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux1.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  hw.output %handshake_buffer0.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid : i1, i0, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_cond_br_in_ui1_2ins_2outs_ctrl(in %cond : i1, in %cond_valid : i1, in %data : i0, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i0, out outTrue_valid : i1, out outFalse : i0, out outFalse_valid : i1) {
  %true = hw.constant true
  %0 = comb.and %cond_valid, %data_valid : i1
  %1 = comb.and %cond, %0 : i1
  %2 = comb.xor %cond, %true : i1
  %3 = comb.and %2, %0 : i1
  %4 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
  %5 = comb.and %4, %0 : i1
  hw.output %5, %5, %data, %1, %data, %3 : i1, i1, i0, i1, i0, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_join_4ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c0_i0 = hw.constant 0 : i0
  %0 = comb.and %in0_valid, %in1_valid, %in2_valid, %in3_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  hw.output %1, %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i1, i0, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_join_3ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c0_i0 = hw.constant 0 : i0
  %0 = comb.and %in0_valid, %in1_valid, %in2_valid : i1
  %1 = comb.and %out0_ready, %0 : i1
  hw.output %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i0, i1
}

// -----// IR Dump After PrettifyVerilog (prettify-verilog) //----- //
hw.module @handshake_load_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataFromMem : i64, in %dataFromMem_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataOut_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataFromMem_ready : i1, out ctrl_ready : i1, out dataOut : i64, out dataOut_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
  %0 = comb.and %addrIn0_valid, %ctrl_valid : i1
  %1 = comb.and %addrOut0_ready, %0 : i1
  hw.output %1, %dataOut_ready, %1, %dataFromMem, %dataFromMem_valid, %addrIn0, %0 : i1, i1, i1, i64, i1, i64, i1
}

// -----// IR Dump After LegalizeAnonEnums (legalize-anon-enums) //----- //
module {
  hw.module @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
    %true = hw.constant true
    %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
    %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.xor %5, %true : i1
    %3 = comb.or %1, %2 : i1
    %data0_reg = sv.reg sym @data0_reg : !hw.inout<i0> 
    %4 = sv.read_inout %data0_reg : !hw.inout<i0>
    %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
    %5 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i0> 
    %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
    %6 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %7 = comb.xor %6, %true : i1
    %8 = comb.xor %11, %true : i1
    %9 = comb.or %7, %8 : i1
    %data1_reg = sv.reg sym @data1_reg : !hw.inout<i0> 
    %10 = sv.read_inout %data1_reg : !hw.inout<i0>
    %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
    %11 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %12 = comb.mux %11, %11, %6 : i1
    %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i0> 
    %13 = sv.read_inout %ctrl_data1_reg : !hw.inout<i0>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %c0_i0 = hw.constant 0 : i0
      %15 = sv.read_inout %valid0_reg : !hw.inout<i1>
      %16 = sv.read_inout %data0_reg : !hw.inout<i0>
      %17 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %18 = comb.xor %9, %true_0 : i1
      %true_1 = hw.constant true
      %19 = comb.xor %17, %true_1 : i1
      %20 = comb.and %18, %19 : i1
      %21 = comb.and %9, %17 : i1
      %22 = sv.read_inout %ctrl_data0_reg : !hw.inout<i0>
      %23 = sv.read_inout %valid1_reg : !hw.inout<i1>
      %24 = sv.read_inout %data1_reg : !hw.inout<i0>
      %25 = sv.read_inout %ready1_reg : !hw.inout<i1>
      %26 = comb.xor %out0_ready, %true_0 : i1
      %true_2 = hw.constant true
      %27 = comb.xor %25, %true_2 : i1
      %28 = comb.and %26, %27 : i1
      %29 = comb.and %out0_ready, %25 : i1
      %30 = sv.read_inout %ctrl_data1_reg : !hw.inout<i0>
      %31 = comb.mux %3, %in0_valid, %15 : i1
      sv.passign %valid0_reg, %31 : i1
      %32 = comb.mux %3, %in0, %4 : i0
      sv.passign %data0_reg, %32 : i0
      %33 = comb.xor %21, %true_0 : i1
      %34 = comb.mux %20, %15, %17 : i1
      %35 = comb.and %33, %34 : i1
      sv.passign %ready0_reg, %35 : i1
      %36 = comb.mux %20, %16, %22 : i0
      %37 = comb.mux %21, %c0_i0, %36 : i0
      sv.passign %ctrl_data0_reg, %37 : i0
      %38 = comb.mux %17, %17, %15 : i1
      %39 = comb.mux %9, %38, %23 : i1
      sv.passign %valid1_reg, %39 : i1
      %40 = comb.mux %17, %22, %16 : i0
      %41 = comb.mux %9, %40, %10 : i0
      sv.passign %data1_reg, %41 : i0
      %42 = comb.xor %29, %true_0 : i1
      %43 = comb.mux %28, %23, %25 : i1
      %44 = comb.and %42, %43 : i1
      sv.passign %ready1_reg, %44 : i1
      %45 = comb.mux %28, %24, %30 : i0
      %46 = comb.mux %29, %c0_i0, %45 : i0
      sv.passign %ctrl_data1_reg, %46 : i0
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      %c0_i0 = hw.constant 0 : i0
      sv.passign %valid0_reg, %false : i1
      sv.passign %data0_reg, %c0_i0 : i0
      sv.passign %ready0_reg, %false : i1
      sv.passign %ctrl_data0_reg, %c0_i0 : i0
      sv.passign %valid1_reg, %false : i1
      sv.passign %data1_reg, %c0_i0 : i0
      sv.passign %ready1_reg, %false : i1
      sv.passign %ctrl_data1_reg, %c0_i0 : i0
    }
    %14 = comb.mux %11, %13, %10 : i0
    hw.output %3, %14, %12 : i1, i0, i1
  }
  hw.module @handshake_fork_1ins_14outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, in %out5_ready : i1, in %out6_ready : i1, in %out7_ready : i1, in %out8_ready : i1, in %out9_ready : i1, in %out10_ready : i1, in %out11_ready : i1, in %out12_ready : i1, in %out13_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1, out out4 : i0, out out4_valid : i1, out out5 : i0, out out5_valid : i1, out out6 : i0, out out6_valid : i1, out out7 : i0, out out7_valid : i1, out out8 : i0, out out8_valid : i1, out out9 : i0, out out9_valid : i1, out out10 : i0, out out10_valid : i1, out out11 : i0, out out11_valid : i1, out out12 : i0, out out12_valid : i1, out out13 : i0, out out13_valid : i1) {
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = comb.and %out0_ready, %2 : i1
    %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %in0_valid : i1
    %8 = comb.and %out1_ready, %7 : i1
    %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %10 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %11 = comb.xor %10, %true : i1
    %12 = comb.and %11, %in0_valid : i1
    %13 = comb.and %out2_ready, %12 : i1
    %14 = comb.or %13, %10 {sv.namehint = "done2"} : i1
    %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
    %15 = sv.read_inout %emitted_3 : !hw.inout<i1>
    %16 = comb.xor %15, %true : i1
    %17 = comb.and %16, %in0_valid : i1
    %18 = comb.and %out3_ready, %17 : i1
    %19 = comb.or %18, %15 {sv.namehint = "done3"} : i1
    %emitted_4 = sv.reg sym @emitted_4 : !hw.inout<i1> 
    %20 = sv.read_inout %emitted_4 : !hw.inout<i1>
    %21 = comb.xor %20, %true : i1
    %22 = comb.and %21, %in0_valid : i1
    %23 = comb.and %out4_ready, %22 : i1
    %24 = comb.or %23, %20 {sv.namehint = "done4"} : i1
    %emitted_5 = sv.reg sym @emitted_5 : !hw.inout<i1> 
    %25 = sv.read_inout %emitted_5 : !hw.inout<i1>
    %26 = comb.xor %25, %true : i1
    %27 = comb.and %26, %in0_valid : i1
    %28 = comb.and %out5_ready, %27 : i1
    %29 = comb.or %28, %25 {sv.namehint = "done5"} : i1
    %emitted_6 = sv.reg sym @emitted_6 : !hw.inout<i1> 
    %30 = sv.read_inout %emitted_6 : !hw.inout<i1>
    %31 = comb.xor %30, %true : i1
    %32 = comb.and %31, %in0_valid : i1
    %33 = comb.and %out6_ready, %32 : i1
    %34 = comb.or %33, %30 {sv.namehint = "done6"} : i1
    %emitted_7 = sv.reg sym @emitted_7 : !hw.inout<i1> 
    %35 = sv.read_inout %emitted_7 : !hw.inout<i1>
    %36 = comb.xor %35, %true : i1
    %37 = comb.and %36, %in0_valid : i1
    %38 = comb.and %out7_ready, %37 : i1
    %39 = comb.or %38, %35 {sv.namehint = "done7"} : i1
    %emitted_8 = sv.reg sym @emitted_8 : !hw.inout<i1> 
    %40 = sv.read_inout %emitted_8 : !hw.inout<i1>
    %41 = comb.xor %40, %true : i1
    %42 = comb.and %41, %in0_valid : i1
    %43 = comb.and %out8_ready, %42 : i1
    %44 = comb.or %43, %40 {sv.namehint = "done8"} : i1
    %emitted_9 = sv.reg sym @emitted_9 : !hw.inout<i1> 
    %45 = sv.read_inout %emitted_9 : !hw.inout<i1>
    %46 = comb.xor %45, %true : i1
    %47 = comb.and %46, %in0_valid : i1
    %48 = comb.and %out9_ready, %47 : i1
    %49 = comb.or %48, %45 {sv.namehint = "done9"} : i1
    %emitted_10 = sv.reg sym @emitted_10 : !hw.inout<i1> 
    %50 = sv.read_inout %emitted_10 : !hw.inout<i1>
    %51 = comb.xor %50, %true : i1
    %52 = comb.and %51, %in0_valid : i1
    %53 = comb.and %out10_ready, %52 : i1
    %54 = comb.or %53, %50 {sv.namehint = "done10"} : i1
    %emitted_11 = sv.reg sym @emitted_11 : !hw.inout<i1> 
    %55 = sv.read_inout %emitted_11 : !hw.inout<i1>
    %56 = comb.xor %55, %true : i1
    %57 = comb.and %56, %in0_valid : i1
    %58 = comb.and %out11_ready, %57 : i1
    %59 = comb.or %58, %55 {sv.namehint = "done11"} : i1
    %emitted_12 = sv.reg sym @emitted_12 : !hw.inout<i1> 
    %60 = sv.read_inout %emitted_12 : !hw.inout<i1>
    %61 = comb.xor %60, %true : i1
    %62 = comb.and %61, %in0_valid : i1
    %63 = comb.and %out12_ready, %62 : i1
    %64 = comb.or %63, %60 {sv.namehint = "done12"} : i1
    %emitted_13 = sv.reg sym @emitted_13 : !hw.inout<i1> 
    %65 = sv.read_inout %emitted_13 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %71 = comb.xor %70, %true_0 : i1
      %72 = comb.and %4, %71 : i1
      sv.passign %emitted_0, %72 : i1
      %73 = comb.xor %70, %true_0 : i1
      %74 = comb.and %9, %73 : i1
      sv.passign %emitted_1, %74 : i1
      %75 = comb.xor %70, %true_0 : i1
      %76 = comb.and %14, %75 : i1
      sv.passign %emitted_2, %76 : i1
      %77 = comb.xor %70, %true_0 : i1
      %78 = comb.and %19, %77 : i1
      sv.passign %emitted_3, %78 : i1
      %79 = comb.xor %70, %true_0 : i1
      %80 = comb.and %24, %79 : i1
      sv.passign %emitted_4, %80 : i1
      %81 = comb.xor %70, %true_0 : i1
      %82 = comb.and %29, %81 : i1
      sv.passign %emitted_5, %82 : i1
      %83 = comb.xor %70, %true_0 : i1
      %84 = comb.and %34, %83 : i1
      sv.passign %emitted_6, %84 : i1
      %85 = comb.xor %70, %true_0 : i1
      %86 = comb.and %39, %85 : i1
      sv.passign %emitted_7, %86 : i1
      %87 = comb.xor %70, %true_0 : i1
      %88 = comb.and %44, %87 : i1
      sv.passign %emitted_8, %88 : i1
      %89 = comb.xor %70, %true_0 : i1
      %90 = comb.and %49, %89 : i1
      sv.passign %emitted_9, %90 : i1
      %91 = comb.xor %70, %true_0 : i1
      %92 = comb.and %54, %91 : i1
      sv.passign %emitted_10, %92 : i1
      %93 = comb.xor %70, %true_0 : i1
      %94 = comb.and %59, %93 : i1
      sv.passign %emitted_11, %94 : i1
      %95 = comb.xor %70, %true_0 : i1
      %96 = comb.and %64, %95 : i1
      sv.passign %emitted_12, %96 : i1
      %97 = comb.xor %70, %true_0 : i1
      %98 = comb.and %69, %97 : i1
      sv.passign %emitted_13, %98 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
      sv.passign %emitted_3, %false : i1
      sv.passign %emitted_4, %false : i1
      sv.passign %emitted_5, %false : i1
      sv.passign %emitted_6, %false : i1
      sv.passign %emitted_7, %false : i1
      sv.passign %emitted_8, %false : i1
      sv.passign %emitted_9, %false : i1
      sv.passign %emitted_10, %false : i1
      sv.passign %emitted_11, %false : i1
      sv.passign %emitted_12, %false : i1
      sv.passign %emitted_13, %false : i1
    }
    %66 = comb.xor %65, %true : i1
    %67 = comb.and %66, %in0_valid : i1
    %68 = comb.and %out13_ready, %67 : i1
    %69 = comb.or %68, %65 {sv.namehint = "done13"} : i1
    %70 = comb.and %4, %9, %14, %19, %24, %29, %34, %39, %44, %49, %54, %59, %64, %69 {sv.namehint = "allDone"} : i1
    hw.output %70, %in0, %2, %in0, %7, %in0, %12, %in0, %17, %in0, %22, %in0, %27, %in0, %32, %in0, %37, %in0, %42, %in0, %47, %in0, %52, %in0, %57, %in0, %62, %in0, %67 : i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id2(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %clock : i1, in %reset : i1, in %stDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stDone0 : i0, out stDone0_valid : i1) {
    %true = hw.constant true
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_2 = sv.reg : !hw.inout<uarray<3xi64>> 
    %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
    %0 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %4 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
      %5 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
      sv.if %5 {
        %7 = comb.extract %stAddr0 from 0 : (i64) -> i2
        %8 = sv.array_index_inout %_handshake_memory_2[%7] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %8, %stData0 : i64
      }
      %6 = comb.mux %3, %5, %4 : i1
      sv.passign %writeValidBuffer, %6 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %writeValidBuffer, %false : i1
    }
    %1 = comb.and %stDone0_ready, %0 {sv.namehint = "storeCompleted"} : i1
    %2 = comb.xor %0, %true : i1
    %3 = comb.or %2, %1 {sv.namehint = "emptyOrComplete"} : i1
    hw.output %3, %3, %c0_i0, %0 : i1, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id1(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : i1, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
    %true = hw.constant true
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_1 = sv.reg : !hw.inout<uarray<3xi64>> 
    %0 = comb.extract %ldAddr0 from 0 : (i64) -> i2
    %1 = sv.array_index_inout %_handshake_memory_1[%0] : !hw.inout<uarray<3xi64>>, i2
    %2 = sv.read_inout %1 : !hw.inout<i64>
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %3 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %4 = comb.xor %3, %true : i1
    %5 = comb.and %4, %ldAddr0_valid : i1
    %6 = comb.and %ldData0_ready, %5 : i1
    %7 = comb.or %6, %3 {sv.namehint = "done0"} : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %9 = comb.xor %8, %true : i1
    %10 = comb.and %9, %ldAddr0_valid : i1
    %11 = comb.and %ldDone0_ready, %10 : i1
    %12 = comb.or %11, %8 {sv.namehint = "done1"} : i1
    %13 = comb.and %7, %12 {sv.namehint = "allDone"} : i1
    %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
    %14 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    %15 = comb.and %stDone0_ready, %14 {sv.namehint = "storeCompleted"} : i1
    %16 = comb.xor %14, %true : i1
    %17 = comb.or %16, %15 {sv.namehint = "emptyOrComplete"} : i1
    %writeValidBuffer_0 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
    %18 = sv.read_inout %writeValidBuffer_0 : !hw.inout<i1>
    %19 = comb.and %stDone1_ready, %18 {sv.namehint = "storeCompleted"} : i1
    %20 = comb.xor %18, %true : i1
    %21 = comb.or %20, %19 {sv.namehint = "emptyOrComplete"} : i1
    %writeValidBuffer_1 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
    %22 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_2 = hw.constant true
      %26 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
      %27 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
      %28 = sv.read_inout %writeValidBuffer_0 : !hw.inout<i1>
      %29 = comb.and %stAddr1_valid, %stData1_valid {sv.namehint = "writeValid"} : i1
      %30 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
      %31 = comb.and %stAddr2_valid, %stData2_valid {sv.namehint = "writeValid"} : i1
      sv.if %31 {
        %39 = comb.extract %stAddr2 from 0 : (i64) -> i2
        %40 = sv.array_index_inout %_handshake_memory_1[%39] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %40, %stData2 : i64
      }
      sv.if %29 {
        %39 = comb.extract %stAddr1 from 0 : (i64) -> i2
        %40 = sv.array_index_inout %_handshake_memory_1[%39] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %40, %stData1 : i64
      }
      sv.if %27 {
        %39 = comb.extract %stAddr0 from 0 : (i64) -> i2
        %40 = sv.array_index_inout %_handshake_memory_1[%39] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %40, %stData0 : i64
      }
      %32 = comb.xor %13, %true_2 : i1
      %33 = comb.and %7, %32 : i1
      sv.passign %emitted_0, %33 : i1
      %34 = comb.xor %13, %true_2 : i1
      %35 = comb.and %12, %34 : i1
      sv.passign %emitted_1, %35 : i1
      %36 = comb.mux %17, %27, %26 : i1
      sv.passign %writeValidBuffer, %36 : i1
      %37 = comb.mux %21, %29, %28 : i1
      sv.passign %writeValidBuffer_0, %37 : i1
      %38 = comb.mux %25, %31, %30 : i1
      sv.passign %writeValidBuffer_1, %38 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %writeValidBuffer, %false : i1
      sv.passign %writeValidBuffer_0, %false : i1
      sv.passign %writeValidBuffer_1, %false : i1
    }
    %23 = comb.and %stDone2_ready, %22 {sv.namehint = "storeCompleted"} : i1
    %24 = comb.xor %22, %true : i1
    %25 = comb.or %24, %23 {sv.namehint = "emptyOrComplete"} : i1
    hw.output %17, %17, %21, %21, %25, %25, %13, %2, %5, %c0_i0, %14, %c0_i0, %18, %c0_i0, %22, %c0_i0, %10 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_buffer_in_ui64_out_ui64_2slots_seq(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1) {
    %true = hw.constant true
    %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
    %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.xor %5, %true : i1
    %3 = comb.or %1, %2 : i1
    %data0_reg = sv.reg sym @data0_reg : !hw.inout<i64> 
    %4 = sv.read_inout %data0_reg : !hw.inout<i64>
    %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
    %5 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i64> 
    %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
    %6 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %7 = comb.xor %6, %true : i1
    %8 = comb.xor %11, %true : i1
    %9 = comb.or %7, %8 : i1
    %data1_reg = sv.reg sym @data1_reg : !hw.inout<i64> 
    %10 = sv.read_inout %data1_reg : !hw.inout<i64>
    %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
    %11 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %12 = comb.mux %11, %11, %6 : i1
    %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i64> 
    %13 = sv.read_inout %ctrl_data1_reg : !hw.inout<i64>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %c0_i64 = hw.constant 0 : i64
      %15 = sv.read_inout %valid0_reg : !hw.inout<i1>
      %16 = sv.read_inout %data0_reg : !hw.inout<i64>
      %17 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %18 = comb.xor %9, %true_0 : i1
      %true_1 = hw.constant true
      %19 = comb.xor %17, %true_1 : i1
      %20 = comb.and %18, %19 : i1
      %21 = comb.and %9, %17 : i1
      %22 = sv.read_inout %ctrl_data0_reg : !hw.inout<i64>
      %23 = sv.read_inout %valid1_reg : !hw.inout<i1>
      %24 = sv.read_inout %data1_reg : !hw.inout<i64>
      %25 = sv.read_inout %ready1_reg : !hw.inout<i1>
      %26 = comb.xor %out0_ready, %true_0 : i1
      %true_2 = hw.constant true
      %27 = comb.xor %25, %true_2 : i1
      %28 = comb.and %26, %27 : i1
      %29 = comb.and %out0_ready, %25 : i1
      %30 = sv.read_inout %ctrl_data1_reg : !hw.inout<i64>
      %31 = comb.mux %3, %in0_valid, %15 : i1
      sv.passign %valid0_reg, %31 : i1
      %32 = comb.mux %3, %in0, %4 : i64
      sv.passign %data0_reg, %32 : i64
      %33 = comb.xor %21, %true_0 : i1
      %34 = comb.mux %20, %15, %17 : i1
      %35 = comb.and %33, %34 : i1
      sv.passign %ready0_reg, %35 : i1
      %36 = comb.mux %20, %16, %22 : i64
      %37 = comb.mux %21, %c0_i64, %36 : i64
      sv.passign %ctrl_data0_reg, %37 : i64
      %38 = comb.mux %17, %17, %15 : i1
      %39 = comb.mux %9, %38, %23 : i1
      sv.passign %valid1_reg, %39 : i1
      %40 = comb.mux %17, %22, %16 : i64
      %41 = comb.mux %9, %40, %10 : i64
      sv.passign %data1_reg, %41 : i64
      %42 = comb.xor %29, %true_0 : i1
      %43 = comb.mux %28, %23, %25 : i1
      %44 = comb.and %42, %43 : i1
      sv.passign %ready1_reg, %44 : i1
      %45 = comb.mux %28, %24, %30 : i64
      %46 = comb.mux %29, %c0_i64, %45 : i64
      sv.passign %ctrl_data1_reg, %46 : i64
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      %c0_i64 = hw.constant 0 : i64
      sv.passign %valid0_reg, %false : i1
      sv.passign %data0_reg, %c0_i64 : i64
      sv.passign %ready0_reg, %false : i1
      sv.passign %ctrl_data0_reg, %c0_i64 : i64
      sv.passign %valid1_reg, %false : i1
      sv.passign %data1_reg, %c0_i64 : i64
      sv.passign %ready1_reg, %false : i1
      sv.passign %ctrl_data1_reg, %c0_i64 : i64
    }
    %14 = comb.mux %11, %13, %10 : i64
    hw.output %3, %14, %12 : i1, i64, i1
  }
  hw.module @handshake_fork_1ins_2outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1) {
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = comb.and %out0_ready, %2 : i1
    %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %11 = comb.xor %10, %true_0 : i1
      %12 = comb.and %4, %11 : i1
      sv.passign %emitted_0, %12 : i1
      %13 = comb.xor %10, %true_0 : i1
      %14 = comb.and %9, %13 : i1
      sv.passign %emitted_1, %14 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
    }
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %in0_valid : i1
    %8 = comb.and %out1_ready, %7 : i1
    %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
    %10 = comb.and %4, %9 {sv.namehint = "allDone"} : i1
    hw.output %10, %in0, %2, %in0, %7 : i1, i0, i1, i0, i1
  }
  hw.module @handshake_fork_1ins_3outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1) {
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = comb.and %out0_ready, %2 : i1
    %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %in0_valid : i1
    %8 = comb.and %out1_ready, %7 : i1
    %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %10 = sv.read_inout %emitted_2 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %16 = comb.xor %15, %true_0 : i1
      %17 = comb.and %4, %16 : i1
      sv.passign %emitted_0, %17 : i1
      %18 = comb.xor %15, %true_0 : i1
      %19 = comb.and %9, %18 : i1
      sv.passign %emitted_1, %19 : i1
      %20 = comb.xor %15, %true_0 : i1
      %21 = comb.and %14, %20 : i1
      sv.passign %emitted_2, %21 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
    }
    %11 = comb.xor %10, %true : i1
    %12 = comb.and %11, %in0_valid : i1
    %13 = comb.and %out2_ready, %12 : i1
    %14 = comb.or %13, %10 {sv.namehint = "done2"} : i1
    %15 = comb.and %4, %9, %14 {sv.namehint = "allDone"} : i1
    hw.output %15, %in0, %2, %in0, %7, %in0, %12 : i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id0(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : i1, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
    %true = hw.constant true
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_0 = sv.reg : !hw.inout<uarray<3xi64>> 
    %0 = comb.extract %ldAddr0 from 0 : (i64) -> i2
    %1 = sv.array_index_inout %_handshake_memory_0[%0] : !hw.inout<uarray<3xi64>>, i2
    %2 = sv.read_inout %1 : !hw.inout<i64>
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %3 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %4 = comb.xor %3, %true : i1
    %5 = comb.and %4, %ldAddr0_valid : i1
    %6 = comb.and %ldData0_ready, %5 : i1
    %7 = comb.or %6, %3 {sv.namehint = "done0"} : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %9 = comb.xor %8, %true : i1
    %10 = comb.and %9, %ldAddr0_valid : i1
    %11 = comb.and %ldDone0_ready, %10 : i1
    %12 = comb.or %11, %8 {sv.namehint = "done1"} : i1
    %13 = comb.and %7, %12 {sv.namehint = "allDone"} : i1
    %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
    %14 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    %15 = comb.and %stDone0_ready, %14 {sv.namehint = "storeCompleted"} : i1
    %16 = comb.xor %14, %true : i1
    %17 = comb.or %16, %15 {sv.namehint = "emptyOrComplete"} : i1
    %writeValidBuffer_0 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
    %18 = sv.read_inout %writeValidBuffer_0 : !hw.inout<i1>
    %19 = comb.and %stDone1_ready, %18 {sv.namehint = "storeCompleted"} : i1
    %20 = comb.xor %18, %true : i1
    %21 = comb.or %20, %19 {sv.namehint = "emptyOrComplete"} : i1
    %writeValidBuffer_1 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
    %22 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_2 = hw.constant true
      %26 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
      %27 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
      %28 = sv.read_inout %writeValidBuffer_0 : !hw.inout<i1>
      %29 = comb.and %stAddr1_valid, %stData1_valid {sv.namehint = "writeValid"} : i1
      %30 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
      %31 = comb.and %stAddr2_valid, %stData2_valid {sv.namehint = "writeValid"} : i1
      sv.if %31 {
        %39 = comb.extract %stAddr2 from 0 : (i64) -> i2
        %40 = sv.array_index_inout %_handshake_memory_0[%39] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %40, %stData2 : i64
      }
      sv.if %29 {
        %39 = comb.extract %stAddr1 from 0 : (i64) -> i2
        %40 = sv.array_index_inout %_handshake_memory_0[%39] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %40, %stData1 : i64
      }
      sv.if %27 {
        %39 = comb.extract %stAddr0 from 0 : (i64) -> i2
        %40 = sv.array_index_inout %_handshake_memory_0[%39] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %40, %stData0 : i64
      }
      %32 = comb.xor %13, %true_2 : i1
      %33 = comb.and %7, %32 : i1
      sv.passign %emitted_0, %33 : i1
      %34 = comb.xor %13, %true_2 : i1
      %35 = comb.and %12, %34 : i1
      sv.passign %emitted_1, %35 : i1
      %36 = comb.mux %17, %27, %26 : i1
      sv.passign %writeValidBuffer, %36 : i1
      %37 = comb.mux %21, %29, %28 : i1
      sv.passign %writeValidBuffer_0, %37 : i1
      %38 = comb.mux %25, %31, %30 : i1
      sv.passign %writeValidBuffer_1, %38 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %writeValidBuffer, %false : i1
      sv.passign %writeValidBuffer_0, %false : i1
      sv.passign %writeValidBuffer_1, %false : i1
    }
    %23 = comb.and %stDone2_ready, %22 {sv.namehint = "storeCompleted"} : i1
    %24 = comb.xor %22, %true : i1
    %25 = comb.or %24, %23 {sv.namehint = "emptyOrComplete"} : i1
    hw.output %17, %17, %21, %21, %25, %25, %13, %2, %5, %c0_i0, %14, %c0_i0, %18, %c0_i0, %22, %c0_i0, %10 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_join_7ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %in4 : i0, in %in4_valid : i1, in %in5 : i0, in %in5_valid : i1, in %in6 : i0, in %in6_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out in4_ready : i1, out in5_ready : i1, out in6_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid, %in2_valid, %in3_valid, %in4_valid, %in5_valid, %in6_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %1, %1, %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i1, i1, i1, i1, i0, i1
  }
  hw.module @handshake_constant_c3_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c3_i64 = hw.constant 3 : i64
    hw.output %out0_ready, %c3_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1) {
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = comb.and %out0_ready, %2 : i1
    %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %11 = comb.xor %10, %true_0 : i1
      %12 = comb.and %4, %11 : i1
      sv.passign %emitted_0, %12 : i1
      %13 = comb.xor %10, %true_0 : i1
      %14 = comb.and %9, %13 : i1
      sv.passign %emitted_1, %14 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
    }
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %in0_valid : i1
    %8 = comb.and %out1_ready, %7 : i1
    %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
    %10 = comb.and %4, %9 {sv.namehint = "allDone"} : i1
    hw.output %10, %in0, %2, %in0, %7 : i1, i64, i1, i64, i1
  }
  hw.module @handshake_constant_c2_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c2_i64 = hw.constant 2 : i64
    hw.output %out0_ready, %c2_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_constant_c1_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c1_i64 = hw.constant 1 : i64
    hw.output %out0_ready, %c1_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1) {
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = comb.and %out0_ready, %2 : i1
    %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %in0_valid : i1
    %8 = comb.and %out1_ready, %7 : i1
    %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %10 = sv.read_inout %emitted_2 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %16 = comb.xor %15, %true_0 : i1
      %17 = comb.and %4, %16 : i1
      sv.passign %emitted_0, %17 : i1
      %18 = comb.xor %15, %true_0 : i1
      %19 = comb.and %9, %18 : i1
      sv.passign %emitted_1, %19 : i1
      %20 = comb.xor %15, %true_0 : i1
      %21 = comb.and %14, %20 : i1
      sv.passign %emitted_2, %21 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
    }
    %11 = comb.xor %10, %true : i1
    %12 = comb.and %11, %in0_valid : i1
    %13 = comb.and %out2_ready, %12 : i1
    %14 = comb.or %13, %10 {sv.namehint = "done2"} : i1
    %15 = comb.and %4, %9, %14 {sv.namehint = "allDone"} : i1
    hw.output %15, %in0, %2, %in0, %7, %in0, %12 : i1, i64, i1, i64, i1, i64, i1
  }
  hw.module @handshake_constant_c0_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c0_i64 = hw.constant 0 : i64
    hw.output %out0_ready, %c0_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_store_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataIn : i64, in %dataIn_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataToMem_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataIn_ready : i1, out ctrl_ready : i1, out dataToMem : i64, out dataToMem_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
    %0 = comb.and %dataIn_valid, %addrIn0_valid, %ctrl_valid : i1
    %1 = comb.and %dataToMem_ready, %addrOut0_ready, %0 : i1
    hw.output %1, %1, %1, %dataIn, %0, %addrIn0, %0 : i1, i1, i1, i64, i1, i64, i1
  }
  hw.module @handshake_join_2ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %c0_i0, %0 : i1, i1, i0, i1
  }
  hw.module @handshake_join_3ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid, %in2_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i0, i1
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
    %true = hw.constant true
    %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
    %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.xor %5, %true : i1
    %3 = comb.or %1, %2 : i1
    %data0_reg = sv.reg sym @data0_reg : !hw.inout<i1> 
    %4 = sv.read_inout %data0_reg : !hw.inout<i1>
    %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
    %5 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %6 = comb.mux %5, %5, %0 : i1
    %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i1> 
    %7 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %9 = sv.read_inout %valid0_reg : !hw.inout<i1>
      %10 = sv.read_inout %data0_reg : !hw.inout<i1>
      %11 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %12 = comb.xor %out0_ready, %true_0 : i1
      %true_1 = hw.constant true
      %13 = comb.xor %11, %true_1 : i1
      %14 = comb.and %12, %13 : i1
      %15 = comb.and %out0_ready, %11 : i1
      %16 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
      %17 = comb.mux %3, %in0_valid, %9 : i1
      sv.passign %valid0_reg, %17 : i1
      %18 = comb.mux %3, %in0, %4 : i1
      sv.passign %data0_reg, %18 : i1
      %19 = comb.xor %15, %true_0 : i1
      %20 = comb.mux %14, %9, %11 : i1
      %21 = comb.and %19, %20 : i1
      sv.passign %ready0_reg, %21 : i1
      %22 = comb.xor %15, %true_0 : i1
      %23 = comb.mux %14, %10, %16 : i1
      %24 = comb.and %22, %23 : i1
      sv.passign %ctrl_data0_reg, %24 : i1
    }(syncreset : posedge %reset) {
      %true_0 = hw.constant true
      %false = hw.constant false
      sv.passign %valid0_reg, %true_0 : i1
      sv.passign %data0_reg, %false : i1
      sv.passign %ready0_reg, %false : i1
      sv.passign %ctrl_data0_reg, %false : i1
    }
    %8 = comb.mux %5, %7, %4 : i1
    hw.output %3, %8, %6 : i1, i1, i1
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1) {
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = comb.and %out0_ready, %2 : i1
    %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %in0_valid : i1
    %8 = comb.and %out1_ready, %7 : i1
    %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %10 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %11 = comb.xor %10, %true : i1
    %12 = comb.and %11, %in0_valid : i1
    %13 = comb.and %out2_ready, %12 : i1
    %14 = comb.or %13, %10 {sv.namehint = "done2"} : i1
    %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
    %15 = sv.read_inout %emitted_3 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %21 = comb.xor %20, %true_0 : i1
      %22 = comb.and %4, %21 : i1
      sv.passign %emitted_0, %22 : i1
      %23 = comb.xor %20, %true_0 : i1
      %24 = comb.and %9, %23 : i1
      sv.passign %emitted_1, %24 : i1
      %25 = comb.xor %20, %true_0 : i1
      %26 = comb.and %14, %25 : i1
      sv.passign %emitted_2, %26 : i1
      %27 = comb.xor %20, %true_0 : i1
      %28 = comb.and %19, %27 : i1
      sv.passign %emitted_3, %28 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
      sv.passign %emitted_3, %false : i1
    }
    %16 = comb.xor %15, %true : i1
    %17 = comb.and %16, %in0_valid : i1
    %18 = comb.and %out3_ready, %17 : i1
    %19 = comb.or %18, %15 {sv.namehint = "done3"} : i1
    %20 = comb.and %4, %9, %14, %19 {sv.namehint = "allDone"} : i1
    hw.output %20, %in0, %2, %in0, %7, %in0, %12, %in0, %17 : i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_2slots_seq(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
    %true = hw.constant true
    %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
    %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.xor %5, %true : i1
    %3 = comb.or %1, %2 : i1
    %data0_reg = sv.reg sym @data0_reg : !hw.inout<i1> 
    %4 = sv.read_inout %data0_reg : !hw.inout<i1>
    %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
    %5 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i1> 
    %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
    %6 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %7 = comb.xor %6, %true : i1
    %8 = comb.xor %11, %true : i1
    %9 = comb.or %7, %8 : i1
    %data1_reg = sv.reg sym @data1_reg : !hw.inout<i1> 
    %10 = sv.read_inout %data1_reg : !hw.inout<i1>
    %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
    %11 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %12 = comb.mux %11, %11, %6 : i1
    %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i1> 
    %13 = sv.read_inout %ctrl_data1_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %15 = sv.read_inout %valid0_reg : !hw.inout<i1>
      %16 = sv.read_inout %data0_reg : !hw.inout<i1>
      %17 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %18 = comb.xor %9, %true_0 : i1
      %true_1 = hw.constant true
      %19 = comb.xor %17, %true_1 : i1
      %20 = comb.and %18, %19 : i1
      %21 = comb.and %9, %17 : i1
      %22 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
      %23 = sv.read_inout %valid1_reg : !hw.inout<i1>
      %24 = sv.read_inout %data1_reg : !hw.inout<i1>
      %25 = sv.read_inout %ready1_reg : !hw.inout<i1>
      %26 = comb.xor %out0_ready, %true_0 : i1
      %true_2 = hw.constant true
      %27 = comb.xor %25, %true_2 : i1
      %28 = comb.and %26, %27 : i1
      %29 = comb.and %out0_ready, %25 : i1
      %30 = sv.read_inout %ctrl_data1_reg : !hw.inout<i1>
      %31 = comb.mux %3, %in0_valid, %15 : i1
      sv.passign %valid0_reg, %31 : i1
      %32 = comb.mux %3, %in0, %4 : i1
      sv.passign %data0_reg, %32 : i1
      %33 = comb.xor %21, %true_0 : i1
      %34 = comb.mux %20, %15, %17 : i1
      %35 = comb.and %33, %34 : i1
      sv.passign %ready0_reg, %35 : i1
      %36 = comb.xor %21, %true_0 : i1
      %37 = comb.mux %20, %16, %22 : i1
      %38 = comb.and %36, %37 : i1
      sv.passign %ctrl_data0_reg, %38 : i1
      %39 = comb.mux %17, %17, %15 : i1
      %40 = comb.mux %9, %39, %23 : i1
      sv.passign %valid1_reg, %40 : i1
      %41 = comb.mux %17, %22, %16 : i1
      %42 = comb.mux %9, %41, %10 : i1
      sv.passign %data1_reg, %42 : i1
      %43 = comb.xor %29, %true_0 : i1
      %44 = comb.mux %28, %23, %25 : i1
      %45 = comb.and %43, %44 : i1
      sv.passign %ready1_reg, %45 : i1
      %46 = comb.xor %29, %true_0 : i1
      %47 = comb.mux %28, %24, %30 : i1
      %48 = comb.and %46, %47 : i1
      sv.passign %ctrl_data1_reg, %48 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %valid0_reg, %false : i1
      sv.passign %data0_reg, %false : i1
      sv.passign %ready0_reg, %false : i1
      sv.passign %ctrl_data0_reg, %false : i1
      sv.passign %valid1_reg, %false : i1
      sv.passign %data1_reg, %false : i1
      sv.passign %ready1_reg, %false : i1
      sv.passign %ctrl_data1_reg, %false : i1
    }
    %14 = comb.mux %11, %13, %10 : i1
    hw.output %3, %14, %12 : i1, i1, i1
  }
  hw.module @handshake_mux_in_ui1_3ins_1outs_ctrl(in %select : i1, in %select_valid : i1, in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %0 = comb.concat %false, %select : i1, i1
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = comb.mux %select, %in1_valid, %in0_valid : i1
    %3 = comb.and %2, %select_valid : i1
    %4 = comb.and %3, %out0_ready : i1
    %5 = comb.extract %1 from 0 : (i2) -> i1
    %6 = comb.and %5, %4 : i1
    %7 = comb.extract %1 from 1 : (i2) -> i1
    %8 = comb.and %7, %4 : i1
    %9 = comb.mux %select, %in1, %in0 : i0
    hw.output %4, %6, %8, %9, %3 : i1, i1, i1, i0, i1
  }
  hw.module @handshake_mux_in_ui1_ui64_ui64_out_ui64(in %select : i1, in %select_valid : i1, in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %0 = comb.concat %false, %select : i1, i1
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = comb.mux %select, %in1_valid, %in0_valid : i1
    %3 = comb.and %2, %select_valid : i1
    %4 = comb.and %3, %out0_ready : i1
    %5 = comb.extract %1 from 0 : (i2) -> i1
    %6 = comb.and %5, %4 : i1
    %7 = comb.extract %1 from 1 : (i2) -> i1
    %8 = comb.and %7, %4 : i1
    %9 = comb.mux %select, %in1, %in0 : i64
    hw.output %4, %6, %8, %9, %3 : i1, i1, i1, i64, i1
  }
  hw.module @arith_cmpi_in_ui64_ui64_out_ui1_slt(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i1, out out0_valid : i1) {
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    %2 = comb.icmp slt %in0, %in1 : i64
    hw.output %1, %1, %2, %0 : i1, i1, i1, i1
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1, out out4 : i1, out out4_valid : i1) {
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = comb.and %out0_ready, %2 : i1
    %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %in0_valid : i1
    %8 = comb.and %out1_ready, %7 : i1
    %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %10 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %11 = comb.xor %10, %true : i1
    %12 = comb.and %11, %in0_valid : i1
    %13 = comb.and %out2_ready, %12 : i1
    %14 = comb.or %13, %10 {sv.namehint = "done2"} : i1
    %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
    %15 = sv.read_inout %emitted_3 : !hw.inout<i1>
    %16 = comb.xor %15, %true : i1
    %17 = comb.and %16, %in0_valid : i1
    %18 = comb.and %out3_ready, %17 : i1
    %19 = comb.or %18, %15 {sv.namehint = "done3"} : i1
    %emitted_4 = sv.reg sym @emitted_4 : !hw.inout<i1> 
    %20 = sv.read_inout %emitted_4 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %26 = comb.xor %25, %true_0 : i1
      %27 = comb.and %4, %26 : i1
      sv.passign %emitted_0, %27 : i1
      %28 = comb.xor %25, %true_0 : i1
      %29 = comb.and %9, %28 : i1
      sv.passign %emitted_1, %29 : i1
      %30 = comb.xor %25, %true_0 : i1
      %31 = comb.and %14, %30 : i1
      sv.passign %emitted_2, %31 : i1
      %32 = comb.xor %25, %true_0 : i1
      %33 = comb.and %19, %32 : i1
      sv.passign %emitted_3, %33 : i1
      %34 = comb.xor %25, %true_0 : i1
      %35 = comb.and %24, %34 : i1
      sv.passign %emitted_4, %35 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
      sv.passign %emitted_3, %false : i1
      sv.passign %emitted_4, %false : i1
    }
    %21 = comb.xor %20, %true : i1
    %22 = comb.and %21, %in0_valid : i1
    %23 = comb.and %out4_ready, %22 : i1
    %24 = comb.or %23, %20 {sv.namehint = "done4"} : i1
    %25 = comb.and %4, %9, %14, %19, %24 {sv.namehint = "allDone"} : i1
    hw.output %25, %in0, %2, %in0, %7, %in0, %12, %in0, %17, %in0, %22 : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(in %cond : i1, in %cond_valid : i1, in %data : i64, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i64, out outTrue_valid : i1, out outFalse : i64, out outFalse_valid : i1) {
    %true = hw.constant true
    %0 = comb.and %cond_valid, %data_valid : i1
    %1 = comb.and %cond, %0 : i1
    %2 = comb.xor %cond, %true : i1
    %3 = comb.and %2, %0 : i1
    %4 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
    %5 = comb.and %4, %0 : i1
    hw.output %5, %5, %data, %1, %data, %3 : i1, i1, i64, i1, i64, i1
  }
  hw.module @handshake_sink_in_ui64(in %in0 : i64, in %in0_valid : i1, out in0_ready : i1) {
    %true = hw.constant true
    hw.output %true : i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1, out out3 : i64, out out3_valid : i1) {
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = comb.and %out0_ready, %2 : i1
    %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %in0_valid : i1
    %8 = comb.and %out1_ready, %7 : i1
    %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %10 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %11 = comb.xor %10, %true : i1
    %12 = comb.and %11, %in0_valid : i1
    %13 = comb.and %out2_ready, %12 : i1
    %14 = comb.or %13, %10 {sv.namehint = "done2"} : i1
    %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
    %15 = sv.read_inout %emitted_3 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %21 = comb.xor %20, %true_0 : i1
      %22 = comb.and %4, %21 : i1
      sv.passign %emitted_0, %22 : i1
      %23 = comb.xor %20, %true_0 : i1
      %24 = comb.and %9, %23 : i1
      sv.passign %emitted_1, %24 : i1
      %25 = comb.xor %20, %true_0 : i1
      %26 = comb.and %14, %25 : i1
      sv.passign %emitted_2, %26 : i1
      %27 = comb.xor %20, %true_0 : i1
      %28 = comb.and %19, %27 : i1
      sv.passign %emitted_3, %28 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
      sv.passign %emitted_3, %false : i1
    }
    %16 = comb.xor %15, %true : i1
    %17 = comb.and %16, %in0_valid : i1
    %18 = comb.and %out3_ready, %17 : i1
    %19 = comb.or %18, %15 {sv.namehint = "done3"} : i1
    %20 = comb.and %4, %9, %14, %19 {sv.namehint = "allDone"} : i1
    hw.output %20, %in0, %2, %in0, %7, %in0, %12, %in0, %17 : i1, i64, i1, i64, i1, i64, i1, i64, i1
  }
  hw.module @handshake_cond_br_in_ui1_2ins_2outs_ctrl(in %cond : i1, in %cond_valid : i1, in %data : i0, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i0, out outTrue_valid : i1, out outFalse : i0, out outFalse_valid : i1) {
    %true = hw.constant true
    %0 = comb.and %cond_valid, %data_valid : i1
    %1 = comb.and %cond, %0 : i1
    %2 = comb.xor %cond, %true : i1
    %3 = comb.and %2, %0 : i1
    %4 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
    %5 = comb.and %4, %0 : i1
    hw.output %5, %5, %data, %1, %data, %3 : i1, i1, i0, i1, i0, i1
  }
  hw.module @handshake_fork_1ins_4outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1) {
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = comb.and %out0_ready, %2 : i1
    %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %in0_valid : i1
    %8 = comb.and %out1_ready, %7 : i1
    %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %10 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %11 = comb.xor %10, %true : i1
    %12 = comb.and %11, %in0_valid : i1
    %13 = comb.and %out2_ready, %12 : i1
    %14 = comb.or %13, %10 {sv.namehint = "done2"} : i1
    %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
    %15 = sv.read_inout %emitted_3 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %21 = comb.xor %20, %true_0 : i1
      %22 = comb.and %4, %21 : i1
      sv.passign %emitted_0, %22 : i1
      %23 = comb.xor %20, %true_0 : i1
      %24 = comb.and %9, %23 : i1
      sv.passign %emitted_1, %24 : i1
      %25 = comb.xor %20, %true_0 : i1
      %26 = comb.and %14, %25 : i1
      sv.passign %emitted_2, %26 : i1
      %27 = comb.xor %20, %true_0 : i1
      %28 = comb.and %19, %27 : i1
      sv.passign %emitted_3, %28 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
      sv.passign %emitted_3, %false : i1
    }
    %16 = comb.xor %15, %true : i1
    %17 = comb.and %16, %in0_valid : i1
    %18 = comb.and %out3_ready, %17 : i1
    %19 = comb.or %18, %15 {sv.namehint = "done3"} : i1
    %20 = comb.and %4, %9, %14, %19 {sv.namehint = "allDone"} : i1
    hw.output %20, %in0, %2, %in0, %7, %in0, %12, %in0, %17 : i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_join_4ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid, %in2_valid, %in3_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i1, i0, i1
  }
  hw.module @handshake_load_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataFromMem : i64, in %dataFromMem_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataOut_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataFromMem_ready : i1, out ctrl_ready : i1, out dataOut : i64, out dataOut_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
    %0 = comb.and %addrIn0_valid, %ctrl_valid : i1
    %1 = comb.and %addrOut0_ready, %0 : i1
    hw.output %1, %dataOut_ready, %1, %dataFromMem, %dataFromMem_valid, %addrIn0, %0 : i1, i1, i1, i64, i1, i64, i1
  }
  hw.module @arith_addi_in_ui64_ui64_out_ui64(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    %2 = comb.add %in0, %in1 : i64
    hw.output %1, %1, %2, %0 : i1, i1, i64, i1
  }
  hw.module @main(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
    %handshake_buffer0.in0_ready, %handshake_buffer0.out0, %handshake_buffer0.out0_valid = hw.instance "handshake_buffer0" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %in0: i0, in0_valid: %in0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork0.in0_ready, %handshake_fork0.out0, %handshake_fork0.out0_valid, %handshake_fork0.out1, %handshake_fork0.out1_valid, %handshake_fork0.out2, %handshake_fork0.out2_valid, %handshake_fork0.out3, %handshake_fork0.out3_valid, %handshake_fork0.out4, %handshake_fork0.out4_valid, %handshake_fork0.out5, %handshake_fork0.out5_valid, %handshake_fork0.out6, %handshake_fork0.out6_valid, %handshake_fork0.out7, %handshake_fork0.out7_valid, %handshake_fork0.out8, %handshake_fork0.out8_valid, %handshake_fork0.out9, %handshake_fork0.out9_valid, %handshake_fork0.out10, %handshake_fork0.out10_valid, %handshake_fork0.out11, %handshake_fork0.out11_valid, %handshake_fork0.out12, %handshake_fork0.out12_valid, %handshake_fork0.out13, %handshake_fork0.out13_valid = hw.instance "handshake_fork0" @handshake_fork_1ins_14outs_ctrl(in0: %handshake_buffer0.out0: i0, in0_valid: %handshake_buffer0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer14.in0_ready: i1, out1_ready: %handshake_buffer13.in0_ready: i1, out2_ready: %handshake_buffer12.in0_ready: i1, out3_ready: %handshake_buffer11.in0_ready: i1, out4_ready: %handshake_buffer10.in0_ready: i1, out5_ready: %handshake_buffer9.in0_ready: i1, out6_ready: %handshake_buffer8.in0_ready: i1, out7_ready: %handshake_buffer7.in0_ready: i1, out8_ready: %handshake_buffer6.in0_ready: i1, out9_ready: %handshake_buffer5.in0_ready: i1, out10_ready: %handshake_buffer4.in0_ready: i1, out11_ready: %handshake_buffer3.in0_ready: i1, out12_ready: %handshake_buffer2.in0_ready: i1, out13_ready: %handshake_buffer1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1, out4: i0, out4_valid: i1, out5: i0, out5_valid: i1, out6: i0, out6_valid: i1, out7: i0, out7_valid: i1, out8: i0, out8_valid: i1, out9: i0, out9_valid: i1, out10: i0, out10_valid: i1, out11: i0, out11_valid: i1, out12: i0, out12_valid: i1, out13: i0, out13_valid: i1)
    %handshake_buffer1.in0_ready, %handshake_buffer1.out0, %handshake_buffer1.out0_valid = hw.instance "handshake_buffer1" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out13: i0, in0_valid: %handshake_fork0.out13_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join4.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer2.in0_ready, %handshake_buffer2.out0, %handshake_buffer2.out0_valid = hw.instance "handshake_buffer2" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out12: i0, in0_valid: %handshake_fork0.out12_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join3.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer3.in0_ready, %handshake_buffer3.out0, %handshake_buffer3.out0_valid = hw.instance "handshake_buffer3" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out11: i0, in0_valid: %handshake_fork0.out11_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store3.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer4.in0_ready, %handshake_buffer4.out0, %handshake_buffer4.out0_valid = hw.instance "handshake_buffer4" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out10: i0, in0_valid: %handshake_fork0.out10_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer5.in0_ready, %handshake_buffer5.out0, %handshake_buffer5.out0_valid = hw.instance "handshake_buffer5" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out9: i0, in0_valid: %handshake_fork0.out9_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join2.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer6.in0_ready, %handshake_buffer6.out0, %handshake_buffer6.out0_valid = hw.instance "handshake_buffer6" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out8: i0, in0_valid: %handshake_fork0.out8_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer7.in0_ready, %handshake_buffer7.out0, %handshake_buffer7.out0_valid = hw.instance "handshake_buffer7" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out7: i0, in0_valid: %handshake_fork0.out7_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer8.in0_ready, %handshake_buffer8.out0, %handshake_buffer8.out0_valid = hw.instance "handshake_buffer8" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out6: i0, in0_valid: %handshake_fork0.out6_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant6.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer9.in0_ready, %handshake_buffer9.out0, %handshake_buffer9.out0_valid = hw.instance "handshake_buffer9" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out5: i0, in0_valid: %handshake_fork0.out5_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant5.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer10.in0_ready, %handshake_buffer10.out0, %handshake_buffer10.out0_valid = hw.instance "handshake_buffer10" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out4: i0, in0_valid: %handshake_fork0.out4_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant4.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer11.in0_ready, %handshake_buffer11.out0, %handshake_buffer11.out0_valid = hw.instance "handshake_buffer11" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out3: i0, in0_valid: %handshake_fork0.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant3.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer12.in0_ready, %handshake_buffer12.out0, %handshake_buffer12.out0_valid = hw.instance "handshake_buffer12" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out2: i0, in0_valid: %handshake_fork0.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant2.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer13.in0_ready, %handshake_buffer13.out0, %handshake_buffer13.out0_valid = hw.instance "handshake_buffer13" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out1: i0, in0_valid: %handshake_fork0.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer14.in0_ready, %handshake_buffer14.out0, %handshake_buffer14.out0_valid = hw.instance "handshake_buffer14" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out0: i0, in0_valid: %handshake_fork0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_memory0.stData0_ready, %handshake_memory0.stAddr0_ready, %handshake_memory0.stDone0, %handshake_memory0.stDone0_valid = hw.instance "handshake_memory0" @handshake_memory_out_ui64_id2(stData0: %handshake_buffer114.out0: i64, stData0_valid: %handshake_buffer114.out0_valid: i1, stAddr0: %handshake_buffer113.out0: i64, stAddr0_valid: %handshake_buffer113.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, stDone0_ready: %handshake_buffer15.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stDone0: i0, stDone0_valid: i1)
    %handshake_buffer15.in0_ready, %handshake_buffer15.out0, %handshake_buffer15.out0_valid = hw.instance "handshake_buffer15" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory0.stDone0: i0, in0_valid: %handshake_memory0.stDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in3_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_memory1.stData0_ready, %handshake_memory1.stAddr0_ready, %handshake_memory1.stData1_ready, %handshake_memory1.stAddr1_ready, %handshake_memory1.stData2_ready, %handshake_memory1.stAddr2_ready, %handshake_memory1.ldAddr0_ready, %handshake_memory1.ldData0, %handshake_memory1.ldData0_valid, %handshake_memory1.stDone0, %handshake_memory1.stDone0_valid, %handshake_memory1.stDone1, %handshake_memory1.stDone1_valid, %handshake_memory1.stDone2, %handshake_memory1.stDone2_valid, %handshake_memory1.ldDone0, %handshake_memory1.ldDone0_valid = hw.instance "handshake_memory1" @handshake_memory_out_ui64_id1(stData0: %handshake_buffer67.out0: i64, stData0_valid: %handshake_buffer67.out0_valid: i1, stAddr0: %handshake_buffer66.out0: i64, stAddr0_valid: %handshake_buffer66.out0_valid: i1, stData1: %handshake_buffer70.out0: i64, stData1_valid: %handshake_buffer70.out0_valid: i1, stAddr1: %handshake_buffer69.out0: i64, stAddr1_valid: %handshake_buffer69.out0_valid: i1, stData2: %handshake_buffer73.out0: i64, stData2_valid: %handshake_buffer73.out0_valid: i1, stAddr2: %handshake_buffer72.out0: i64, stAddr2_valid: %handshake_buffer72.out0_valid: i1, ldAddr0: %handshake_buffer110.out0: i64, ldAddr0_valid: %handshake_buffer110.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, ldData0_ready: %handshake_buffer20.in0_ready: i1, stDone0_ready: %handshake_buffer19.in0_ready: i1, stDone1_ready: %handshake_buffer18.in0_ready: i1, stDone2_ready: %handshake_buffer17.in0_ready: i1, ldDone0_ready: %handshake_buffer16.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
    %handshake_buffer16.in0_ready, %handshake_buffer16.out0, %handshake_buffer16.out0_valid = hw.instance "handshake_buffer16" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.ldDone0: i0, in0_valid: %handshake_memory1.ldDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer17.in0_ready, %handshake_buffer17.out0, %handshake_buffer17.out0_valid = hw.instance "handshake_buffer17" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone2: i0, in0_valid: %handshake_memory1.stDone2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in6_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer18.in0_ready, %handshake_buffer18.out0, %handshake_buffer18.out0_valid = hw.instance "handshake_buffer18" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone1: i0, in0_valid: %handshake_memory1.stDone1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer19.in0_ready, %handshake_buffer19.out0, %handshake_buffer19.out0_valid = hw.instance "handshake_buffer19" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone0: i0, in0_valid: %handshake_memory1.stDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork2.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer20.in0_ready, %handshake_buffer20.out0, %handshake_buffer20.out0_valid = hw.instance "handshake_buffer20" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory1.ldData0: i64, in0_valid: %handshake_memory1.ldData0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load1.dataFromMem_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork1.in0_ready, %handshake_fork1.out0, %handshake_fork1.out0_valid, %handshake_fork1.out1, %handshake_fork1.out1_valid = hw.instance "handshake_fork1" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer18.out0: i0, in0_valid: %handshake_buffer18.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer22.in0_ready: i1, out1_ready: %handshake_buffer21.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
    %handshake_buffer21.in0_ready, %handshake_buffer21.out0, %handshake_buffer21.out0_valid = hw.instance "handshake_buffer21" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out1: i0, in0_valid: %handshake_fork1.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in5_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer22.in0_ready, %handshake_buffer22.out0, %handshake_buffer22.out0_valid = hw.instance "handshake_buffer22" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out0: i0, in0_valid: %handshake_fork1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join4.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork2.in0_ready, %handshake_fork2.out0, %handshake_fork2.out0_valid, %handshake_fork2.out1, %handshake_fork2.out1_valid, %handshake_fork2.out2, %handshake_fork2.out2_valid = hw.instance "handshake_fork2" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer19.out0: i0, in0_valid: %handshake_buffer19.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer25.in0_ready: i1, out1_ready: %handshake_buffer24.in0_ready: i1, out2_ready: %handshake_buffer23.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
    %handshake_buffer23.in0_ready, %handshake_buffer23.out0, %handshake_buffer23.out0_valid = hw.instance "handshake_buffer23" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out2: i0, in0_valid: %handshake_fork2.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in4_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer24.in0_ready, %handshake_buffer24.out0, %handshake_buffer24.out0_valid = hw.instance "handshake_buffer24" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out1: i0, in0_valid: %handshake_fork2.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join3.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer25.in0_ready, %handshake_buffer25.out0, %handshake_buffer25.out0_valid = hw.instance "handshake_buffer25" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out0: i0, in0_valid: %handshake_fork2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join4.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_memory2.stData0_ready, %handshake_memory2.stAddr0_ready, %handshake_memory2.stData1_ready, %handshake_memory2.stAddr1_ready, %handshake_memory2.stData2_ready, %handshake_memory2.stAddr2_ready, %handshake_memory2.ldAddr0_ready, %handshake_memory2.ldData0, %handshake_memory2.ldData0_valid, %handshake_memory2.stDone0, %handshake_memory2.stDone0_valid, %handshake_memory2.stDone1, %handshake_memory2.stDone1_valid, %handshake_memory2.stDone2, %handshake_memory2.stDone2_valid, %handshake_memory2.ldDone0, %handshake_memory2.ldDone0_valid = hw.instance "handshake_memory2" @handshake_memory_out_ui64_id0(stData0: %handshake_buffer59.out0: i64, stData0_valid: %handshake_buffer59.out0_valid: i1, stAddr0: %handshake_buffer58.out0: i64, stAddr0_valid: %handshake_buffer58.out0_valid: i1, stData1: %handshake_buffer62.out0: i64, stData1_valid: %handshake_buffer62.out0_valid: i1, stAddr1: %handshake_buffer61.out0: i64, stAddr1_valid: %handshake_buffer61.out0_valid: i1, stData2: %handshake_buffer65.out0: i64, stData2_valid: %handshake_buffer65.out0_valid: i1, stAddr2: %handshake_buffer64.out0: i64, stAddr2_valid: %handshake_buffer64.out0_valid: i1, ldAddr0: %handshake_buffer108.out0: i64, ldAddr0_valid: %handshake_buffer108.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, ldData0_ready: %handshake_buffer30.in0_ready: i1, stDone0_ready: %handshake_buffer29.in0_ready: i1, stDone1_ready: %handshake_buffer28.in0_ready: i1, stDone2_ready: %handshake_buffer27.in0_ready: i1, ldDone0_ready: %handshake_buffer26.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
    %handshake_buffer26.in0_ready, %handshake_buffer26.out0, %handshake_buffer26.out0_valid = hw.instance "handshake_buffer26" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.ldDone0: i0, in0_valid: %handshake_memory2.ldDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer27.in0_ready, %handshake_buffer27.out0, %handshake_buffer27.out0_valid = hw.instance "handshake_buffer27" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone2: i0, in0_valid: %handshake_memory2.stDone2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in3_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer28.in0_ready, %handshake_buffer28.out0, %handshake_buffer28.out0_valid = hw.instance "handshake_buffer28" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone1: i0, in0_valid: %handshake_memory2.stDone1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork3.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer29.in0_ready, %handshake_buffer29.out0, %handshake_buffer29.out0_valid = hw.instance "handshake_buffer29" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone0: i0, in0_valid: %handshake_memory2.stDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork4.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer30.in0_ready, %handshake_buffer30.out0, %handshake_buffer30.out0_valid = hw.instance "handshake_buffer30" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory2.ldData0: i64, in0_valid: %handshake_memory2.ldData0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load0.dataFromMem_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork3.in0_ready, %handshake_fork3.out0, %handshake_fork3.out0_valid, %handshake_fork3.out1, %handshake_fork3.out1_valid = hw.instance "handshake_fork3" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer28.out0: i0, in0_valid: %handshake_buffer28.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer32.in0_ready: i1, out1_ready: %handshake_buffer31.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
    %handshake_buffer31.in0_ready, %handshake_buffer31.out0, %handshake_buffer31.out0_valid = hw.instance "handshake_buffer31" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out1: i0, in0_valid: %handshake_fork3.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join2.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer32.in0_ready, %handshake_buffer32.out0, %handshake_buffer32.out0_valid = hw.instance "handshake_buffer32" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out0: i0, in0_valid: %handshake_fork3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork4.in0_ready, %handshake_fork4.out0, %handshake_fork4.out0_valid, %handshake_fork4.out1, %handshake_fork4.out1_valid, %handshake_fork4.out2, %handshake_fork4.out2_valid = hw.instance "handshake_fork4" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer29.out0: i0, in0_valid: %handshake_buffer29.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer35.in0_ready: i1, out1_ready: %handshake_buffer34.in0_ready: i1, out2_ready: %handshake_buffer33.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
    %handshake_buffer33.in0_ready, %handshake_buffer33.out0, %handshake_buffer33.out0_valid = hw.instance "handshake_buffer33" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out2: i0, in0_valid: %handshake_fork4.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join1.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer34.in0_ready, %handshake_buffer34.out0, %handshake_buffer34.out0_valid = hw.instance "handshake_buffer34" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out1: i0, in0_valid: %handshake_fork4.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join2.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer35.in0_ready, %handshake_buffer35.out0, %handshake_buffer35.out0_valid = hw.instance "handshake_buffer35" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out0: i0, in0_valid: %handshake_fork4.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_join0.in0_ready, %handshake_join0.in1_ready, %handshake_join0.in2_ready, %handshake_join0.in3_ready, %handshake_join0.in4_ready, %handshake_join0.in5_ready, %handshake_join0.in6_ready, %handshake_join0.out0, %handshake_join0.out0_valid = hw.instance "handshake_join0" @handshake_join_7ins_1outs_ctrl(in0: %handshake_buffer4.out0: i0, in0_valid: %handshake_buffer4.out0_valid: i1, in1: %handshake_buffer35.out0: i0, in1_valid: %handshake_buffer35.out0_valid: i1, in2: %handshake_buffer32.out0: i0, in2_valid: %handshake_buffer32.out0_valid: i1, in3: %handshake_buffer27.out0: i0, in3_valid: %handshake_buffer27.out0_valid: i1, in4: %handshake_buffer23.out0: i0, in4_valid: %handshake_buffer23.out0_valid: i1, in5: %handshake_buffer21.out0: i0, in5_valid: %handshake_buffer21.out0_valid: i1, in6: %handshake_buffer17.out0: i0, in6_valid: %handshake_buffer17.out0_valid: i1, out0_ready: %handshake_buffer36.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, in4_ready: i1, in5_ready: i1, in6_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer36.in0_ready, %handshake_buffer36.out0, %handshake_buffer36.out0_valid = hw.instance "handshake_buffer36" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join0.out0: i0, in0_valid: %handshake_join0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_constant0.ctrl_ready, %handshake_constant0.out0, %handshake_constant0.out0_valid = hw.instance "handshake_constant0" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer14.out0: i0, ctrl_valid: %handshake_buffer14.out0_valid: i1, out0_ready: %handshake_buffer37.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer37.in0_ready, %handshake_buffer37.out0, %handshake_buffer37.out0_valid = hw.instance "handshake_buffer37" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant0.out0: i64, in0_valid: %handshake_constant0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux2.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant1.ctrl_ready, %handshake_constant1.out0, %handshake_constant1.out0_valid = hw.instance "handshake_constant1" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer13.out0: i0, ctrl_valid: %handshake_buffer13.out0_valid: i1, out0_ready: %handshake_buffer38.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer38.in0_ready, %handshake_buffer38.out0, %handshake_buffer38.out0_valid = hw.instance "handshake_buffer38" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant1.out0: i64, in0_valid: %handshake_constant1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork5.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork5.in0_ready, %handshake_fork5.out0, %handshake_fork5.out0_valid, %handshake_fork5.out1, %handshake_fork5.out1_valid = hw.instance "handshake_fork5" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer38.out0: i64, in0_valid: %handshake_buffer38.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer40.in0_ready: i1, out1_ready: %handshake_buffer39.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer39.in0_ready, %handshake_buffer39.out0, %handshake_buffer39.out0_valid = hw.instance "handshake_buffer39" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out1: i64, in0_valid: %handshake_fork5.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store2.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer40.in0_ready, %handshake_buffer40.out0, %handshake_buffer40.out0_valid = hw.instance "handshake_buffer40" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out0: i64, in0_valid: %handshake_fork5.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store5.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant2.ctrl_ready, %handshake_constant2.out0, %handshake_constant2.out0_valid = hw.instance "handshake_constant2" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer12.out0: i0, ctrl_valid: %handshake_buffer12.out0_valid: i1, out0_ready: %handshake_buffer41.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer41.in0_ready, %handshake_buffer41.out0, %handshake_buffer41.out0_valid = hw.instance "handshake_buffer41" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant2.out0: i64, in0_valid: %handshake_constant2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork6.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork6.in0_ready, %handshake_fork6.out0, %handshake_fork6.out0_valid, %handshake_fork6.out1, %handshake_fork6.out1_valid = hw.instance "handshake_fork6" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer41.out0: i64, in0_valid: %handshake_buffer41.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer43.in0_ready: i1, out1_ready: %handshake_buffer42.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer42.in0_ready, %handshake_buffer42.out0, %handshake_buffer42.out0_valid = hw.instance "handshake_buffer42" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out1: i64, in0_valid: %handshake_fork6.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store1.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer43.in0_ready, %handshake_buffer43.out0, %handshake_buffer43.out0_valid = hw.instance "handshake_buffer43" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out0: i64, in0_valid: %handshake_fork6.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store4.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant3.ctrl_ready, %handshake_constant3.out0, %handshake_constant3.out0_valid = hw.instance "handshake_constant3" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer11.out0: i0, ctrl_valid: %handshake_buffer11.out0_valid: i1, out0_ready: %handshake_buffer44.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer44.in0_ready, %handshake_buffer44.out0, %handshake_buffer44.out0_valid = hw.instance "handshake_buffer44" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant3.out0: i64, in0_valid: %handshake_constant3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork7.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork7.in0_ready, %handshake_fork7.out0, %handshake_fork7.out0_valid, %handshake_fork7.out1, %handshake_fork7.out1_valid = hw.instance "handshake_fork7" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer44.out0: i64, in0_valid: %handshake_buffer44.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer46.in0_ready: i1, out1_ready: %handshake_buffer45.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer45.in0_ready, %handshake_buffer45.out0, %handshake_buffer45.out0_valid = hw.instance "handshake_buffer45" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out1: i64, in0_valid: %handshake_fork7.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store0.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer46.in0_ready, %handshake_buffer46.out0, %handshake_buffer46.out0_valid = hw.instance "handshake_buffer46" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out0: i64, in0_valid: %handshake_fork7.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store3.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant4.ctrl_ready, %handshake_constant4.out0, %handshake_constant4.out0_valid = hw.instance "handshake_constant4" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer10.out0: i0, ctrl_valid: %handshake_buffer10.out0_valid: i1, out0_ready: %handshake_buffer47.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer47.in0_ready, %handshake_buffer47.out0, %handshake_buffer47.out0_valid = hw.instance "handshake_buffer47" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant4.out0: i64, in0_valid: %handshake_constant4.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork8.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork8.in0_ready, %handshake_fork8.out0, %handshake_fork8.out0_valid, %handshake_fork8.out1, %handshake_fork8.out1_valid = hw.instance "handshake_fork8" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer47.out0: i64, in0_valid: %handshake_buffer47.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer49.in0_ready: i1, out1_ready: %handshake_buffer48.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer48.in0_ready, %handshake_buffer48.out0, %handshake_buffer48.out0_valid = hw.instance "handshake_buffer48" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out1: i64, in0_valid: %handshake_fork8.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store2.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer49.in0_ready, %handshake_buffer49.out0, %handshake_buffer49.out0_valid = hw.instance "handshake_buffer49" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out0: i64, in0_valid: %handshake_fork8.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store5.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant5.ctrl_ready, %handshake_constant5.out0, %handshake_constant5.out0_valid = hw.instance "handshake_constant5" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer9.out0: i0, ctrl_valid: %handshake_buffer9.out0_valid: i1, out0_ready: %handshake_buffer50.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer50.in0_ready, %handshake_buffer50.out0, %handshake_buffer50.out0_valid = hw.instance "handshake_buffer50" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant5.out0: i64, in0_valid: %handshake_constant5.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork9.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork9.in0_ready, %handshake_fork9.out0, %handshake_fork9.out0_valid, %handshake_fork9.out1, %handshake_fork9.out1_valid, %handshake_fork9.out2, %handshake_fork9.out2_valid = hw.instance "handshake_fork9" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer50.out0: i64, in0_valid: %handshake_buffer50.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer53.in0_ready: i1, out1_ready: %handshake_buffer52.in0_ready: i1, out2_ready: %handshake_buffer51.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
    %handshake_buffer51.in0_ready, %handshake_buffer51.out0, %handshake_buffer51.out0_valid = hw.instance "handshake_buffer51" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out2: i64, in0_valid: %handshake_fork9.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store1.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer52.in0_ready, %handshake_buffer52.out0, %handshake_buffer52.out0_valid = hw.instance "handshake_buffer52" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out1: i64, in0_valid: %handshake_fork9.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store4.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer53.in0_ready, %handshake_buffer53.out0, %handshake_buffer53.out0_valid = hw.instance "handshake_buffer53" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out0: i64, in0_valid: %handshake_fork9.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux3.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant6.ctrl_ready, %handshake_constant6.out0, %handshake_constant6.out0_valid = hw.instance "handshake_constant6" @handshake_constant_c0_out_ui64(ctrl: %handshake_buffer8.out0: i0, ctrl_valid: %handshake_buffer8.out0_valid: i1, out0_ready: %handshake_buffer54.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer54.in0_ready, %handshake_buffer54.out0, %handshake_buffer54.out0_valid = hw.instance "handshake_buffer54" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant6.out0: i64, in0_valid: %handshake_constant6.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork10.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork10.in0_ready, %handshake_fork10.out0, %handshake_fork10.out0_valid, %handshake_fork10.out1, %handshake_fork10.out1_valid, %handshake_fork10.out2, %handshake_fork10.out2_valid = hw.instance "handshake_fork10" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer54.out0: i64, in0_valid: %handshake_buffer54.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer57.in0_ready: i1, out1_ready: %handshake_buffer56.in0_ready: i1, out2_ready: %handshake_buffer55.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
    %handshake_buffer55.in0_ready, %handshake_buffer55.out0, %handshake_buffer55.out0_valid = hw.instance "handshake_buffer55" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out2: i64, in0_valid: %handshake_fork10.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store0.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer56.in0_ready, %handshake_buffer56.out0, %handshake_buffer56.out0_valid = hw.instance "handshake_buffer56" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out1: i64, in0_valid: %handshake_fork10.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store3.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer57.in0_ready, %handshake_buffer57.out0, %handshake_buffer57.out0_valid = hw.instance "handshake_buffer57" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out0: i64, in0_valid: %handshake_fork10.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux1.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_store0.addrIn0_ready, %handshake_store0.dataIn_ready, %handshake_store0.ctrl_ready, %handshake_store0.dataToMem, %handshake_store0.dataToMem_valid, %handshake_store0.addrOut0, %handshake_store0.addrOut0_valid = hw.instance "handshake_store0" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer55.out0: i64, addrIn0_valid: %handshake_buffer55.out0_valid: i1, dataIn: %handshake_buffer45.out0: i64, dataIn_valid: %handshake_buffer45.out0_valid: i1, ctrl: %handshake_buffer7.out0: i0, ctrl_valid: %handshake_buffer7.out0_valid: i1, dataToMem_ready: %handshake_buffer59.in0_ready: i1, addrOut0_ready: %handshake_buffer58.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer58.in0_ready, %handshake_buffer58.out0, %handshake_buffer58.out0_valid = hw.instance "handshake_buffer58" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.addrOut0: i64, in0_valid: %handshake_store0.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer59.in0_ready, %handshake_buffer59.out0, %handshake_buffer59.out0_valid = hw.instance "handshake_buffer59" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.dataToMem: i64, in0_valid: %handshake_store0.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join1.in0_ready, %handshake_join1.in1_ready, %handshake_join1.out0, %handshake_join1.out0_valid = hw.instance "handshake_join1" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer6.out0: i0, in0_valid: %handshake_buffer6.out0_valid: i1, in1: %handshake_buffer33.out0: i0, in1_valid: %handshake_buffer33.out0_valid: i1, out0_ready: %handshake_buffer60.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer60.in0_ready, %handshake_buffer60.out0, %handshake_buffer60.out0_valid = hw.instance "handshake_buffer60" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join1.out0: i0, in0_valid: %handshake_join1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store1.addrIn0_ready, %handshake_store1.dataIn_ready, %handshake_store1.ctrl_ready, %handshake_store1.dataToMem, %handshake_store1.dataToMem_valid, %handshake_store1.addrOut0, %handshake_store1.addrOut0_valid = hw.instance "handshake_store1" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer51.out0: i64, addrIn0_valid: %handshake_buffer51.out0_valid: i1, dataIn: %handshake_buffer42.out0: i64, dataIn_valid: %handshake_buffer42.out0_valid: i1, ctrl: %handshake_buffer60.out0: i0, ctrl_valid: %handshake_buffer60.out0_valid: i1, dataToMem_ready: %handshake_buffer62.in0_ready: i1, addrOut0_ready: %handshake_buffer61.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer61.in0_ready, %handshake_buffer61.out0, %handshake_buffer61.out0_valid = hw.instance "handshake_buffer61" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.addrOut0: i64, in0_valid: %handshake_store1.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer62.in0_ready, %handshake_buffer62.out0, %handshake_buffer62.out0_valid = hw.instance "handshake_buffer62" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.dataToMem: i64, in0_valid: %handshake_store1.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stData1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join2.in0_ready, %handshake_join2.in1_ready, %handshake_join2.in2_ready, %handshake_join2.out0, %handshake_join2.out0_valid = hw.instance "handshake_join2" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer5.out0: i0, in0_valid: %handshake_buffer5.out0_valid: i1, in1: %handshake_buffer34.out0: i0, in1_valid: %handshake_buffer34.out0_valid: i1, in2: %handshake_buffer31.out0: i0, in2_valid: %handshake_buffer31.out0_valid: i1, out0_ready: %handshake_buffer63.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer63.in0_ready, %handshake_buffer63.out0, %handshake_buffer63.out0_valid = hw.instance "handshake_buffer63" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join2.out0: i0, in0_valid: %handshake_join2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store2.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store2.addrIn0_ready, %handshake_store2.dataIn_ready, %handshake_store2.ctrl_ready, %handshake_store2.dataToMem, %handshake_store2.dataToMem_valid, %handshake_store2.addrOut0, %handshake_store2.addrOut0_valid = hw.instance "handshake_store2" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer48.out0: i64, addrIn0_valid: %handshake_buffer48.out0_valid: i1, dataIn: %handshake_buffer39.out0: i64, dataIn_valid: %handshake_buffer39.out0_valid: i1, ctrl: %handshake_buffer63.out0: i0, ctrl_valid: %handshake_buffer63.out0_valid: i1, dataToMem_ready: %handshake_buffer65.in0_ready: i1, addrOut0_ready: %handshake_buffer64.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer64.in0_ready, %handshake_buffer64.out0, %handshake_buffer64.out0_valid = hw.instance "handshake_buffer64" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.addrOut0: i64, in0_valid: %handshake_store2.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer65.in0_ready, %handshake_buffer65.out0, %handshake_buffer65.out0_valid = hw.instance "handshake_buffer65" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.dataToMem: i64, in0_valid: %handshake_store2.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stData2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_store3.addrIn0_ready, %handshake_store3.dataIn_ready, %handshake_store3.ctrl_ready, %handshake_store3.dataToMem, %handshake_store3.dataToMem_valid, %handshake_store3.addrOut0, %handshake_store3.addrOut0_valid = hw.instance "handshake_store3" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer56.out0: i64, addrIn0_valid: %handshake_buffer56.out0_valid: i1, dataIn: %handshake_buffer46.out0: i64, dataIn_valid: %handshake_buffer46.out0_valid: i1, ctrl: %handshake_buffer3.out0: i0, ctrl_valid: %handshake_buffer3.out0_valid: i1, dataToMem_ready: %handshake_buffer67.in0_ready: i1, addrOut0_ready: %handshake_buffer66.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer66.in0_ready, %handshake_buffer66.out0, %handshake_buffer66.out0_valid = hw.instance "handshake_buffer66" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.addrOut0: i64, in0_valid: %handshake_store3.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer67.in0_ready, %handshake_buffer67.out0, %handshake_buffer67.out0_valid = hw.instance "handshake_buffer67" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.dataToMem: i64, in0_valid: %handshake_store3.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join3.in0_ready, %handshake_join3.in1_ready, %handshake_join3.out0, %handshake_join3.out0_valid = hw.instance "handshake_join3" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer2.out0: i0, in0_valid: %handshake_buffer2.out0_valid: i1, in1: %handshake_buffer24.out0: i0, in1_valid: %handshake_buffer24.out0_valid: i1, out0_ready: %handshake_buffer68.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer68.in0_ready, %handshake_buffer68.out0, %handshake_buffer68.out0_valid = hw.instance "handshake_buffer68" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join3.out0: i0, in0_valid: %handshake_join3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store4.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store4.addrIn0_ready, %handshake_store4.dataIn_ready, %handshake_store4.ctrl_ready, %handshake_store4.dataToMem, %handshake_store4.dataToMem_valid, %handshake_store4.addrOut0, %handshake_store4.addrOut0_valid = hw.instance "handshake_store4" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer52.out0: i64, addrIn0_valid: %handshake_buffer52.out0_valid: i1, dataIn: %handshake_buffer43.out0: i64, dataIn_valid: %handshake_buffer43.out0_valid: i1, ctrl: %handshake_buffer68.out0: i0, ctrl_valid: %handshake_buffer68.out0_valid: i1, dataToMem_ready: %handshake_buffer70.in0_ready: i1, addrOut0_ready: %handshake_buffer69.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer69.in0_ready, %handshake_buffer69.out0, %handshake_buffer69.out0_valid = hw.instance "handshake_buffer69" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.addrOut0: i64, in0_valid: %handshake_store4.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer70.in0_ready, %handshake_buffer70.out0, %handshake_buffer70.out0_valid = hw.instance "handshake_buffer70" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.dataToMem: i64, in0_valid: %handshake_store4.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stData1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join4.in0_ready, %handshake_join4.in1_ready, %handshake_join4.in2_ready, %handshake_join4.out0, %handshake_join4.out0_valid = hw.instance "handshake_join4" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer1.out0: i0, in0_valid: %handshake_buffer1.out0_valid: i1, in1: %handshake_buffer25.out0: i0, in1_valid: %handshake_buffer25.out0_valid: i1, in2: %handshake_buffer22.out0: i0, in2_valid: %handshake_buffer22.out0_valid: i1, out0_ready: %handshake_buffer71.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer71.in0_ready, %handshake_buffer71.out0, %handshake_buffer71.out0_valid = hw.instance "handshake_buffer71" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join4.out0: i0, in0_valid: %handshake_join4.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store5.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store5.addrIn0_ready, %handshake_store5.dataIn_ready, %handshake_store5.ctrl_ready, %handshake_store5.dataToMem, %handshake_store5.dataToMem_valid, %handshake_store5.addrOut0, %handshake_store5.addrOut0_valid = hw.instance "handshake_store5" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer49.out0: i64, addrIn0_valid: %handshake_buffer49.out0_valid: i1, dataIn: %handshake_buffer40.out0: i64, dataIn_valid: %handshake_buffer40.out0_valid: i1, ctrl: %handshake_buffer71.out0: i0, ctrl_valid: %handshake_buffer71.out0_valid: i1, dataToMem_ready: %handshake_buffer73.in0_ready: i1, addrOut0_ready: %handshake_buffer72.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer72.in0_ready, %handshake_buffer72.out0, %handshake_buffer72.out0_valid = hw.instance "handshake_buffer72" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.addrOut0: i64, in0_valid: %handshake_store5.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer73.in0_ready, %handshake_buffer73.out0, %handshake_buffer73.out0_valid = hw.instance "handshake_buffer73" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.dataToMem: i64, in0_valid: %handshake_store5.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stData2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer74.in0_ready, %handshake_buffer74.out0, %handshake_buffer74.out0_valid = hw.instance "handshake_buffer74" @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in0: %handshake_fork14.out0: i1, in0_valid: %handshake_fork14.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork11.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_fork11.in0_ready, %handshake_fork11.out0, %handshake_fork11.out0_valid, %handshake_fork11.out1, %handshake_fork11.out1_valid, %handshake_fork11.out2, %handshake_fork11.out2_valid, %handshake_fork11.out3, %handshake_fork11.out3_valid = hw.instance "handshake_fork11" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in0: %handshake_buffer74.out0: i1, in0_valid: %handshake_buffer74.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer78.in0_ready: i1, out1_ready: %handshake_buffer77.in0_ready: i1, out2_ready: %handshake_buffer76.in0_ready: i1, out3_ready: %handshake_buffer75.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1)
    %handshake_buffer75.in0_ready, %handshake_buffer75.out0, %handshake_buffer75.out0_valid = hw.instance "handshake_buffer75" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out3: i1, in0_valid: %handshake_fork11.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux0.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer76.in0_ready, %handshake_buffer76.out0, %handshake_buffer76.out0_valid = hw.instance "handshake_buffer76" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out2: i1, in0_valid: %handshake_fork11.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux1.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer77.in0_ready, %handshake_buffer77.out0, %handshake_buffer77.out0_valid = hw.instance "handshake_buffer77" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out1: i1, in0_valid: %handshake_fork11.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux2.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer78.in0_ready, %handshake_buffer78.out0, %handshake_buffer78.out0_valid = hw.instance "handshake_buffer78" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out0: i1, in0_valid: %handshake_fork11.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux3.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_mux0.select_ready, %handshake_mux0.in0_ready, %handshake_mux0.in1_ready, %handshake_mux0.out0, %handshake_mux0.out0_valid = hw.instance "handshake_mux0" @handshake_mux_in_ui1_3ins_1outs_ctrl(select: %handshake_buffer75.out0: i1, select_valid: %handshake_buffer75.out0_valid: i1, in0: %handshake_buffer36.out0: i0, in0_valid: %handshake_buffer36.out0_valid: i1, in1: %handshake_buffer107.out0: i0, in1_valid: %handshake_buffer107.out0_valid: i1, out0_ready: %handshake_buffer79.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer79.in0_ready, %handshake_buffer79.out0, %handshake_buffer79.out0_valid = hw.instance "handshake_buffer79" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_mux0.out0: i0, in0_valid: %handshake_mux0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br3.data_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_mux1.select_ready, %handshake_mux1.in0_ready, %handshake_mux1.in1_ready, %handshake_mux1.out0, %handshake_mux1.out0_valid = hw.instance "handshake_mux1" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer76.out0: i1, select_valid: %handshake_buffer76.out0_valid: i1, in0: %handshake_buffer57.out0: i64, in0_valid: %handshake_buffer57.out0_valid: i1, in1: %handshake_buffer115.out0: i64, in1_valid: %handshake_buffer115.out0_valid: i1, out0_ready: %handshake_buffer80.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer80.in0_ready, %handshake_buffer80.out0, %handshake_buffer80.out0_valid = hw.instance "handshake_buffer80" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux1.out0: i64, in0_valid: %handshake_mux1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork12.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork12.in0_ready, %handshake_fork12.out0, %handshake_fork12.out0_valid, %handshake_fork12.out1, %handshake_fork12.out1_valid = hw.instance "handshake_fork12" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer80.out0: i64, in0_valid: %handshake_buffer80.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer82.in0_ready: i1, out1_ready: %handshake_buffer81.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer81.in0_ready, %handshake_buffer81.out0, %handshake_buffer81.out0_valid = hw.instance "handshake_buffer81" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out1: i64, in0_valid: %handshake_fork12.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br0.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer82.in0_ready, %handshake_buffer82.out0, %handshake_buffer82.out0_valid = hw.instance "handshake_buffer82" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out0: i64, in0_valid: %handshake_fork12.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_cmpi0.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_mux2.select_ready, %handshake_mux2.in0_ready, %handshake_mux2.in1_ready, %handshake_mux2.out0, %handshake_mux2.out0_valid = hw.instance "handshake_mux2" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer77.out0: i1, select_valid: %handshake_buffer77.out0_valid: i1, in0: %handshake_buffer37.out0: i64, in0_valid: %handshake_buffer37.out0_valid: i1, in1: %handshake_buffer97.out0: i64, in1_valid: %handshake_buffer97.out0_valid: i1, out0_ready: %handshake_buffer83.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer83.in0_ready, %handshake_buffer83.out0, %handshake_buffer83.out0_valid = hw.instance "handshake_buffer83" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux2.out0: i64, in0_valid: %handshake_mux2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork13.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork13.in0_ready, %handshake_fork13.out0, %handshake_fork13.out0_valid, %handshake_fork13.out1, %handshake_fork13.out1_valid = hw.instance "handshake_fork13" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer83.out0: i64, in0_valid: %handshake_buffer83.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer85.in0_ready: i1, out1_ready: %handshake_buffer84.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer84.in0_ready, %handshake_buffer84.out0, %handshake_buffer84.out0_valid = hw.instance "handshake_buffer84" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out1: i64, in0_valid: %handshake_fork13.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br1.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer85.in0_ready, %handshake_buffer85.out0, %handshake_buffer85.out0_valid = hw.instance "handshake_buffer85" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out0: i64, in0_valid: %handshake_fork13.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_cmpi0.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_mux3.select_ready, %handshake_mux3.in0_ready, %handshake_mux3.in1_ready, %handshake_mux3.out0, %handshake_mux3.out0_valid = hw.instance "handshake_mux3" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer78.out0: i1, select_valid: %handshake_buffer78.out0_valid: i1, in0: %handshake_buffer53.out0: i64, in0_valid: %handshake_buffer53.out0_valid: i1, in1: %handshake_buffer100.out0: i64, in1_valid: %handshake_buffer100.out0_valid: i1, out0_ready: %handshake_buffer86.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer86.in0_ready, %handshake_buffer86.out0, %handshake_buffer86.out0_valid = hw.instance "handshake_buffer86" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux3.out0: i64, in0_valid: %handshake_mux3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br2.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %arith_cmpi0.in0_ready, %arith_cmpi0.in1_ready, %arith_cmpi0.out0, %arith_cmpi0.out0_valid = hw.instance "arith_cmpi0" @arith_cmpi_in_ui64_ui64_out_ui1_slt(in0: %handshake_buffer82.out0: i64, in0_valid: %handshake_buffer82.out0_valid: i1, in1: %handshake_buffer85.out0: i64, in1_valid: %handshake_buffer85.out0_valid: i1, out0_ready: %handshake_buffer87.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer87.in0_ready, %handshake_buffer87.out0, %handshake_buffer87.out0_valid = hw.instance "handshake_buffer87" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %arith_cmpi0.out0: i1, in0_valid: %arith_cmpi0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork14.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_fork14.in0_ready, %handshake_fork14.out0, %handshake_fork14.out0_valid, %handshake_fork14.out1, %handshake_fork14.out1_valid, %handshake_fork14.out2, %handshake_fork14.out2_valid, %handshake_fork14.out3, %handshake_fork14.out3_valid, %handshake_fork14.out4, %handshake_fork14.out4_valid = hw.instance "handshake_fork14" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in0: %handshake_buffer87.out0: i1, in0_valid: %handshake_buffer87.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer74.in0_ready: i1, out1_ready: %handshake_buffer91.in0_ready: i1, out2_ready: %handshake_buffer90.in0_ready: i1, out3_ready: %handshake_buffer89.in0_ready: i1, out4_ready: %handshake_buffer88.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1, out4: i1, out4_valid: i1)
    %handshake_buffer88.in0_ready, %handshake_buffer88.out0, %handshake_buffer88.out0_valid = hw.instance "handshake_buffer88" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out4: i1, in0_valid: %handshake_fork14.out4_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br0.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer89.in0_ready, %handshake_buffer89.out0, %handshake_buffer89.out0_valid = hw.instance "handshake_buffer89" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out3: i1, in0_valid: %handshake_fork14.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br1.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer90.in0_ready, %handshake_buffer90.out0, %handshake_buffer90.out0_valid = hw.instance "handshake_buffer90" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out2: i1, in0_valid: %handshake_fork14.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br2.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer91.in0_ready, %handshake_buffer91.out0, %handshake_buffer91.out0_valid = hw.instance "handshake_buffer91" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out1: i1, in0_valid: %handshake_fork14.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br3.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_cond_br0.cond_ready, %handshake_cond_br0.data_ready, %handshake_cond_br0.outTrue, %handshake_cond_br0.outTrue_valid, %handshake_cond_br0.outFalse, %handshake_cond_br0.outFalse_valid = hw.instance "handshake_cond_br0" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer88.out0: i1, cond_valid: %handshake_buffer88.out0_valid: i1, data: %handshake_buffer81.out0: i64, data_valid: %handshake_buffer81.out0_valid: i1, outTrue_ready: %handshake_buffer92.in0_ready: i1, outFalse_ready: %handshake_sink0.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %handshake_buffer92.in0_ready, %handshake_buffer92.out0, %handshake_buffer92.out0_valid = hw.instance "handshake_buffer92" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br0.outTrue: i64, in0_valid: %handshake_cond_br0.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork15.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_sink0.in0_ready = hw.instance "handshake_sink0" @handshake_sink_in_ui64(in0: %handshake_cond_br0.outFalse: i64, in0_valid: %handshake_cond_br0.outFalse_valid: i1) -> (in0_ready: i1)
    %handshake_fork15.in0_ready, %handshake_fork15.out0, %handshake_fork15.out0_valid, %handshake_fork15.out1, %handshake_fork15.out1_valid, %handshake_fork15.out2, %handshake_fork15.out2_valid, %handshake_fork15.out3, %handshake_fork15.out3_valid = hw.instance "handshake_fork15" @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in0: %handshake_buffer92.out0: i64, in0_valid: %handshake_buffer92.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer96.in0_ready: i1, out1_ready: %handshake_buffer95.in0_ready: i1, out2_ready: %handshake_buffer94.in0_ready: i1, out3_ready: %handshake_buffer93.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1, out3: i64, out3_valid: i1)
    %handshake_buffer93.in0_ready, %handshake_buffer93.out0, %handshake_buffer93.out0_valid = hw.instance "handshake_buffer93" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out3: i64, in0_valid: %handshake_fork15.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store6.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer94.in0_ready, %handshake_buffer94.out0, %handshake_buffer94.out0_valid = hw.instance "handshake_buffer94" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out2: i64, in0_valid: %handshake_fork15.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load1.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer95.in0_ready, %handshake_buffer95.out0, %handshake_buffer95.out0_valid = hw.instance "handshake_buffer95" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out1: i64, in0_valid: %handshake_fork15.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load0.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer96.in0_ready, %handshake_buffer96.out0, %handshake_buffer96.out0_valid = hw.instance "handshake_buffer96" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out0: i64, in0_valid: %handshake_fork15.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi1.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_cond_br1.cond_ready, %handshake_cond_br1.data_ready, %handshake_cond_br1.outTrue, %handshake_cond_br1.outTrue_valid, %handshake_cond_br1.outFalse, %handshake_cond_br1.outFalse_valid = hw.instance "handshake_cond_br1" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer89.out0: i1, cond_valid: %handshake_buffer89.out0_valid: i1, data: %handshake_buffer84.out0: i64, data_valid: %handshake_buffer84.out0_valid: i1, outTrue_ready: %handshake_buffer97.in0_ready: i1, outFalse_ready: %handshake_sink1.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %handshake_buffer97.in0_ready, %handshake_buffer97.out0, %handshake_buffer97.out0_valid = hw.instance "handshake_buffer97" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br1.outTrue: i64, in0_valid: %handshake_cond_br1.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux2.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_sink1.in0_ready = hw.instance "handshake_sink1" @handshake_sink_in_ui64(in0: %handshake_cond_br1.outFalse: i64, in0_valid: %handshake_cond_br1.outFalse_valid: i1) -> (in0_ready: i1)
    %handshake_cond_br2.cond_ready, %handshake_cond_br2.data_ready, %handshake_cond_br2.outTrue, %handshake_cond_br2.outTrue_valid, %handshake_cond_br2.outFalse, %handshake_cond_br2.outFalse_valid = hw.instance "handshake_cond_br2" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer90.out0: i1, cond_valid: %handshake_buffer90.out0_valid: i1, data: %handshake_buffer86.out0: i64, data_valid: %handshake_buffer86.out0_valid: i1, outTrue_ready: %handshake_buffer98.in0_ready: i1, outFalse_ready: %handshake_sink2.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %handshake_buffer98.in0_ready, %handshake_buffer98.out0, %handshake_buffer98.out0_valid = hw.instance "handshake_buffer98" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br2.outTrue: i64, in0_valid: %handshake_cond_br2.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork16.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_sink2.in0_ready = hw.instance "handshake_sink2" @handshake_sink_in_ui64(in0: %handshake_cond_br2.outFalse: i64, in0_valid: %handshake_cond_br2.outFalse_valid: i1) -> (in0_ready: i1)
    %handshake_fork16.in0_ready, %handshake_fork16.out0, %handshake_fork16.out0_valid, %handshake_fork16.out1, %handshake_fork16.out1_valid = hw.instance "handshake_fork16" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer98.out0: i64, in0_valid: %handshake_buffer98.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer100.in0_ready: i1, out1_ready: %handshake_buffer99.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer99.in0_ready, %handshake_buffer99.out0, %handshake_buffer99.out0_valid = hw.instance "handshake_buffer99" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out1: i64, in0_valid: %handshake_fork16.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi1.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer100.in0_ready, %handshake_buffer100.out0, %handshake_buffer100.out0_valid = hw.instance "handshake_buffer100" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out0: i64, in0_valid: %handshake_fork16.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux3.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_cond_br3.cond_ready, %handshake_cond_br3.data_ready, %handshake_cond_br3.outTrue, %handshake_cond_br3.outTrue_valid, %handshake_cond_br3.outFalse, %handshake_cond_br3.outFalse_valid = hw.instance "handshake_cond_br3" @handshake_cond_br_in_ui1_2ins_2outs_ctrl(cond: %handshake_buffer91.out0: i1, cond_valid: %handshake_buffer91.out0_valid: i1, data: %handshake_buffer79.out0: i0, data_valid: %handshake_buffer79.out0_valid: i1, outTrue_ready: %handshake_buffer102.in0_ready: i1, outFalse_ready: %handshake_buffer101.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i0, outTrue_valid: i1, outFalse: i0, outFalse_valid: i1)
    %handshake_buffer101.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid = hw.instance "handshake_buffer101" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outFalse: i0, in0_valid: %handshake_cond_br3.outFalse_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %out0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer102.in0_ready, %handshake_buffer102.out0, %handshake_buffer102.out0_valid = hw.instance "handshake_buffer102" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outTrue: i0, in0_valid: %handshake_cond_br3.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork17.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork17.in0_ready, %handshake_fork17.out0, %handshake_fork17.out0_valid, %handshake_fork17.out1, %handshake_fork17.out1_valid, %handshake_fork17.out2, %handshake_fork17.out2_valid, %handshake_fork17.out3, %handshake_fork17.out3_valid = hw.instance "handshake_fork17" @handshake_fork_1ins_4outs_ctrl(in0: %handshake_buffer102.out0: i0, in0_valid: %handshake_buffer102.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer106.in0_ready: i1, out1_ready: %handshake_buffer105.in0_ready: i1, out2_ready: %handshake_buffer104.in0_ready: i1, out3_ready: %handshake_buffer103.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1)
    %handshake_buffer103.in0_ready, %handshake_buffer103.out0, %handshake_buffer103.out0_valid = hw.instance "handshake_buffer103" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out3: i0, in0_valid: %handshake_fork17.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer104.in0_ready, %handshake_buffer104.out0, %handshake_buffer104.out0_valid = hw.instance "handshake_buffer104" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out2: i0, in0_valid: %handshake_fork17.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer105.in0_ready, %handshake_buffer105.out0, %handshake_buffer105.out0_valid = hw.instance "handshake_buffer105" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out1: i0, in0_valid: %handshake_fork17.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer106.in0_ready, %handshake_buffer106.out0, %handshake_buffer106.out0_valid = hw.instance "handshake_buffer106" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out0: i0, in0_valid: %handshake_fork17.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store6.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_join5.in0_ready, %handshake_join5.in1_ready, %handshake_join5.in2_ready, %handshake_join5.in3_ready, %handshake_join5.out0, %handshake_join5.out0_valid = hw.instance "handshake_join5" @handshake_join_4ins_1outs_ctrl(in0: %handshake_buffer105.out0: i0, in0_valid: %handshake_buffer105.out0_valid: i1, in1: %handshake_buffer26.out0: i0, in1_valid: %handshake_buffer26.out0_valid: i1, in2: %handshake_buffer16.out0: i0, in2_valid: %handshake_buffer16.out0_valid: i1, in3: %handshake_buffer15.out0: i0, in3_valid: %handshake_buffer15.out0_valid: i1, out0_ready: %handshake_buffer107.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer107.in0_ready, %handshake_buffer107.out0, %handshake_buffer107.out0_valid = hw.instance "handshake_buffer107" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join5.out0: i0, in0_valid: %handshake_join5.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux0.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_load0.addrIn0_ready, %handshake_load0.dataFromMem_ready, %handshake_load0.ctrl_ready, %handshake_load0.dataOut, %handshake_load0.dataOut_valid, %handshake_load0.addrOut0, %handshake_load0.addrOut0_valid = hw.instance "handshake_load0" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer95.out0: i64, addrIn0_valid: %handshake_buffer95.out0_valid: i1, dataFromMem: %handshake_buffer30.out0: i64, dataFromMem_valid: %handshake_buffer30.out0_valid: i1, ctrl: %handshake_buffer103.out0: i0, ctrl_valid: %handshake_buffer103.out0_valid: i1, dataOut_ready: %handshake_buffer109.in0_ready: i1, addrOut0_ready: %handshake_buffer108.in0_ready: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer108.in0_ready, %handshake_buffer108.out0, %handshake_buffer108.out0_valid = hw.instance "handshake_buffer108" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.addrOut0: i64, in0_valid: %handshake_load0.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.ldAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer109.in0_ready, %handshake_buffer109.out0, %handshake_buffer109.out0_valid = hw.instance "handshake_buffer109" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.dataOut: i64, in0_valid: %handshake_load0.dataOut_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi0.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_load1.addrIn0_ready, %handshake_load1.dataFromMem_ready, %handshake_load1.ctrl_ready, %handshake_load1.dataOut, %handshake_load1.dataOut_valid, %handshake_load1.addrOut0, %handshake_load1.addrOut0_valid = hw.instance "handshake_load1" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer94.out0: i64, addrIn0_valid: %handshake_buffer94.out0_valid: i1, dataFromMem: %handshake_buffer20.out0: i64, dataFromMem_valid: %handshake_buffer20.out0_valid: i1, ctrl: %handshake_buffer104.out0: i0, ctrl_valid: %handshake_buffer104.out0_valid: i1, dataOut_ready: %handshake_buffer111.in0_ready: i1, addrOut0_ready: %handshake_buffer110.in0_ready: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer110.in0_ready, %handshake_buffer110.out0, %handshake_buffer110.out0_valid = hw.instance "handshake_buffer110" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.addrOut0: i64, in0_valid: %handshake_load1.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.ldAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer111.in0_ready, %handshake_buffer111.out0, %handshake_buffer111.out0_valid = hw.instance "handshake_buffer111" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.dataOut: i64, in0_valid: %handshake_load1.dataOut_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi0.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %arith_addi0.in0_ready, %arith_addi0.in1_ready, %arith_addi0.out0, %arith_addi0.out0_valid = hw.instance "arith_addi0" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer109.out0: i64, in0_valid: %handshake_buffer109.out0_valid: i1, in1: %handshake_buffer111.out0: i64, in1_valid: %handshake_buffer111.out0_valid: i1, out0_ready: %handshake_buffer112.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer112.in0_ready, %handshake_buffer112.out0, %handshake_buffer112.out0_valid = hw.instance "handshake_buffer112" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi0.out0: i64, in0_valid: %arith_addi0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store6.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_store6.addrIn0_ready, %handshake_store6.dataIn_ready, %handshake_store6.ctrl_ready, %handshake_store6.dataToMem, %handshake_store6.dataToMem_valid, %handshake_store6.addrOut0, %handshake_store6.addrOut0_valid = hw.instance "handshake_store6" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer93.out0: i64, addrIn0_valid: %handshake_buffer93.out0_valid: i1, dataIn: %handshake_buffer112.out0: i64, dataIn_valid: %handshake_buffer112.out0_valid: i1, ctrl: %handshake_buffer106.out0: i0, ctrl_valid: %handshake_buffer106.out0_valid: i1, dataToMem_ready: %handshake_buffer114.in0_ready: i1, addrOut0_ready: %handshake_buffer113.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer113.in0_ready, %handshake_buffer113.out0, %handshake_buffer113.out0_valid = hw.instance "handshake_buffer113" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.addrOut0: i64, in0_valid: %handshake_store6.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory0.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer114.in0_ready, %handshake_buffer114.out0, %handshake_buffer114.out0_valid = hw.instance "handshake_buffer114" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.dataToMem: i64, in0_valid: %handshake_store6.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory0.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %arith_addi1.in0_ready, %arith_addi1.in1_ready, %arith_addi1.out0, %arith_addi1.out0_valid = hw.instance "arith_addi1" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer96.out0: i64, in0_valid: %handshake_buffer96.out0_valid: i1, in1: %handshake_buffer99.out0: i64, in1_valid: %handshake_buffer99.out0_valid: i1, out0_ready: %handshake_buffer115.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer115.in0_ready, %handshake_buffer115.out0, %handshake_buffer115.out0_valid = hw.instance "handshake_buffer115" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi1.out0: i64, in0_valid: %arith_addi1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux1.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    hw.output %handshake_buffer0.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid : i1, i0, i1
  }
}


// -----// IR Dump After HWLowerInstanceChoices (hw-lower-instance-choices) //----- //
module {
  hw.module @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
    %true = hw.constant true
    %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
    %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.xor %5, %true : i1
    %3 = comb.or %1, %2 : i1
    %data0_reg = sv.reg sym @data0_reg : !hw.inout<i0> 
    %4 = sv.read_inout %data0_reg : !hw.inout<i0>
    %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
    %5 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i0> 
    %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
    %6 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %7 = comb.xor %6, %true : i1
    %8 = comb.xor %11, %true : i1
    %9 = comb.or %7, %8 : i1
    %data1_reg = sv.reg sym @data1_reg : !hw.inout<i0> 
    %10 = sv.read_inout %data1_reg : !hw.inout<i0>
    %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
    %11 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %12 = comb.mux %11, %11, %6 : i1
    %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i0> 
    %13 = sv.read_inout %ctrl_data1_reg : !hw.inout<i0>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %c0_i0 = hw.constant 0 : i0
      %15 = sv.read_inout %valid0_reg : !hw.inout<i1>
      %16 = sv.read_inout %data0_reg : !hw.inout<i0>
      %17 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %18 = comb.xor %9, %true_0 : i1
      %true_1 = hw.constant true
      %19 = comb.xor %17, %true_1 : i1
      %20 = comb.and %18, %19 : i1
      %21 = comb.and %9, %17 : i1
      %22 = sv.read_inout %ctrl_data0_reg : !hw.inout<i0>
      %23 = sv.read_inout %valid1_reg : !hw.inout<i1>
      %24 = sv.read_inout %data1_reg : !hw.inout<i0>
      %25 = sv.read_inout %ready1_reg : !hw.inout<i1>
      %26 = comb.xor %out0_ready, %true_0 : i1
      %true_2 = hw.constant true
      %27 = comb.xor %25, %true_2 : i1
      %28 = comb.and %26, %27 : i1
      %29 = comb.and %out0_ready, %25 : i1
      %30 = sv.read_inout %ctrl_data1_reg : !hw.inout<i0>
      %31 = comb.mux %3, %in0_valid, %15 : i1
      sv.passign %valid0_reg, %31 : i1
      %32 = comb.mux %3, %in0, %4 : i0
      sv.passign %data0_reg, %32 : i0
      %33 = comb.xor %21, %true_0 : i1
      %34 = comb.mux %20, %15, %17 : i1
      %35 = comb.and %33, %34 : i1
      sv.passign %ready0_reg, %35 : i1
      %36 = comb.mux %20, %16, %22 : i0
      %37 = comb.mux %21, %c0_i0, %36 : i0
      sv.passign %ctrl_data0_reg, %37 : i0
      %38 = comb.mux %17, %17, %15 : i1
      %39 = comb.mux %9, %38, %23 : i1
      sv.passign %valid1_reg, %39 : i1
      %40 = comb.mux %17, %22, %16 : i0
      %41 = comb.mux %9, %40, %10 : i0
      sv.passign %data1_reg, %41 : i0
      %42 = comb.xor %29, %true_0 : i1
      %43 = comb.mux %28, %23, %25 : i1
      %44 = comb.and %42, %43 : i1
      sv.passign %ready1_reg, %44 : i1
      %45 = comb.mux %28, %24, %30 : i0
      %46 = comb.mux %29, %c0_i0, %45 : i0
      sv.passign %ctrl_data1_reg, %46 : i0
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      %c0_i0 = hw.constant 0 : i0
      sv.passign %valid0_reg, %false : i1
      sv.passign %data0_reg, %c0_i0 : i0
      sv.passign %ready0_reg, %false : i1
      sv.passign %ctrl_data0_reg, %c0_i0 : i0
      sv.passign %valid1_reg, %false : i1
      sv.passign %data1_reg, %c0_i0 : i0
      sv.passign %ready1_reg, %false : i1
      sv.passign %ctrl_data1_reg, %c0_i0 : i0
    }
    %14 = comb.mux %11, %13, %10 : i0
    hw.output %3, %14, %12 : i1, i0, i1
  }
  hw.module @handshake_fork_1ins_14outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, in %out5_ready : i1, in %out6_ready : i1, in %out7_ready : i1, in %out8_ready : i1, in %out9_ready : i1, in %out10_ready : i1, in %out11_ready : i1, in %out12_ready : i1, in %out13_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1, out out4 : i0, out out4_valid : i1, out out5 : i0, out out5_valid : i1, out out6 : i0, out out6_valid : i1, out out7 : i0, out out7_valid : i1, out out8 : i0, out out8_valid : i1, out out9 : i0, out out9_valid : i1, out out10 : i0, out out10_valid : i1, out out11 : i0, out out11_valid : i1, out out12 : i0, out out12_valid : i1, out out13 : i0, out out13_valid : i1) {
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = comb.and %out0_ready, %2 : i1
    %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %in0_valid : i1
    %8 = comb.and %out1_ready, %7 : i1
    %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %10 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %11 = comb.xor %10, %true : i1
    %12 = comb.and %11, %in0_valid : i1
    %13 = comb.and %out2_ready, %12 : i1
    %14 = comb.or %13, %10 {sv.namehint = "done2"} : i1
    %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
    %15 = sv.read_inout %emitted_3 : !hw.inout<i1>
    %16 = comb.xor %15, %true : i1
    %17 = comb.and %16, %in0_valid : i1
    %18 = comb.and %out3_ready, %17 : i1
    %19 = comb.or %18, %15 {sv.namehint = "done3"} : i1
    %emitted_4 = sv.reg sym @emitted_4 : !hw.inout<i1> 
    %20 = sv.read_inout %emitted_4 : !hw.inout<i1>
    %21 = comb.xor %20, %true : i1
    %22 = comb.and %21, %in0_valid : i1
    %23 = comb.and %out4_ready, %22 : i1
    %24 = comb.or %23, %20 {sv.namehint = "done4"} : i1
    %emitted_5 = sv.reg sym @emitted_5 : !hw.inout<i1> 
    %25 = sv.read_inout %emitted_5 : !hw.inout<i1>
    %26 = comb.xor %25, %true : i1
    %27 = comb.and %26, %in0_valid : i1
    %28 = comb.and %out5_ready, %27 : i1
    %29 = comb.or %28, %25 {sv.namehint = "done5"} : i1
    %emitted_6 = sv.reg sym @emitted_6 : !hw.inout<i1> 
    %30 = sv.read_inout %emitted_6 : !hw.inout<i1>
    %31 = comb.xor %30, %true : i1
    %32 = comb.and %31, %in0_valid : i1
    %33 = comb.and %out6_ready, %32 : i1
    %34 = comb.or %33, %30 {sv.namehint = "done6"} : i1
    %emitted_7 = sv.reg sym @emitted_7 : !hw.inout<i1> 
    %35 = sv.read_inout %emitted_7 : !hw.inout<i1>
    %36 = comb.xor %35, %true : i1
    %37 = comb.and %36, %in0_valid : i1
    %38 = comb.and %out7_ready, %37 : i1
    %39 = comb.or %38, %35 {sv.namehint = "done7"} : i1
    %emitted_8 = sv.reg sym @emitted_8 : !hw.inout<i1> 
    %40 = sv.read_inout %emitted_8 : !hw.inout<i1>
    %41 = comb.xor %40, %true : i1
    %42 = comb.and %41, %in0_valid : i1
    %43 = comb.and %out8_ready, %42 : i1
    %44 = comb.or %43, %40 {sv.namehint = "done8"} : i1
    %emitted_9 = sv.reg sym @emitted_9 : !hw.inout<i1> 
    %45 = sv.read_inout %emitted_9 : !hw.inout<i1>
    %46 = comb.xor %45, %true : i1
    %47 = comb.and %46, %in0_valid : i1
    %48 = comb.and %out9_ready, %47 : i1
    %49 = comb.or %48, %45 {sv.namehint = "done9"} : i1
    %emitted_10 = sv.reg sym @emitted_10 : !hw.inout<i1> 
    %50 = sv.read_inout %emitted_10 : !hw.inout<i1>
    %51 = comb.xor %50, %true : i1
    %52 = comb.and %51, %in0_valid : i1
    %53 = comb.and %out10_ready, %52 : i1
    %54 = comb.or %53, %50 {sv.namehint = "done10"} : i1
    %emitted_11 = sv.reg sym @emitted_11 : !hw.inout<i1> 
    %55 = sv.read_inout %emitted_11 : !hw.inout<i1>
    %56 = comb.xor %55, %true : i1
    %57 = comb.and %56, %in0_valid : i1
    %58 = comb.and %out11_ready, %57 : i1
    %59 = comb.or %58, %55 {sv.namehint = "done11"} : i1
    %emitted_12 = sv.reg sym @emitted_12 : !hw.inout<i1> 
    %60 = sv.read_inout %emitted_12 : !hw.inout<i1>
    %61 = comb.xor %60, %true : i1
    %62 = comb.and %61, %in0_valid : i1
    %63 = comb.and %out12_ready, %62 : i1
    %64 = comb.or %63, %60 {sv.namehint = "done12"} : i1
    %emitted_13 = sv.reg sym @emitted_13 : !hw.inout<i1> 
    %65 = sv.read_inout %emitted_13 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %71 = comb.xor %70, %true_0 : i1
      %72 = comb.and %4, %71 : i1
      sv.passign %emitted_0, %72 : i1
      %73 = comb.xor %70, %true_0 : i1
      %74 = comb.and %9, %73 : i1
      sv.passign %emitted_1, %74 : i1
      %75 = comb.xor %70, %true_0 : i1
      %76 = comb.and %14, %75 : i1
      sv.passign %emitted_2, %76 : i1
      %77 = comb.xor %70, %true_0 : i1
      %78 = comb.and %19, %77 : i1
      sv.passign %emitted_3, %78 : i1
      %79 = comb.xor %70, %true_0 : i1
      %80 = comb.and %24, %79 : i1
      sv.passign %emitted_4, %80 : i1
      %81 = comb.xor %70, %true_0 : i1
      %82 = comb.and %29, %81 : i1
      sv.passign %emitted_5, %82 : i1
      %83 = comb.xor %70, %true_0 : i1
      %84 = comb.and %34, %83 : i1
      sv.passign %emitted_6, %84 : i1
      %85 = comb.xor %70, %true_0 : i1
      %86 = comb.and %39, %85 : i1
      sv.passign %emitted_7, %86 : i1
      %87 = comb.xor %70, %true_0 : i1
      %88 = comb.and %44, %87 : i1
      sv.passign %emitted_8, %88 : i1
      %89 = comb.xor %70, %true_0 : i1
      %90 = comb.and %49, %89 : i1
      sv.passign %emitted_9, %90 : i1
      %91 = comb.xor %70, %true_0 : i1
      %92 = comb.and %54, %91 : i1
      sv.passign %emitted_10, %92 : i1
      %93 = comb.xor %70, %true_0 : i1
      %94 = comb.and %59, %93 : i1
      sv.passign %emitted_11, %94 : i1
      %95 = comb.xor %70, %true_0 : i1
      %96 = comb.and %64, %95 : i1
      sv.passign %emitted_12, %96 : i1
      %97 = comb.xor %70, %true_0 : i1
      %98 = comb.and %69, %97 : i1
      sv.passign %emitted_13, %98 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
      sv.passign %emitted_3, %false : i1
      sv.passign %emitted_4, %false : i1
      sv.passign %emitted_5, %false : i1
      sv.passign %emitted_6, %false : i1
      sv.passign %emitted_7, %false : i1
      sv.passign %emitted_8, %false : i1
      sv.passign %emitted_9, %false : i1
      sv.passign %emitted_10, %false : i1
      sv.passign %emitted_11, %false : i1
      sv.passign %emitted_12, %false : i1
      sv.passign %emitted_13, %false : i1
    }
    %66 = comb.xor %65, %true : i1
    %67 = comb.and %66, %in0_valid : i1
    %68 = comb.and %out13_ready, %67 : i1
    %69 = comb.or %68, %65 {sv.namehint = "done13"} : i1
    %70 = comb.and %4, %9, %14, %19, %24, %29, %34, %39, %44, %49, %54, %59, %64, %69 {sv.namehint = "allDone"} : i1
    hw.output %70, %in0, %2, %in0, %7, %in0, %12, %in0, %17, %in0, %22, %in0, %27, %in0, %32, %in0, %37, %in0, %42, %in0, %47, %in0, %52, %in0, %57, %in0, %62, %in0, %67 : i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id2(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %clock : i1, in %reset : i1, in %stDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stDone0 : i0, out stDone0_valid : i1) {
    %true = hw.constant true
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_2 = sv.reg : !hw.inout<uarray<3xi64>> 
    %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
    %0 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %4 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
      %5 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
      sv.if %5 {
        %7 = comb.extract %stAddr0 from 0 : (i64) -> i2
        %8 = sv.array_index_inout %_handshake_memory_2[%7] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %8, %stData0 : i64
      }
      %6 = comb.mux %3, %5, %4 : i1
      sv.passign %writeValidBuffer, %6 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %writeValidBuffer, %false : i1
    }
    %1 = comb.and %stDone0_ready, %0 {sv.namehint = "storeCompleted"} : i1
    %2 = comb.xor %0, %true : i1
    %3 = comb.or %2, %1 {sv.namehint = "emptyOrComplete"} : i1
    hw.output %3, %3, %c0_i0, %0 : i1, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id1(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : i1, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
    %true = hw.constant true
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_1 = sv.reg : !hw.inout<uarray<3xi64>> 
    %0 = comb.extract %ldAddr0 from 0 : (i64) -> i2
    %1 = sv.array_index_inout %_handshake_memory_1[%0] : !hw.inout<uarray<3xi64>>, i2
    %2 = sv.read_inout %1 : !hw.inout<i64>
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %3 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %4 = comb.xor %3, %true : i1
    %5 = comb.and %4, %ldAddr0_valid : i1
    %6 = comb.and %ldData0_ready, %5 : i1
    %7 = comb.or %6, %3 {sv.namehint = "done0"} : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %9 = comb.xor %8, %true : i1
    %10 = comb.and %9, %ldAddr0_valid : i1
    %11 = comb.and %ldDone0_ready, %10 : i1
    %12 = comb.or %11, %8 {sv.namehint = "done1"} : i1
    %13 = comb.and %7, %12 {sv.namehint = "allDone"} : i1
    %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
    %14 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    %15 = comb.and %stDone0_ready, %14 {sv.namehint = "storeCompleted"} : i1
    %16 = comb.xor %14, %true : i1
    %17 = comb.or %16, %15 {sv.namehint = "emptyOrComplete"} : i1
    %writeValidBuffer_0 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
    %18 = sv.read_inout %writeValidBuffer_0 : !hw.inout<i1>
    %19 = comb.and %stDone1_ready, %18 {sv.namehint = "storeCompleted"} : i1
    %20 = comb.xor %18, %true : i1
    %21 = comb.or %20, %19 {sv.namehint = "emptyOrComplete"} : i1
    %writeValidBuffer_1 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
    %22 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_2 = hw.constant true
      %26 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
      %27 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
      %28 = sv.read_inout %writeValidBuffer_0 : !hw.inout<i1>
      %29 = comb.and %stAddr1_valid, %stData1_valid {sv.namehint = "writeValid"} : i1
      %30 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
      %31 = comb.and %stAddr2_valid, %stData2_valid {sv.namehint = "writeValid"} : i1
      sv.if %31 {
        %39 = comb.extract %stAddr2 from 0 : (i64) -> i2
        %40 = sv.array_index_inout %_handshake_memory_1[%39] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %40, %stData2 : i64
      }
      sv.if %29 {
        %39 = comb.extract %stAddr1 from 0 : (i64) -> i2
        %40 = sv.array_index_inout %_handshake_memory_1[%39] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %40, %stData1 : i64
      }
      sv.if %27 {
        %39 = comb.extract %stAddr0 from 0 : (i64) -> i2
        %40 = sv.array_index_inout %_handshake_memory_1[%39] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %40, %stData0 : i64
      }
      %32 = comb.xor %13, %true_2 : i1
      %33 = comb.and %7, %32 : i1
      sv.passign %emitted_0, %33 : i1
      %34 = comb.xor %13, %true_2 : i1
      %35 = comb.and %12, %34 : i1
      sv.passign %emitted_1, %35 : i1
      %36 = comb.mux %17, %27, %26 : i1
      sv.passign %writeValidBuffer, %36 : i1
      %37 = comb.mux %21, %29, %28 : i1
      sv.passign %writeValidBuffer_0, %37 : i1
      %38 = comb.mux %25, %31, %30 : i1
      sv.passign %writeValidBuffer_1, %38 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %writeValidBuffer, %false : i1
      sv.passign %writeValidBuffer_0, %false : i1
      sv.passign %writeValidBuffer_1, %false : i1
    }
    %23 = comb.and %stDone2_ready, %22 {sv.namehint = "storeCompleted"} : i1
    %24 = comb.xor %22, %true : i1
    %25 = comb.or %24, %23 {sv.namehint = "emptyOrComplete"} : i1
    hw.output %17, %17, %21, %21, %25, %25, %13, %2, %5, %c0_i0, %14, %c0_i0, %18, %c0_i0, %22, %c0_i0, %10 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_buffer_in_ui64_out_ui64_2slots_seq(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1) {
    %true = hw.constant true
    %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
    %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.xor %5, %true : i1
    %3 = comb.or %1, %2 : i1
    %data0_reg = sv.reg sym @data0_reg : !hw.inout<i64> 
    %4 = sv.read_inout %data0_reg : !hw.inout<i64>
    %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
    %5 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i64> 
    %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
    %6 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %7 = comb.xor %6, %true : i1
    %8 = comb.xor %11, %true : i1
    %9 = comb.or %7, %8 : i1
    %data1_reg = sv.reg sym @data1_reg : !hw.inout<i64> 
    %10 = sv.read_inout %data1_reg : !hw.inout<i64>
    %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
    %11 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %12 = comb.mux %11, %11, %6 : i1
    %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i64> 
    %13 = sv.read_inout %ctrl_data1_reg : !hw.inout<i64>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %c0_i64 = hw.constant 0 : i64
      %15 = sv.read_inout %valid0_reg : !hw.inout<i1>
      %16 = sv.read_inout %data0_reg : !hw.inout<i64>
      %17 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %18 = comb.xor %9, %true_0 : i1
      %true_1 = hw.constant true
      %19 = comb.xor %17, %true_1 : i1
      %20 = comb.and %18, %19 : i1
      %21 = comb.and %9, %17 : i1
      %22 = sv.read_inout %ctrl_data0_reg : !hw.inout<i64>
      %23 = sv.read_inout %valid1_reg : !hw.inout<i1>
      %24 = sv.read_inout %data1_reg : !hw.inout<i64>
      %25 = sv.read_inout %ready1_reg : !hw.inout<i1>
      %26 = comb.xor %out0_ready, %true_0 : i1
      %true_2 = hw.constant true
      %27 = comb.xor %25, %true_2 : i1
      %28 = comb.and %26, %27 : i1
      %29 = comb.and %out0_ready, %25 : i1
      %30 = sv.read_inout %ctrl_data1_reg : !hw.inout<i64>
      %31 = comb.mux %3, %in0_valid, %15 : i1
      sv.passign %valid0_reg, %31 : i1
      %32 = comb.mux %3, %in0, %4 : i64
      sv.passign %data0_reg, %32 : i64
      %33 = comb.xor %21, %true_0 : i1
      %34 = comb.mux %20, %15, %17 : i1
      %35 = comb.and %33, %34 : i1
      sv.passign %ready0_reg, %35 : i1
      %36 = comb.mux %20, %16, %22 : i64
      %37 = comb.mux %21, %c0_i64, %36 : i64
      sv.passign %ctrl_data0_reg, %37 : i64
      %38 = comb.mux %17, %17, %15 : i1
      %39 = comb.mux %9, %38, %23 : i1
      sv.passign %valid1_reg, %39 : i1
      %40 = comb.mux %17, %22, %16 : i64
      %41 = comb.mux %9, %40, %10 : i64
      sv.passign %data1_reg, %41 : i64
      %42 = comb.xor %29, %true_0 : i1
      %43 = comb.mux %28, %23, %25 : i1
      %44 = comb.and %42, %43 : i1
      sv.passign %ready1_reg, %44 : i1
      %45 = comb.mux %28, %24, %30 : i64
      %46 = comb.mux %29, %c0_i64, %45 : i64
      sv.passign %ctrl_data1_reg, %46 : i64
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      %c0_i64 = hw.constant 0 : i64
      sv.passign %valid0_reg, %false : i1
      sv.passign %data0_reg, %c0_i64 : i64
      sv.passign %ready0_reg, %false : i1
      sv.passign %ctrl_data0_reg, %c0_i64 : i64
      sv.passign %valid1_reg, %false : i1
      sv.passign %data1_reg, %c0_i64 : i64
      sv.passign %ready1_reg, %false : i1
      sv.passign %ctrl_data1_reg, %c0_i64 : i64
    }
    %14 = comb.mux %11, %13, %10 : i64
    hw.output %3, %14, %12 : i1, i64, i1
  }
  hw.module @handshake_fork_1ins_2outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1) {
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = comb.and %out0_ready, %2 : i1
    %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %11 = comb.xor %10, %true_0 : i1
      %12 = comb.and %4, %11 : i1
      sv.passign %emitted_0, %12 : i1
      %13 = comb.xor %10, %true_0 : i1
      %14 = comb.and %9, %13 : i1
      sv.passign %emitted_1, %14 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
    }
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %in0_valid : i1
    %8 = comb.and %out1_ready, %7 : i1
    %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
    %10 = comb.and %4, %9 {sv.namehint = "allDone"} : i1
    hw.output %10, %in0, %2, %in0, %7 : i1, i0, i1, i0, i1
  }
  hw.module @handshake_fork_1ins_3outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1) {
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = comb.and %out0_ready, %2 : i1
    %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %in0_valid : i1
    %8 = comb.and %out1_ready, %7 : i1
    %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %10 = sv.read_inout %emitted_2 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %16 = comb.xor %15, %true_0 : i1
      %17 = comb.and %4, %16 : i1
      sv.passign %emitted_0, %17 : i1
      %18 = comb.xor %15, %true_0 : i1
      %19 = comb.and %9, %18 : i1
      sv.passign %emitted_1, %19 : i1
      %20 = comb.xor %15, %true_0 : i1
      %21 = comb.and %14, %20 : i1
      sv.passign %emitted_2, %21 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
    }
    %11 = comb.xor %10, %true : i1
    %12 = comb.and %11, %in0_valid : i1
    %13 = comb.and %out2_ready, %12 : i1
    %14 = comb.or %13, %10 {sv.namehint = "done2"} : i1
    %15 = comb.and %4, %9, %14 {sv.namehint = "allDone"} : i1
    hw.output %15, %in0, %2, %in0, %7, %in0, %12 : i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id0(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : i1, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
    %true = hw.constant true
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_0 = sv.reg : !hw.inout<uarray<3xi64>> 
    %0 = comb.extract %ldAddr0 from 0 : (i64) -> i2
    %1 = sv.array_index_inout %_handshake_memory_0[%0] : !hw.inout<uarray<3xi64>>, i2
    %2 = sv.read_inout %1 : !hw.inout<i64>
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %3 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %4 = comb.xor %3, %true : i1
    %5 = comb.and %4, %ldAddr0_valid : i1
    %6 = comb.and %ldData0_ready, %5 : i1
    %7 = comb.or %6, %3 {sv.namehint = "done0"} : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %9 = comb.xor %8, %true : i1
    %10 = comb.and %9, %ldAddr0_valid : i1
    %11 = comb.and %ldDone0_ready, %10 : i1
    %12 = comb.or %11, %8 {sv.namehint = "done1"} : i1
    %13 = comb.and %7, %12 {sv.namehint = "allDone"} : i1
    %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
    %14 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    %15 = comb.and %stDone0_ready, %14 {sv.namehint = "storeCompleted"} : i1
    %16 = comb.xor %14, %true : i1
    %17 = comb.or %16, %15 {sv.namehint = "emptyOrComplete"} : i1
    %writeValidBuffer_0 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
    %18 = sv.read_inout %writeValidBuffer_0 : !hw.inout<i1>
    %19 = comb.and %stDone1_ready, %18 {sv.namehint = "storeCompleted"} : i1
    %20 = comb.xor %18, %true : i1
    %21 = comb.or %20, %19 {sv.namehint = "emptyOrComplete"} : i1
    %writeValidBuffer_1 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
    %22 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_2 = hw.constant true
      %26 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
      %27 = comb.and %stAddr0_valid, %stData0_valid {sv.namehint = "writeValid"} : i1
      %28 = sv.read_inout %writeValidBuffer_0 : !hw.inout<i1>
      %29 = comb.and %stAddr1_valid, %stData1_valid {sv.namehint = "writeValid"} : i1
      %30 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
      %31 = comb.and %stAddr2_valid, %stData2_valid {sv.namehint = "writeValid"} : i1
      sv.if %31 {
        %39 = comb.extract %stAddr2 from 0 : (i64) -> i2
        %40 = sv.array_index_inout %_handshake_memory_0[%39] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %40, %stData2 : i64
      }
      sv.if %29 {
        %39 = comb.extract %stAddr1 from 0 : (i64) -> i2
        %40 = sv.array_index_inout %_handshake_memory_0[%39] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %40, %stData1 : i64
      }
      sv.if %27 {
        %39 = comb.extract %stAddr0 from 0 : (i64) -> i2
        %40 = sv.array_index_inout %_handshake_memory_0[%39] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %40, %stData0 : i64
      }
      %32 = comb.xor %13, %true_2 : i1
      %33 = comb.and %7, %32 : i1
      sv.passign %emitted_0, %33 : i1
      %34 = comb.xor %13, %true_2 : i1
      %35 = comb.and %12, %34 : i1
      sv.passign %emitted_1, %35 : i1
      %36 = comb.mux %17, %27, %26 : i1
      sv.passign %writeValidBuffer, %36 : i1
      %37 = comb.mux %21, %29, %28 : i1
      sv.passign %writeValidBuffer_0, %37 : i1
      %38 = comb.mux %25, %31, %30 : i1
      sv.passign %writeValidBuffer_1, %38 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %writeValidBuffer, %false : i1
      sv.passign %writeValidBuffer_0, %false : i1
      sv.passign %writeValidBuffer_1, %false : i1
    }
    %23 = comb.and %stDone2_ready, %22 {sv.namehint = "storeCompleted"} : i1
    %24 = comb.xor %22, %true : i1
    %25 = comb.or %24, %23 {sv.namehint = "emptyOrComplete"} : i1
    hw.output %17, %17, %21, %21, %25, %25, %13, %2, %5, %c0_i0, %14, %c0_i0, %18, %c0_i0, %22, %c0_i0, %10 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_join_7ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %in4 : i0, in %in4_valid : i1, in %in5 : i0, in %in5_valid : i1, in %in6 : i0, in %in6_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out in4_ready : i1, out in5_ready : i1, out in6_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid, %in2_valid, %in3_valid, %in4_valid, %in5_valid, %in6_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %1, %1, %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i1, i1, i1, i1, i0, i1
  }
  hw.module @handshake_constant_c3_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c3_i64 = hw.constant 3 : i64
    hw.output %out0_ready, %c3_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1) {
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = comb.and %out0_ready, %2 : i1
    %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %11 = comb.xor %10, %true_0 : i1
      %12 = comb.and %4, %11 : i1
      sv.passign %emitted_0, %12 : i1
      %13 = comb.xor %10, %true_0 : i1
      %14 = comb.and %9, %13 : i1
      sv.passign %emitted_1, %14 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
    }
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %in0_valid : i1
    %8 = comb.and %out1_ready, %7 : i1
    %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
    %10 = comb.and %4, %9 {sv.namehint = "allDone"} : i1
    hw.output %10, %in0, %2, %in0, %7 : i1, i64, i1, i64, i1
  }
  hw.module @handshake_constant_c2_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c2_i64 = hw.constant 2 : i64
    hw.output %out0_ready, %c2_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_constant_c1_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c1_i64 = hw.constant 1 : i64
    hw.output %out0_ready, %c1_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1) {
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = comb.and %out0_ready, %2 : i1
    %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %in0_valid : i1
    %8 = comb.and %out1_ready, %7 : i1
    %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %10 = sv.read_inout %emitted_2 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %16 = comb.xor %15, %true_0 : i1
      %17 = comb.and %4, %16 : i1
      sv.passign %emitted_0, %17 : i1
      %18 = comb.xor %15, %true_0 : i1
      %19 = comb.and %9, %18 : i1
      sv.passign %emitted_1, %19 : i1
      %20 = comb.xor %15, %true_0 : i1
      %21 = comb.and %14, %20 : i1
      sv.passign %emitted_2, %21 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
    }
    %11 = comb.xor %10, %true : i1
    %12 = comb.and %11, %in0_valid : i1
    %13 = comb.and %out2_ready, %12 : i1
    %14 = comb.or %13, %10 {sv.namehint = "done2"} : i1
    %15 = comb.and %4, %9, %14 {sv.namehint = "allDone"} : i1
    hw.output %15, %in0, %2, %in0, %7, %in0, %12 : i1, i64, i1, i64, i1, i64, i1
  }
  hw.module @handshake_constant_c0_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c0_i64 = hw.constant 0 : i64
    hw.output %out0_ready, %c0_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_store_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataIn : i64, in %dataIn_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataToMem_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataIn_ready : i1, out ctrl_ready : i1, out dataToMem : i64, out dataToMem_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
    %0 = comb.and %dataIn_valid, %addrIn0_valid, %ctrl_valid : i1
    %1 = comb.and %dataToMem_ready, %addrOut0_ready, %0 : i1
    hw.output %1, %1, %1, %dataIn, %0, %addrIn0, %0 : i1, i1, i1, i64, i1, i64, i1
  }
  hw.module @handshake_join_2ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %c0_i0, %0 : i1, i1, i0, i1
  }
  hw.module @handshake_join_3ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid, %in2_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i0, i1
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
    %true = hw.constant true
    %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
    %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.xor %5, %true : i1
    %3 = comb.or %1, %2 : i1
    %data0_reg = sv.reg sym @data0_reg : !hw.inout<i1> 
    %4 = sv.read_inout %data0_reg : !hw.inout<i1>
    %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
    %5 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %6 = comb.mux %5, %5, %0 : i1
    %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i1> 
    %7 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %9 = sv.read_inout %valid0_reg : !hw.inout<i1>
      %10 = sv.read_inout %data0_reg : !hw.inout<i1>
      %11 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %12 = comb.xor %out0_ready, %true_0 : i1
      %true_1 = hw.constant true
      %13 = comb.xor %11, %true_1 : i1
      %14 = comb.and %12, %13 : i1
      %15 = comb.and %out0_ready, %11 : i1
      %16 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
      %17 = comb.mux %3, %in0_valid, %9 : i1
      sv.passign %valid0_reg, %17 : i1
      %18 = comb.mux %3, %in0, %4 : i1
      sv.passign %data0_reg, %18 : i1
      %19 = comb.xor %15, %true_0 : i1
      %20 = comb.mux %14, %9, %11 : i1
      %21 = comb.and %19, %20 : i1
      sv.passign %ready0_reg, %21 : i1
      %22 = comb.xor %15, %true_0 : i1
      %23 = comb.mux %14, %10, %16 : i1
      %24 = comb.and %22, %23 : i1
      sv.passign %ctrl_data0_reg, %24 : i1
    }(syncreset : posedge %reset) {
      %true_0 = hw.constant true
      %false = hw.constant false
      sv.passign %valid0_reg, %true_0 : i1
      sv.passign %data0_reg, %false : i1
      sv.passign %ready0_reg, %false : i1
      sv.passign %ctrl_data0_reg, %false : i1
    }
    %8 = comb.mux %5, %7, %4 : i1
    hw.output %3, %8, %6 : i1, i1, i1
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1) {
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = comb.and %out0_ready, %2 : i1
    %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %in0_valid : i1
    %8 = comb.and %out1_ready, %7 : i1
    %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %10 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %11 = comb.xor %10, %true : i1
    %12 = comb.and %11, %in0_valid : i1
    %13 = comb.and %out2_ready, %12 : i1
    %14 = comb.or %13, %10 {sv.namehint = "done2"} : i1
    %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
    %15 = sv.read_inout %emitted_3 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %21 = comb.xor %20, %true_0 : i1
      %22 = comb.and %4, %21 : i1
      sv.passign %emitted_0, %22 : i1
      %23 = comb.xor %20, %true_0 : i1
      %24 = comb.and %9, %23 : i1
      sv.passign %emitted_1, %24 : i1
      %25 = comb.xor %20, %true_0 : i1
      %26 = comb.and %14, %25 : i1
      sv.passign %emitted_2, %26 : i1
      %27 = comb.xor %20, %true_0 : i1
      %28 = comb.and %19, %27 : i1
      sv.passign %emitted_3, %28 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
      sv.passign %emitted_3, %false : i1
    }
    %16 = comb.xor %15, %true : i1
    %17 = comb.and %16, %in0_valid : i1
    %18 = comb.and %out3_ready, %17 : i1
    %19 = comb.or %18, %15 {sv.namehint = "done3"} : i1
    %20 = comb.and %4, %9, %14, %19 {sv.namehint = "allDone"} : i1
    hw.output %20, %in0, %2, %in0, %7, %in0, %12, %in0, %17 : i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_2slots_seq(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
    %true = hw.constant true
    %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
    %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.xor %5, %true : i1
    %3 = comb.or %1, %2 : i1
    %data0_reg = sv.reg sym @data0_reg : !hw.inout<i1> 
    %4 = sv.read_inout %data0_reg : !hw.inout<i1>
    %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
    %5 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i1> 
    %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
    %6 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %7 = comb.xor %6, %true : i1
    %8 = comb.xor %11, %true : i1
    %9 = comb.or %7, %8 : i1
    %data1_reg = sv.reg sym @data1_reg : !hw.inout<i1> 
    %10 = sv.read_inout %data1_reg : !hw.inout<i1>
    %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
    %11 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %12 = comb.mux %11, %11, %6 : i1
    %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i1> 
    %13 = sv.read_inout %ctrl_data1_reg : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %15 = sv.read_inout %valid0_reg : !hw.inout<i1>
      %16 = sv.read_inout %data0_reg : !hw.inout<i1>
      %17 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %18 = comb.xor %9, %true_0 : i1
      %true_1 = hw.constant true
      %19 = comb.xor %17, %true_1 : i1
      %20 = comb.and %18, %19 : i1
      %21 = comb.and %9, %17 : i1
      %22 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
      %23 = sv.read_inout %valid1_reg : !hw.inout<i1>
      %24 = sv.read_inout %data1_reg : !hw.inout<i1>
      %25 = sv.read_inout %ready1_reg : !hw.inout<i1>
      %26 = comb.xor %out0_ready, %true_0 : i1
      %true_2 = hw.constant true
      %27 = comb.xor %25, %true_2 : i1
      %28 = comb.and %26, %27 : i1
      %29 = comb.and %out0_ready, %25 : i1
      %30 = sv.read_inout %ctrl_data1_reg : !hw.inout<i1>
      %31 = comb.mux %3, %in0_valid, %15 : i1
      sv.passign %valid0_reg, %31 : i1
      %32 = comb.mux %3, %in0, %4 : i1
      sv.passign %data0_reg, %32 : i1
      %33 = comb.xor %21, %true_0 : i1
      %34 = comb.mux %20, %15, %17 : i1
      %35 = comb.and %33, %34 : i1
      sv.passign %ready0_reg, %35 : i1
      %36 = comb.xor %21, %true_0 : i1
      %37 = comb.mux %20, %16, %22 : i1
      %38 = comb.and %36, %37 : i1
      sv.passign %ctrl_data0_reg, %38 : i1
      %39 = comb.mux %17, %17, %15 : i1
      %40 = comb.mux %9, %39, %23 : i1
      sv.passign %valid1_reg, %40 : i1
      %41 = comb.mux %17, %22, %16 : i1
      %42 = comb.mux %9, %41, %10 : i1
      sv.passign %data1_reg, %42 : i1
      %43 = comb.xor %29, %true_0 : i1
      %44 = comb.mux %28, %23, %25 : i1
      %45 = comb.and %43, %44 : i1
      sv.passign %ready1_reg, %45 : i1
      %46 = comb.xor %29, %true_0 : i1
      %47 = comb.mux %28, %24, %30 : i1
      %48 = comb.and %46, %47 : i1
      sv.passign %ctrl_data1_reg, %48 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %valid0_reg, %false : i1
      sv.passign %data0_reg, %false : i1
      sv.passign %ready0_reg, %false : i1
      sv.passign %ctrl_data0_reg, %false : i1
      sv.passign %valid1_reg, %false : i1
      sv.passign %data1_reg, %false : i1
      sv.passign %ready1_reg, %false : i1
      sv.passign %ctrl_data1_reg, %false : i1
    }
    %14 = comb.mux %11, %13, %10 : i1
    hw.output %3, %14, %12 : i1, i1, i1
  }
  hw.module @handshake_mux_in_ui1_3ins_1outs_ctrl(in %select : i1, in %select_valid : i1, in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %0 = comb.concat %false, %select : i1, i1
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = comb.mux %select, %in1_valid, %in0_valid : i1
    %3 = comb.and %2, %select_valid : i1
    %4 = comb.and %3, %out0_ready : i1
    %5 = comb.extract %1 from 0 : (i2) -> i1
    %6 = comb.and %5, %4 : i1
    %7 = comb.extract %1 from 1 : (i2) -> i1
    %8 = comb.and %7, %4 : i1
    %9 = comb.mux %select, %in1, %in0 : i0
    hw.output %4, %6, %8, %9, %3 : i1, i1, i1, i0, i1
  }
  hw.module @handshake_mux_in_ui1_ui64_ui64_out_ui64(in %select : i1, in %select_valid : i1, in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %0 = comb.concat %false, %select : i1, i1
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = comb.mux %select, %in1_valid, %in0_valid : i1
    %3 = comb.and %2, %select_valid : i1
    %4 = comb.and %3, %out0_ready : i1
    %5 = comb.extract %1 from 0 : (i2) -> i1
    %6 = comb.and %5, %4 : i1
    %7 = comb.extract %1 from 1 : (i2) -> i1
    %8 = comb.and %7, %4 : i1
    %9 = comb.mux %select, %in1, %in0 : i64
    hw.output %4, %6, %8, %9, %3 : i1, i1, i1, i64, i1
  }
  hw.module @arith_cmpi_in_ui64_ui64_out_ui1_slt(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i1, out out0_valid : i1) {
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    %2 = comb.icmp slt %in0, %in1 : i64
    hw.output %1, %1, %2, %0 : i1, i1, i1, i1
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1, out out4 : i1, out out4_valid : i1) {
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = comb.and %out0_ready, %2 : i1
    %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %in0_valid : i1
    %8 = comb.and %out1_ready, %7 : i1
    %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %10 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %11 = comb.xor %10, %true : i1
    %12 = comb.and %11, %in0_valid : i1
    %13 = comb.and %out2_ready, %12 : i1
    %14 = comb.or %13, %10 {sv.namehint = "done2"} : i1
    %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
    %15 = sv.read_inout %emitted_3 : !hw.inout<i1>
    %16 = comb.xor %15, %true : i1
    %17 = comb.and %16, %in0_valid : i1
    %18 = comb.and %out3_ready, %17 : i1
    %19 = comb.or %18, %15 {sv.namehint = "done3"} : i1
    %emitted_4 = sv.reg sym @emitted_4 : !hw.inout<i1> 
    %20 = sv.read_inout %emitted_4 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %26 = comb.xor %25, %true_0 : i1
      %27 = comb.and %4, %26 : i1
      sv.passign %emitted_0, %27 : i1
      %28 = comb.xor %25, %true_0 : i1
      %29 = comb.and %9, %28 : i1
      sv.passign %emitted_1, %29 : i1
      %30 = comb.xor %25, %true_0 : i1
      %31 = comb.and %14, %30 : i1
      sv.passign %emitted_2, %31 : i1
      %32 = comb.xor %25, %true_0 : i1
      %33 = comb.and %19, %32 : i1
      sv.passign %emitted_3, %33 : i1
      %34 = comb.xor %25, %true_0 : i1
      %35 = comb.and %24, %34 : i1
      sv.passign %emitted_4, %35 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
      sv.passign %emitted_3, %false : i1
      sv.passign %emitted_4, %false : i1
    }
    %21 = comb.xor %20, %true : i1
    %22 = comb.and %21, %in0_valid : i1
    %23 = comb.and %out4_ready, %22 : i1
    %24 = comb.or %23, %20 {sv.namehint = "done4"} : i1
    %25 = comb.and %4, %9, %14, %19, %24 {sv.namehint = "allDone"} : i1
    hw.output %25, %in0, %2, %in0, %7, %in0, %12, %in0, %17, %in0, %22 : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(in %cond : i1, in %cond_valid : i1, in %data : i64, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i64, out outTrue_valid : i1, out outFalse : i64, out outFalse_valid : i1) {
    %true = hw.constant true
    %0 = comb.and %cond_valid, %data_valid : i1
    %1 = comb.and %cond, %0 : i1
    %2 = comb.xor %cond, %true : i1
    %3 = comb.and %2, %0 : i1
    %4 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
    %5 = comb.and %4, %0 : i1
    hw.output %5, %5, %data, %1, %data, %3 : i1, i1, i64, i1, i64, i1
  }
  hw.module @handshake_sink_in_ui64(in %in0 : i64, in %in0_valid : i1, out in0_ready : i1) {
    %true = hw.constant true
    hw.output %true : i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1, out out3 : i64, out out3_valid : i1) {
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = comb.and %out0_ready, %2 : i1
    %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %in0_valid : i1
    %8 = comb.and %out1_ready, %7 : i1
    %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %10 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %11 = comb.xor %10, %true : i1
    %12 = comb.and %11, %in0_valid : i1
    %13 = comb.and %out2_ready, %12 : i1
    %14 = comb.or %13, %10 {sv.namehint = "done2"} : i1
    %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
    %15 = sv.read_inout %emitted_3 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %21 = comb.xor %20, %true_0 : i1
      %22 = comb.and %4, %21 : i1
      sv.passign %emitted_0, %22 : i1
      %23 = comb.xor %20, %true_0 : i1
      %24 = comb.and %9, %23 : i1
      sv.passign %emitted_1, %24 : i1
      %25 = comb.xor %20, %true_0 : i1
      %26 = comb.and %14, %25 : i1
      sv.passign %emitted_2, %26 : i1
      %27 = comb.xor %20, %true_0 : i1
      %28 = comb.and %19, %27 : i1
      sv.passign %emitted_3, %28 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
      sv.passign %emitted_3, %false : i1
    }
    %16 = comb.xor %15, %true : i1
    %17 = comb.and %16, %in0_valid : i1
    %18 = comb.and %out3_ready, %17 : i1
    %19 = comb.or %18, %15 {sv.namehint = "done3"} : i1
    %20 = comb.and %4, %9, %14, %19 {sv.namehint = "allDone"} : i1
    hw.output %20, %in0, %2, %in0, %7, %in0, %12, %in0, %17 : i1, i64, i1, i64, i1, i64, i1, i64, i1
  }
  hw.module @handshake_cond_br_in_ui1_2ins_2outs_ctrl(in %cond : i1, in %cond_valid : i1, in %data : i0, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i0, out outTrue_valid : i1, out outFalse : i0, out outFalse_valid : i1) {
    %true = hw.constant true
    %0 = comb.and %cond_valid, %data_valid : i1
    %1 = comb.and %cond, %0 : i1
    %2 = comb.xor %cond, %true : i1
    %3 = comb.and %2, %0 : i1
    %4 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
    %5 = comb.and %4, %0 : i1
    hw.output %5, %5, %data, %1, %data, %3 : i1, i1, i0, i1, i0, i1
  }
  hw.module @handshake_fork_1ins_4outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1) {
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = comb.and %out0_ready, %2 : i1
    %4 = comb.or %3, %0 {sv.namehint = "done0"} : i1
    %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
    %5 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %in0_valid : i1
    %8 = comb.and %out1_ready, %7 : i1
    %9 = comb.or %8, %5 {sv.namehint = "done1"} : i1
    %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
    %10 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %11 = comb.xor %10, %true : i1
    %12 = comb.and %11, %in0_valid : i1
    %13 = comb.and %out2_ready, %12 : i1
    %14 = comb.or %13, %10 {sv.namehint = "done2"} : i1
    %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
    %15 = sv.read_inout %emitted_3 : !hw.inout<i1>
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %21 = comb.xor %20, %true_0 : i1
      %22 = comb.and %4, %21 : i1
      sv.passign %emitted_0, %22 : i1
      %23 = comb.xor %20, %true_0 : i1
      %24 = comb.and %9, %23 : i1
      sv.passign %emitted_1, %24 : i1
      %25 = comb.xor %20, %true_0 : i1
      %26 = comb.and %14, %25 : i1
      sv.passign %emitted_2, %26 : i1
      %27 = comb.xor %20, %true_0 : i1
      %28 = comb.and %19, %27 : i1
      sv.passign %emitted_3, %28 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
      sv.passign %emitted_3, %false : i1
    }
    %16 = comb.xor %15, %true : i1
    %17 = comb.and %16, %in0_valid : i1
    %18 = comb.and %out3_ready, %17 : i1
    %19 = comb.or %18, %15 {sv.namehint = "done3"} : i1
    %20 = comb.and %4, %9, %14, %19 {sv.namehint = "allDone"} : i1
    hw.output %20, %in0, %2, %in0, %7, %in0, %12, %in0, %17 : i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_join_4ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid, %in2_valid, %in3_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    hw.output %1, %1, %1, %1, %c0_i0, %0 : i1, i1, i1, i1, i0, i1
  }
  hw.module @handshake_load_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataFromMem : i64, in %dataFromMem_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataOut_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataFromMem_ready : i1, out ctrl_ready : i1, out dataOut : i64, out dataOut_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
    %0 = comb.and %addrIn0_valid, %ctrl_valid : i1
    %1 = comb.and %addrOut0_ready, %0 : i1
    hw.output %1, %dataOut_ready, %1, %dataFromMem, %dataFromMem_valid, %addrIn0, %0 : i1, i1, i1, i64, i1, i64, i1
  }
  hw.module @arith_addi_in_ui64_ui64_out_ui64(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = comb.and %out0_ready, %0 : i1
    %2 = comb.add %in0, %in1 : i64
    hw.output %1, %1, %2, %0 : i1, i1, i64, i1
  }
  hw.module @main(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
    %handshake_buffer0.in0_ready, %handshake_buffer0.out0, %handshake_buffer0.out0_valid = hw.instance "handshake_buffer0" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %in0: i0, in0_valid: %in0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork0.in0_ready, %handshake_fork0.out0, %handshake_fork0.out0_valid, %handshake_fork0.out1, %handshake_fork0.out1_valid, %handshake_fork0.out2, %handshake_fork0.out2_valid, %handshake_fork0.out3, %handshake_fork0.out3_valid, %handshake_fork0.out4, %handshake_fork0.out4_valid, %handshake_fork0.out5, %handshake_fork0.out5_valid, %handshake_fork0.out6, %handshake_fork0.out6_valid, %handshake_fork0.out7, %handshake_fork0.out7_valid, %handshake_fork0.out8, %handshake_fork0.out8_valid, %handshake_fork0.out9, %handshake_fork0.out9_valid, %handshake_fork0.out10, %handshake_fork0.out10_valid, %handshake_fork0.out11, %handshake_fork0.out11_valid, %handshake_fork0.out12, %handshake_fork0.out12_valid, %handshake_fork0.out13, %handshake_fork0.out13_valid = hw.instance "handshake_fork0" @handshake_fork_1ins_14outs_ctrl(in0: %handshake_buffer0.out0: i0, in0_valid: %handshake_buffer0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer14.in0_ready: i1, out1_ready: %handshake_buffer13.in0_ready: i1, out2_ready: %handshake_buffer12.in0_ready: i1, out3_ready: %handshake_buffer11.in0_ready: i1, out4_ready: %handshake_buffer10.in0_ready: i1, out5_ready: %handshake_buffer9.in0_ready: i1, out6_ready: %handshake_buffer8.in0_ready: i1, out7_ready: %handshake_buffer7.in0_ready: i1, out8_ready: %handshake_buffer6.in0_ready: i1, out9_ready: %handshake_buffer5.in0_ready: i1, out10_ready: %handshake_buffer4.in0_ready: i1, out11_ready: %handshake_buffer3.in0_ready: i1, out12_ready: %handshake_buffer2.in0_ready: i1, out13_ready: %handshake_buffer1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1, out4: i0, out4_valid: i1, out5: i0, out5_valid: i1, out6: i0, out6_valid: i1, out7: i0, out7_valid: i1, out8: i0, out8_valid: i1, out9: i0, out9_valid: i1, out10: i0, out10_valid: i1, out11: i0, out11_valid: i1, out12: i0, out12_valid: i1, out13: i0, out13_valid: i1)
    %handshake_buffer1.in0_ready, %handshake_buffer1.out0, %handshake_buffer1.out0_valid = hw.instance "handshake_buffer1" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out13: i0, in0_valid: %handshake_fork0.out13_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join4.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer2.in0_ready, %handshake_buffer2.out0, %handshake_buffer2.out0_valid = hw.instance "handshake_buffer2" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out12: i0, in0_valid: %handshake_fork0.out12_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join3.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer3.in0_ready, %handshake_buffer3.out0, %handshake_buffer3.out0_valid = hw.instance "handshake_buffer3" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out11: i0, in0_valid: %handshake_fork0.out11_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store3.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer4.in0_ready, %handshake_buffer4.out0, %handshake_buffer4.out0_valid = hw.instance "handshake_buffer4" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out10: i0, in0_valid: %handshake_fork0.out10_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer5.in0_ready, %handshake_buffer5.out0, %handshake_buffer5.out0_valid = hw.instance "handshake_buffer5" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out9: i0, in0_valid: %handshake_fork0.out9_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join2.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer6.in0_ready, %handshake_buffer6.out0, %handshake_buffer6.out0_valid = hw.instance "handshake_buffer6" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out8: i0, in0_valid: %handshake_fork0.out8_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer7.in0_ready, %handshake_buffer7.out0, %handshake_buffer7.out0_valid = hw.instance "handshake_buffer7" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out7: i0, in0_valid: %handshake_fork0.out7_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer8.in0_ready, %handshake_buffer8.out0, %handshake_buffer8.out0_valid = hw.instance "handshake_buffer8" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out6: i0, in0_valid: %handshake_fork0.out6_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant6.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer9.in0_ready, %handshake_buffer9.out0, %handshake_buffer9.out0_valid = hw.instance "handshake_buffer9" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out5: i0, in0_valid: %handshake_fork0.out5_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant5.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer10.in0_ready, %handshake_buffer10.out0, %handshake_buffer10.out0_valid = hw.instance "handshake_buffer10" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out4: i0, in0_valid: %handshake_fork0.out4_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant4.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer11.in0_ready, %handshake_buffer11.out0, %handshake_buffer11.out0_valid = hw.instance "handshake_buffer11" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out3: i0, in0_valid: %handshake_fork0.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant3.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer12.in0_ready, %handshake_buffer12.out0, %handshake_buffer12.out0_valid = hw.instance "handshake_buffer12" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out2: i0, in0_valid: %handshake_fork0.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant2.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer13.in0_ready, %handshake_buffer13.out0, %handshake_buffer13.out0_valid = hw.instance "handshake_buffer13" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out1: i0, in0_valid: %handshake_fork0.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer14.in0_ready, %handshake_buffer14.out0, %handshake_buffer14.out0_valid = hw.instance "handshake_buffer14" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork0.out0: i0, in0_valid: %handshake_fork0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_constant0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_memory0.stData0_ready, %handshake_memory0.stAddr0_ready, %handshake_memory0.stDone0, %handshake_memory0.stDone0_valid = hw.instance "handshake_memory0" @handshake_memory_out_ui64_id2(stData0: %handshake_buffer114.out0: i64, stData0_valid: %handshake_buffer114.out0_valid: i1, stAddr0: %handshake_buffer113.out0: i64, stAddr0_valid: %handshake_buffer113.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, stDone0_ready: %handshake_buffer15.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stDone0: i0, stDone0_valid: i1)
    %handshake_buffer15.in0_ready, %handshake_buffer15.out0, %handshake_buffer15.out0_valid = hw.instance "handshake_buffer15" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory0.stDone0: i0, in0_valid: %handshake_memory0.stDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in3_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_memory1.stData0_ready, %handshake_memory1.stAddr0_ready, %handshake_memory1.stData1_ready, %handshake_memory1.stAddr1_ready, %handshake_memory1.stData2_ready, %handshake_memory1.stAddr2_ready, %handshake_memory1.ldAddr0_ready, %handshake_memory1.ldData0, %handshake_memory1.ldData0_valid, %handshake_memory1.stDone0, %handshake_memory1.stDone0_valid, %handshake_memory1.stDone1, %handshake_memory1.stDone1_valid, %handshake_memory1.stDone2, %handshake_memory1.stDone2_valid, %handshake_memory1.ldDone0, %handshake_memory1.ldDone0_valid = hw.instance "handshake_memory1" @handshake_memory_out_ui64_id1(stData0: %handshake_buffer67.out0: i64, stData0_valid: %handshake_buffer67.out0_valid: i1, stAddr0: %handshake_buffer66.out0: i64, stAddr0_valid: %handshake_buffer66.out0_valid: i1, stData1: %handshake_buffer70.out0: i64, stData1_valid: %handshake_buffer70.out0_valid: i1, stAddr1: %handshake_buffer69.out0: i64, stAddr1_valid: %handshake_buffer69.out0_valid: i1, stData2: %handshake_buffer73.out0: i64, stData2_valid: %handshake_buffer73.out0_valid: i1, stAddr2: %handshake_buffer72.out0: i64, stAddr2_valid: %handshake_buffer72.out0_valid: i1, ldAddr0: %handshake_buffer110.out0: i64, ldAddr0_valid: %handshake_buffer110.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, ldData0_ready: %handshake_buffer20.in0_ready: i1, stDone0_ready: %handshake_buffer19.in0_ready: i1, stDone1_ready: %handshake_buffer18.in0_ready: i1, stDone2_ready: %handshake_buffer17.in0_ready: i1, ldDone0_ready: %handshake_buffer16.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
    %handshake_buffer16.in0_ready, %handshake_buffer16.out0, %handshake_buffer16.out0_valid = hw.instance "handshake_buffer16" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.ldDone0: i0, in0_valid: %handshake_memory1.ldDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer17.in0_ready, %handshake_buffer17.out0, %handshake_buffer17.out0_valid = hw.instance "handshake_buffer17" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone2: i0, in0_valid: %handshake_memory1.stDone2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in6_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer18.in0_ready, %handshake_buffer18.out0, %handshake_buffer18.out0_valid = hw.instance "handshake_buffer18" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone1: i0, in0_valid: %handshake_memory1.stDone1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork1.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer19.in0_ready, %handshake_buffer19.out0, %handshake_buffer19.out0_valid = hw.instance "handshake_buffer19" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory1.stDone0: i0, in0_valid: %handshake_memory1.stDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork2.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer20.in0_ready, %handshake_buffer20.out0, %handshake_buffer20.out0_valid = hw.instance "handshake_buffer20" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory1.ldData0: i64, in0_valid: %handshake_memory1.ldData0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load1.dataFromMem_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork1.in0_ready, %handshake_fork1.out0, %handshake_fork1.out0_valid, %handshake_fork1.out1, %handshake_fork1.out1_valid = hw.instance "handshake_fork1" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer18.out0: i0, in0_valid: %handshake_buffer18.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer22.in0_ready: i1, out1_ready: %handshake_buffer21.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
    %handshake_buffer21.in0_ready, %handshake_buffer21.out0, %handshake_buffer21.out0_valid = hw.instance "handshake_buffer21" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out1: i0, in0_valid: %handshake_fork1.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in5_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer22.in0_ready, %handshake_buffer22.out0, %handshake_buffer22.out0_valid = hw.instance "handshake_buffer22" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork1.out0: i0, in0_valid: %handshake_fork1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join4.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork2.in0_ready, %handshake_fork2.out0, %handshake_fork2.out0_valid, %handshake_fork2.out1, %handshake_fork2.out1_valid, %handshake_fork2.out2, %handshake_fork2.out2_valid = hw.instance "handshake_fork2" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer19.out0: i0, in0_valid: %handshake_buffer19.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer25.in0_ready: i1, out1_ready: %handshake_buffer24.in0_ready: i1, out2_ready: %handshake_buffer23.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
    %handshake_buffer23.in0_ready, %handshake_buffer23.out0, %handshake_buffer23.out0_valid = hw.instance "handshake_buffer23" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out2: i0, in0_valid: %handshake_fork2.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in4_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer24.in0_ready, %handshake_buffer24.out0, %handshake_buffer24.out0_valid = hw.instance "handshake_buffer24" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out1: i0, in0_valid: %handshake_fork2.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join3.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer25.in0_ready, %handshake_buffer25.out0, %handshake_buffer25.out0_valid = hw.instance "handshake_buffer25" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork2.out0: i0, in0_valid: %handshake_fork2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join4.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_memory2.stData0_ready, %handshake_memory2.stAddr0_ready, %handshake_memory2.stData1_ready, %handshake_memory2.stAddr1_ready, %handshake_memory2.stData2_ready, %handshake_memory2.stAddr2_ready, %handshake_memory2.ldAddr0_ready, %handshake_memory2.ldData0, %handshake_memory2.ldData0_valid, %handshake_memory2.stDone0, %handshake_memory2.stDone0_valid, %handshake_memory2.stDone1, %handshake_memory2.stDone1_valid, %handshake_memory2.stDone2, %handshake_memory2.stDone2_valid, %handshake_memory2.ldDone0, %handshake_memory2.ldDone0_valid = hw.instance "handshake_memory2" @handshake_memory_out_ui64_id0(stData0: %handshake_buffer59.out0: i64, stData0_valid: %handshake_buffer59.out0_valid: i1, stAddr0: %handshake_buffer58.out0: i64, stAddr0_valid: %handshake_buffer58.out0_valid: i1, stData1: %handshake_buffer62.out0: i64, stData1_valid: %handshake_buffer62.out0_valid: i1, stAddr1: %handshake_buffer61.out0: i64, stAddr1_valid: %handshake_buffer61.out0_valid: i1, stData2: %handshake_buffer65.out0: i64, stData2_valid: %handshake_buffer65.out0_valid: i1, stAddr2: %handshake_buffer64.out0: i64, stAddr2_valid: %handshake_buffer64.out0_valid: i1, ldAddr0: %handshake_buffer108.out0: i64, ldAddr0_valid: %handshake_buffer108.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, ldData0_ready: %handshake_buffer30.in0_ready: i1, stDone0_ready: %handshake_buffer29.in0_ready: i1, stDone1_ready: %handshake_buffer28.in0_ready: i1, stDone2_ready: %handshake_buffer27.in0_ready: i1, ldDone0_ready: %handshake_buffer26.in0_ready: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
    %handshake_buffer26.in0_ready, %handshake_buffer26.out0, %handshake_buffer26.out0_valid = hw.instance "handshake_buffer26" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.ldDone0: i0, in0_valid: %handshake_memory2.ldDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer27.in0_ready, %handshake_buffer27.out0, %handshake_buffer27.out0_valid = hw.instance "handshake_buffer27" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone2: i0, in0_valid: %handshake_memory2.stDone2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in3_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer28.in0_ready, %handshake_buffer28.out0, %handshake_buffer28.out0_valid = hw.instance "handshake_buffer28" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone1: i0, in0_valid: %handshake_memory2.stDone1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork3.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer29.in0_ready, %handshake_buffer29.out0, %handshake_buffer29.out0_valid = hw.instance "handshake_buffer29" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_memory2.stDone0: i0, in0_valid: %handshake_memory2.stDone0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork4.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer30.in0_ready, %handshake_buffer30.out0, %handshake_buffer30.out0_valid = hw.instance "handshake_buffer30" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_memory2.ldData0: i64, in0_valid: %handshake_memory2.ldData0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load0.dataFromMem_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork3.in0_ready, %handshake_fork3.out0, %handshake_fork3.out0_valid, %handshake_fork3.out1, %handshake_fork3.out1_valid = hw.instance "handshake_fork3" @handshake_fork_1ins_2outs_ctrl(in0: %handshake_buffer28.out0: i0, in0_valid: %handshake_buffer28.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer32.in0_ready: i1, out1_ready: %handshake_buffer31.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
    %handshake_buffer31.in0_ready, %handshake_buffer31.out0, %handshake_buffer31.out0_valid = hw.instance "handshake_buffer31" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out1: i0, in0_valid: %handshake_fork3.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join2.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer32.in0_ready, %handshake_buffer32.out0, %handshake_buffer32.out0_valid = hw.instance "handshake_buffer32" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork3.out0: i0, in0_valid: %handshake_fork3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in2_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork4.in0_ready, %handshake_fork4.out0, %handshake_fork4.out0_valid, %handshake_fork4.out1, %handshake_fork4.out1_valid, %handshake_fork4.out2, %handshake_fork4.out2_valid = hw.instance "handshake_fork4" @handshake_fork_1ins_3outs_ctrl(in0: %handshake_buffer29.out0: i0, in0_valid: %handshake_buffer29.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer35.in0_ready: i1, out1_ready: %handshake_buffer34.in0_ready: i1, out2_ready: %handshake_buffer33.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
    %handshake_buffer33.in0_ready, %handshake_buffer33.out0, %handshake_buffer33.out0_valid = hw.instance "handshake_buffer33" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out2: i0, in0_valid: %handshake_fork4.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join1.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer34.in0_ready, %handshake_buffer34.out0, %handshake_buffer34.out0_valid = hw.instance "handshake_buffer34" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out1: i0, in0_valid: %handshake_fork4.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join2.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer35.in0_ready, %handshake_buffer35.out0, %handshake_buffer35.out0_valid = hw.instance "handshake_buffer35" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork4.out0: i0, in0_valid: %handshake_fork4.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join0.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_join0.in0_ready, %handshake_join0.in1_ready, %handshake_join0.in2_ready, %handshake_join0.in3_ready, %handshake_join0.in4_ready, %handshake_join0.in5_ready, %handshake_join0.in6_ready, %handshake_join0.out0, %handshake_join0.out0_valid = hw.instance "handshake_join0" @handshake_join_7ins_1outs_ctrl(in0: %handshake_buffer4.out0: i0, in0_valid: %handshake_buffer4.out0_valid: i1, in1: %handshake_buffer35.out0: i0, in1_valid: %handshake_buffer35.out0_valid: i1, in2: %handshake_buffer32.out0: i0, in2_valid: %handshake_buffer32.out0_valid: i1, in3: %handshake_buffer27.out0: i0, in3_valid: %handshake_buffer27.out0_valid: i1, in4: %handshake_buffer23.out0: i0, in4_valid: %handshake_buffer23.out0_valid: i1, in5: %handshake_buffer21.out0: i0, in5_valid: %handshake_buffer21.out0_valid: i1, in6: %handshake_buffer17.out0: i0, in6_valid: %handshake_buffer17.out0_valid: i1, out0_ready: %handshake_buffer36.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, in4_ready: i1, in5_ready: i1, in6_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer36.in0_ready, %handshake_buffer36.out0, %handshake_buffer36.out0_valid = hw.instance "handshake_buffer36" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join0.out0: i0, in0_valid: %handshake_join0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux0.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_constant0.ctrl_ready, %handshake_constant0.out0, %handshake_constant0.out0_valid = hw.instance "handshake_constant0" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer14.out0: i0, ctrl_valid: %handshake_buffer14.out0_valid: i1, out0_ready: %handshake_buffer37.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer37.in0_ready, %handshake_buffer37.out0, %handshake_buffer37.out0_valid = hw.instance "handshake_buffer37" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant0.out0: i64, in0_valid: %handshake_constant0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux2.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant1.ctrl_ready, %handshake_constant1.out0, %handshake_constant1.out0_valid = hw.instance "handshake_constant1" @handshake_constant_c3_out_ui64(ctrl: %handshake_buffer13.out0: i0, ctrl_valid: %handshake_buffer13.out0_valid: i1, out0_ready: %handshake_buffer38.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer38.in0_ready, %handshake_buffer38.out0, %handshake_buffer38.out0_valid = hw.instance "handshake_buffer38" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant1.out0: i64, in0_valid: %handshake_constant1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork5.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork5.in0_ready, %handshake_fork5.out0, %handshake_fork5.out0_valid, %handshake_fork5.out1, %handshake_fork5.out1_valid = hw.instance "handshake_fork5" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer38.out0: i64, in0_valid: %handshake_buffer38.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer40.in0_ready: i1, out1_ready: %handshake_buffer39.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer39.in0_ready, %handshake_buffer39.out0, %handshake_buffer39.out0_valid = hw.instance "handshake_buffer39" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out1: i64, in0_valid: %handshake_fork5.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store2.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer40.in0_ready, %handshake_buffer40.out0, %handshake_buffer40.out0_valid = hw.instance "handshake_buffer40" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork5.out0: i64, in0_valid: %handshake_fork5.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store5.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant2.ctrl_ready, %handshake_constant2.out0, %handshake_constant2.out0_valid = hw.instance "handshake_constant2" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer12.out0: i0, ctrl_valid: %handshake_buffer12.out0_valid: i1, out0_ready: %handshake_buffer41.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer41.in0_ready, %handshake_buffer41.out0, %handshake_buffer41.out0_valid = hw.instance "handshake_buffer41" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant2.out0: i64, in0_valid: %handshake_constant2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork6.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork6.in0_ready, %handshake_fork6.out0, %handshake_fork6.out0_valid, %handshake_fork6.out1, %handshake_fork6.out1_valid = hw.instance "handshake_fork6" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer41.out0: i64, in0_valid: %handshake_buffer41.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer43.in0_ready: i1, out1_ready: %handshake_buffer42.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer42.in0_ready, %handshake_buffer42.out0, %handshake_buffer42.out0_valid = hw.instance "handshake_buffer42" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out1: i64, in0_valid: %handshake_fork6.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store1.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer43.in0_ready, %handshake_buffer43.out0, %handshake_buffer43.out0_valid = hw.instance "handshake_buffer43" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork6.out0: i64, in0_valid: %handshake_fork6.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store4.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant3.ctrl_ready, %handshake_constant3.out0, %handshake_constant3.out0_valid = hw.instance "handshake_constant3" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer11.out0: i0, ctrl_valid: %handshake_buffer11.out0_valid: i1, out0_ready: %handshake_buffer44.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer44.in0_ready, %handshake_buffer44.out0, %handshake_buffer44.out0_valid = hw.instance "handshake_buffer44" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant3.out0: i64, in0_valid: %handshake_constant3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork7.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork7.in0_ready, %handshake_fork7.out0, %handshake_fork7.out0_valid, %handshake_fork7.out1, %handshake_fork7.out1_valid = hw.instance "handshake_fork7" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer44.out0: i64, in0_valid: %handshake_buffer44.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer46.in0_ready: i1, out1_ready: %handshake_buffer45.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer45.in0_ready, %handshake_buffer45.out0, %handshake_buffer45.out0_valid = hw.instance "handshake_buffer45" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out1: i64, in0_valid: %handshake_fork7.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store0.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer46.in0_ready, %handshake_buffer46.out0, %handshake_buffer46.out0_valid = hw.instance "handshake_buffer46" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork7.out0: i64, in0_valid: %handshake_fork7.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store3.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant4.ctrl_ready, %handshake_constant4.out0, %handshake_constant4.out0_valid = hw.instance "handshake_constant4" @handshake_constant_c2_out_ui64(ctrl: %handshake_buffer10.out0: i0, ctrl_valid: %handshake_buffer10.out0_valid: i1, out0_ready: %handshake_buffer47.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer47.in0_ready, %handshake_buffer47.out0, %handshake_buffer47.out0_valid = hw.instance "handshake_buffer47" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant4.out0: i64, in0_valid: %handshake_constant4.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork8.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork8.in0_ready, %handshake_fork8.out0, %handshake_fork8.out0_valid, %handshake_fork8.out1, %handshake_fork8.out1_valid = hw.instance "handshake_fork8" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer47.out0: i64, in0_valid: %handshake_buffer47.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer49.in0_ready: i1, out1_ready: %handshake_buffer48.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer48.in0_ready, %handshake_buffer48.out0, %handshake_buffer48.out0_valid = hw.instance "handshake_buffer48" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out1: i64, in0_valid: %handshake_fork8.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store2.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer49.in0_ready, %handshake_buffer49.out0, %handshake_buffer49.out0_valid = hw.instance "handshake_buffer49" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork8.out0: i64, in0_valid: %handshake_fork8.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store5.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant5.ctrl_ready, %handshake_constant5.out0, %handshake_constant5.out0_valid = hw.instance "handshake_constant5" @handshake_constant_c1_out_ui64(ctrl: %handshake_buffer9.out0: i0, ctrl_valid: %handshake_buffer9.out0_valid: i1, out0_ready: %handshake_buffer50.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer50.in0_ready, %handshake_buffer50.out0, %handshake_buffer50.out0_valid = hw.instance "handshake_buffer50" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant5.out0: i64, in0_valid: %handshake_constant5.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork9.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork9.in0_ready, %handshake_fork9.out0, %handshake_fork9.out0_valid, %handshake_fork9.out1, %handshake_fork9.out1_valid, %handshake_fork9.out2, %handshake_fork9.out2_valid = hw.instance "handshake_fork9" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer50.out0: i64, in0_valid: %handshake_buffer50.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer53.in0_ready: i1, out1_ready: %handshake_buffer52.in0_ready: i1, out2_ready: %handshake_buffer51.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
    %handshake_buffer51.in0_ready, %handshake_buffer51.out0, %handshake_buffer51.out0_valid = hw.instance "handshake_buffer51" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out2: i64, in0_valid: %handshake_fork9.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store1.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer52.in0_ready, %handshake_buffer52.out0, %handshake_buffer52.out0_valid = hw.instance "handshake_buffer52" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out1: i64, in0_valid: %handshake_fork9.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store4.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer53.in0_ready, %handshake_buffer53.out0, %handshake_buffer53.out0_valid = hw.instance "handshake_buffer53" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork9.out0: i64, in0_valid: %handshake_fork9.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux3.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_constant6.ctrl_ready, %handshake_constant6.out0, %handshake_constant6.out0_valid = hw.instance "handshake_constant6" @handshake_constant_c0_out_ui64(ctrl: %handshake_buffer8.out0: i0, ctrl_valid: %handshake_buffer8.out0_valid: i1, out0_ready: %handshake_buffer54.in0_ready: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer54.in0_ready, %handshake_buffer54.out0, %handshake_buffer54.out0_valid = hw.instance "handshake_buffer54" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_constant6.out0: i64, in0_valid: %handshake_constant6.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork10.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork10.in0_ready, %handshake_fork10.out0, %handshake_fork10.out0_valid, %handshake_fork10.out1, %handshake_fork10.out1_valid, %handshake_fork10.out2, %handshake_fork10.out2_valid = hw.instance "handshake_fork10" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %handshake_buffer54.out0: i64, in0_valid: %handshake_buffer54.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer57.in0_ready: i1, out1_ready: %handshake_buffer56.in0_ready: i1, out2_ready: %handshake_buffer55.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
    %handshake_buffer55.in0_ready, %handshake_buffer55.out0, %handshake_buffer55.out0_valid = hw.instance "handshake_buffer55" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out2: i64, in0_valid: %handshake_fork10.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store0.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer56.in0_ready, %handshake_buffer56.out0, %handshake_buffer56.out0_valid = hw.instance "handshake_buffer56" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out1: i64, in0_valid: %handshake_fork10.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store3.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer57.in0_ready, %handshake_buffer57.out0, %handshake_buffer57.out0_valid = hw.instance "handshake_buffer57" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork10.out0: i64, in0_valid: %handshake_fork10.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux1.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_store0.addrIn0_ready, %handshake_store0.dataIn_ready, %handshake_store0.ctrl_ready, %handshake_store0.dataToMem, %handshake_store0.dataToMem_valid, %handshake_store0.addrOut0, %handshake_store0.addrOut0_valid = hw.instance "handshake_store0" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer55.out0: i64, addrIn0_valid: %handshake_buffer55.out0_valid: i1, dataIn: %handshake_buffer45.out0: i64, dataIn_valid: %handshake_buffer45.out0_valid: i1, ctrl: %handshake_buffer7.out0: i0, ctrl_valid: %handshake_buffer7.out0_valid: i1, dataToMem_ready: %handshake_buffer59.in0_ready: i1, addrOut0_ready: %handshake_buffer58.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer58.in0_ready, %handshake_buffer58.out0, %handshake_buffer58.out0_valid = hw.instance "handshake_buffer58" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.addrOut0: i64, in0_valid: %handshake_store0.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer59.in0_ready, %handshake_buffer59.out0, %handshake_buffer59.out0_valid = hw.instance "handshake_buffer59" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store0.dataToMem: i64, in0_valid: %handshake_store0.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join1.in0_ready, %handshake_join1.in1_ready, %handshake_join1.out0, %handshake_join1.out0_valid = hw.instance "handshake_join1" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer6.out0: i0, in0_valid: %handshake_buffer6.out0_valid: i1, in1: %handshake_buffer33.out0: i0, in1_valid: %handshake_buffer33.out0_valid: i1, out0_ready: %handshake_buffer60.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer60.in0_ready, %handshake_buffer60.out0, %handshake_buffer60.out0_valid = hw.instance "handshake_buffer60" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join1.out0: i0, in0_valid: %handshake_join1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store1.addrIn0_ready, %handshake_store1.dataIn_ready, %handshake_store1.ctrl_ready, %handshake_store1.dataToMem, %handshake_store1.dataToMem_valid, %handshake_store1.addrOut0, %handshake_store1.addrOut0_valid = hw.instance "handshake_store1" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer51.out0: i64, addrIn0_valid: %handshake_buffer51.out0_valid: i1, dataIn: %handshake_buffer42.out0: i64, dataIn_valid: %handshake_buffer42.out0_valid: i1, ctrl: %handshake_buffer60.out0: i0, ctrl_valid: %handshake_buffer60.out0_valid: i1, dataToMem_ready: %handshake_buffer62.in0_ready: i1, addrOut0_ready: %handshake_buffer61.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer61.in0_ready, %handshake_buffer61.out0, %handshake_buffer61.out0_valid = hw.instance "handshake_buffer61" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.addrOut0: i64, in0_valid: %handshake_store1.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer62.in0_ready, %handshake_buffer62.out0, %handshake_buffer62.out0_valid = hw.instance "handshake_buffer62" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store1.dataToMem: i64, in0_valid: %handshake_store1.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stData1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join2.in0_ready, %handshake_join2.in1_ready, %handshake_join2.in2_ready, %handshake_join2.out0, %handshake_join2.out0_valid = hw.instance "handshake_join2" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer5.out0: i0, in0_valid: %handshake_buffer5.out0_valid: i1, in1: %handshake_buffer34.out0: i0, in1_valid: %handshake_buffer34.out0_valid: i1, in2: %handshake_buffer31.out0: i0, in2_valid: %handshake_buffer31.out0_valid: i1, out0_ready: %handshake_buffer63.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer63.in0_ready, %handshake_buffer63.out0, %handshake_buffer63.out0_valid = hw.instance "handshake_buffer63" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join2.out0: i0, in0_valid: %handshake_join2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store2.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store2.addrIn0_ready, %handshake_store2.dataIn_ready, %handshake_store2.ctrl_ready, %handshake_store2.dataToMem, %handshake_store2.dataToMem_valid, %handshake_store2.addrOut0, %handshake_store2.addrOut0_valid = hw.instance "handshake_store2" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer48.out0: i64, addrIn0_valid: %handshake_buffer48.out0_valid: i1, dataIn: %handshake_buffer39.out0: i64, dataIn_valid: %handshake_buffer39.out0_valid: i1, ctrl: %handshake_buffer63.out0: i0, ctrl_valid: %handshake_buffer63.out0_valid: i1, dataToMem_ready: %handshake_buffer65.in0_ready: i1, addrOut0_ready: %handshake_buffer64.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer64.in0_ready, %handshake_buffer64.out0, %handshake_buffer64.out0_valid = hw.instance "handshake_buffer64" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.addrOut0: i64, in0_valid: %handshake_store2.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stAddr2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer65.in0_ready, %handshake_buffer65.out0, %handshake_buffer65.out0_valid = hw.instance "handshake_buffer65" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store2.dataToMem: i64, in0_valid: %handshake_store2.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.stData2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_store3.addrIn0_ready, %handshake_store3.dataIn_ready, %handshake_store3.ctrl_ready, %handshake_store3.dataToMem, %handshake_store3.dataToMem_valid, %handshake_store3.addrOut0, %handshake_store3.addrOut0_valid = hw.instance "handshake_store3" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer56.out0: i64, addrIn0_valid: %handshake_buffer56.out0_valid: i1, dataIn: %handshake_buffer46.out0: i64, dataIn_valid: %handshake_buffer46.out0_valid: i1, ctrl: %handshake_buffer3.out0: i0, ctrl_valid: %handshake_buffer3.out0_valid: i1, dataToMem_ready: %handshake_buffer67.in0_ready: i1, addrOut0_ready: %handshake_buffer66.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer66.in0_ready, %handshake_buffer66.out0, %handshake_buffer66.out0_valid = hw.instance "handshake_buffer66" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.addrOut0: i64, in0_valid: %handshake_store3.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer67.in0_ready, %handshake_buffer67.out0, %handshake_buffer67.out0_valid = hw.instance "handshake_buffer67" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store3.dataToMem: i64, in0_valid: %handshake_store3.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join3.in0_ready, %handshake_join3.in1_ready, %handshake_join3.out0, %handshake_join3.out0_valid = hw.instance "handshake_join3" @handshake_join_2ins_1outs_ctrl(in0: %handshake_buffer2.out0: i0, in0_valid: %handshake_buffer2.out0_valid: i1, in1: %handshake_buffer24.out0: i0, in1_valid: %handshake_buffer24.out0_valid: i1, out0_ready: %handshake_buffer68.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer68.in0_ready, %handshake_buffer68.out0, %handshake_buffer68.out0_valid = hw.instance "handshake_buffer68" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join3.out0: i0, in0_valid: %handshake_join3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store4.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store4.addrIn0_ready, %handshake_store4.dataIn_ready, %handshake_store4.ctrl_ready, %handshake_store4.dataToMem, %handshake_store4.dataToMem_valid, %handshake_store4.addrOut0, %handshake_store4.addrOut0_valid = hw.instance "handshake_store4" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer52.out0: i64, addrIn0_valid: %handshake_buffer52.out0_valid: i1, dataIn: %handshake_buffer43.out0: i64, dataIn_valid: %handshake_buffer43.out0_valid: i1, ctrl: %handshake_buffer68.out0: i0, ctrl_valid: %handshake_buffer68.out0_valid: i1, dataToMem_ready: %handshake_buffer70.in0_ready: i1, addrOut0_ready: %handshake_buffer69.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer69.in0_ready, %handshake_buffer69.out0, %handshake_buffer69.out0_valid = hw.instance "handshake_buffer69" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.addrOut0: i64, in0_valid: %handshake_store4.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer70.in0_ready, %handshake_buffer70.out0, %handshake_buffer70.out0_valid = hw.instance "handshake_buffer70" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store4.dataToMem: i64, in0_valid: %handshake_store4.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stData1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_join4.in0_ready, %handshake_join4.in1_ready, %handshake_join4.in2_ready, %handshake_join4.out0, %handshake_join4.out0_valid = hw.instance "handshake_join4" @handshake_join_3ins_1outs_ctrl(in0: %handshake_buffer1.out0: i0, in0_valid: %handshake_buffer1.out0_valid: i1, in1: %handshake_buffer25.out0: i0, in1_valid: %handshake_buffer25.out0_valid: i1, in2: %handshake_buffer22.out0: i0, in2_valid: %handshake_buffer22.out0_valid: i1, out0_ready: %handshake_buffer71.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer71.in0_ready, %handshake_buffer71.out0, %handshake_buffer71.out0_valid = hw.instance "handshake_buffer71" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join4.out0: i0, in0_valid: %handshake_join4.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store5.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_store5.addrIn0_ready, %handshake_store5.dataIn_ready, %handshake_store5.ctrl_ready, %handshake_store5.dataToMem, %handshake_store5.dataToMem_valid, %handshake_store5.addrOut0, %handshake_store5.addrOut0_valid = hw.instance "handshake_store5" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer49.out0: i64, addrIn0_valid: %handshake_buffer49.out0_valid: i1, dataIn: %handshake_buffer40.out0: i64, dataIn_valid: %handshake_buffer40.out0_valid: i1, ctrl: %handshake_buffer71.out0: i0, ctrl_valid: %handshake_buffer71.out0_valid: i1, dataToMem_ready: %handshake_buffer73.in0_ready: i1, addrOut0_ready: %handshake_buffer72.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer72.in0_ready, %handshake_buffer72.out0, %handshake_buffer72.out0_valid = hw.instance "handshake_buffer72" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.addrOut0: i64, in0_valid: %handshake_store5.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stAddr2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer73.in0_ready, %handshake_buffer73.out0, %handshake_buffer73.out0_valid = hw.instance "handshake_buffer73" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store5.dataToMem: i64, in0_valid: %handshake_store5.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.stData2_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer74.in0_ready, %handshake_buffer74.out0, %handshake_buffer74.out0_valid = hw.instance "handshake_buffer74" @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in0: %handshake_fork14.out0: i1, in0_valid: %handshake_fork14.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork11.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_fork11.in0_ready, %handshake_fork11.out0, %handshake_fork11.out0_valid, %handshake_fork11.out1, %handshake_fork11.out1_valid, %handshake_fork11.out2, %handshake_fork11.out2_valid, %handshake_fork11.out3, %handshake_fork11.out3_valid = hw.instance "handshake_fork11" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in0: %handshake_buffer74.out0: i1, in0_valid: %handshake_buffer74.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer78.in0_ready: i1, out1_ready: %handshake_buffer77.in0_ready: i1, out2_ready: %handshake_buffer76.in0_ready: i1, out3_ready: %handshake_buffer75.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1)
    %handshake_buffer75.in0_ready, %handshake_buffer75.out0, %handshake_buffer75.out0_valid = hw.instance "handshake_buffer75" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out3: i1, in0_valid: %handshake_fork11.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux0.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer76.in0_ready, %handshake_buffer76.out0, %handshake_buffer76.out0_valid = hw.instance "handshake_buffer76" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out2: i1, in0_valid: %handshake_fork11.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux1.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer77.in0_ready, %handshake_buffer77.out0, %handshake_buffer77.out0_valid = hw.instance "handshake_buffer77" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out1: i1, in0_valid: %handshake_fork11.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux2.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer78.in0_ready, %handshake_buffer78.out0, %handshake_buffer78.out0_valid = hw.instance "handshake_buffer78" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork11.out0: i1, in0_valid: %handshake_fork11.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux3.select_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_mux0.select_ready, %handshake_mux0.in0_ready, %handshake_mux0.in1_ready, %handshake_mux0.out0, %handshake_mux0.out0_valid = hw.instance "handshake_mux0" @handshake_mux_in_ui1_3ins_1outs_ctrl(select: %handshake_buffer75.out0: i1, select_valid: %handshake_buffer75.out0_valid: i1, in0: %handshake_buffer36.out0: i0, in0_valid: %handshake_buffer36.out0_valid: i1, in1: %handshake_buffer107.out0: i0, in1_valid: %handshake_buffer107.out0_valid: i1, out0_ready: %handshake_buffer79.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer79.in0_ready, %handshake_buffer79.out0, %handshake_buffer79.out0_valid = hw.instance "handshake_buffer79" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_mux0.out0: i0, in0_valid: %handshake_mux0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br3.data_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_mux1.select_ready, %handshake_mux1.in0_ready, %handshake_mux1.in1_ready, %handshake_mux1.out0, %handshake_mux1.out0_valid = hw.instance "handshake_mux1" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer76.out0: i1, select_valid: %handshake_buffer76.out0_valid: i1, in0: %handshake_buffer57.out0: i64, in0_valid: %handshake_buffer57.out0_valid: i1, in1: %handshake_buffer115.out0: i64, in1_valid: %handshake_buffer115.out0_valid: i1, out0_ready: %handshake_buffer80.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer80.in0_ready, %handshake_buffer80.out0, %handshake_buffer80.out0_valid = hw.instance "handshake_buffer80" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux1.out0: i64, in0_valid: %handshake_mux1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork12.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork12.in0_ready, %handshake_fork12.out0, %handshake_fork12.out0_valid, %handshake_fork12.out1, %handshake_fork12.out1_valid = hw.instance "handshake_fork12" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer80.out0: i64, in0_valid: %handshake_buffer80.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer82.in0_ready: i1, out1_ready: %handshake_buffer81.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer81.in0_ready, %handshake_buffer81.out0, %handshake_buffer81.out0_valid = hw.instance "handshake_buffer81" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out1: i64, in0_valid: %handshake_fork12.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br0.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer82.in0_ready, %handshake_buffer82.out0, %handshake_buffer82.out0_valid = hw.instance "handshake_buffer82" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork12.out0: i64, in0_valid: %handshake_fork12.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_cmpi0.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_mux2.select_ready, %handshake_mux2.in0_ready, %handshake_mux2.in1_ready, %handshake_mux2.out0, %handshake_mux2.out0_valid = hw.instance "handshake_mux2" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer77.out0: i1, select_valid: %handshake_buffer77.out0_valid: i1, in0: %handshake_buffer37.out0: i64, in0_valid: %handshake_buffer37.out0_valid: i1, in1: %handshake_buffer97.out0: i64, in1_valid: %handshake_buffer97.out0_valid: i1, out0_ready: %handshake_buffer83.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer83.in0_ready, %handshake_buffer83.out0, %handshake_buffer83.out0_valid = hw.instance "handshake_buffer83" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux2.out0: i64, in0_valid: %handshake_mux2.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork13.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_fork13.in0_ready, %handshake_fork13.out0, %handshake_fork13.out0_valid, %handshake_fork13.out1, %handshake_fork13.out1_valid = hw.instance "handshake_fork13" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer83.out0: i64, in0_valid: %handshake_buffer83.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer85.in0_ready: i1, out1_ready: %handshake_buffer84.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer84.in0_ready, %handshake_buffer84.out0, %handshake_buffer84.out0_valid = hw.instance "handshake_buffer84" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out1: i64, in0_valid: %handshake_fork13.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br1.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer85.in0_ready, %handshake_buffer85.out0, %handshake_buffer85.out0_valid = hw.instance "handshake_buffer85" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork13.out0: i64, in0_valid: %handshake_fork13.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_cmpi0.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_mux3.select_ready, %handshake_mux3.in0_ready, %handshake_mux3.in1_ready, %handshake_mux3.out0, %handshake_mux3.out0_valid = hw.instance "handshake_mux3" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %handshake_buffer78.out0: i1, select_valid: %handshake_buffer78.out0_valid: i1, in0: %handshake_buffer53.out0: i64, in0_valid: %handshake_buffer53.out0_valid: i1, in1: %handshake_buffer100.out0: i64, in1_valid: %handshake_buffer100.out0_valid: i1, out0_ready: %handshake_buffer86.in0_ready: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer86.in0_ready, %handshake_buffer86.out0, %handshake_buffer86.out0_valid = hw.instance "handshake_buffer86" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_mux3.out0: i64, in0_valid: %handshake_mux3.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br2.data_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %arith_cmpi0.in0_ready, %arith_cmpi0.in1_ready, %arith_cmpi0.out0, %arith_cmpi0.out0_valid = hw.instance "arith_cmpi0" @arith_cmpi_in_ui64_ui64_out_ui1_slt(in0: %handshake_buffer82.out0: i64, in0_valid: %handshake_buffer82.out0_valid: i1, in1: %handshake_buffer85.out0: i64, in1_valid: %handshake_buffer85.out0_valid: i1, out0_ready: %handshake_buffer87.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer87.in0_ready, %handshake_buffer87.out0, %handshake_buffer87.out0_valid = hw.instance "handshake_buffer87" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %arith_cmpi0.out0: i1, in0_valid: %arith_cmpi0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork14.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_fork14.in0_ready, %handshake_fork14.out0, %handshake_fork14.out0_valid, %handshake_fork14.out1, %handshake_fork14.out1_valid, %handshake_fork14.out2, %handshake_fork14.out2_valid, %handshake_fork14.out3, %handshake_fork14.out3_valid, %handshake_fork14.out4, %handshake_fork14.out4_valid = hw.instance "handshake_fork14" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in0: %handshake_buffer87.out0: i1, in0_valid: %handshake_buffer87.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer74.in0_ready: i1, out1_ready: %handshake_buffer91.in0_ready: i1, out2_ready: %handshake_buffer90.in0_ready: i1, out3_ready: %handshake_buffer89.in0_ready: i1, out4_ready: %handshake_buffer88.in0_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1, out4: i1, out4_valid: i1)
    %handshake_buffer88.in0_ready, %handshake_buffer88.out0, %handshake_buffer88.out0_valid = hw.instance "handshake_buffer88" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out4: i1, in0_valid: %handshake_fork14.out4_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br0.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer89.in0_ready, %handshake_buffer89.out0, %handshake_buffer89.out0_valid = hw.instance "handshake_buffer89" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out3: i1, in0_valid: %handshake_fork14.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br1.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer90.in0_ready, %handshake_buffer90.out0, %handshake_buffer90.out0_valid = hw.instance "handshake_buffer90" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out2: i1, in0_valid: %handshake_fork14.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br2.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_buffer91.in0_ready, %handshake_buffer91.out0, %handshake_buffer91.out0_valid = hw.instance "handshake_buffer91" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %handshake_fork14.out1: i1, in0_valid: %handshake_fork14.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_cond_br3.cond_ready: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
    %handshake_cond_br0.cond_ready, %handshake_cond_br0.data_ready, %handshake_cond_br0.outTrue, %handshake_cond_br0.outTrue_valid, %handshake_cond_br0.outFalse, %handshake_cond_br0.outFalse_valid = hw.instance "handshake_cond_br0" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer88.out0: i1, cond_valid: %handshake_buffer88.out0_valid: i1, data: %handshake_buffer81.out0: i64, data_valid: %handshake_buffer81.out0_valid: i1, outTrue_ready: %handshake_buffer92.in0_ready: i1, outFalse_ready: %handshake_sink0.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %handshake_buffer92.in0_ready, %handshake_buffer92.out0, %handshake_buffer92.out0_valid = hw.instance "handshake_buffer92" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br0.outTrue: i64, in0_valid: %handshake_cond_br0.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork15.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_sink0.in0_ready = hw.instance "handshake_sink0" @handshake_sink_in_ui64(in0: %handshake_cond_br0.outFalse: i64, in0_valid: %handshake_cond_br0.outFalse_valid: i1) -> (in0_ready: i1)
    %handshake_fork15.in0_ready, %handshake_fork15.out0, %handshake_fork15.out0_valid, %handshake_fork15.out1, %handshake_fork15.out1_valid, %handshake_fork15.out2, %handshake_fork15.out2_valid, %handshake_fork15.out3, %handshake_fork15.out3_valid = hw.instance "handshake_fork15" @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in0: %handshake_buffer92.out0: i64, in0_valid: %handshake_buffer92.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer96.in0_ready: i1, out1_ready: %handshake_buffer95.in0_ready: i1, out2_ready: %handshake_buffer94.in0_ready: i1, out3_ready: %handshake_buffer93.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1, out3: i64, out3_valid: i1)
    %handshake_buffer93.in0_ready, %handshake_buffer93.out0, %handshake_buffer93.out0_valid = hw.instance "handshake_buffer93" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out3: i64, in0_valid: %handshake_fork15.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store6.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer94.in0_ready, %handshake_buffer94.out0, %handshake_buffer94.out0_valid = hw.instance "handshake_buffer94" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out2: i64, in0_valid: %handshake_fork15.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load1.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer95.in0_ready, %handshake_buffer95.out0, %handshake_buffer95.out0_valid = hw.instance "handshake_buffer95" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out1: i64, in0_valid: %handshake_fork15.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load0.addrIn0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer96.in0_ready, %handshake_buffer96.out0, %handshake_buffer96.out0_valid = hw.instance "handshake_buffer96" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork15.out0: i64, in0_valid: %handshake_fork15.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi1.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_cond_br1.cond_ready, %handshake_cond_br1.data_ready, %handshake_cond_br1.outTrue, %handshake_cond_br1.outTrue_valid, %handshake_cond_br1.outFalse, %handshake_cond_br1.outFalse_valid = hw.instance "handshake_cond_br1" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer89.out0: i1, cond_valid: %handshake_buffer89.out0_valid: i1, data: %handshake_buffer84.out0: i64, data_valid: %handshake_buffer84.out0_valid: i1, outTrue_ready: %handshake_buffer97.in0_ready: i1, outFalse_ready: %handshake_sink1.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %handshake_buffer97.in0_ready, %handshake_buffer97.out0, %handshake_buffer97.out0_valid = hw.instance "handshake_buffer97" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br1.outTrue: i64, in0_valid: %handshake_cond_br1.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux2.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_sink1.in0_ready = hw.instance "handshake_sink1" @handshake_sink_in_ui64(in0: %handshake_cond_br1.outFalse: i64, in0_valid: %handshake_cond_br1.outFalse_valid: i1) -> (in0_ready: i1)
    %handshake_cond_br2.cond_ready, %handshake_cond_br2.data_ready, %handshake_cond_br2.outTrue, %handshake_cond_br2.outTrue_valid, %handshake_cond_br2.outFalse, %handshake_cond_br2.outFalse_valid = hw.instance "handshake_cond_br2" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %handshake_buffer90.out0: i1, cond_valid: %handshake_buffer90.out0_valid: i1, data: %handshake_buffer86.out0: i64, data_valid: %handshake_buffer86.out0_valid: i1, outTrue_ready: %handshake_buffer98.in0_ready: i1, outFalse_ready: %handshake_sink2.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
    %handshake_buffer98.in0_ready, %handshake_buffer98.out0, %handshake_buffer98.out0_valid = hw.instance "handshake_buffer98" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_cond_br2.outTrue: i64, in0_valid: %handshake_cond_br2.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork16.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_sink2.in0_ready = hw.instance "handshake_sink2" @handshake_sink_in_ui64(in0: %handshake_cond_br2.outFalse: i64, in0_valid: %handshake_cond_br2.outFalse_valid: i1) -> (in0_ready: i1)
    %handshake_fork16.in0_ready, %handshake_fork16.out0, %handshake_fork16.out0_valid, %handshake_fork16.out1, %handshake_fork16.out1_valid = hw.instance "handshake_fork16" @handshake_fork_in_ui64_out_ui64_ui64(in0: %handshake_buffer98.out0: i64, in0_valid: %handshake_buffer98.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer100.in0_ready: i1, out1_ready: %handshake_buffer99.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
    %handshake_buffer99.in0_ready, %handshake_buffer99.out0, %handshake_buffer99.out0_valid = hw.instance "handshake_buffer99" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out1: i64, in0_valid: %handshake_fork16.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi1.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer100.in0_ready, %handshake_buffer100.out0, %handshake_buffer100.out0_valid = hw.instance "handshake_buffer100" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_fork16.out0: i64, in0_valid: %handshake_fork16.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux3.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_cond_br3.cond_ready, %handshake_cond_br3.data_ready, %handshake_cond_br3.outTrue, %handshake_cond_br3.outTrue_valid, %handshake_cond_br3.outFalse, %handshake_cond_br3.outFalse_valid = hw.instance "handshake_cond_br3" @handshake_cond_br_in_ui1_2ins_2outs_ctrl(cond: %handshake_buffer91.out0: i1, cond_valid: %handshake_buffer91.out0_valid: i1, data: %handshake_buffer79.out0: i0, data_valid: %handshake_buffer79.out0_valid: i1, outTrue_ready: %handshake_buffer102.in0_ready: i1, outFalse_ready: %handshake_buffer101.in0_ready: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i0, outTrue_valid: i1, outFalse: i0, outFalse_valid: i1)
    %handshake_buffer101.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid = hw.instance "handshake_buffer101" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outFalse: i0, in0_valid: %handshake_cond_br3.outFalse_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %out0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer102.in0_ready, %handshake_buffer102.out0, %handshake_buffer102.out0_valid = hw.instance "handshake_buffer102" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_cond_br3.outTrue: i0, in0_valid: %handshake_cond_br3.outTrue_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_fork17.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_fork17.in0_ready, %handshake_fork17.out0, %handshake_fork17.out0_valid, %handshake_fork17.out1, %handshake_fork17.out1_valid, %handshake_fork17.out2, %handshake_fork17.out2_valid, %handshake_fork17.out3, %handshake_fork17.out3_valid = hw.instance "handshake_fork17" @handshake_fork_1ins_4outs_ctrl(in0: %handshake_buffer102.out0: i0, in0_valid: %handshake_buffer102.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_buffer106.in0_ready: i1, out1_ready: %handshake_buffer105.in0_ready: i1, out2_ready: %handshake_buffer104.in0_ready: i1, out3_ready: %handshake_buffer103.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1)
    %handshake_buffer103.in0_ready, %handshake_buffer103.out0, %handshake_buffer103.out0_valid = hw.instance "handshake_buffer103" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out3: i0, in0_valid: %handshake_fork17.out3_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load0.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer104.in0_ready, %handshake_buffer104.out0, %handshake_buffer104.out0_valid = hw.instance "handshake_buffer104" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out2: i0, in0_valid: %handshake_fork17.out2_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_load1.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer105.in0_ready, %handshake_buffer105.out0, %handshake_buffer105.out0_valid = hw.instance "handshake_buffer105" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out1: i0, in0_valid: %handshake_fork17.out1_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_join5.in0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer106.in0_ready, %handshake_buffer106.out0, %handshake_buffer106.out0_valid = hw.instance "handshake_buffer106" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_fork17.out0: i0, in0_valid: %handshake_fork17.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store6.ctrl_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_join5.in0_ready, %handshake_join5.in1_ready, %handshake_join5.in2_ready, %handshake_join5.in3_ready, %handshake_join5.out0, %handshake_join5.out0_valid = hw.instance "handshake_join5" @handshake_join_4ins_1outs_ctrl(in0: %handshake_buffer105.out0: i0, in0_valid: %handshake_buffer105.out0_valid: i1, in1: %handshake_buffer26.out0: i0, in1_valid: %handshake_buffer26.out0_valid: i1, in2: %handshake_buffer16.out0: i0, in2_valid: %handshake_buffer16.out0_valid: i1, in3: %handshake_buffer15.out0: i0, in3_valid: %handshake_buffer15.out0_valid: i1, out0_ready: %handshake_buffer107.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, out0: i0, out0_valid: i1)
    %handshake_buffer107.in0_ready, %handshake_buffer107.out0, %handshake_buffer107.out0_valid = hw.instance "handshake_buffer107" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %handshake_join5.out0: i0, in0_valid: %handshake_join5.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux0.in1_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
    %handshake_load0.addrIn0_ready, %handshake_load0.dataFromMem_ready, %handshake_load0.ctrl_ready, %handshake_load0.dataOut, %handshake_load0.dataOut_valid, %handshake_load0.addrOut0, %handshake_load0.addrOut0_valid = hw.instance "handshake_load0" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer95.out0: i64, addrIn0_valid: %handshake_buffer95.out0_valid: i1, dataFromMem: %handshake_buffer30.out0: i64, dataFromMem_valid: %handshake_buffer30.out0_valid: i1, ctrl: %handshake_buffer103.out0: i0, ctrl_valid: %handshake_buffer103.out0_valid: i1, dataOut_ready: %handshake_buffer109.in0_ready: i1, addrOut0_ready: %handshake_buffer108.in0_ready: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer108.in0_ready, %handshake_buffer108.out0, %handshake_buffer108.out0_valid = hw.instance "handshake_buffer108" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.addrOut0: i64, in0_valid: %handshake_load0.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory2.ldAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer109.in0_ready, %handshake_buffer109.out0, %handshake_buffer109.out0_valid = hw.instance "handshake_buffer109" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load0.dataOut: i64, in0_valid: %handshake_load0.dataOut_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi0.in0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_load1.addrIn0_ready, %handshake_load1.dataFromMem_ready, %handshake_load1.ctrl_ready, %handshake_load1.dataOut, %handshake_load1.dataOut_valid, %handshake_load1.addrOut0, %handshake_load1.addrOut0_valid = hw.instance "handshake_load1" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer94.out0: i64, addrIn0_valid: %handshake_buffer94.out0_valid: i1, dataFromMem: %handshake_buffer20.out0: i64, dataFromMem_valid: %handshake_buffer20.out0_valid: i1, ctrl: %handshake_buffer104.out0: i0, ctrl_valid: %handshake_buffer104.out0_valid: i1, dataOut_ready: %handshake_buffer111.in0_ready: i1, addrOut0_ready: %handshake_buffer110.in0_ready: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer110.in0_ready, %handshake_buffer110.out0, %handshake_buffer110.out0_valid = hw.instance "handshake_buffer110" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.addrOut0: i64, in0_valid: %handshake_load1.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory1.ldAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer111.in0_ready, %handshake_buffer111.out0, %handshake_buffer111.out0_valid = hw.instance "handshake_buffer111" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_load1.dataOut: i64, in0_valid: %handshake_load1.dataOut_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %arith_addi0.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %arith_addi0.in0_ready, %arith_addi0.in1_ready, %arith_addi0.out0, %arith_addi0.out0_valid = hw.instance "arith_addi0" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer109.out0: i64, in0_valid: %handshake_buffer109.out0_valid: i1, in1: %handshake_buffer111.out0: i64, in1_valid: %handshake_buffer111.out0_valid: i1, out0_ready: %handshake_buffer112.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer112.in0_ready, %handshake_buffer112.out0, %handshake_buffer112.out0_valid = hw.instance "handshake_buffer112" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi0.out0: i64, in0_valid: %arith_addi0.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_store6.dataIn_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_store6.addrIn0_ready, %handshake_store6.dataIn_ready, %handshake_store6.ctrl_ready, %handshake_store6.dataToMem, %handshake_store6.dataToMem_valid, %handshake_store6.addrOut0, %handshake_store6.addrOut0_valid = hw.instance "handshake_store6" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %handshake_buffer93.out0: i64, addrIn0_valid: %handshake_buffer93.out0_valid: i1, dataIn: %handshake_buffer112.out0: i64, dataIn_valid: %handshake_buffer112.out0_valid: i1, ctrl: %handshake_buffer106.out0: i0, ctrl_valid: %handshake_buffer106.out0_valid: i1, dataToMem_ready: %handshake_buffer114.in0_ready: i1, addrOut0_ready: %handshake_buffer113.in0_ready: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
    %handshake_buffer113.in0_ready, %handshake_buffer113.out0, %handshake_buffer113.out0_valid = hw.instance "handshake_buffer113" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.addrOut0: i64, in0_valid: %handshake_store6.addrOut0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory0.stAddr0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer114.in0_ready, %handshake_buffer114.out0, %handshake_buffer114.out0_valid = hw.instance "handshake_buffer114" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %handshake_store6.dataToMem: i64, in0_valid: %handshake_store6.dataToMem_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_memory0.stData0_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    %arith_addi1.in0_ready, %arith_addi1.in1_ready, %arith_addi1.out0, %arith_addi1.out0_valid = hw.instance "arith_addi1" @arith_addi_in_ui64_ui64_out_ui64(in0: %handshake_buffer96.out0: i64, in0_valid: %handshake_buffer96.out0_valid: i1, in1: %handshake_buffer99.out0: i64, in1_valid: %handshake_buffer99.out0_valid: i1, out0_ready: %handshake_buffer115.in0_ready: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
    %handshake_buffer115.in0_ready, %handshake_buffer115.out0, %handshake_buffer115.out0_valid = hw.instance "handshake_buffer115" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %arith_addi1.out0: i64, in0_valid: %arith_addi1.out0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %handshake_mux1.in1_ready: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
    hw.output %handshake_buffer0.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid : i1, i0, i1
  }
}


// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_constant_c3_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c3_i64 = hw.constant 3 : i64
  hw.output %out0_ready, %c3_i64, %ctrl_valid : i1, i64, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_constant_c1_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c1_i64 = hw.constant 1 : i64
  hw.output %out0_ready, %c1_i64, %ctrl_valid : i1, i64, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_constant_c2_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c2_i64 = hw.constant 2 : i64
  hw.output %out0_ready, %c2_i64, %ctrl_valid : i1, i64, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_constant_c0_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c0_i64 = hw.constant 0 : i64
  hw.output %out0_ready, %c0_i64, %ctrl_valid : i1, i64, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_store_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataIn : i64, in %dataIn_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataToMem_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataIn_ready : i1, out ctrl_ready : i1, out dataToMem : i64, out dataToMem_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
  %0 = comb.and %addrIn0_valid, %ctrl_valid : i1
  %1 = comb.and %dataIn_valid, %0 : i1
  %2 = sv.wire : !hw.inout<i1>
  sv.assign %2, %1 : i1
  %3 = sv.read_inout %2 : !hw.inout<i1>
  %4 = comb.and %addrOut0_ready, %3 : i1
  %5 = comb.and %dataToMem_ready, %4 : i1
  %6 = sv.wire : !hw.inout<i1>
  sv.assign %6, %5 : i1
  %7 = sv.read_inout %2 : !hw.inout<i1>
  %8 = sv.read_inout %2 : !hw.inout<i1>
  %9 = sv.read_inout %6 : !hw.inout<i1>
  %10 = sv.read_inout %6 : !hw.inout<i1>
  %11 = sv.read_inout %6 : !hw.inout<i1>
  hw.output %9, %10, %11, %dataIn, %8, %addrIn0, %7 : i1, i1, i1, i64, i1, i64, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_fork_in_ui64_out_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1) {
  %allDone = sv.wire : !hw.inout<i1>
  %done1 = sv.wire : !hw.inout<i1>
  %true = hw.constant true
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.and %1, %in0_valid : i1
  %3 = sv.wire : !hw.inout<i1>
  sv.assign %3, %2 : i1
  %4 = sv.read_inout %3 : !hw.inout<i1>
  %5 = comb.and %out0_ready, %4 : i1
  %6 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %7 = comb.or %5, %6 : i1
  %done0 = sv.wire : !hw.inout<i1>
  sv.assign %done0, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  sv.alwaysff(posedge %clock) {
    %true_0 = hw.constant true
    %22 = sv.read_inout %allDone : !hw.inout<i1>
    %23 = comb.xor %22, %true_0 : i1
    %24 = sv.read_inout %done0 : !hw.inout<i1>
    %25 = comb.and %24, %23 : i1
    sv.passign %emitted_0, %25 : i1
    %26 = sv.read_inout %allDone : !hw.inout<i1>
    %27 = comb.xor %26, %true_0 : i1
    %28 = sv.read_inout %done1 : !hw.inout<i1>
    %29 = comb.and %28, %27 : i1
    sv.passign %emitted_1, %29 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
  }
  %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %9 = comb.xor %8, %true : i1
  %10 = comb.and %9, %in0_valid : i1
  %11 = sv.wire : !hw.inout<i1>
  sv.assign %11, %10 : i1
  %12 = sv.read_inout %11 : !hw.inout<i1>
  %13 = comb.and %out1_ready, %12 : i1
  %14 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %15 = comb.or %13, %14 : i1
  sv.assign %done1, %15 : i1
  %16 = sv.read_inout %done0 : !hw.inout<i1>
  %17 = sv.read_inout %done1 : !hw.inout<i1>
  %18 = comb.and %16, %17 : i1
  sv.assign %allDone, %18 : i1
  %19 = sv.read_inout %3 : !hw.inout<i1>
  %20 = sv.read_inout %11 : !hw.inout<i1>
  %21 = sv.read_inout %allDone : !hw.inout<i1>
  hw.output %21, %in0, %19, %in0, %20 : i1, i64, i1, i64, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_fork_1ins_2outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1) {
  %allDone = sv.wire : !hw.inout<i1>
  %done1 = sv.wire : !hw.inout<i1>
  %true = hw.constant true
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.and %1, %in0_valid : i1
  %3 = sv.wire : !hw.inout<i1>
  sv.assign %3, %2 : i1
  %4 = sv.read_inout %3 : !hw.inout<i1>
  %5 = comb.and %out0_ready, %4 : i1
  %6 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %7 = comb.or %5, %6 : i1
  %done0 = sv.wire : !hw.inout<i1>
  sv.assign %done0, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  sv.alwaysff(posedge %clock) {
    %true_0 = hw.constant true
    %22 = sv.read_inout %allDone : !hw.inout<i1>
    %23 = comb.xor %22, %true_0 : i1
    %24 = sv.read_inout %done0 : !hw.inout<i1>
    %25 = comb.and %24, %23 : i1
    sv.passign %emitted_0, %25 : i1
    %26 = sv.read_inout %allDone : !hw.inout<i1>
    %27 = comb.xor %26, %true_0 : i1
    %28 = sv.read_inout %done1 : !hw.inout<i1>
    %29 = comb.and %28, %27 : i1
    sv.passign %emitted_1, %29 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
  }
  %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %9 = comb.xor %8, %true : i1
  %10 = comb.and %9, %in0_valid : i1
  %11 = sv.wire : !hw.inout<i1>
  sv.assign %11, %10 : i1
  %12 = sv.read_inout %11 : !hw.inout<i1>
  %13 = comb.and %out1_ready, %12 : i1
  %14 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %15 = comb.or %13, %14 : i1
  sv.assign %done1, %15 : i1
  %16 = sv.read_inout %done0 : !hw.inout<i1>
  %17 = sv.read_inout %done1 : !hw.inout<i1>
  %18 = comb.and %16, %17 : i1
  sv.assign %allDone, %18 : i1
  %19 = sv.read_inout %3 : !hw.inout<i1>
  %20 = sv.read_inout %11 : !hw.inout<i1>
  %21 = sv.read_inout %allDone : !hw.inout<i1>
  hw.output %21, %in0, %19, %in0, %20 : i1, i0, i1, i0, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_memory_out_ui64_id2(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %clock : i1, in %reset : i1, in %stDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stDone0 : i0, out stDone0_valid : i1) {
  %emptyOrComplete = sv.wire : !hw.inout<i1>
  %true = hw.constant true
  %c0_i0 = hw.constant 0 : i0
  %_handshake_memory_2 = sv.reg : !hw.inout<uarray<3xi64>> 
  %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
  sv.alwaysff(posedge %clock) {
    %writeValid = sv.logic : !hw.inout<i1>
    %8 = comb.and %stAddr0_valid, %stData0_valid : i1
    sv.bpassign %writeValid, %8 : i1
    %9 = sv.read_inout %writeValid : !hw.inout<i1>
    sv.if %9 {
      %14 = comb.extract %stAddr0 from 0 : (i64) -> i2
      %15 = sv.array_index_inout %_handshake_memory_2[%14] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %15, %stData0 : i64
    }
    %10 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    %11 = sv.read_inout %writeValid : !hw.inout<i1>
    %12 = sv.read_inout %emptyOrComplete : !hw.inout<i1>
    %13 = comb.mux %12, %11, %10 : i1
    sv.passign %writeValidBuffer, %13 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %writeValidBuffer, %false : i1
  }
  %0 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
  %1 = comb.and %stDone0_ready, %0 {sv.namehint = "storeCompleted"} : i1
  %2 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.or %3, %1 : i1
  sv.assign %emptyOrComplete, %4 : i1
  %5 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
  %6 = sv.read_inout %emptyOrComplete : !hw.inout<i1>
  %7 = sv.read_inout %emptyOrComplete : !hw.inout<i1>
  hw.output %6, %7, %c0_i0, %5 : i1, i1, i0, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_join_7ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %in4 : i0, in %in4_valid : i1, in %in5 : i0, in %in5_valid : i1, in %in6 : i0, in %in6_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out in4_ready : i1, out in5_ready : i1, out in6_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c0_i0 = hw.constant 0 : i0
  %0 = comb.and %in1_valid, %in2_valid : i1
  %1 = comb.and %in0_valid, %0 : i1
  %2 = comb.and %in3_valid, %in4_valid : i1
  %3 = comb.and %in5_valid, %in6_valid : i1
  %4 = comb.and %2, %3 : i1
  %5 = comb.and %1, %4 : i1
  %6 = sv.wire : !hw.inout<i1>
  sv.assign %6, %5 : i1
  %7 = sv.read_inout %6 : !hw.inout<i1>
  %8 = comb.and %out0_ready, %7 : i1
  %9 = sv.wire : !hw.inout<i1>
  sv.assign %9, %8 : i1
  %10 = sv.read_inout %6 : !hw.inout<i1>
  %11 = sv.read_inout %9 : !hw.inout<i1>
  %12 = sv.read_inout %9 : !hw.inout<i1>
  %13 = sv.read_inout %9 : !hw.inout<i1>
  %14 = sv.read_inout %9 : !hw.inout<i1>
  %15 = sv.read_inout %9 : !hw.inout<i1>
  %16 = sv.read_inout %9 : !hw.inout<i1>
  %17 = sv.read_inout %9 : !hw.inout<i1>
  hw.output %11, %12, %13, %14, %15, %16, %17, %c0_i0, %10 : i1, i1, i1, i1, i1, i1, i1, i0, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1) {
  %allDone = sv.wire : !hw.inout<i1>
  %done2 = sv.wire : !hw.inout<i1>
  %true = hw.constant true
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.and %1, %in0_valid : i1
  %3 = sv.wire : !hw.inout<i1>
  sv.assign %3, %2 : i1
  %4 = sv.read_inout %3 : !hw.inout<i1>
  %5 = comb.and %out0_ready, %4 : i1
  %6 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %7 = comb.or %5, %6 : i1
  %done0 = sv.wire : !hw.inout<i1>
  sv.assign %done0, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %9 = comb.xor %8, %true : i1
  %10 = comb.and %9, %in0_valid : i1
  %11 = sv.wire : !hw.inout<i1>
  sv.assign %11, %10 : i1
  %12 = sv.read_inout %11 : !hw.inout<i1>
  %13 = comb.and %out1_ready, %12 : i1
  %14 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %15 = comb.or %13, %14 : i1
  %done1 = sv.wire : !hw.inout<i1>
  sv.assign %done1, %15 : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  sv.alwaysff(posedge %clock) {
    %true_0 = hw.constant true
    %33 = sv.read_inout %allDone : !hw.inout<i1>
    %34 = comb.xor %33, %true_0 : i1
    %35 = sv.read_inout %done0 : !hw.inout<i1>
    %36 = comb.and %35, %34 : i1
    sv.passign %emitted_0, %36 : i1
    %37 = sv.read_inout %allDone : !hw.inout<i1>
    %38 = comb.xor %37, %true_0 : i1
    %39 = sv.read_inout %done1 : !hw.inout<i1>
    %40 = comb.and %39, %38 : i1
    sv.passign %emitted_1, %40 : i1
    %41 = sv.read_inout %allDone : !hw.inout<i1>
    %42 = comb.xor %41, %true_0 : i1
    %43 = sv.read_inout %done2 : !hw.inout<i1>
    %44 = comb.and %43, %42 : i1
    sv.passign %emitted_2, %44 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
  }
  %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %17 = comb.xor %16, %true : i1
  %18 = comb.and %17, %in0_valid : i1
  %19 = sv.wire : !hw.inout<i1>
  sv.assign %19, %18 : i1
  %20 = sv.read_inout %19 : !hw.inout<i1>
  %21 = comb.and %out2_ready, %20 : i1
  %22 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %23 = comb.or %21, %22 : i1
  sv.assign %done2, %23 : i1
  %24 = sv.read_inout %done0 : !hw.inout<i1>
  %25 = sv.read_inout %done1 : !hw.inout<i1>
  %26 = sv.read_inout %done2 : !hw.inout<i1>
  %27 = comb.and %25, %26 : i1
  %28 = comb.and %24, %27 : i1
  sv.assign %allDone, %28 : i1
  %29 = sv.read_inout %3 : !hw.inout<i1>
  %30 = sv.read_inout %11 : !hw.inout<i1>
  %31 = sv.read_inout %19 : !hw.inout<i1>
  %32 = sv.read_inout %allDone : !hw.inout<i1>
  hw.output %32, %in0, %29, %in0, %30, %in0, %31 : i1, i64, i1, i64, i1, i64, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_join_2ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c0_i0 = hw.constant 0 : i0
  %0 = comb.and %in0_valid, %in1_valid : i1
  %1 = sv.wire : !hw.inout<i1>
  sv.assign %1, %0 : i1
  %2 = sv.read_inout %1 : !hw.inout<i1>
  %3 = comb.and %out0_ready, %2 : i1
  %4 = sv.wire : !hw.inout<i1>
  sv.assign %4, %3 : i1
  %5 = sv.read_inout %1 : !hw.inout<i1>
  %6 = sv.read_inout %4 : !hw.inout<i1>
  %7 = sv.read_inout %4 : !hw.inout<i1>
  hw.output %6, %7, %c0_i0, %5 : i1, i1, i0, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_fork_1ins_3outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1) {
  %allDone = sv.wire : !hw.inout<i1>
  %done2 = sv.wire : !hw.inout<i1>
  %true = hw.constant true
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.and %1, %in0_valid : i1
  %3 = sv.wire : !hw.inout<i1>
  sv.assign %3, %2 : i1
  %4 = sv.read_inout %3 : !hw.inout<i1>
  %5 = comb.and %out0_ready, %4 : i1
  %6 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %7 = comb.or %5, %6 : i1
  %done0 = sv.wire : !hw.inout<i1>
  sv.assign %done0, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %9 = comb.xor %8, %true : i1
  %10 = comb.and %9, %in0_valid : i1
  %11 = sv.wire : !hw.inout<i1>
  sv.assign %11, %10 : i1
  %12 = sv.read_inout %11 : !hw.inout<i1>
  %13 = comb.and %out1_ready, %12 : i1
  %14 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %15 = comb.or %13, %14 : i1
  %done1 = sv.wire : !hw.inout<i1>
  sv.assign %done1, %15 : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  sv.alwaysff(posedge %clock) {
    %true_0 = hw.constant true
    %33 = sv.read_inout %allDone : !hw.inout<i1>
    %34 = comb.xor %33, %true_0 : i1
    %35 = sv.read_inout %done0 : !hw.inout<i1>
    %36 = comb.and %35, %34 : i1
    sv.passign %emitted_0, %36 : i1
    %37 = sv.read_inout %allDone : !hw.inout<i1>
    %38 = comb.xor %37, %true_0 : i1
    %39 = sv.read_inout %done1 : !hw.inout<i1>
    %40 = comb.and %39, %38 : i1
    sv.passign %emitted_1, %40 : i1
    %41 = sv.read_inout %allDone : !hw.inout<i1>
    %42 = comb.xor %41, %true_0 : i1
    %43 = sv.read_inout %done2 : !hw.inout<i1>
    %44 = comb.and %43, %42 : i1
    sv.passign %emitted_2, %44 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
  }
  %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %17 = comb.xor %16, %true : i1
  %18 = comb.and %17, %in0_valid : i1
  %19 = sv.wire : !hw.inout<i1>
  sv.assign %19, %18 : i1
  %20 = sv.read_inout %19 : !hw.inout<i1>
  %21 = comb.and %out2_ready, %20 : i1
  %22 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %23 = comb.or %21, %22 : i1
  sv.assign %done2, %23 : i1
  %24 = sv.read_inout %done0 : !hw.inout<i1>
  %25 = sv.read_inout %done1 : !hw.inout<i1>
  %26 = sv.read_inout %done2 : !hw.inout<i1>
  %27 = comb.and %25, %26 : i1
  %28 = comb.and %24, %27 : i1
  sv.assign %allDone, %28 : i1
  %29 = sv.read_inout %3 : !hw.inout<i1>
  %30 = sv.read_inout %11 : !hw.inout<i1>
  %31 = sv.read_inout %19 : !hw.inout<i1>
  %32 = sv.read_inout %allDone : !hw.inout<i1>
  hw.output %32, %in0, %29, %in0, %30, %in0, %31 : i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_buffer_in_ui64_out_ui64_2slots_seq(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1) {
  %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
  %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
  %true = hw.constant true
  %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
  %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = sv.read_inout %ready0_reg : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.or %1, %3 : i1
  %5 = sv.wire : !hw.inout<i1>
  sv.assign %5, %4 : i1
  %data0_reg = sv.reg sym @data0_reg : !hw.inout<i64> 
  %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i64> 
  %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
  %6 = sv.read_inout %valid1_reg : !hw.inout<i1>
  %7 = comb.xor %6, %true : i1
  %8 = sv.read_inout %ready1_reg : !hw.inout<i1>
  %9 = comb.xor %8, %true : i1
  %10 = comb.or %7, %9 : i1
  %11 = sv.wire : !hw.inout<i1>
  sv.assign %11, %10 : i1
  %data1_reg = sv.reg sym @data1_reg : !hw.inout<i64> 
  %12 = sv.read_inout %valid1_reg : !hw.inout<i1>
  %13 = sv.read_inout %ready1_reg : !hw.inout<i1>
  %14 = sv.read_inout %ready1_reg : !hw.inout<i1>
  %15 = comb.mux %13, %14, %12 : i1
  %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i64> 
  sv.alwaysff(posedge %clock) {
    %21 = sv.logic : !hw.inout<i1>
    %22 = sv.logic : !hw.inout<i1>
    %23 = sv.logic : !hw.inout<i1>
    %24 = sv.logic : !hw.inout<i1>
    %true_0 = hw.constant true
    %c0_i64 = hw.constant 0 : i64
    %25 = sv.read_inout %11 : !hw.inout<i1>
    %26 = comb.xor %25, %true_0 : i1
    %true_1 = hw.constant true
    %27 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %28 = comb.xor %27, %true_1 : i1
    %29 = comb.and %26, %28 : i1
    sv.bpassign %21, %29 : i1
    %30 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %31 = sv.read_inout %11 : !hw.inout<i1>
    %32 = comb.and %31, %30 : i1
    sv.bpassign %22, %32 : i1
    %33 = comb.xor %out0_ready, %true_0 : i1
    %true_2 = hw.constant true
    %34 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %35 = comb.xor %34, %true_2 : i1
    %36 = comb.and %33, %35 : i1
    sv.bpassign %23, %36 : i1
    %37 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %38 = comb.and %out0_ready, %37 : i1
    sv.bpassign %24, %38 : i1
    %39 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %40 = sv.read_inout %5 : !hw.inout<i1>
    %41 = comb.mux %40, %in0_valid, %39 : i1
    sv.passign %valid0_reg, %41 : i1
    %42 = sv.read_inout %5 : !hw.inout<i1>
    %43 = sv.read_inout %data0_reg : !hw.inout<i64>
    %44 = comb.mux %42, %in0, %43 : i64
    sv.passign %data0_reg, %44 : i64
    %45 = sv.read_inout %22 : !hw.inout<i1>
    %46 = comb.xor %45, %true_0 : i1
    %47 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %48 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %49 = sv.read_inout %21 : !hw.inout<i1>
    %50 = comb.mux %49, %47, %48 : i1
    %51 = comb.and %46, %50 : i1
    sv.passign %ready0_reg, %51 : i1
    %52 = sv.read_inout %data0_reg : !hw.inout<i64>
    %53 = sv.read_inout %21 : !hw.inout<i1>
    %54 = sv.read_inout %ctrl_data0_reg : !hw.inout<i64>
    %55 = comb.mux %53, %52, %54 : i64
    %56 = sv.read_inout %22 : !hw.inout<i1>
    %57 = comb.mux %56, %c0_i64, %55 : i64
    sv.passign %ctrl_data0_reg, %57 : i64
    %58 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %59 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %60 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %61 = comb.mux %60, %59, %58 : i1
    %62 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %63 = sv.read_inout %11 : !hw.inout<i1>
    %64 = comb.mux %63, %61, %62 : i1
    sv.passign %valid1_reg, %64 : i1
    %65 = sv.read_inout %data0_reg : !hw.inout<i64>
    %66 = sv.read_inout %ctrl_data0_reg : !hw.inout<i64>
    %67 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %68 = comb.mux %67, %66, %65 : i64
    %69 = sv.read_inout %11 : !hw.inout<i1>
    %70 = sv.read_inout %data1_reg : !hw.inout<i64>
    %71 = comb.mux %69, %68, %70 : i64
    sv.passign %data1_reg, %71 : i64
    %72 = sv.read_inout %24 : !hw.inout<i1>
    %73 = comb.xor %72, %true_0 : i1
    %74 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %75 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %76 = sv.read_inout %23 : !hw.inout<i1>
    %77 = comb.mux %76, %74, %75 : i1
    %78 = comb.and %73, %77 : i1
    sv.passign %ready1_reg, %78 : i1
    %79 = sv.read_inout %data1_reg : !hw.inout<i64>
    %80 = sv.read_inout %ctrl_data1_reg : !hw.inout<i64>
    %81 = sv.read_inout %23 : !hw.inout<i1>
    %82 = comb.mux %81, %79, %80 : i64
    %83 = sv.read_inout %24 : !hw.inout<i1>
    %84 = comb.mux %83, %c0_i64, %82 : i64
    sv.passign %ctrl_data1_reg, %84 : i64
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    %c0_i64 = hw.constant 0 : i64
    sv.passign %valid0_reg, %false : i1
    sv.passign %data0_reg, %c0_i64 : i64
    sv.passign %ready0_reg, %false : i1
    sv.passign %ctrl_data0_reg, %c0_i64 : i64
    sv.passign %valid1_reg, %false : i1
    sv.passign %data1_reg, %c0_i64 : i64
    sv.passign %ready1_reg, %false : i1
    sv.passign %ctrl_data1_reg, %c0_i64 : i64
  }
  %16 = sv.read_inout %data1_reg : !hw.inout<i64>
  %17 = sv.read_inout %ready1_reg : !hw.inout<i1>
  %18 = sv.read_inout %ctrl_data1_reg : !hw.inout<i64>
  %19 = comb.mux %17, %18, %16 : i64
  %20 = sv.read_inout %5 : !hw.inout<i1>
  hw.output %20, %19, %15 : i1, i64, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_memory_out_ui64_id0(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : i1, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
  %emptyOrComplete = sv.wire : !hw.inout<i1>
  %true = hw.constant true
  %c0_i0 = hw.constant 0 : i0
  %_handshake_memory_0 = sv.reg : !hw.inout<uarray<3xi64>> 
  %0 = comb.extract %ldAddr0 from 0 : (i64) -> i2
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %1 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %2 = comb.xor %1, %true : i1
  %3 = comb.and %2, %ldAddr0_valid : i1
  %4 = sv.wire : !hw.inout<i1>
  sv.assign %4, %3 : i1
  %5 = sv.read_inout %4 : !hw.inout<i1>
  %6 = comb.and %ldData0_ready, %5 : i1
  %7 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %8 = comb.or %6, %7 : i1
  %done0 = sv.wire : !hw.inout<i1>
  sv.assign %done0, %8 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %ldAddr0_valid : i1
  %12 = sv.wire : !hw.inout<i1>
  sv.assign %12, %11 : i1
  %13 = sv.read_inout %12 : !hw.inout<i1>
  %14 = comb.and %ldDone0_ready, %13 : i1
  %15 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %16 = comb.or %14, %15 : i1
  %done1 = sv.wire : !hw.inout<i1>
  sv.assign %done1, %16 : i1
  %17 = sv.read_inout %done0 : !hw.inout<i1>
  %18 = sv.read_inout %done1 : !hw.inout<i1>
  %19 = comb.and %17, %18 : i1
  %allDone = sv.wire : !hw.inout<i1>
  sv.assign %allDone, %19 : i1
  %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
  %20 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
  %21 = comb.and %stDone0_ready, %20 {sv.namehint = "storeCompleted"} : i1
  %22 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
  %23 = comb.xor %22, %true : i1
  %24 = comb.or %23, %21 : i1
  %emptyOrComplete_0 = sv.wire name "emptyOrComplete" : !hw.inout<i1>
  sv.assign %emptyOrComplete_0, %24 : i1
  %writeValidBuffer_1 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
  %25 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
  %26 = comb.and %stDone1_ready, %25 {sv.namehint = "storeCompleted"} : i1
  %27 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
  %28 = comb.xor %27, %true : i1
  %29 = comb.or %28, %26 : i1
  %emptyOrComplete_2 = sv.wire name "emptyOrComplete" : !hw.inout<i1>
  sv.assign %emptyOrComplete_2, %29 : i1
  %writeValidBuffer_3 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
  sv.alwaysff(posedge %clock) {
    %writeValid = sv.logic : !hw.inout<i1>
    %writeValid_4 = sv.logic name "writeValid" : !hw.inout<i1>
    %writeValid_5 = sv.logic name "writeValid" : !hw.inout<i1>
    %true_6 = hw.constant true
    %49 = comb.and %stAddr0_valid, %stData0_valid : i1
    sv.bpassign %writeValid, %49 : i1
    %50 = comb.and %stAddr1_valid, %stData1_valid : i1
    sv.bpassign %writeValid_4, %50 : i1
    %51 = comb.and %stAddr2_valid, %stData2_valid : i1
    sv.bpassign %writeValid_5, %51 : i1
    %52 = sv.read_inout %writeValid_5 : !hw.inout<i1>
    sv.if %52 {
      %75 = comb.extract %stAddr2 from 0 : (i64) -> i2
      %76 = sv.array_index_inout %_handshake_memory_0[%75] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %76, %stData2 : i64
    }
    %53 = sv.read_inout %writeValid_4 : !hw.inout<i1>
    sv.if %53 {
      %75 = comb.extract %stAddr1 from 0 : (i64) -> i2
      %76 = sv.array_index_inout %_handshake_memory_0[%75] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %76, %stData1 : i64
    }
    %54 = sv.read_inout %writeValid : !hw.inout<i1>
    sv.if %54 {
      %75 = comb.extract %stAddr0 from 0 : (i64) -> i2
      %76 = sv.array_index_inout %_handshake_memory_0[%75] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %76, %stData0 : i64
    }
    %55 = sv.read_inout %allDone : !hw.inout<i1>
    %56 = comb.xor %55, %true_6 : i1
    %57 = sv.read_inout %done0 : !hw.inout<i1>
    %58 = comb.and %57, %56 : i1
    sv.passign %emitted_0, %58 : i1
    %59 = sv.read_inout %allDone : !hw.inout<i1>
    %60 = comb.xor %59, %true_6 : i1
    %61 = sv.read_inout %done1 : !hw.inout<i1>
    %62 = comb.and %61, %60 : i1
    sv.passign %emitted_1, %62 : i1
    %63 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    %64 = sv.read_inout %writeValid : !hw.inout<i1>
    %65 = sv.read_inout %emptyOrComplete_0 : !hw.inout<i1>
    %66 = comb.mux %65, %64, %63 : i1
    sv.passign %writeValidBuffer, %66 : i1
    %67 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
    %68 = sv.read_inout %writeValid_4 : !hw.inout<i1>
    %69 = sv.read_inout %emptyOrComplete_2 : !hw.inout<i1>
    %70 = comb.mux %69, %68, %67 : i1
    sv.passign %writeValidBuffer_1, %70 : i1
    %71 = sv.read_inout %writeValidBuffer_3 : !hw.inout<i1>
    %72 = sv.read_inout %writeValid_5 : !hw.inout<i1>
    %73 = sv.read_inout %emptyOrComplete : !hw.inout<i1>
    %74 = comb.mux %73, %72, %71 : i1
    sv.passign %writeValidBuffer_3, %74 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %writeValidBuffer, %false : i1
    sv.passign %writeValidBuffer_1, %false : i1
    sv.passign %writeValidBuffer_3, %false : i1
  }
  %30 = sv.read_inout %writeValidBuffer_3 : !hw.inout<i1>
  %31 = comb.and %stDone2_ready, %30 {sv.namehint = "storeCompleted"} : i1
  %32 = sv.read_inout %writeValidBuffer_3 : !hw.inout<i1>
  %33 = comb.xor %32, %true : i1
  %34 = comb.or %33, %31 : i1
  sv.assign %emptyOrComplete, %34 : i1
  %35 = sv.array_index_inout %_handshake_memory_0[%0] : !hw.inout<uarray<3xi64>>, i2
  %36 = sv.read_inout %35 : !hw.inout<i64>
  %37 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
  %38 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
  %39 = sv.read_inout %writeValidBuffer_3 : !hw.inout<i1>
  %40 = sv.read_inout %4 : !hw.inout<i1>
  %41 = sv.read_inout %12 : !hw.inout<i1>
  %42 = sv.read_inout %allDone : !hw.inout<i1>
  %43 = sv.read_inout %emptyOrComplete_0 : !hw.inout<i1>
  %44 = sv.read_inout %emptyOrComplete_0 : !hw.inout<i1>
  %45 = sv.read_inout %emptyOrComplete_2 : !hw.inout<i1>
  %46 = sv.read_inout %emptyOrComplete_2 : !hw.inout<i1>
  %47 = sv.read_inout %emptyOrComplete : !hw.inout<i1>
  %48 = sv.read_inout %emptyOrComplete : !hw.inout<i1>
  hw.output %43, %44, %45, %46, %47, %48, %42, %36, %40, %c0_i0, %37, %c0_i0, %38, %c0_i0, %39, %c0_i0, %41 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_memory_out_ui64_id1(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : i1, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
  %emptyOrComplete = sv.wire : !hw.inout<i1>
  %true = hw.constant true
  %c0_i0 = hw.constant 0 : i0
  %_handshake_memory_1 = sv.reg : !hw.inout<uarray<3xi64>> 
  %0 = comb.extract %ldAddr0 from 0 : (i64) -> i2
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %1 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %2 = comb.xor %1, %true : i1
  %3 = comb.and %2, %ldAddr0_valid : i1
  %4 = sv.wire : !hw.inout<i1>
  sv.assign %4, %3 : i1
  %5 = sv.read_inout %4 : !hw.inout<i1>
  %6 = comb.and %ldData0_ready, %5 : i1
  %7 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %8 = comb.or %6, %7 : i1
  %done0 = sv.wire : !hw.inout<i1>
  sv.assign %done0, %8 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %10 = comb.xor %9, %true : i1
  %11 = comb.and %10, %ldAddr0_valid : i1
  %12 = sv.wire : !hw.inout<i1>
  sv.assign %12, %11 : i1
  %13 = sv.read_inout %12 : !hw.inout<i1>
  %14 = comb.and %ldDone0_ready, %13 : i1
  %15 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %16 = comb.or %14, %15 : i1
  %done1 = sv.wire : !hw.inout<i1>
  sv.assign %done1, %16 : i1
  %17 = sv.read_inout %done0 : !hw.inout<i1>
  %18 = sv.read_inout %done1 : !hw.inout<i1>
  %19 = comb.and %17, %18 : i1
  %allDone = sv.wire : !hw.inout<i1>
  sv.assign %allDone, %19 : i1
  %writeValidBuffer = sv.reg sym @writeValidBuffer : !hw.inout<i1> 
  %20 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
  %21 = comb.and %stDone0_ready, %20 {sv.namehint = "storeCompleted"} : i1
  %22 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
  %23 = comb.xor %22, %true : i1
  %24 = comb.or %23, %21 : i1
  %emptyOrComplete_0 = sv.wire name "emptyOrComplete" : !hw.inout<i1>
  sv.assign %emptyOrComplete_0, %24 : i1
  %writeValidBuffer_1 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
  %25 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
  %26 = comb.and %stDone1_ready, %25 {sv.namehint = "storeCompleted"} : i1
  %27 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
  %28 = comb.xor %27, %true : i1
  %29 = comb.or %28, %26 : i1
  %emptyOrComplete_2 = sv.wire name "emptyOrComplete" : !hw.inout<i1>
  sv.assign %emptyOrComplete_2, %29 : i1
  %writeValidBuffer_3 = sv.reg sym @writeValidBuffer name "writeValidBuffer" : !hw.inout<i1> 
  sv.alwaysff(posedge %clock) {
    %writeValid = sv.logic : !hw.inout<i1>
    %writeValid_4 = sv.logic name "writeValid" : !hw.inout<i1>
    %writeValid_5 = sv.logic name "writeValid" : !hw.inout<i1>
    %true_6 = hw.constant true
    %49 = comb.and %stAddr0_valid, %stData0_valid : i1
    sv.bpassign %writeValid, %49 : i1
    %50 = comb.and %stAddr1_valid, %stData1_valid : i1
    sv.bpassign %writeValid_4, %50 : i1
    %51 = comb.and %stAddr2_valid, %stData2_valid : i1
    sv.bpassign %writeValid_5, %51 : i1
    %52 = sv.read_inout %writeValid_5 : !hw.inout<i1>
    sv.if %52 {
      %75 = comb.extract %stAddr2 from 0 : (i64) -> i2
      %76 = sv.array_index_inout %_handshake_memory_1[%75] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %76, %stData2 : i64
    }
    %53 = sv.read_inout %writeValid_4 : !hw.inout<i1>
    sv.if %53 {
      %75 = comb.extract %stAddr1 from 0 : (i64) -> i2
      %76 = sv.array_index_inout %_handshake_memory_1[%75] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %76, %stData1 : i64
    }
    %54 = sv.read_inout %writeValid : !hw.inout<i1>
    sv.if %54 {
      %75 = comb.extract %stAddr0 from 0 : (i64) -> i2
      %76 = sv.array_index_inout %_handshake_memory_1[%75] : !hw.inout<uarray<3xi64>>, i2
      sv.passign %76, %stData0 : i64
    }
    %55 = sv.read_inout %allDone : !hw.inout<i1>
    %56 = comb.xor %55, %true_6 : i1
    %57 = sv.read_inout %done0 : !hw.inout<i1>
    %58 = comb.and %57, %56 : i1
    sv.passign %emitted_0, %58 : i1
    %59 = sv.read_inout %allDone : !hw.inout<i1>
    %60 = comb.xor %59, %true_6 : i1
    %61 = sv.read_inout %done1 : !hw.inout<i1>
    %62 = comb.and %61, %60 : i1
    sv.passign %emitted_1, %62 : i1
    %63 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    %64 = sv.read_inout %writeValid : !hw.inout<i1>
    %65 = sv.read_inout %emptyOrComplete_0 : !hw.inout<i1>
    %66 = comb.mux %65, %64, %63 : i1
    sv.passign %writeValidBuffer, %66 : i1
    %67 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
    %68 = sv.read_inout %writeValid_4 : !hw.inout<i1>
    %69 = sv.read_inout %emptyOrComplete_2 : !hw.inout<i1>
    %70 = comb.mux %69, %68, %67 : i1
    sv.passign %writeValidBuffer_1, %70 : i1
    %71 = sv.read_inout %writeValidBuffer_3 : !hw.inout<i1>
    %72 = sv.read_inout %writeValid_5 : !hw.inout<i1>
    %73 = sv.read_inout %emptyOrComplete : !hw.inout<i1>
    %74 = comb.mux %73, %72, %71 : i1
    sv.passign %writeValidBuffer_3, %74 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %writeValidBuffer, %false : i1
    sv.passign %writeValidBuffer_1, %false : i1
    sv.passign %writeValidBuffer_3, %false : i1
  }
  %30 = sv.read_inout %writeValidBuffer_3 : !hw.inout<i1>
  %31 = comb.and %stDone2_ready, %30 {sv.namehint = "storeCompleted"} : i1
  %32 = sv.read_inout %writeValidBuffer_3 : !hw.inout<i1>
  %33 = comb.xor %32, %true : i1
  %34 = comb.or %33, %31 : i1
  sv.assign %emptyOrComplete, %34 : i1
  %35 = sv.array_index_inout %_handshake_memory_1[%0] : !hw.inout<uarray<3xi64>>, i2
  %36 = sv.read_inout %35 : !hw.inout<i64>
  %37 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
  %38 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
  %39 = sv.read_inout %writeValidBuffer_3 : !hw.inout<i1>
  %40 = sv.read_inout %4 : !hw.inout<i1>
  %41 = sv.read_inout %12 : !hw.inout<i1>
  %42 = sv.read_inout %allDone : !hw.inout<i1>
  %43 = sv.read_inout %emptyOrComplete_0 : !hw.inout<i1>
  %44 = sv.read_inout %emptyOrComplete_0 : !hw.inout<i1>
  %45 = sv.read_inout %emptyOrComplete_2 : !hw.inout<i1>
  %46 = sv.read_inout %emptyOrComplete_2 : !hw.inout<i1>
  %47 = sv.read_inout %emptyOrComplete : !hw.inout<i1>
  %48 = sv.read_inout %emptyOrComplete : !hw.inout<i1>
  hw.output %43, %44, %45, %46, %47, %48, %42, %36, %40, %c0_i0, %37, %c0_i0, %38, %c0_i0, %39, %c0_i0, %41 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
  %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
  %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
  %true = hw.constant true
  %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
  %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = sv.read_inout %ready0_reg : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.or %1, %3 : i1
  %5 = sv.wire : !hw.inout<i1>
  sv.assign %5, %4 : i1
  %c0_i0 = hw.constant 0 : i0
  %c0_i0_0 = hw.constant 0 : i0
  %c0_i0_1 = hw.constant 0 : i0
  %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
  %6 = sv.read_inout %valid1_reg : !hw.inout<i1>
  %7 = comb.xor %6, %true : i1
  %8 = sv.read_inout %ready1_reg : !hw.inout<i1>
  %9 = comb.xor %8, %true : i1
  %10 = comb.or %7, %9 : i1
  %11 = sv.wire : !hw.inout<i1>
  sv.assign %11, %10 : i1
  %c0_i0_2 = hw.constant 0 : i0
  %c0_i0_3 = hw.constant 0 : i0
  %12 = sv.read_inout %valid1_reg : !hw.inout<i1>
  %13 = sv.read_inout %ready1_reg : !hw.inout<i1>
  %14 = sv.read_inout %ready1_reg : !hw.inout<i1>
  %15 = comb.mux %13, %14, %12 : i1
  %c0_i0_4 = hw.constant 0 : i0
  %c0_i0_5 = hw.constant 0 : i0
  sv.alwaysff(posedge %clock) {
    %true_7 = hw.constant true
    %c0_i0_8 = hw.constant 0 : i0
    %c0_i0_9 = hw.constant 0 : i0
    %17 = sv.read_inout %11 : !hw.inout<i1>
    %18 = comb.xor %17, %true_7 : i1
    %true_10 = hw.constant true
    %19 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %20 = comb.xor %19, %true_10 : i1
    %21 = comb.and %18, %20 : i1
    %22 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %23 = sv.read_inout %11 : !hw.inout<i1>
    %24 = comb.and %23, %22 : i1
    %c0_i0_11 = hw.constant 0 : i0
    %c0_i0_12 = hw.constant 0 : i0
    %25 = comb.xor %out0_ready, %true_7 : i1
    %true_13 = hw.constant true
    %26 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %27 = comb.xor %26, %true_13 : i1
    %28 = comb.and %25, %27 : i1
    %29 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %30 = comb.and %out0_ready, %29 : i1
    %c0_i0_14 = hw.constant 0 : i0
    %31 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %32 = sv.read_inout %5 : !hw.inout<i1>
    %33 = comb.mux %32, %in0_valid, %31 : i1
    sv.passign %valid0_reg, %33 : i1
    %c0_i0_15 = hw.constant 0 : i0
    %34 = comb.xor %24, %true_7 : i1
    %35 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %36 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %37 = comb.mux %21, %35, %36 : i1
    %38 = comb.and %34, %37 : i1
    sv.passign %ready0_reg, %38 : i1
    %c0_i0_16 = hw.constant 0 : i0
    %c0_i0_17 = hw.constant 0 : i0
    %39 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %40 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %41 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %42 = comb.mux %41, %40, %39 : i1
    %43 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %44 = sv.read_inout %11 : !hw.inout<i1>
    %45 = comb.mux %44, %42, %43 : i1
    sv.passign %valid1_reg, %45 : i1
    %c0_i0_18 = hw.constant 0 : i0
    %c0_i0_19 = hw.constant 0 : i0
    %46 = comb.xor %30, %true_7 : i1
    %47 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %48 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %49 = comb.mux %28, %47, %48 : i1
    %50 = comb.and %46, %49 : i1
    sv.passign %ready1_reg, %50 : i1
    %c0_i0_20 = hw.constant 0 : i0
    %c0_i0_21 = hw.constant 0 : i0
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    %c0_i0_7 = hw.constant 0 : i0
    sv.passign %valid0_reg, %false : i1
    sv.passign %ready0_reg, %false : i1
    sv.passign %valid1_reg, %false : i1
    sv.passign %ready1_reg, %false : i1
  }
  %c0_i0_6 = hw.constant 0 : i0
  %16 = sv.read_inout %5 : !hw.inout<i1>
  hw.output %16, %c0_i0_6, %15 : i1, i0, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_join_3ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c0_i0 = hw.constant 0 : i0
  %0 = comb.and %in1_valid, %in2_valid : i1
  %1 = comb.and %in0_valid, %0 : i1
  %2 = sv.wire : !hw.inout<i1>
  sv.assign %2, %1 : i1
  %3 = sv.read_inout %2 : !hw.inout<i1>
  %4 = comb.and %out0_ready, %3 : i1
  %5 = sv.wire : !hw.inout<i1>
  sv.assign %5, %4 : i1
  %6 = sv.read_inout %2 : !hw.inout<i1>
  %7 = sv.read_inout %5 : !hw.inout<i1>
  %8 = sv.read_inout %5 : !hw.inout<i1>
  %9 = sv.read_inout %5 : !hw.inout<i1>
  hw.output %7, %8, %9, %c0_i0, %6 : i1, i1, i1, i0, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1) {
  %allDone = sv.wire : !hw.inout<i1>
  %done3 = sv.wire : !hw.inout<i1>
  %true = hw.constant true
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.and %1, %in0_valid : i1
  %3 = sv.wire : !hw.inout<i1>
  sv.assign %3, %2 : i1
  %4 = sv.read_inout %3 : !hw.inout<i1>
  %5 = comb.and %out0_ready, %4 : i1
  %6 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %7 = comb.or %5, %6 : i1
  %done0 = sv.wire : !hw.inout<i1>
  sv.assign %done0, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %9 = comb.xor %8, %true : i1
  %10 = comb.and %9, %in0_valid : i1
  %11 = sv.wire : !hw.inout<i1>
  sv.assign %11, %10 : i1
  %12 = sv.read_inout %11 : !hw.inout<i1>
  %13 = comb.and %out1_ready, %12 : i1
  %14 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %15 = comb.or %13, %14 : i1
  %done1 = sv.wire : !hw.inout<i1>
  sv.assign %done1, %15 : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %17 = comb.xor %16, %true : i1
  %18 = comb.and %17, %in0_valid : i1
  %19 = sv.wire : !hw.inout<i1>
  sv.assign %19, %18 : i1
  %20 = sv.read_inout %19 : !hw.inout<i1>
  %21 = comb.and %out2_ready, %20 : i1
  %22 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %23 = comb.or %21, %22 : i1
  %done2 = sv.wire : !hw.inout<i1>
  sv.assign %done2, %23 : i1
  %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
  sv.alwaysff(posedge %clock) {
    %true_0 = hw.constant true
    %44 = sv.read_inout %allDone : !hw.inout<i1>
    %45 = comb.xor %44, %true_0 : i1
    %46 = sv.read_inout %done0 : !hw.inout<i1>
    %47 = comb.and %46, %45 : i1
    sv.passign %emitted_0, %47 : i1
    %48 = sv.read_inout %allDone : !hw.inout<i1>
    %49 = comb.xor %48, %true_0 : i1
    %50 = sv.read_inout %done1 : !hw.inout<i1>
    %51 = comb.and %50, %49 : i1
    sv.passign %emitted_1, %51 : i1
    %52 = sv.read_inout %allDone : !hw.inout<i1>
    %53 = comb.xor %52, %true_0 : i1
    %54 = sv.read_inout %done2 : !hw.inout<i1>
    %55 = comb.and %54, %53 : i1
    sv.passign %emitted_2, %55 : i1
    %56 = sv.read_inout %allDone : !hw.inout<i1>
    %57 = comb.xor %56, %true_0 : i1
    %58 = sv.read_inout %done3 : !hw.inout<i1>
    %59 = comb.and %58, %57 : i1
    sv.passign %emitted_3, %59 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
    sv.passign %emitted_3, %false : i1
  }
  %24 = sv.read_inout %emitted_3 : !hw.inout<i1>
  %25 = comb.xor %24, %true : i1
  %26 = comb.and %25, %in0_valid : i1
  %27 = sv.wire : !hw.inout<i1>
  sv.assign %27, %26 : i1
  %28 = sv.read_inout %27 : !hw.inout<i1>
  %29 = comb.and %out3_ready, %28 : i1
  %30 = sv.read_inout %emitted_3 : !hw.inout<i1>
  %31 = comb.or %29, %30 : i1
  sv.assign %done3, %31 : i1
  %32 = sv.read_inout %done0 : !hw.inout<i1>
  %33 = sv.read_inout %done1 : !hw.inout<i1>
  %34 = sv.read_inout %done2 : !hw.inout<i1>
  %35 = sv.read_inout %done3 : !hw.inout<i1>
  %36 = comb.and %32, %33 : i1
  %37 = comb.and %34, %35 : i1
  %38 = comb.and %36, %37 : i1
  sv.assign %allDone, %38 : i1
  %39 = sv.read_inout %3 : !hw.inout<i1>
  %40 = sv.read_inout %11 : !hw.inout<i1>
  %41 = sv.read_inout %19 : !hw.inout<i1>
  %42 = sv.read_inout %27 : !hw.inout<i1>
  %43 = sv.read_inout %allDone : !hw.inout<i1>
  hw.output %43, %in0, %39, %in0, %40, %in0, %41, %in0, %42 : i1, i1, i1, i1, i1, i1, i1, i1, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
  %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
  %true = hw.constant true
  %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
  %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = sv.read_inout %ready0_reg : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.or %1, %3 : i1
  %5 = sv.wire : !hw.inout<i1>
  sv.assign %5, %4 : i1
  %data0_reg = sv.reg sym @data0_reg : !hw.inout<i1> 
  %6 = sv.read_inout %valid0_reg : !hw.inout<i1>
  %7 = sv.read_inout %ready0_reg : !hw.inout<i1>
  %8 = sv.read_inout %ready0_reg : !hw.inout<i1>
  %9 = comb.mux %7, %8, %6 : i1
  %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i1> 
  sv.alwaysff(posedge %clock) {
    %15 = sv.logic : !hw.inout<i1>
    %16 = sv.logic : !hw.inout<i1>
    %true_0 = hw.constant true
    %17 = comb.xor %out0_ready, %true_0 : i1
    %true_1 = hw.constant true
    %18 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %19 = comb.xor %18, %true_1 : i1
    %20 = comb.and %17, %19 : i1
    sv.bpassign %15, %20 : i1
    %21 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %22 = comb.and %out0_ready, %21 : i1
    sv.bpassign %16, %22 : i1
    %23 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %24 = sv.read_inout %5 : !hw.inout<i1>
    %25 = comb.mux %24, %in0_valid, %23 : i1
    sv.passign %valid0_reg, %25 : i1
    %26 = sv.read_inout %5 : !hw.inout<i1>
    %27 = sv.read_inout %data0_reg : !hw.inout<i1>
    %28 = comb.mux %26, %in0, %27 : i1
    sv.passign %data0_reg, %28 : i1
    %29 = sv.read_inout %16 : !hw.inout<i1>
    %30 = comb.xor %29, %true_0 : i1
    %31 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %32 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %33 = sv.read_inout %15 : !hw.inout<i1>
    %34 = comb.mux %33, %31, %32 : i1
    %35 = comb.and %30, %34 : i1
    sv.passign %ready0_reg, %35 : i1
    %36 = sv.read_inout %16 : !hw.inout<i1>
    %37 = comb.xor %36, %true_0 : i1
    %38 = sv.read_inout %data0_reg : !hw.inout<i1>
    %39 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
    %40 = sv.read_inout %15 : !hw.inout<i1>
    %41 = comb.mux %40, %38, %39 : i1
    %42 = comb.and %37, %41 : i1
    sv.passign %ctrl_data0_reg, %42 : i1
  }(syncreset : posedge %reset) {
    %true_0 = hw.constant true
    %false = hw.constant false
    sv.passign %valid0_reg, %true_0 : i1
    sv.passign %data0_reg, %false : i1
    sv.passign %ready0_reg, %false : i1
    sv.passign %ctrl_data0_reg, %false : i1
  }
  %10 = sv.read_inout %data0_reg : !hw.inout<i1>
  %11 = sv.read_inout %ready0_reg : !hw.inout<i1>
  %12 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
  %13 = comb.mux %11, %12, %10 : i1
  %14 = sv.read_inout %5 : !hw.inout<i1>
  hw.output %14, %13, %9 : i1, i1, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_buffer_in_ui1_out_ui1_2slots_seq(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
  %ready1_reg = sv.reg sym @ready1_reg : !hw.inout<i1> 
  %ready0_reg = sv.reg sym @ready0_reg : !hw.inout<i1> 
  %true = hw.constant true
  %valid0_reg = sv.reg sym @valid0_reg : !hw.inout<i1> 
  %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = sv.read_inout %ready0_reg : !hw.inout<i1>
  %3 = comb.xor %2, %true : i1
  %4 = comb.or %1, %3 : i1
  %5 = sv.wire : !hw.inout<i1>
  sv.assign %5, %4 : i1
  %data0_reg = sv.reg sym @data0_reg : !hw.inout<i1> 
  %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg : !hw.inout<i1> 
  %valid1_reg = sv.reg sym @valid1_reg : !hw.inout<i1> 
  %6 = sv.read_inout %valid1_reg : !hw.inout<i1>
  %7 = comb.xor %6, %true : i1
  %8 = sv.read_inout %ready1_reg : !hw.inout<i1>
  %9 = comb.xor %8, %true : i1
  %10 = comb.or %7, %9 : i1
  %11 = sv.wire : !hw.inout<i1>
  sv.assign %11, %10 : i1
  %data1_reg = sv.reg sym @data1_reg : !hw.inout<i1> 
  %12 = sv.read_inout %valid1_reg : !hw.inout<i1>
  %13 = sv.read_inout %ready1_reg : !hw.inout<i1>
  %14 = sv.read_inout %ready1_reg : !hw.inout<i1>
  %15 = comb.mux %13, %14, %12 : i1
  %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg : !hw.inout<i1> 
  sv.alwaysff(posedge %clock) {
    %21 = sv.logic : !hw.inout<i1>
    %22 = sv.logic : !hw.inout<i1>
    %23 = sv.logic : !hw.inout<i1>
    %24 = sv.logic : !hw.inout<i1>
    %true_0 = hw.constant true
    %25 = sv.read_inout %11 : !hw.inout<i1>
    %26 = comb.xor %25, %true_0 : i1
    %true_1 = hw.constant true
    %27 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %28 = comb.xor %27, %true_1 : i1
    %29 = comb.and %26, %28 : i1
    sv.bpassign %21, %29 : i1
    %30 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %31 = sv.read_inout %11 : !hw.inout<i1>
    %32 = comb.and %31, %30 : i1
    sv.bpassign %22, %32 : i1
    %33 = comb.xor %out0_ready, %true_0 : i1
    %true_2 = hw.constant true
    %34 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %35 = comb.xor %34, %true_2 : i1
    %36 = comb.and %33, %35 : i1
    sv.bpassign %23, %36 : i1
    %37 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %38 = comb.and %out0_ready, %37 : i1
    sv.bpassign %24, %38 : i1
    %39 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %40 = sv.read_inout %5 : !hw.inout<i1>
    %41 = comb.mux %40, %in0_valid, %39 : i1
    sv.passign %valid0_reg, %41 : i1
    %42 = sv.read_inout %5 : !hw.inout<i1>
    %43 = sv.read_inout %data0_reg : !hw.inout<i1>
    %44 = comb.mux %42, %in0, %43 : i1
    sv.passign %data0_reg, %44 : i1
    %45 = sv.read_inout %22 : !hw.inout<i1>
    %46 = comb.xor %45, %true_0 : i1
    %47 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %48 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %49 = sv.read_inout %21 : !hw.inout<i1>
    %50 = comb.mux %49, %47, %48 : i1
    %51 = comb.and %46, %50 : i1
    sv.passign %ready0_reg, %51 : i1
    %52 = sv.read_inout %22 : !hw.inout<i1>
    %53 = comb.xor %52, %true_0 : i1
    %54 = sv.read_inout %data0_reg : !hw.inout<i1>
    %55 = sv.read_inout %21 : !hw.inout<i1>
    %56 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
    %57 = comb.mux %55, %54, %56 : i1
    %58 = comb.and %53, %57 : i1
    sv.passign %ctrl_data0_reg, %58 : i1
    %59 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %60 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %61 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %62 = comb.mux %61, %60, %59 : i1
    %63 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %64 = sv.read_inout %11 : !hw.inout<i1>
    %65 = comb.mux %64, %62, %63 : i1
    sv.passign %valid1_reg, %65 : i1
    %66 = sv.read_inout %data0_reg : !hw.inout<i1>
    %67 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
    %68 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %69 = comb.mux %68, %67, %66 : i1
    %70 = sv.read_inout %11 : !hw.inout<i1>
    %71 = sv.read_inout %data1_reg : !hw.inout<i1>
    %72 = comb.mux %70, %69, %71 : i1
    sv.passign %data1_reg, %72 : i1
    %73 = sv.read_inout %24 : !hw.inout<i1>
    %74 = comb.xor %73, %true_0 : i1
    %75 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %76 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %77 = sv.read_inout %23 : !hw.inout<i1>
    %78 = comb.mux %77, %75, %76 : i1
    %79 = comb.and %74, %78 : i1
    sv.passign %ready1_reg, %79 : i1
    %80 = sv.read_inout %24 : !hw.inout<i1>
    %81 = comb.xor %80, %true_0 : i1
    %82 = sv.read_inout %data1_reg : !hw.inout<i1>
    %83 = sv.read_inout %ctrl_data1_reg : !hw.inout<i1>
    %84 = sv.read_inout %23 : !hw.inout<i1>
    %85 = comb.mux %84, %82, %83 : i1
    %86 = comb.and %81, %85 : i1
    sv.passign %ctrl_data1_reg, %86 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %valid0_reg, %false : i1
    sv.passign %data0_reg, %false : i1
    sv.passign %ready0_reg, %false : i1
    sv.passign %ctrl_data0_reg, %false : i1
    sv.passign %valid1_reg, %false : i1
    sv.passign %data1_reg, %false : i1
    sv.passign %ready1_reg, %false : i1
    sv.passign %ctrl_data1_reg, %false : i1
  }
  %16 = sv.read_inout %data1_reg : !hw.inout<i1>
  %17 = sv.read_inout %ready1_reg : !hw.inout<i1>
  %18 = sv.read_inout %ctrl_data1_reg : !hw.inout<i1>
  %19 = comb.mux %17, %18, %16 : i1
  %20 = sv.read_inout %5 : !hw.inout<i1>
  hw.output %20, %19, %15 : i1, i1, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_fork_1ins_14outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, in %out5_ready : i1, in %out6_ready : i1, in %out7_ready : i1, in %out8_ready : i1, in %out9_ready : i1, in %out10_ready : i1, in %out11_ready : i1, in %out12_ready : i1, in %out13_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1, out out4 : i0, out out4_valid : i1, out out5 : i0, out out5_valid : i1, out out6 : i0, out out6_valid : i1, out out7 : i0, out out7_valid : i1, out out8 : i0, out out8_valid : i1, out out9 : i0, out out9_valid : i1, out out10 : i0, out out10_valid : i1, out out11 : i0, out out11_valid : i1, out out12 : i0, out out12_valid : i1, out out13 : i0, out out13_valid : i1) {
  %allDone = sv.wire : !hw.inout<i1>
  %done13 = sv.wire : !hw.inout<i1>
  %true = hw.constant true
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.and %1, %in0_valid : i1
  %3 = sv.wire : !hw.inout<i1>
  sv.assign %3, %2 : i1
  %4 = sv.read_inout %3 : !hw.inout<i1>
  %5 = comb.and %out0_ready, %4 : i1
  %6 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %7 = comb.or %5, %6 : i1
  %done0 = sv.wire : !hw.inout<i1>
  sv.assign %done0, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %9 = comb.xor %8, %true : i1
  %10 = comb.and %9, %in0_valid : i1
  %11 = sv.wire : !hw.inout<i1>
  sv.assign %11, %10 : i1
  %12 = sv.read_inout %11 : !hw.inout<i1>
  %13 = comb.and %out1_ready, %12 : i1
  %14 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %15 = comb.or %13, %14 : i1
  %done1 = sv.wire : !hw.inout<i1>
  sv.assign %done1, %15 : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %17 = comb.xor %16, %true : i1
  %18 = comb.and %17, %in0_valid : i1
  %19 = sv.wire : !hw.inout<i1>
  sv.assign %19, %18 : i1
  %20 = sv.read_inout %19 : !hw.inout<i1>
  %21 = comb.and %out2_ready, %20 : i1
  %22 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %23 = comb.or %21, %22 : i1
  %done2 = sv.wire : !hw.inout<i1>
  sv.assign %done2, %23 : i1
  %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
  %24 = sv.read_inout %emitted_3 : !hw.inout<i1>
  %25 = comb.xor %24, %true : i1
  %26 = comb.and %25, %in0_valid : i1
  %27 = sv.wire : !hw.inout<i1>
  sv.assign %27, %26 : i1
  %28 = sv.read_inout %27 : !hw.inout<i1>
  %29 = comb.and %out3_ready, %28 : i1
  %30 = sv.read_inout %emitted_3 : !hw.inout<i1>
  %31 = comb.or %29, %30 : i1
  %done3 = sv.wire : !hw.inout<i1>
  sv.assign %done3, %31 : i1
  %emitted_4 = sv.reg sym @emitted_4 : !hw.inout<i1> 
  %32 = sv.read_inout %emitted_4 : !hw.inout<i1>
  %33 = comb.xor %32, %true : i1
  %34 = comb.and %33, %in0_valid : i1
  %35 = sv.wire : !hw.inout<i1>
  sv.assign %35, %34 : i1
  %36 = sv.read_inout %35 : !hw.inout<i1>
  %37 = comb.and %out4_ready, %36 : i1
  %38 = sv.read_inout %emitted_4 : !hw.inout<i1>
  %39 = comb.or %37, %38 : i1
  %done4 = sv.wire : !hw.inout<i1>
  sv.assign %done4, %39 : i1
  %emitted_5 = sv.reg sym @emitted_5 : !hw.inout<i1> 
  %40 = sv.read_inout %emitted_5 : !hw.inout<i1>
  %41 = comb.xor %40, %true : i1
  %42 = comb.and %41, %in0_valid : i1
  %43 = sv.wire : !hw.inout<i1>
  sv.assign %43, %42 : i1
  %44 = sv.read_inout %43 : !hw.inout<i1>
  %45 = comb.and %out5_ready, %44 : i1
  %46 = sv.read_inout %emitted_5 : !hw.inout<i1>
  %47 = comb.or %45, %46 : i1
  %done5 = sv.wire : !hw.inout<i1>
  sv.assign %done5, %47 : i1
  %emitted_6 = sv.reg sym @emitted_6 : !hw.inout<i1> 
  %48 = sv.read_inout %emitted_6 : !hw.inout<i1>
  %49 = comb.xor %48, %true : i1
  %50 = comb.and %49, %in0_valid : i1
  %51 = sv.wire : !hw.inout<i1>
  sv.assign %51, %50 : i1
  %52 = sv.read_inout %51 : !hw.inout<i1>
  %53 = comb.and %out6_ready, %52 : i1
  %54 = sv.read_inout %emitted_6 : !hw.inout<i1>
  %55 = comb.or %53, %54 : i1
  %done6 = sv.wire : !hw.inout<i1>
  sv.assign %done6, %55 : i1
  %emitted_7 = sv.reg sym @emitted_7 : !hw.inout<i1> 
  %56 = sv.read_inout %emitted_7 : !hw.inout<i1>
  %57 = comb.xor %56, %true : i1
  %58 = comb.and %57, %in0_valid : i1
  %59 = sv.wire : !hw.inout<i1>
  sv.assign %59, %58 : i1
  %60 = sv.read_inout %59 : !hw.inout<i1>
  %61 = comb.and %out7_ready, %60 : i1
  %62 = sv.read_inout %emitted_7 : !hw.inout<i1>
  %63 = comb.or %61, %62 : i1
  %done7 = sv.wire : !hw.inout<i1>
  sv.assign %done7, %63 : i1
  %emitted_8 = sv.reg sym @emitted_8 : !hw.inout<i1> 
  %64 = sv.read_inout %emitted_8 : !hw.inout<i1>
  %65 = comb.xor %64, %true : i1
  %66 = comb.and %65, %in0_valid : i1
  %67 = sv.wire : !hw.inout<i1>
  sv.assign %67, %66 : i1
  %68 = sv.read_inout %67 : !hw.inout<i1>
  %69 = comb.and %out8_ready, %68 : i1
  %70 = sv.read_inout %emitted_8 : !hw.inout<i1>
  %71 = comb.or %69, %70 : i1
  %done8 = sv.wire : !hw.inout<i1>
  sv.assign %done8, %71 : i1
  %emitted_9 = sv.reg sym @emitted_9 : !hw.inout<i1> 
  %72 = sv.read_inout %emitted_9 : !hw.inout<i1>
  %73 = comb.xor %72, %true : i1
  %74 = comb.and %73, %in0_valid : i1
  %75 = sv.wire : !hw.inout<i1>
  sv.assign %75, %74 : i1
  %76 = sv.read_inout %75 : !hw.inout<i1>
  %77 = comb.and %out9_ready, %76 : i1
  %78 = sv.read_inout %emitted_9 : !hw.inout<i1>
  %79 = comb.or %77, %78 : i1
  %done9 = sv.wire : !hw.inout<i1>
  sv.assign %done9, %79 : i1
  %emitted_10 = sv.reg sym @emitted_10 : !hw.inout<i1> 
  %80 = sv.read_inout %emitted_10 : !hw.inout<i1>
  %81 = comb.xor %80, %true : i1
  %82 = comb.and %81, %in0_valid : i1
  %83 = sv.wire : !hw.inout<i1>
  sv.assign %83, %82 : i1
  %84 = sv.read_inout %83 : !hw.inout<i1>
  %85 = comb.and %out10_ready, %84 : i1
  %86 = sv.read_inout %emitted_10 : !hw.inout<i1>
  %87 = comb.or %85, %86 : i1
  %done10 = sv.wire : !hw.inout<i1>
  sv.assign %done10, %87 : i1
  %emitted_11 = sv.reg sym @emitted_11 : !hw.inout<i1> 
  %88 = sv.read_inout %emitted_11 : !hw.inout<i1>
  %89 = comb.xor %88, %true : i1
  %90 = comb.and %89, %in0_valid : i1
  %91 = sv.wire : !hw.inout<i1>
  sv.assign %91, %90 : i1
  %92 = sv.read_inout %91 : !hw.inout<i1>
  %93 = comb.and %out11_ready, %92 : i1
  %94 = sv.read_inout %emitted_11 : !hw.inout<i1>
  %95 = comb.or %93, %94 : i1
  %done11 = sv.wire : !hw.inout<i1>
  sv.assign %done11, %95 : i1
  %emitted_12 = sv.reg sym @emitted_12 : !hw.inout<i1> 
  %96 = sv.read_inout %emitted_12 : !hw.inout<i1>
  %97 = comb.xor %96, %true : i1
  %98 = comb.and %97, %in0_valid : i1
  %99 = sv.wire : !hw.inout<i1>
  sv.assign %99, %98 : i1
  %100 = sv.read_inout %99 : !hw.inout<i1>
  %101 = comb.and %out12_ready, %100 : i1
  %102 = sv.read_inout %emitted_12 : !hw.inout<i1>
  %103 = comb.or %101, %102 : i1
  %done12 = sv.wire : !hw.inout<i1>
  sv.assign %done12, %103 : i1
  %emitted_13 = sv.reg sym @emitted_13 : !hw.inout<i1> 
  sv.alwaysff(posedge %clock) {
    %true_0 = hw.constant true
    %154 = sv.read_inout %allDone : !hw.inout<i1>
    %155 = comb.xor %154, %true_0 : i1
    %156 = sv.read_inout %done0 : !hw.inout<i1>
    %157 = comb.and %156, %155 : i1
    sv.passign %emitted_0, %157 : i1
    %158 = sv.read_inout %allDone : !hw.inout<i1>
    %159 = comb.xor %158, %true_0 : i1
    %160 = sv.read_inout %done1 : !hw.inout<i1>
    %161 = comb.and %160, %159 : i1
    sv.passign %emitted_1, %161 : i1
    %162 = sv.read_inout %allDone : !hw.inout<i1>
    %163 = comb.xor %162, %true_0 : i1
    %164 = sv.read_inout %done2 : !hw.inout<i1>
    %165 = comb.and %164, %163 : i1
    sv.passign %emitted_2, %165 : i1
    %166 = sv.read_inout %allDone : !hw.inout<i1>
    %167 = comb.xor %166, %true_0 : i1
    %168 = sv.read_inout %done3 : !hw.inout<i1>
    %169 = comb.and %168, %167 : i1
    sv.passign %emitted_3, %169 : i1
    %170 = sv.read_inout %allDone : !hw.inout<i1>
    %171 = comb.xor %170, %true_0 : i1
    %172 = sv.read_inout %done4 : !hw.inout<i1>
    %173 = comb.and %172, %171 : i1
    sv.passign %emitted_4, %173 : i1
    %174 = sv.read_inout %allDone : !hw.inout<i1>
    %175 = comb.xor %174, %true_0 : i1
    %176 = sv.read_inout %done5 : !hw.inout<i1>
    %177 = comb.and %176, %175 : i1
    sv.passign %emitted_5, %177 : i1
    %178 = sv.read_inout %allDone : !hw.inout<i1>
    %179 = comb.xor %178, %true_0 : i1
    %180 = sv.read_inout %done6 : !hw.inout<i1>
    %181 = comb.and %180, %179 : i1
    sv.passign %emitted_6, %181 : i1
    %182 = sv.read_inout %allDone : !hw.inout<i1>
    %183 = comb.xor %182, %true_0 : i1
    %184 = sv.read_inout %done7 : !hw.inout<i1>
    %185 = comb.and %184, %183 : i1
    sv.passign %emitted_7, %185 : i1
    %186 = sv.read_inout %allDone : !hw.inout<i1>
    %187 = comb.xor %186, %true_0 : i1
    %188 = sv.read_inout %done8 : !hw.inout<i1>
    %189 = comb.and %188, %187 : i1
    sv.passign %emitted_8, %189 : i1
    %190 = sv.read_inout %allDone : !hw.inout<i1>
    %191 = comb.xor %190, %true_0 : i1
    %192 = sv.read_inout %done9 : !hw.inout<i1>
    %193 = comb.and %192, %191 : i1
    sv.passign %emitted_9, %193 : i1
    %194 = sv.read_inout %allDone : !hw.inout<i1>
    %195 = comb.xor %194, %true_0 : i1
    %196 = sv.read_inout %done10 : !hw.inout<i1>
    %197 = comb.and %196, %195 : i1
    sv.passign %emitted_10, %197 : i1
    %198 = sv.read_inout %allDone : !hw.inout<i1>
    %199 = comb.xor %198, %true_0 : i1
    %200 = sv.read_inout %done11 : !hw.inout<i1>
    %201 = comb.and %200, %199 : i1
    sv.passign %emitted_11, %201 : i1
    %202 = sv.read_inout %allDone : !hw.inout<i1>
    %203 = comb.xor %202, %true_0 : i1
    %204 = sv.read_inout %done12 : !hw.inout<i1>
    %205 = comb.and %204, %203 : i1
    sv.passign %emitted_12, %205 : i1
    %206 = sv.read_inout %allDone : !hw.inout<i1>
    %207 = comb.xor %206, %true_0 : i1
    %208 = sv.read_inout %done13 : !hw.inout<i1>
    %209 = comb.and %208, %207 : i1
    sv.passign %emitted_13, %209 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
    sv.passign %emitted_3, %false : i1
    sv.passign %emitted_4, %false : i1
    sv.passign %emitted_5, %false : i1
    sv.passign %emitted_6, %false : i1
    sv.passign %emitted_7, %false : i1
    sv.passign %emitted_8, %false : i1
    sv.passign %emitted_9, %false : i1
    sv.passign %emitted_10, %false : i1
    sv.passign %emitted_11, %false : i1
    sv.passign %emitted_12, %false : i1
    sv.passign %emitted_13, %false : i1
  }
  %104 = sv.read_inout %emitted_13 : !hw.inout<i1>
  %105 = comb.xor %104, %true : i1
  %106 = comb.and %105, %in0_valid : i1
  %107 = sv.wire : !hw.inout<i1>
  sv.assign %107, %106 : i1
  %108 = sv.read_inout %107 : !hw.inout<i1>
  %109 = comb.and %out13_ready, %108 : i1
  %110 = sv.read_inout %emitted_13 : !hw.inout<i1>
  %111 = comb.or %109, %110 : i1
  sv.assign %done13, %111 : i1
  %112 = sv.read_inout %done0 : !hw.inout<i1>
  %113 = sv.read_inout %done1 : !hw.inout<i1>
  %114 = sv.read_inout %done2 : !hw.inout<i1>
  %115 = sv.read_inout %done3 : !hw.inout<i1>
  %116 = sv.read_inout %done4 : !hw.inout<i1>
  %117 = sv.read_inout %done5 : !hw.inout<i1>
  %118 = sv.read_inout %done6 : !hw.inout<i1>
  %119 = sv.read_inout %done7 : !hw.inout<i1>
  %120 = sv.read_inout %done8 : !hw.inout<i1>
  %121 = sv.read_inout %done9 : !hw.inout<i1>
  %122 = sv.read_inout %done10 : !hw.inout<i1>
  %123 = sv.read_inout %done11 : !hw.inout<i1>
  %124 = sv.read_inout %done12 : !hw.inout<i1>
  %125 = sv.read_inout %done13 : !hw.inout<i1>
  %126 = comb.and %113, %114 : i1
  %127 = comb.and %112, %126 : i1
  %128 = comb.and %115, %116 : i1
  %129 = comb.and %117, %118 : i1
  %130 = comb.and %128, %129 : i1
  %131 = comb.and %127, %130 : i1
  %132 = comb.and %120, %121 : i1
  %133 = comb.and %119, %132 : i1
  %134 = comb.and %122, %123 : i1
  %135 = comb.and %124, %125 : i1
  %136 = comb.and %134, %135 : i1
  %137 = comb.and %133, %136 : i1
  %138 = comb.and %131, %137 : i1
  sv.assign %allDone, %138 : i1
  %139 = sv.read_inout %3 : !hw.inout<i1>
  %140 = sv.read_inout %11 : !hw.inout<i1>
  %141 = sv.read_inout %19 : !hw.inout<i1>
  %142 = sv.read_inout %27 : !hw.inout<i1>
  %143 = sv.read_inout %35 : !hw.inout<i1>
  %144 = sv.read_inout %43 : !hw.inout<i1>
  %145 = sv.read_inout %51 : !hw.inout<i1>
  %146 = sv.read_inout %59 : !hw.inout<i1>
  %147 = sv.read_inout %67 : !hw.inout<i1>
  %148 = sv.read_inout %75 : !hw.inout<i1>
  %149 = sv.read_inout %83 : !hw.inout<i1>
  %150 = sv.read_inout %91 : !hw.inout<i1>
  %151 = sv.read_inout %99 : !hw.inout<i1>
  %152 = sv.read_inout %107 : !hw.inout<i1>
  %153 = sv.read_inout %allDone : !hw.inout<i1>
  hw.output %153, %in0, %139, %in0, %140, %in0, %141, %in0, %142, %in0, %143, %in0, %144, %in0, %145, %in0, %146, %in0, %147, %in0, %148, %in0, %149, %in0, %150, %in0, %151, %in0, %152 : i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_join_4ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c0_i0 = hw.constant 0 : i0
  %0 = comb.and %in0_valid, %in1_valid : i1
  %1 = comb.and %in2_valid, %in3_valid : i1
  %2 = comb.and %0, %1 : i1
  %3 = sv.wire : !hw.inout<i1>
  sv.assign %3, %2 : i1
  %4 = sv.read_inout %3 : !hw.inout<i1>
  %5 = comb.and %out0_ready, %4 : i1
  %6 = sv.wire : !hw.inout<i1>
  sv.assign %6, %5 : i1
  %7 = sv.read_inout %3 : !hw.inout<i1>
  %8 = sv.read_inout %6 : !hw.inout<i1>
  %9 = sv.read_inout %6 : !hw.inout<i1>
  %10 = sv.read_inout %6 : !hw.inout<i1>
  %11 = sv.read_inout %6 : !hw.inout<i1>
  hw.output %8, %9, %10, %11, %c0_i0, %7 : i1, i1, i1, i1, i0, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_load_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataFromMem : i64, in %dataFromMem_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataOut_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataFromMem_ready : i1, out ctrl_ready : i1, out dataOut : i64, out dataOut_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
  %0 = comb.and %addrIn0_valid, %ctrl_valid : i1
  %1 = sv.wire : !hw.inout<i1>
  sv.assign %1, %0 : i1
  %2 = sv.read_inout %1 : !hw.inout<i1>
  %3 = comb.and %addrOut0_ready, %2 : i1
  %4 = sv.wire : !hw.inout<i1>
  sv.assign %4, %3 : i1
  %5 = sv.read_inout %1 : !hw.inout<i1>
  %6 = sv.read_inout %4 : !hw.inout<i1>
  %7 = sv.read_inout %4 : !hw.inout<i1>
  hw.output %6, %dataOut_ready, %7, %dataFromMem, %dataFromMem_valid, %addrIn0, %5 : i1, i1, i1, i64, i1, i64, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_mux_in_ui1_3ins_1outs_ctrl(in %select : i1, in %select_valid : i1, in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
  %c1_i2 = hw.constant 1 : i2
  %false = hw.constant false
  %0 = comb.concat %false, %select : i1, i1
  %1 = comb.shl %c1_i2, %0 : i2
  %2 = sv.wire : !hw.inout<i2>
  sv.assign %2, %1 : i2
  %3 = comb.mux %select, %in1_valid, %in0_valid : i1
  %4 = comb.and %3, %select_valid : i1
  %5 = sv.wire : !hw.inout<i1>
  sv.assign %5, %4 : i1
  %6 = sv.read_inout %5 : !hw.inout<i1>
  %7 = comb.and %6, %out0_ready : i1
  %8 = sv.wire : !hw.inout<i1>
  sv.assign %8, %7 : i1
  %9 = sv.read_inout %2 : !hw.inout<i2>
  %10 = comb.extract %9 from 0 : (i2) -> i1
  %11 = sv.read_inout %8 : !hw.inout<i1>
  %12 = comb.and %10, %11 : i1
  %13 = sv.read_inout %2 : !hw.inout<i2>
  %14 = comb.extract %13 from 1 : (i2) -> i1
  %15 = sv.read_inout %8 : !hw.inout<i1>
  %16 = comb.and %14, %15 : i1
  %c0_i0 = hw.constant 0 : i0
  %17 = sv.read_inout %5 : !hw.inout<i1>
  %18 = sv.read_inout %8 : !hw.inout<i1>
  hw.output %18, %12, %16, %c0_i0, %17 : i1, i1, i1, i0, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_mux_in_ui1_ui64_ui64_out_ui64(in %select : i1, in %select_valid : i1, in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
  %c1_i2 = hw.constant 1 : i2
  %false = hw.constant false
  %0 = comb.concat %false, %select : i1, i1
  %1 = comb.shl %c1_i2, %0 : i2
  %2 = sv.wire : !hw.inout<i2>
  sv.assign %2, %1 : i2
  %3 = comb.mux %select, %in1_valid, %in0_valid : i1
  %4 = comb.and %3, %select_valid : i1
  %5 = sv.wire : !hw.inout<i1>
  sv.assign %5, %4 : i1
  %6 = sv.read_inout %5 : !hw.inout<i1>
  %7 = comb.and %6, %out0_ready : i1
  %8 = sv.wire : !hw.inout<i1>
  sv.assign %8, %7 : i1
  %9 = sv.read_inout %2 : !hw.inout<i2>
  %10 = comb.extract %9 from 0 : (i2) -> i1
  %11 = sv.read_inout %8 : !hw.inout<i1>
  %12 = comb.and %10, %11 : i1
  %13 = sv.read_inout %2 : !hw.inout<i2>
  %14 = comb.extract %13 from 1 : (i2) -> i1
  %15 = sv.read_inout %8 : !hw.inout<i1>
  %16 = comb.and %14, %15 : i1
  %17 = comb.mux %select, %in1, %in0 : i64
  %18 = sv.read_inout %5 : !hw.inout<i1>
  %19 = sv.read_inout %8 : !hw.inout<i1>
  hw.output %19, %12, %16, %17, %18 : i1, i1, i1, i64, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_sink_in_ui64(in %in0 : i64, in %in0_valid : i1, out in0_ready : i1) {
  %true = hw.constant true
  hw.output %true : i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(in %cond : i1, in %cond_valid : i1, in %data : i64, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i64, out outTrue_valid : i1, out outFalse : i64, out outFalse_valid : i1) {
  %true = hw.constant true
  %0 = comb.and %cond_valid, %data_valid : i1
  %1 = sv.wire : !hw.inout<i1>
  sv.assign %1, %0 : i1
  %2 = sv.read_inout %1 : !hw.inout<i1>
  %3 = comb.and %cond, %2 : i1
  %4 = comb.xor %cond, %true : i1
  %5 = sv.read_inout %1 : !hw.inout<i1>
  %6 = comb.and %4, %5 : i1
  %7 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
  %8 = sv.read_inout %1 : !hw.inout<i1>
  %9 = comb.and %7, %8 : i1
  %10 = sv.wire : !hw.inout<i1>
  sv.assign %10, %9 : i1
  %11 = sv.read_inout %10 : !hw.inout<i1>
  %12 = sv.read_inout %10 : !hw.inout<i1>
  hw.output %11, %12, %data, %3, %data, %6 : i1, i1, i64, i1, i64, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_cond_br_in_ui1_2ins_2outs_ctrl(in %cond : i1, in %cond_valid : i1, in %data : i0, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i0, out outTrue_valid : i1, out outFalse : i0, out outFalse_valid : i1) {
  %true = hw.constant true
  %0 = comb.and %cond_valid, %data_valid : i1
  %1 = sv.wire : !hw.inout<i1>
  sv.assign %1, %0 : i1
  %2 = sv.read_inout %1 : !hw.inout<i1>
  %3 = comb.and %cond, %2 : i1
  %4 = comb.xor %cond, %true : i1
  %5 = sv.read_inout %1 : !hw.inout<i1>
  %6 = comb.and %4, %5 : i1
  %7 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
  %8 = sv.read_inout %1 : !hw.inout<i1>
  %9 = comb.and %7, %8 : i1
  %10 = sv.wire : !hw.inout<i1>
  sv.assign %10, %9 : i1
  %11 = sv.read_inout %10 : !hw.inout<i1>
  %12 = sv.read_inout %10 : !hw.inout<i1>
  hw.output %11, %12, %data, %3, %data, %6 : i1, i1, i0, i1, i0, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @arith_cmpi_in_ui64_ui64_out_ui1_slt(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i1, out out0_valid : i1) {
  %0 = comb.and %in0_valid, %in1_valid : i1
  %1 = sv.wire : !hw.inout<i1>
  sv.assign %1, %0 : i1
  %2 = sv.read_inout %1 : !hw.inout<i1>
  %3 = comb.and %out0_ready, %2 : i1
  %4 = sv.wire : !hw.inout<i1>
  sv.assign %4, %3 : i1
  %5 = comb.icmp slt %in0, %in1 : i64
  %6 = sv.read_inout %1 : !hw.inout<i1>
  %7 = sv.read_inout %4 : !hw.inout<i1>
  %8 = sv.read_inout %4 : !hw.inout<i1>
  hw.output %7, %8, %5, %6 : i1, i1, i1, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1, out out3 : i64, out out3_valid : i1) {
  %allDone = sv.wire : !hw.inout<i1>
  %done3 = sv.wire : !hw.inout<i1>
  %true = hw.constant true
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.and %1, %in0_valid : i1
  %3 = sv.wire : !hw.inout<i1>
  sv.assign %3, %2 : i1
  %4 = sv.read_inout %3 : !hw.inout<i1>
  %5 = comb.and %out0_ready, %4 : i1
  %6 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %7 = comb.or %5, %6 : i1
  %done0 = sv.wire : !hw.inout<i1>
  sv.assign %done0, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %9 = comb.xor %8, %true : i1
  %10 = comb.and %9, %in0_valid : i1
  %11 = sv.wire : !hw.inout<i1>
  sv.assign %11, %10 : i1
  %12 = sv.read_inout %11 : !hw.inout<i1>
  %13 = comb.and %out1_ready, %12 : i1
  %14 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %15 = comb.or %13, %14 : i1
  %done1 = sv.wire : !hw.inout<i1>
  sv.assign %done1, %15 : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %17 = comb.xor %16, %true : i1
  %18 = comb.and %17, %in0_valid : i1
  %19 = sv.wire : !hw.inout<i1>
  sv.assign %19, %18 : i1
  %20 = sv.read_inout %19 : !hw.inout<i1>
  %21 = comb.and %out2_ready, %20 : i1
  %22 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %23 = comb.or %21, %22 : i1
  %done2 = sv.wire : !hw.inout<i1>
  sv.assign %done2, %23 : i1
  %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
  sv.alwaysff(posedge %clock) {
    %true_0 = hw.constant true
    %44 = sv.read_inout %allDone : !hw.inout<i1>
    %45 = comb.xor %44, %true_0 : i1
    %46 = sv.read_inout %done0 : !hw.inout<i1>
    %47 = comb.and %46, %45 : i1
    sv.passign %emitted_0, %47 : i1
    %48 = sv.read_inout %allDone : !hw.inout<i1>
    %49 = comb.xor %48, %true_0 : i1
    %50 = sv.read_inout %done1 : !hw.inout<i1>
    %51 = comb.and %50, %49 : i1
    sv.passign %emitted_1, %51 : i1
    %52 = sv.read_inout %allDone : !hw.inout<i1>
    %53 = comb.xor %52, %true_0 : i1
    %54 = sv.read_inout %done2 : !hw.inout<i1>
    %55 = comb.and %54, %53 : i1
    sv.passign %emitted_2, %55 : i1
    %56 = sv.read_inout %allDone : !hw.inout<i1>
    %57 = comb.xor %56, %true_0 : i1
    %58 = sv.read_inout %done3 : !hw.inout<i1>
    %59 = comb.and %58, %57 : i1
    sv.passign %emitted_3, %59 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
    sv.passign %emitted_3, %false : i1
  }
  %24 = sv.read_inout %emitted_3 : !hw.inout<i1>
  %25 = comb.xor %24, %true : i1
  %26 = comb.and %25, %in0_valid : i1
  %27 = sv.wire : !hw.inout<i1>
  sv.assign %27, %26 : i1
  %28 = sv.read_inout %27 : !hw.inout<i1>
  %29 = comb.and %out3_ready, %28 : i1
  %30 = sv.read_inout %emitted_3 : !hw.inout<i1>
  %31 = comb.or %29, %30 : i1
  sv.assign %done3, %31 : i1
  %32 = sv.read_inout %done0 : !hw.inout<i1>
  %33 = sv.read_inout %done1 : !hw.inout<i1>
  %34 = sv.read_inout %done2 : !hw.inout<i1>
  %35 = sv.read_inout %done3 : !hw.inout<i1>
  %36 = comb.and %32, %33 : i1
  %37 = comb.and %34, %35 : i1
  %38 = comb.and %36, %37 : i1
  sv.assign %allDone, %38 : i1
  %39 = sv.read_inout %3 : !hw.inout<i1>
  %40 = sv.read_inout %11 : !hw.inout<i1>
  %41 = sv.read_inout %19 : !hw.inout<i1>
  %42 = sv.read_inout %27 : !hw.inout<i1>
  %43 = sv.read_inout %allDone : !hw.inout<i1>
  hw.output %43, %in0, %39, %in0, %40, %in0, %41, %in0, %42 : i1, i64, i1, i64, i1, i64, i1, i64, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_fork_1ins_4outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1) {
  %allDone = sv.wire : !hw.inout<i1>
  %done3 = sv.wire : !hw.inout<i1>
  %true = hw.constant true
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.and %1, %in0_valid : i1
  %3 = sv.wire : !hw.inout<i1>
  sv.assign %3, %2 : i1
  %4 = sv.read_inout %3 : !hw.inout<i1>
  %5 = comb.and %out0_ready, %4 : i1
  %6 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %7 = comb.or %5, %6 : i1
  %done0 = sv.wire : !hw.inout<i1>
  sv.assign %done0, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %9 = comb.xor %8, %true : i1
  %10 = comb.and %9, %in0_valid : i1
  %11 = sv.wire : !hw.inout<i1>
  sv.assign %11, %10 : i1
  %12 = sv.read_inout %11 : !hw.inout<i1>
  %13 = comb.and %out1_ready, %12 : i1
  %14 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %15 = comb.or %13, %14 : i1
  %done1 = sv.wire : !hw.inout<i1>
  sv.assign %done1, %15 : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %17 = comb.xor %16, %true : i1
  %18 = comb.and %17, %in0_valid : i1
  %19 = sv.wire : !hw.inout<i1>
  sv.assign %19, %18 : i1
  %20 = sv.read_inout %19 : !hw.inout<i1>
  %21 = comb.and %out2_ready, %20 : i1
  %22 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %23 = comb.or %21, %22 : i1
  %done2 = sv.wire : !hw.inout<i1>
  sv.assign %done2, %23 : i1
  %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
  sv.alwaysff(posedge %clock) {
    %true_0 = hw.constant true
    %44 = sv.read_inout %allDone : !hw.inout<i1>
    %45 = comb.xor %44, %true_0 : i1
    %46 = sv.read_inout %done0 : !hw.inout<i1>
    %47 = comb.and %46, %45 : i1
    sv.passign %emitted_0, %47 : i1
    %48 = sv.read_inout %allDone : !hw.inout<i1>
    %49 = comb.xor %48, %true_0 : i1
    %50 = sv.read_inout %done1 : !hw.inout<i1>
    %51 = comb.and %50, %49 : i1
    sv.passign %emitted_1, %51 : i1
    %52 = sv.read_inout %allDone : !hw.inout<i1>
    %53 = comb.xor %52, %true_0 : i1
    %54 = sv.read_inout %done2 : !hw.inout<i1>
    %55 = comb.and %54, %53 : i1
    sv.passign %emitted_2, %55 : i1
    %56 = sv.read_inout %allDone : !hw.inout<i1>
    %57 = comb.xor %56, %true_0 : i1
    %58 = sv.read_inout %done3 : !hw.inout<i1>
    %59 = comb.and %58, %57 : i1
    sv.passign %emitted_3, %59 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
    sv.passign %emitted_3, %false : i1
  }
  %24 = sv.read_inout %emitted_3 : !hw.inout<i1>
  %25 = comb.xor %24, %true : i1
  %26 = comb.and %25, %in0_valid : i1
  %27 = sv.wire : !hw.inout<i1>
  sv.assign %27, %26 : i1
  %28 = sv.read_inout %27 : !hw.inout<i1>
  %29 = comb.and %out3_ready, %28 : i1
  %30 = sv.read_inout %emitted_3 : !hw.inout<i1>
  %31 = comb.or %29, %30 : i1
  sv.assign %done3, %31 : i1
  %32 = sv.read_inout %done0 : !hw.inout<i1>
  %33 = sv.read_inout %done1 : !hw.inout<i1>
  %34 = sv.read_inout %done2 : !hw.inout<i1>
  %35 = sv.read_inout %done3 : !hw.inout<i1>
  %36 = comb.and %32, %33 : i1
  %37 = comb.and %34, %35 : i1
  %38 = comb.and %36, %37 : i1
  sv.assign %allDone, %38 : i1
  %39 = sv.read_inout %3 : !hw.inout<i1>
  %40 = sv.read_inout %11 : !hw.inout<i1>
  %41 = sv.read_inout %19 : !hw.inout<i1>
  %42 = sv.read_inout %27 : !hw.inout<i1>
  %43 = sv.read_inout %allDone : !hw.inout<i1>
  hw.output %43, %in0, %39, %in0, %40, %in0, %41, %in0, %42 : i1, i0, i1, i0, i1, i0, i1, i0, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @arith_addi_in_ui64_ui64_out_ui64(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
  %0 = comb.and %in0_valid, %in1_valid : i1
  %1 = sv.wire : !hw.inout<i1>
  sv.assign %1, %0 : i1
  %2 = sv.read_inout %1 : !hw.inout<i1>
  %3 = comb.and %out0_ready, %2 : i1
  %4 = sv.wire : !hw.inout<i1>
  sv.assign %4, %3 : i1
  %5 = comb.add %in0, %in1 : i64
  %6 = sv.read_inout %1 : !hw.inout<i1>
  %7 = sv.read_inout %4 : !hw.inout<i1>
  %8 = sv.read_inout %4 : !hw.inout<i1>
  hw.output %7, %8, %5, %6 : i1, i1, i64, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1, out out4 : i1, out out4_valid : i1) {
  %allDone = sv.wire : !hw.inout<i1>
  %done4 = sv.wire : !hw.inout<i1>
  %true = hw.constant true
  %emitted_0 = sv.reg sym @emitted_0 : !hw.inout<i1> 
  %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %1 = comb.xor %0, %true : i1
  %2 = comb.and %1, %in0_valid : i1
  %3 = sv.wire : !hw.inout<i1>
  sv.assign %3, %2 : i1
  %4 = sv.read_inout %3 : !hw.inout<i1>
  %5 = comb.and %out0_ready, %4 : i1
  %6 = sv.read_inout %emitted_0 : !hw.inout<i1>
  %7 = comb.or %5, %6 : i1
  %done0 = sv.wire : !hw.inout<i1>
  sv.assign %done0, %7 : i1
  %emitted_1 = sv.reg sym @emitted_1 : !hw.inout<i1> 
  %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %9 = comb.xor %8, %true : i1
  %10 = comb.and %9, %in0_valid : i1
  %11 = sv.wire : !hw.inout<i1>
  sv.assign %11, %10 : i1
  %12 = sv.read_inout %11 : !hw.inout<i1>
  %13 = comb.and %out1_ready, %12 : i1
  %14 = sv.read_inout %emitted_1 : !hw.inout<i1>
  %15 = comb.or %13, %14 : i1
  %done1 = sv.wire : !hw.inout<i1>
  sv.assign %done1, %15 : i1
  %emitted_2 = sv.reg sym @emitted_2 : !hw.inout<i1> 
  %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %17 = comb.xor %16, %true : i1
  %18 = comb.and %17, %in0_valid : i1
  %19 = sv.wire : !hw.inout<i1>
  sv.assign %19, %18 : i1
  %20 = sv.read_inout %19 : !hw.inout<i1>
  %21 = comb.and %out2_ready, %20 : i1
  %22 = sv.read_inout %emitted_2 : !hw.inout<i1>
  %23 = comb.or %21, %22 : i1
  %done2 = sv.wire : !hw.inout<i1>
  sv.assign %done2, %23 : i1
  %emitted_3 = sv.reg sym @emitted_3 : !hw.inout<i1> 
  %24 = sv.read_inout %emitted_3 : !hw.inout<i1>
  %25 = comb.xor %24, %true : i1
  %26 = comb.and %25, %in0_valid : i1
  %27 = sv.wire : !hw.inout<i1>
  sv.assign %27, %26 : i1
  %28 = sv.read_inout %27 : !hw.inout<i1>
  %29 = comb.and %out3_ready, %28 : i1
  %30 = sv.read_inout %emitted_3 : !hw.inout<i1>
  %31 = comb.or %29, %30 : i1
  %done3 = sv.wire : !hw.inout<i1>
  sv.assign %done3, %31 : i1
  %emitted_4 = sv.reg sym @emitted_4 : !hw.inout<i1> 
  sv.alwaysff(posedge %clock) {
    %true_0 = hw.constant true
    %55 = sv.read_inout %allDone : !hw.inout<i1>
    %56 = comb.xor %55, %true_0 : i1
    %57 = sv.read_inout %done0 : !hw.inout<i1>
    %58 = comb.and %57, %56 : i1
    sv.passign %emitted_0, %58 : i1
    %59 = sv.read_inout %allDone : !hw.inout<i1>
    %60 = comb.xor %59, %true_0 : i1
    %61 = sv.read_inout %done1 : !hw.inout<i1>
    %62 = comb.and %61, %60 : i1
    sv.passign %emitted_1, %62 : i1
    %63 = sv.read_inout %allDone : !hw.inout<i1>
    %64 = comb.xor %63, %true_0 : i1
    %65 = sv.read_inout %done2 : !hw.inout<i1>
    %66 = comb.and %65, %64 : i1
    sv.passign %emitted_2, %66 : i1
    %67 = sv.read_inout %allDone : !hw.inout<i1>
    %68 = comb.xor %67, %true_0 : i1
    %69 = sv.read_inout %done3 : !hw.inout<i1>
    %70 = comb.and %69, %68 : i1
    sv.passign %emitted_3, %70 : i1
    %71 = sv.read_inout %allDone : !hw.inout<i1>
    %72 = comb.xor %71, %true_0 : i1
    %73 = sv.read_inout %done4 : !hw.inout<i1>
    %74 = comb.and %73, %72 : i1
    sv.passign %emitted_4, %74 : i1
  }(syncreset : posedge %reset) {
    %false = hw.constant false
    sv.passign %emitted_0, %false : i1
    sv.passign %emitted_1, %false : i1
    sv.passign %emitted_2, %false : i1
    sv.passign %emitted_3, %false : i1
    sv.passign %emitted_4, %false : i1
  }
  %32 = sv.read_inout %emitted_4 : !hw.inout<i1>
  %33 = comb.xor %32, %true : i1
  %34 = comb.and %33, %in0_valid : i1
  %35 = sv.wire : !hw.inout<i1>
  sv.assign %35, %34 : i1
  %36 = sv.read_inout %35 : !hw.inout<i1>
  %37 = comb.and %out4_ready, %36 : i1
  %38 = sv.read_inout %emitted_4 : !hw.inout<i1>
  %39 = comb.or %37, %38 : i1
  sv.assign %done4, %39 : i1
  %40 = sv.read_inout %done0 : !hw.inout<i1>
  %41 = sv.read_inout %done1 : !hw.inout<i1>
  %42 = sv.read_inout %done2 : !hw.inout<i1>
  %43 = sv.read_inout %done3 : !hw.inout<i1>
  %44 = sv.read_inout %done4 : !hw.inout<i1>
  %45 = comb.and %40, %41 : i1
  %46 = comb.and %43, %44 : i1
  %47 = comb.and %42, %46 : i1
  %48 = comb.and %45, %47 : i1
  sv.assign %allDone, %48 : i1
  %49 = sv.read_inout %3 : !hw.inout<i1>
  %50 = sv.read_inout %11 : !hw.inout<i1>
  %51 = sv.read_inout %19 : !hw.inout<i1>
  %52 = sv.read_inout %27 : !hw.inout<i1>
  %53 = sv.read_inout %35 : !hw.inout<i1>
  %54 = sv.read_inout %allDone : !hw.inout<i1>
  hw.output %54, %in0, %49, %in0, %50, %in0, %51, %in0, %52, %in0, %53 : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
}

// -----// IR Dump After PrepareForEmission (prepare-for-emission) //----- //
hw.module @main(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
  %_handshake_buffer115_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer115_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer115_out0_valid = sv.wire : !hw.inout<i1>
  %_arith_addi1_in0_ready = sv.wire : !hw.inout<i1>
  %_arith_addi1_in1_ready = sv.wire : !hw.inout<i1>
  %_arith_addi1_out0 = sv.wire : !hw.inout<i64>
  %_arith_addi1_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer114_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer114_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer114_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer113_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer113_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer113_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_store6_addrIn0_ready = sv.wire : !hw.inout<i1>
  %_handshake_store6_dataIn_ready = sv.wire : !hw.inout<i1>
  %_handshake_store6_ctrl_ready = sv.wire : !hw.inout<i1>
  %_handshake_store6_dataToMem = sv.wire : !hw.inout<i64>
  %_handshake_store6_dataToMem_valid = sv.wire : !hw.inout<i1>
  %_handshake_store6_addrOut0 = sv.wire : !hw.inout<i64>
  %_handshake_store6_addrOut0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer112_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer112_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer112_out0_valid = sv.wire : !hw.inout<i1>
  %_arith_addi0_in0_ready = sv.wire : !hw.inout<i1>
  %_arith_addi0_in1_ready = sv.wire : !hw.inout<i1>
  %_arith_addi0_out0 = sv.wire : !hw.inout<i64>
  %_arith_addi0_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer111_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer111_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer111_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer110_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer110_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer110_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_load1_addrIn0_ready = sv.wire : !hw.inout<i1>
  %_handshake_load1_dataFromMem_ready = sv.wire : !hw.inout<i1>
  %_handshake_load1_ctrl_ready = sv.wire : !hw.inout<i1>
  %_handshake_load1_dataOut = sv.wire : !hw.inout<i64>
  %_handshake_load1_dataOut_valid = sv.wire : !hw.inout<i1>
  %_handshake_load1_addrOut0 = sv.wire : !hw.inout<i64>
  %_handshake_load1_addrOut0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer109_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer109_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer109_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer108_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer108_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer108_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_load0_addrIn0_ready = sv.wire : !hw.inout<i1>
  %_handshake_load0_dataFromMem_ready = sv.wire : !hw.inout<i1>
  %_handshake_load0_ctrl_ready = sv.wire : !hw.inout<i1>
  %_handshake_load0_dataOut = sv.wire : !hw.inout<i64>
  %_handshake_load0_dataOut_valid = sv.wire : !hw.inout<i1>
  %_handshake_load0_addrOut0 = sv.wire : !hw.inout<i64>
  %_handshake_load0_addrOut0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer107_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer107_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer107_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_join5_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_join5_in1_ready = sv.wire : !hw.inout<i1>
  %_handshake_join5_in2_ready = sv.wire : !hw.inout<i1>
  %_handshake_join5_in3_ready = sv.wire : !hw.inout<i1>
  %_handshake_join5_out0 = sv.wire : !hw.inout<i0>
  %_handshake_join5_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer106_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer106_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer106_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer105_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer105_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer105_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer104_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer104_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer104_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer103_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer103_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer103_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork17_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_fork17_out0 = sv.wire : !hw.inout<i0>
  %_handshake_fork17_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork17_out1 = sv.wire : !hw.inout<i0>
  %_handshake_fork17_out1_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork17_out2 = sv.wire : !hw.inout<i0>
  %_handshake_fork17_out2_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork17_out3 = sv.wire : !hw.inout<i0>
  %_handshake_fork17_out3_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer102_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer102_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer102_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer101_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_cond_br3_cond_ready = sv.wire : !hw.inout<i1>
  %_handshake_cond_br3_data_ready = sv.wire : !hw.inout<i1>
  %_handshake_cond_br3_outTrue = sv.wire : !hw.inout<i0>
  %_handshake_cond_br3_outTrue_valid = sv.wire : !hw.inout<i1>
  %_handshake_cond_br3_outFalse = sv.wire : !hw.inout<i0>
  %_handshake_cond_br3_outFalse_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer100_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer100_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer100_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer99_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer99_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer99_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork16_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_fork16_out0 = sv.wire : !hw.inout<i64>
  %_handshake_fork16_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork16_out1 = sv.wire : !hw.inout<i64>
  %_handshake_fork16_out1_valid = sv.wire : !hw.inout<i1>
  %_handshake_sink2_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer98_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer98_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer98_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_cond_br2_cond_ready = sv.wire : !hw.inout<i1>
  %_handshake_cond_br2_data_ready = sv.wire : !hw.inout<i1>
  %_handshake_cond_br2_outTrue = sv.wire : !hw.inout<i64>
  %_handshake_cond_br2_outTrue_valid = sv.wire : !hw.inout<i1>
  %_handshake_cond_br2_outFalse = sv.wire : !hw.inout<i64>
  %_handshake_cond_br2_outFalse_valid = sv.wire : !hw.inout<i1>
  %_handshake_sink1_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer97_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer97_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer97_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_cond_br1_cond_ready = sv.wire : !hw.inout<i1>
  %_handshake_cond_br1_data_ready = sv.wire : !hw.inout<i1>
  %_handshake_cond_br1_outTrue = sv.wire : !hw.inout<i64>
  %_handshake_cond_br1_outTrue_valid = sv.wire : !hw.inout<i1>
  %_handshake_cond_br1_outFalse = sv.wire : !hw.inout<i64>
  %_handshake_cond_br1_outFalse_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer96_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer96_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer96_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer95_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer95_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer95_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer94_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer94_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer94_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer93_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer93_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer93_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork15_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_fork15_out0 = sv.wire : !hw.inout<i64>
  %_handshake_fork15_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork15_out1 = sv.wire : !hw.inout<i64>
  %_handshake_fork15_out1_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork15_out2 = sv.wire : !hw.inout<i64>
  %_handshake_fork15_out2_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork15_out3 = sv.wire : !hw.inout<i64>
  %_handshake_fork15_out3_valid = sv.wire : !hw.inout<i1>
  %_handshake_sink0_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer92_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer92_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer92_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_cond_br0_cond_ready = sv.wire : !hw.inout<i1>
  %_handshake_cond_br0_data_ready = sv.wire : !hw.inout<i1>
  %_handshake_cond_br0_outTrue = sv.wire : !hw.inout<i64>
  %_handshake_cond_br0_outTrue_valid = sv.wire : !hw.inout<i1>
  %_handshake_cond_br0_outFalse = sv.wire : !hw.inout<i64>
  %_handshake_cond_br0_outFalse_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer91_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer91_out0 = sv.wire : !hw.inout<i1>
  %_handshake_buffer91_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer90_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer90_out0 = sv.wire : !hw.inout<i1>
  %_handshake_buffer90_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer89_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer89_out0 = sv.wire : !hw.inout<i1>
  %_handshake_buffer89_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer88_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer88_out0 = sv.wire : !hw.inout<i1>
  %_handshake_buffer88_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork14_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_fork14_out0 = sv.wire : !hw.inout<i1>
  %_handshake_fork14_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork14_out1 = sv.wire : !hw.inout<i1>
  %_handshake_fork14_out1_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork14_out2 = sv.wire : !hw.inout<i1>
  %_handshake_fork14_out2_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork14_out3 = sv.wire : !hw.inout<i1>
  %_handshake_fork14_out3_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork14_out4 = sv.wire : !hw.inout<i1>
  %_handshake_fork14_out4_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer87_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer87_out0 = sv.wire : !hw.inout<i1>
  %_handshake_buffer87_out0_valid = sv.wire : !hw.inout<i1>
  %_arith_cmpi0_in0_ready = sv.wire : !hw.inout<i1>
  %_arith_cmpi0_in1_ready = sv.wire : !hw.inout<i1>
  %_arith_cmpi0_out0 = sv.wire : !hw.inout<i1>
  %_arith_cmpi0_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer86_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer86_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer86_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_mux3_select_ready = sv.wire : !hw.inout<i1>
  %_handshake_mux3_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_mux3_in1_ready = sv.wire : !hw.inout<i1>
  %_handshake_mux3_out0 = sv.wire : !hw.inout<i64>
  %_handshake_mux3_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer85_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer85_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer85_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer84_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer84_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer84_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork13_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_fork13_out0 = sv.wire : !hw.inout<i64>
  %_handshake_fork13_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork13_out1 = sv.wire : !hw.inout<i64>
  %_handshake_fork13_out1_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer83_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer83_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer83_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_mux2_select_ready = sv.wire : !hw.inout<i1>
  %_handshake_mux2_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_mux2_in1_ready = sv.wire : !hw.inout<i1>
  %_handshake_mux2_out0 = sv.wire : !hw.inout<i64>
  %_handshake_mux2_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer82_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer82_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer82_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer81_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer81_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer81_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork12_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_fork12_out0 = sv.wire : !hw.inout<i64>
  %_handshake_fork12_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork12_out1 = sv.wire : !hw.inout<i64>
  %_handshake_fork12_out1_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer80_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer80_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer80_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_mux1_select_ready = sv.wire : !hw.inout<i1>
  %_handshake_mux1_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_mux1_in1_ready = sv.wire : !hw.inout<i1>
  %_handshake_mux1_out0 = sv.wire : !hw.inout<i64>
  %_handshake_mux1_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer79_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer79_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer79_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_mux0_select_ready = sv.wire : !hw.inout<i1>
  %_handshake_mux0_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_mux0_in1_ready = sv.wire : !hw.inout<i1>
  %_handshake_mux0_out0 = sv.wire : !hw.inout<i0>
  %_handshake_mux0_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer78_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer78_out0 = sv.wire : !hw.inout<i1>
  %_handshake_buffer78_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer77_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer77_out0 = sv.wire : !hw.inout<i1>
  %_handshake_buffer77_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer76_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer76_out0 = sv.wire : !hw.inout<i1>
  %_handshake_buffer76_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer75_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer75_out0 = sv.wire : !hw.inout<i1>
  %_handshake_buffer75_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork11_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_fork11_out0 = sv.wire : !hw.inout<i1>
  %_handshake_fork11_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork11_out1 = sv.wire : !hw.inout<i1>
  %_handshake_fork11_out1_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork11_out2 = sv.wire : !hw.inout<i1>
  %_handshake_fork11_out2_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork11_out3 = sv.wire : !hw.inout<i1>
  %_handshake_fork11_out3_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer74_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer74_out0 = sv.wire : !hw.inout<i1>
  %_handshake_buffer74_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer73_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer73_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer73_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer72_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer72_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer72_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_store5_addrIn0_ready = sv.wire : !hw.inout<i1>
  %_handshake_store5_dataIn_ready = sv.wire : !hw.inout<i1>
  %_handshake_store5_ctrl_ready = sv.wire : !hw.inout<i1>
  %_handshake_store5_dataToMem = sv.wire : !hw.inout<i64>
  %_handshake_store5_dataToMem_valid = sv.wire : !hw.inout<i1>
  %_handshake_store5_addrOut0 = sv.wire : !hw.inout<i64>
  %_handshake_store5_addrOut0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer71_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer71_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer71_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_join4_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_join4_in1_ready = sv.wire : !hw.inout<i1>
  %_handshake_join4_in2_ready = sv.wire : !hw.inout<i1>
  %_handshake_join4_out0 = sv.wire : !hw.inout<i0>
  %_handshake_join4_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer70_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer70_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer70_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer69_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer69_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer69_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_store4_addrIn0_ready = sv.wire : !hw.inout<i1>
  %_handshake_store4_dataIn_ready = sv.wire : !hw.inout<i1>
  %_handshake_store4_ctrl_ready = sv.wire : !hw.inout<i1>
  %_handshake_store4_dataToMem = sv.wire : !hw.inout<i64>
  %_handshake_store4_dataToMem_valid = sv.wire : !hw.inout<i1>
  %_handshake_store4_addrOut0 = sv.wire : !hw.inout<i64>
  %_handshake_store4_addrOut0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer68_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer68_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer68_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_join3_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_join3_in1_ready = sv.wire : !hw.inout<i1>
  %_handshake_join3_out0 = sv.wire : !hw.inout<i0>
  %_handshake_join3_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer67_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer67_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer67_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer66_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer66_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer66_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_store3_addrIn0_ready = sv.wire : !hw.inout<i1>
  %_handshake_store3_dataIn_ready = sv.wire : !hw.inout<i1>
  %_handshake_store3_ctrl_ready = sv.wire : !hw.inout<i1>
  %_handshake_store3_dataToMem = sv.wire : !hw.inout<i64>
  %_handshake_store3_dataToMem_valid = sv.wire : !hw.inout<i1>
  %_handshake_store3_addrOut0 = sv.wire : !hw.inout<i64>
  %_handshake_store3_addrOut0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer65_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer65_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer65_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer64_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer64_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer64_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_store2_addrIn0_ready = sv.wire : !hw.inout<i1>
  %_handshake_store2_dataIn_ready = sv.wire : !hw.inout<i1>
  %_handshake_store2_ctrl_ready = sv.wire : !hw.inout<i1>
  %_handshake_store2_dataToMem = sv.wire : !hw.inout<i64>
  %_handshake_store2_dataToMem_valid = sv.wire : !hw.inout<i1>
  %_handshake_store2_addrOut0 = sv.wire : !hw.inout<i64>
  %_handshake_store2_addrOut0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer63_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer63_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer63_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_join2_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_join2_in1_ready = sv.wire : !hw.inout<i1>
  %_handshake_join2_in2_ready = sv.wire : !hw.inout<i1>
  %_handshake_join2_out0 = sv.wire : !hw.inout<i0>
  %_handshake_join2_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer62_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer62_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer62_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer61_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer61_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer61_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_store1_addrIn0_ready = sv.wire : !hw.inout<i1>
  %_handshake_store1_dataIn_ready = sv.wire : !hw.inout<i1>
  %_handshake_store1_ctrl_ready = sv.wire : !hw.inout<i1>
  %_handshake_store1_dataToMem = sv.wire : !hw.inout<i64>
  %_handshake_store1_dataToMem_valid = sv.wire : !hw.inout<i1>
  %_handshake_store1_addrOut0 = sv.wire : !hw.inout<i64>
  %_handshake_store1_addrOut0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer60_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer60_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer60_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_join1_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_join1_in1_ready = sv.wire : !hw.inout<i1>
  %_handshake_join1_out0 = sv.wire : !hw.inout<i0>
  %_handshake_join1_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer59_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer59_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer59_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer58_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer58_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer58_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_store0_addrIn0_ready = sv.wire : !hw.inout<i1>
  %_handshake_store0_dataIn_ready = sv.wire : !hw.inout<i1>
  %_handshake_store0_ctrl_ready = sv.wire : !hw.inout<i1>
  %_handshake_store0_dataToMem = sv.wire : !hw.inout<i64>
  %_handshake_store0_dataToMem_valid = sv.wire : !hw.inout<i1>
  %_handshake_store0_addrOut0 = sv.wire : !hw.inout<i64>
  %_handshake_store0_addrOut0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer57_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer57_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer57_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer56_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer56_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer56_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer55_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer55_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer55_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork10_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_fork10_out0 = sv.wire : !hw.inout<i64>
  %_handshake_fork10_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork10_out1 = sv.wire : !hw.inout<i64>
  %_handshake_fork10_out1_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork10_out2 = sv.wire : !hw.inout<i64>
  %_handshake_fork10_out2_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer54_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer54_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer54_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_constant6_ctrl_ready = sv.wire : !hw.inout<i1>
  %_handshake_constant6_out0 = sv.wire : !hw.inout<i64>
  %_handshake_constant6_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer53_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer53_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer53_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer52_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer52_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer52_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer51_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer51_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer51_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork9_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_fork9_out0 = sv.wire : !hw.inout<i64>
  %_handshake_fork9_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork9_out1 = sv.wire : !hw.inout<i64>
  %_handshake_fork9_out1_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork9_out2 = sv.wire : !hw.inout<i64>
  %_handshake_fork9_out2_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer50_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer50_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer50_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_constant5_ctrl_ready = sv.wire : !hw.inout<i1>
  %_handshake_constant5_out0 = sv.wire : !hw.inout<i64>
  %_handshake_constant5_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer49_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer49_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer49_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer48_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer48_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer48_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork8_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_fork8_out0 = sv.wire : !hw.inout<i64>
  %_handshake_fork8_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork8_out1 = sv.wire : !hw.inout<i64>
  %_handshake_fork8_out1_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer47_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer47_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer47_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_constant4_ctrl_ready = sv.wire : !hw.inout<i1>
  %_handshake_constant4_out0 = sv.wire : !hw.inout<i64>
  %_handshake_constant4_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer46_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer46_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer46_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer45_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer45_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer45_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork7_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_fork7_out0 = sv.wire : !hw.inout<i64>
  %_handshake_fork7_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork7_out1 = sv.wire : !hw.inout<i64>
  %_handshake_fork7_out1_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer44_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer44_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer44_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_constant3_ctrl_ready = sv.wire : !hw.inout<i1>
  %_handshake_constant3_out0 = sv.wire : !hw.inout<i64>
  %_handshake_constant3_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer43_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer43_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer43_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer42_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer42_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer42_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork6_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_fork6_out0 = sv.wire : !hw.inout<i64>
  %_handshake_fork6_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork6_out1 = sv.wire : !hw.inout<i64>
  %_handshake_fork6_out1_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer41_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer41_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer41_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_constant2_ctrl_ready = sv.wire : !hw.inout<i1>
  %_handshake_constant2_out0 = sv.wire : !hw.inout<i64>
  %_handshake_constant2_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer40_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer40_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer40_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer39_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer39_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer39_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork5_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_fork5_out0 = sv.wire : !hw.inout<i64>
  %_handshake_fork5_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork5_out1 = sv.wire : !hw.inout<i64>
  %_handshake_fork5_out1_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer38_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer38_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer38_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_constant1_ctrl_ready = sv.wire : !hw.inout<i1>
  %_handshake_constant1_out0 = sv.wire : !hw.inout<i64>
  %_handshake_constant1_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer37_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer37_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer37_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_constant0_ctrl_ready = sv.wire : !hw.inout<i1>
  %_handshake_constant0_out0 = sv.wire : !hw.inout<i64>
  %_handshake_constant0_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer36_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer36_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer36_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_join0_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_join0_in1_ready = sv.wire : !hw.inout<i1>
  %_handshake_join0_in2_ready = sv.wire : !hw.inout<i1>
  %_handshake_join0_in3_ready = sv.wire : !hw.inout<i1>
  %_handshake_join0_in4_ready = sv.wire : !hw.inout<i1>
  %_handshake_join0_in5_ready = sv.wire : !hw.inout<i1>
  %_handshake_join0_in6_ready = sv.wire : !hw.inout<i1>
  %_handshake_join0_out0 = sv.wire : !hw.inout<i0>
  %_handshake_join0_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer35_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer35_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer35_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer34_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer34_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer34_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer33_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer33_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer33_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork4_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_fork4_out0 = sv.wire : !hw.inout<i0>
  %_handshake_fork4_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork4_out1 = sv.wire : !hw.inout<i0>
  %_handshake_fork4_out1_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork4_out2 = sv.wire : !hw.inout<i0>
  %_handshake_fork4_out2_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer32_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer32_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer32_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer31_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer31_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer31_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork3_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_fork3_out0 = sv.wire : !hw.inout<i0>
  %_handshake_fork3_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork3_out1 = sv.wire : !hw.inout<i0>
  %_handshake_fork3_out1_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer30_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer30_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer30_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer29_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer29_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer29_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer28_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer28_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer28_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer27_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer27_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer27_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer26_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer26_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer26_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_memory2_stData0_ready = sv.wire : !hw.inout<i1>
  %_handshake_memory2_stAddr0_ready = sv.wire : !hw.inout<i1>
  %_handshake_memory2_stData1_ready = sv.wire : !hw.inout<i1>
  %_handshake_memory2_stAddr1_ready = sv.wire : !hw.inout<i1>
  %_handshake_memory2_stData2_ready = sv.wire : !hw.inout<i1>
  %_handshake_memory2_stAddr2_ready = sv.wire : !hw.inout<i1>
  %_handshake_memory2_ldAddr0_ready = sv.wire : !hw.inout<i1>
  %_handshake_memory2_ldData0 = sv.wire : !hw.inout<i64>
  %_handshake_memory2_ldData0_valid = sv.wire : !hw.inout<i1>
  %_handshake_memory2_stDone0 = sv.wire : !hw.inout<i0>
  %_handshake_memory2_stDone0_valid = sv.wire : !hw.inout<i1>
  %_handshake_memory2_stDone1 = sv.wire : !hw.inout<i0>
  %_handshake_memory2_stDone1_valid = sv.wire : !hw.inout<i1>
  %_handshake_memory2_stDone2 = sv.wire : !hw.inout<i0>
  %_handshake_memory2_stDone2_valid = sv.wire : !hw.inout<i1>
  %_handshake_memory2_ldDone0 = sv.wire : !hw.inout<i0>
  %_handshake_memory2_ldDone0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer25_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer25_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer25_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer24_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer24_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer24_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer23_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer23_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer23_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork2_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_fork2_out0 = sv.wire : !hw.inout<i0>
  %_handshake_fork2_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork2_out1 = sv.wire : !hw.inout<i0>
  %_handshake_fork2_out1_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork2_out2 = sv.wire : !hw.inout<i0>
  %_handshake_fork2_out2_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer22_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer22_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer22_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer21_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer21_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer21_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork1_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_fork1_out0 = sv.wire : !hw.inout<i0>
  %_handshake_fork1_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork1_out1 = sv.wire : !hw.inout<i0>
  %_handshake_fork1_out1_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer20_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer20_out0 = sv.wire : !hw.inout<i64>
  %_handshake_buffer20_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer19_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer19_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer19_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer18_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer18_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer18_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer17_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer17_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer17_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer16_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer16_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer16_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_memory1_stData0_ready = sv.wire : !hw.inout<i1>
  %_handshake_memory1_stAddr0_ready = sv.wire : !hw.inout<i1>
  %_handshake_memory1_stData1_ready = sv.wire : !hw.inout<i1>
  %_handshake_memory1_stAddr1_ready = sv.wire : !hw.inout<i1>
  %_handshake_memory1_stData2_ready = sv.wire : !hw.inout<i1>
  %_handshake_memory1_stAddr2_ready = sv.wire : !hw.inout<i1>
  %_handshake_memory1_ldAddr0_ready = sv.wire : !hw.inout<i1>
  %_handshake_memory1_ldData0 = sv.wire : !hw.inout<i64>
  %_handshake_memory1_ldData0_valid = sv.wire : !hw.inout<i1>
  %_handshake_memory1_stDone0 = sv.wire : !hw.inout<i0>
  %_handshake_memory1_stDone0_valid = sv.wire : !hw.inout<i1>
  %_handshake_memory1_stDone1 = sv.wire : !hw.inout<i0>
  %_handshake_memory1_stDone1_valid = sv.wire : !hw.inout<i1>
  %_handshake_memory1_stDone2 = sv.wire : !hw.inout<i0>
  %_handshake_memory1_stDone2_valid = sv.wire : !hw.inout<i1>
  %_handshake_memory1_ldDone0 = sv.wire : !hw.inout<i0>
  %_handshake_memory1_ldDone0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer15_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer15_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer15_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_memory0_stData0_ready = sv.wire : !hw.inout<i1>
  %_handshake_memory0_stAddr0_ready = sv.wire : !hw.inout<i1>
  %_handshake_memory0_stDone0 = sv.wire : !hw.inout<i0>
  %_handshake_memory0_stDone0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer14_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer14_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer14_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer13_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer13_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer13_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer12_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer12_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer12_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer11_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer11_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer11_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer10_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer10_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer10_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer9_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer9_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer9_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer8_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer8_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer8_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer7_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer7_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer7_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer6_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer6_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer6_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer5_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer5_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer5_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer4_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer4_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer4_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer3_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer3_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer3_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer2_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer2_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer2_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer1_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_buffer1_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer1_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork0_in0_ready = sv.wire : !hw.inout<i1>
  %_handshake_fork0_out0 = sv.wire : !hw.inout<i0>
  %_handshake_fork0_out0_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork0_out1 = sv.wire : !hw.inout<i0>
  %_handshake_fork0_out1_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork0_out2 = sv.wire : !hw.inout<i0>
  %_handshake_fork0_out2_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork0_out3 = sv.wire : !hw.inout<i0>
  %_handshake_fork0_out3_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork0_out4 = sv.wire : !hw.inout<i0>
  %_handshake_fork0_out4_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork0_out5 = sv.wire : !hw.inout<i0>
  %_handshake_fork0_out5_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork0_out6 = sv.wire : !hw.inout<i0>
  %_handshake_fork0_out6_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork0_out7 = sv.wire : !hw.inout<i0>
  %_handshake_fork0_out7_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork0_out8 = sv.wire : !hw.inout<i0>
  %_handshake_fork0_out8_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork0_out9 = sv.wire : !hw.inout<i0>
  %_handshake_fork0_out9_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork0_out10 = sv.wire : !hw.inout<i0>
  %_handshake_fork0_out10_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork0_out11 = sv.wire : !hw.inout<i0>
  %_handshake_fork0_out11_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork0_out12 = sv.wire : !hw.inout<i0>
  %_handshake_fork0_out12_valid = sv.wire : !hw.inout<i1>
  %_handshake_fork0_out13 = sv.wire : !hw.inout<i0>
  %_handshake_fork0_out13_valid = sv.wire : !hw.inout<i1>
  %_handshake_buffer0_out0 = sv.wire : !hw.inout<i0>
  %_handshake_buffer0_out0_valid = sv.wire : !hw.inout<i1>
  %0 = sv.read_inout %_handshake_fork0_in0_ready : !hw.inout<i1>
  %handshake_buffer0.in0_ready, %handshake_buffer0.out0, %handshake_buffer0.out0_valid = hw.instance "handshake_buffer0" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %in0: i0, in0_valid: %in0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %0: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer0_out0_valid, %handshake_buffer0.out0_valid : i1
  sv.assign %_handshake_buffer0_out0, %handshake_buffer0.out0 : i0
  %1 = sv.read_inout %_handshake_buffer0_out0 : !hw.inout<i0>
  %2 = sv.read_inout %_handshake_buffer0_out0_valid : !hw.inout<i1>
  %3 = sv.read_inout %_handshake_buffer1_in0_ready : !hw.inout<i1>
  %4 = sv.read_inout %_handshake_buffer2_in0_ready : !hw.inout<i1>
  %5 = sv.read_inout %_handshake_buffer3_in0_ready : !hw.inout<i1>
  %6 = sv.read_inout %_handshake_buffer4_in0_ready : !hw.inout<i1>
  %7 = sv.read_inout %_handshake_buffer5_in0_ready : !hw.inout<i1>
  %8 = sv.read_inout %_handshake_buffer6_in0_ready : !hw.inout<i1>
  %9 = sv.read_inout %_handshake_buffer7_in0_ready : !hw.inout<i1>
  %10 = sv.read_inout %_handshake_buffer8_in0_ready : !hw.inout<i1>
  %11 = sv.read_inout %_handshake_buffer9_in0_ready : !hw.inout<i1>
  %12 = sv.read_inout %_handshake_buffer10_in0_ready : !hw.inout<i1>
  %13 = sv.read_inout %_handshake_buffer11_in0_ready : !hw.inout<i1>
  %14 = sv.read_inout %_handshake_buffer12_in0_ready : !hw.inout<i1>
  %15 = sv.read_inout %_handshake_buffer13_in0_ready : !hw.inout<i1>
  %16 = sv.read_inout %_handshake_buffer14_in0_ready : !hw.inout<i1>
  %handshake_fork0.in0_ready, %handshake_fork0.out0, %handshake_fork0.out0_valid, %handshake_fork0.out1, %handshake_fork0.out1_valid, %handshake_fork0.out2, %handshake_fork0.out2_valid, %handshake_fork0.out3, %handshake_fork0.out3_valid, %handshake_fork0.out4, %handshake_fork0.out4_valid, %handshake_fork0.out5, %handshake_fork0.out5_valid, %handshake_fork0.out6, %handshake_fork0.out6_valid, %handshake_fork0.out7, %handshake_fork0.out7_valid, %handshake_fork0.out8, %handshake_fork0.out8_valid, %handshake_fork0.out9, %handshake_fork0.out9_valid, %handshake_fork0.out10, %handshake_fork0.out10_valid, %handshake_fork0.out11, %handshake_fork0.out11_valid, %handshake_fork0.out12, %handshake_fork0.out12_valid, %handshake_fork0.out13, %handshake_fork0.out13_valid = hw.instance "handshake_fork0" @handshake_fork_1ins_14outs_ctrl(in0: %1: i0, in0_valid: %2: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %16: i1, out1_ready: %15: i1, out2_ready: %14: i1, out3_ready: %13: i1, out4_ready: %12: i1, out5_ready: %11: i1, out6_ready: %10: i1, out7_ready: %9: i1, out8_ready: %8: i1, out9_ready: %7: i1, out10_ready: %6: i1, out11_ready: %5: i1, out12_ready: %4: i1, out13_ready: %3: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1, out4: i0, out4_valid: i1, out5: i0, out5_valid: i1, out6: i0, out6_valid: i1, out7: i0, out7_valid: i1, out8: i0, out8_valid: i1, out9: i0, out9_valid: i1, out10: i0, out10_valid: i1, out11: i0, out11_valid: i1, out12: i0, out12_valid: i1, out13: i0, out13_valid: i1)
  sv.assign %_handshake_fork0_out13_valid, %handshake_fork0.out13_valid : i1
  sv.assign %_handshake_fork0_out13, %handshake_fork0.out13 : i0
  sv.assign %_handshake_fork0_out12_valid, %handshake_fork0.out12_valid : i1
  sv.assign %_handshake_fork0_out12, %handshake_fork0.out12 : i0
  sv.assign %_handshake_fork0_out11_valid, %handshake_fork0.out11_valid : i1
  sv.assign %_handshake_fork0_out11, %handshake_fork0.out11 : i0
  sv.assign %_handshake_fork0_out10_valid, %handshake_fork0.out10_valid : i1
  sv.assign %_handshake_fork0_out10, %handshake_fork0.out10 : i0
  sv.assign %_handshake_fork0_out9_valid, %handshake_fork0.out9_valid : i1
  sv.assign %_handshake_fork0_out9, %handshake_fork0.out9 : i0
  sv.assign %_handshake_fork0_out8_valid, %handshake_fork0.out8_valid : i1
  sv.assign %_handshake_fork0_out8, %handshake_fork0.out8 : i0
  sv.assign %_handshake_fork0_out7_valid, %handshake_fork0.out7_valid : i1
  sv.assign %_handshake_fork0_out7, %handshake_fork0.out7 : i0
  sv.assign %_handshake_fork0_out6_valid, %handshake_fork0.out6_valid : i1
  sv.assign %_handshake_fork0_out6, %handshake_fork0.out6 : i0
  sv.assign %_handshake_fork0_out5_valid, %handshake_fork0.out5_valid : i1
  sv.assign %_handshake_fork0_out5, %handshake_fork0.out5 : i0
  sv.assign %_handshake_fork0_out4_valid, %handshake_fork0.out4_valid : i1
  sv.assign %_handshake_fork0_out4, %handshake_fork0.out4 : i0
  sv.assign %_handshake_fork0_out3_valid, %handshake_fork0.out3_valid : i1
  sv.assign %_handshake_fork0_out3, %handshake_fork0.out3 : i0
  sv.assign %_handshake_fork0_out2_valid, %handshake_fork0.out2_valid : i1
  sv.assign %_handshake_fork0_out2, %handshake_fork0.out2 : i0
  sv.assign %_handshake_fork0_out1_valid, %handshake_fork0.out1_valid : i1
  sv.assign %_handshake_fork0_out1, %handshake_fork0.out1 : i0
  sv.assign %_handshake_fork0_out0_valid, %handshake_fork0.out0_valid : i1
  sv.assign %_handshake_fork0_out0, %handshake_fork0.out0 : i0
  sv.assign %_handshake_fork0_in0_ready, %handshake_fork0.in0_ready : i1
  %17 = sv.read_inout %_handshake_fork0_out13 : !hw.inout<i0>
  %18 = sv.read_inout %_handshake_fork0_out13_valid : !hw.inout<i1>
  %19 = sv.read_inout %_handshake_join4_in0_ready : !hw.inout<i1>
  %handshake_buffer1.in0_ready, %handshake_buffer1.out0, %handshake_buffer1.out0_valid = hw.instance "handshake_buffer1" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %17: i0, in0_valid: %18: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %19: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer1_out0_valid, %handshake_buffer1.out0_valid : i1
  sv.assign %_handshake_buffer1_out0, %handshake_buffer1.out0 : i0
  sv.assign %_handshake_buffer1_in0_ready, %handshake_buffer1.in0_ready : i1
  %20 = sv.read_inout %_handshake_fork0_out12 : !hw.inout<i0>
  %21 = sv.read_inout %_handshake_fork0_out12_valid : !hw.inout<i1>
  %22 = sv.read_inout %_handshake_join3_in0_ready : !hw.inout<i1>
  %handshake_buffer2.in0_ready, %handshake_buffer2.out0, %handshake_buffer2.out0_valid = hw.instance "handshake_buffer2" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %20: i0, in0_valid: %21: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %22: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer2_out0_valid, %handshake_buffer2.out0_valid : i1
  sv.assign %_handshake_buffer2_out0, %handshake_buffer2.out0 : i0
  sv.assign %_handshake_buffer2_in0_ready, %handshake_buffer2.in0_ready : i1
  %23 = sv.read_inout %_handshake_fork0_out11 : !hw.inout<i0>
  %24 = sv.read_inout %_handshake_fork0_out11_valid : !hw.inout<i1>
  %25 = sv.read_inout %_handshake_store3_ctrl_ready : !hw.inout<i1>
  %handshake_buffer3.in0_ready, %handshake_buffer3.out0, %handshake_buffer3.out0_valid = hw.instance "handshake_buffer3" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %23: i0, in0_valid: %24: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %25: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer3_out0_valid, %handshake_buffer3.out0_valid : i1
  sv.assign %_handshake_buffer3_out0, %handshake_buffer3.out0 : i0
  sv.assign %_handshake_buffer3_in0_ready, %handshake_buffer3.in0_ready : i1
  %26 = sv.read_inout %_handshake_fork0_out10 : !hw.inout<i0>
  %27 = sv.read_inout %_handshake_fork0_out10_valid : !hw.inout<i1>
  %28 = sv.read_inout %_handshake_join0_in0_ready : !hw.inout<i1>
  %handshake_buffer4.in0_ready, %handshake_buffer4.out0, %handshake_buffer4.out0_valid = hw.instance "handshake_buffer4" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %26: i0, in0_valid: %27: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %28: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer4_out0_valid, %handshake_buffer4.out0_valid : i1
  sv.assign %_handshake_buffer4_out0, %handshake_buffer4.out0 : i0
  sv.assign %_handshake_buffer4_in0_ready, %handshake_buffer4.in0_ready : i1
  %29 = sv.read_inout %_handshake_fork0_out9 : !hw.inout<i0>
  %30 = sv.read_inout %_handshake_fork0_out9_valid : !hw.inout<i1>
  %31 = sv.read_inout %_handshake_join2_in0_ready : !hw.inout<i1>
  %handshake_buffer5.in0_ready, %handshake_buffer5.out0, %handshake_buffer5.out0_valid = hw.instance "handshake_buffer5" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %29: i0, in0_valid: %30: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %31: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer5_out0_valid, %handshake_buffer5.out0_valid : i1
  sv.assign %_handshake_buffer5_out0, %handshake_buffer5.out0 : i0
  sv.assign %_handshake_buffer5_in0_ready, %handshake_buffer5.in0_ready : i1
  %32 = sv.read_inout %_handshake_fork0_out8 : !hw.inout<i0>
  %33 = sv.read_inout %_handshake_fork0_out8_valid : !hw.inout<i1>
  %34 = sv.read_inout %_handshake_join1_in0_ready : !hw.inout<i1>
  %handshake_buffer6.in0_ready, %handshake_buffer6.out0, %handshake_buffer6.out0_valid = hw.instance "handshake_buffer6" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %32: i0, in0_valid: %33: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %34: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer6_out0_valid, %handshake_buffer6.out0_valid : i1
  sv.assign %_handshake_buffer6_out0, %handshake_buffer6.out0 : i0
  sv.assign %_handshake_buffer6_in0_ready, %handshake_buffer6.in0_ready : i1
  %35 = sv.read_inout %_handshake_fork0_out7 : !hw.inout<i0>
  %36 = sv.read_inout %_handshake_fork0_out7_valid : !hw.inout<i1>
  %37 = sv.read_inout %_handshake_store0_ctrl_ready : !hw.inout<i1>
  %handshake_buffer7.in0_ready, %handshake_buffer7.out0, %handshake_buffer7.out0_valid = hw.instance "handshake_buffer7" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %35: i0, in0_valid: %36: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %37: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer7_out0_valid, %handshake_buffer7.out0_valid : i1
  sv.assign %_handshake_buffer7_out0, %handshake_buffer7.out0 : i0
  sv.assign %_handshake_buffer7_in0_ready, %handshake_buffer7.in0_ready : i1
  %38 = sv.read_inout %_handshake_fork0_out6 : !hw.inout<i0>
  %39 = sv.read_inout %_handshake_fork0_out6_valid : !hw.inout<i1>
  %40 = sv.read_inout %_handshake_constant6_ctrl_ready : !hw.inout<i1>
  %handshake_buffer8.in0_ready, %handshake_buffer8.out0, %handshake_buffer8.out0_valid = hw.instance "handshake_buffer8" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %38: i0, in0_valid: %39: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %40: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer8_out0_valid, %handshake_buffer8.out0_valid : i1
  sv.assign %_handshake_buffer8_out0, %handshake_buffer8.out0 : i0
  sv.assign %_handshake_buffer8_in0_ready, %handshake_buffer8.in0_ready : i1
  %41 = sv.read_inout %_handshake_fork0_out5 : !hw.inout<i0>
  %42 = sv.read_inout %_handshake_fork0_out5_valid : !hw.inout<i1>
  %43 = sv.read_inout %_handshake_constant5_ctrl_ready : !hw.inout<i1>
  %handshake_buffer9.in0_ready, %handshake_buffer9.out0, %handshake_buffer9.out0_valid = hw.instance "handshake_buffer9" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %41: i0, in0_valid: %42: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %43: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer9_out0_valid, %handshake_buffer9.out0_valid : i1
  sv.assign %_handshake_buffer9_out0, %handshake_buffer9.out0 : i0
  sv.assign %_handshake_buffer9_in0_ready, %handshake_buffer9.in0_ready : i1
  %44 = sv.read_inout %_handshake_fork0_out4 : !hw.inout<i0>
  %45 = sv.read_inout %_handshake_fork0_out4_valid : !hw.inout<i1>
  %46 = sv.read_inout %_handshake_constant4_ctrl_ready : !hw.inout<i1>
  %handshake_buffer10.in0_ready, %handshake_buffer10.out0, %handshake_buffer10.out0_valid = hw.instance "handshake_buffer10" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %44: i0, in0_valid: %45: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %46: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer10_out0_valid, %handshake_buffer10.out0_valid : i1
  sv.assign %_handshake_buffer10_out0, %handshake_buffer10.out0 : i0
  sv.assign %_handshake_buffer10_in0_ready, %handshake_buffer10.in0_ready : i1
  %47 = sv.read_inout %_handshake_fork0_out3 : !hw.inout<i0>
  %48 = sv.read_inout %_handshake_fork0_out3_valid : !hw.inout<i1>
  %49 = sv.read_inout %_handshake_constant3_ctrl_ready : !hw.inout<i1>
  %handshake_buffer11.in0_ready, %handshake_buffer11.out0, %handshake_buffer11.out0_valid = hw.instance "handshake_buffer11" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %47: i0, in0_valid: %48: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %49: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer11_out0_valid, %handshake_buffer11.out0_valid : i1
  sv.assign %_handshake_buffer11_out0, %handshake_buffer11.out0 : i0
  sv.assign %_handshake_buffer11_in0_ready, %handshake_buffer11.in0_ready : i1
  %50 = sv.read_inout %_handshake_fork0_out2 : !hw.inout<i0>
  %51 = sv.read_inout %_handshake_fork0_out2_valid : !hw.inout<i1>
  %52 = sv.read_inout %_handshake_constant2_ctrl_ready : !hw.inout<i1>
  %handshake_buffer12.in0_ready, %handshake_buffer12.out0, %handshake_buffer12.out0_valid = hw.instance "handshake_buffer12" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %50: i0, in0_valid: %51: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %52: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer12_out0_valid, %handshake_buffer12.out0_valid : i1
  sv.assign %_handshake_buffer12_out0, %handshake_buffer12.out0 : i0
  sv.assign %_handshake_buffer12_in0_ready, %handshake_buffer12.in0_ready : i1
  %53 = sv.read_inout %_handshake_fork0_out1 : !hw.inout<i0>
  %54 = sv.read_inout %_handshake_fork0_out1_valid : !hw.inout<i1>
  %55 = sv.read_inout %_handshake_constant1_ctrl_ready : !hw.inout<i1>
  %handshake_buffer13.in0_ready, %handshake_buffer13.out0, %handshake_buffer13.out0_valid = hw.instance "handshake_buffer13" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %53: i0, in0_valid: %54: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %55: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer13_out0_valid, %handshake_buffer13.out0_valid : i1
  sv.assign %_handshake_buffer13_out0, %handshake_buffer13.out0 : i0
  sv.assign %_handshake_buffer13_in0_ready, %handshake_buffer13.in0_ready : i1
  %56 = sv.read_inout %_handshake_fork0_out0 : !hw.inout<i0>
  %57 = sv.read_inout %_handshake_fork0_out0_valid : !hw.inout<i1>
  %58 = sv.read_inout %_handshake_constant0_ctrl_ready : !hw.inout<i1>
  %handshake_buffer14.in0_ready, %handshake_buffer14.out0, %handshake_buffer14.out0_valid = hw.instance "handshake_buffer14" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %56: i0, in0_valid: %57: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %58: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer14_out0_valid, %handshake_buffer14.out0_valid : i1
  sv.assign %_handshake_buffer14_out0, %handshake_buffer14.out0 : i0
  sv.assign %_handshake_buffer14_in0_ready, %handshake_buffer14.in0_ready : i1
  %59 = sv.read_inout %_handshake_buffer15_in0_ready : !hw.inout<i1>
  %60 = sv.read_inout %_handshake_buffer113_out0 : !hw.inout<i64>
  %61 = sv.read_inout %_handshake_buffer113_out0_valid : !hw.inout<i1>
  %62 = sv.read_inout %_handshake_buffer114_out0 : !hw.inout<i64>
  %63 = sv.read_inout %_handshake_buffer114_out0_valid : !hw.inout<i1>
  %handshake_memory0.stData0_ready, %handshake_memory0.stAddr0_ready, %handshake_memory0.stDone0, %handshake_memory0.stDone0_valid = hw.instance "handshake_memory0" @handshake_memory_out_ui64_id2(stData0: %62: i64, stData0_valid: %63: i1, stAddr0: %60: i64, stAddr0_valid: %61: i1, clock: %clock: i1, reset: %reset: i1, stDone0_ready: %59: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stDone0: i0, stDone0_valid: i1)
  sv.assign %_handshake_memory0_stDone0_valid, %handshake_memory0.stDone0_valid : i1
  sv.assign %_handshake_memory0_stDone0, %handshake_memory0.stDone0 : i0
  sv.assign %_handshake_memory0_stAddr0_ready, %handshake_memory0.stAddr0_ready : i1
  sv.assign %_handshake_memory0_stData0_ready, %handshake_memory0.stData0_ready : i1
  %64 = sv.read_inout %_handshake_memory0_stDone0 : !hw.inout<i0>
  %65 = sv.read_inout %_handshake_memory0_stDone0_valid : !hw.inout<i1>
  %66 = sv.read_inout %_handshake_join5_in3_ready : !hw.inout<i1>
  %handshake_buffer15.in0_ready, %handshake_buffer15.out0, %handshake_buffer15.out0_valid = hw.instance "handshake_buffer15" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %64: i0, in0_valid: %65: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %66: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer15_out0_valid, %handshake_buffer15.out0_valid : i1
  sv.assign %_handshake_buffer15_out0, %handshake_buffer15.out0 : i0
  sv.assign %_handshake_buffer15_in0_ready, %handshake_buffer15.in0_ready : i1
  %67 = sv.read_inout %_handshake_buffer16_in0_ready : !hw.inout<i1>
  %68 = sv.read_inout %_handshake_buffer17_in0_ready : !hw.inout<i1>
  %69 = sv.read_inout %_handshake_buffer18_in0_ready : !hw.inout<i1>
  %70 = sv.read_inout %_handshake_buffer19_in0_ready : !hw.inout<i1>
  %71 = sv.read_inout %_handshake_buffer20_in0_ready : !hw.inout<i1>
  %72 = sv.read_inout %_handshake_buffer66_out0 : !hw.inout<i64>
  %73 = sv.read_inout %_handshake_buffer66_out0_valid : !hw.inout<i1>
  %74 = sv.read_inout %_handshake_buffer67_out0 : !hw.inout<i64>
  %75 = sv.read_inout %_handshake_buffer67_out0_valid : !hw.inout<i1>
  %76 = sv.read_inout %_handshake_buffer69_out0 : !hw.inout<i64>
  %77 = sv.read_inout %_handshake_buffer69_out0_valid : !hw.inout<i1>
  %78 = sv.read_inout %_handshake_buffer70_out0 : !hw.inout<i64>
  %79 = sv.read_inout %_handshake_buffer70_out0_valid : !hw.inout<i1>
  %80 = sv.read_inout %_handshake_buffer72_out0 : !hw.inout<i64>
  %81 = sv.read_inout %_handshake_buffer72_out0_valid : !hw.inout<i1>
  %82 = sv.read_inout %_handshake_buffer73_out0 : !hw.inout<i64>
  %83 = sv.read_inout %_handshake_buffer73_out0_valid : !hw.inout<i1>
  %84 = sv.read_inout %_handshake_buffer110_out0 : !hw.inout<i64>
  %85 = sv.read_inout %_handshake_buffer110_out0_valid : !hw.inout<i1>
  %handshake_memory1.stData0_ready, %handshake_memory1.stAddr0_ready, %handshake_memory1.stData1_ready, %handshake_memory1.stAddr1_ready, %handshake_memory1.stData2_ready, %handshake_memory1.stAddr2_ready, %handshake_memory1.ldAddr0_ready, %handshake_memory1.ldData0, %handshake_memory1.ldData0_valid, %handshake_memory1.stDone0, %handshake_memory1.stDone0_valid, %handshake_memory1.stDone1, %handshake_memory1.stDone1_valid, %handshake_memory1.stDone2, %handshake_memory1.stDone2_valid, %handshake_memory1.ldDone0, %handshake_memory1.ldDone0_valid = hw.instance "handshake_memory1" @handshake_memory_out_ui64_id1(stData0: %74: i64, stData0_valid: %75: i1, stAddr0: %72: i64, stAddr0_valid: %73: i1, stData1: %78: i64, stData1_valid: %79: i1, stAddr1: %76: i64, stAddr1_valid: %77: i1, stData2: %82: i64, stData2_valid: %83: i1, stAddr2: %80: i64, stAddr2_valid: %81: i1, ldAddr0: %84: i64, ldAddr0_valid: %85: i1, clock: %clock: i1, reset: %reset: i1, ldData0_ready: %71: i1, stDone0_ready: %70: i1, stDone1_ready: %69: i1, stDone2_ready: %68: i1, ldDone0_ready: %67: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
  sv.assign %_handshake_memory1_ldDone0_valid, %handshake_memory1.ldDone0_valid : i1
  sv.assign %_handshake_memory1_ldDone0, %handshake_memory1.ldDone0 : i0
  sv.assign %_handshake_memory1_stDone2_valid, %handshake_memory1.stDone2_valid : i1
  sv.assign %_handshake_memory1_stDone2, %handshake_memory1.stDone2 : i0
  sv.assign %_handshake_memory1_stDone1_valid, %handshake_memory1.stDone1_valid : i1
  sv.assign %_handshake_memory1_stDone1, %handshake_memory1.stDone1 : i0
  sv.assign %_handshake_memory1_stDone0_valid, %handshake_memory1.stDone0_valid : i1
  sv.assign %_handshake_memory1_stDone0, %handshake_memory1.stDone0 : i0
  sv.assign %_handshake_memory1_ldData0_valid, %handshake_memory1.ldData0_valid : i1
  sv.assign %_handshake_memory1_ldData0, %handshake_memory1.ldData0 : i64
  sv.assign %_handshake_memory1_ldAddr0_ready, %handshake_memory1.ldAddr0_ready : i1
  sv.assign %_handshake_memory1_stAddr2_ready, %handshake_memory1.stAddr2_ready : i1
  sv.assign %_handshake_memory1_stData2_ready, %handshake_memory1.stData2_ready : i1
  sv.assign %_handshake_memory1_stAddr1_ready, %handshake_memory1.stAddr1_ready : i1
  sv.assign %_handshake_memory1_stData1_ready, %handshake_memory1.stData1_ready : i1
  sv.assign %_handshake_memory1_stAddr0_ready, %handshake_memory1.stAddr0_ready : i1
  sv.assign %_handshake_memory1_stData0_ready, %handshake_memory1.stData0_ready : i1
  %86 = sv.read_inout %_handshake_memory1_ldDone0 : !hw.inout<i0>
  %87 = sv.read_inout %_handshake_memory1_ldDone0_valid : !hw.inout<i1>
  %88 = sv.read_inout %_handshake_join5_in2_ready : !hw.inout<i1>
  %handshake_buffer16.in0_ready, %handshake_buffer16.out0, %handshake_buffer16.out0_valid = hw.instance "handshake_buffer16" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %86: i0, in0_valid: %87: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %88: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer16_out0_valid, %handshake_buffer16.out0_valid : i1
  sv.assign %_handshake_buffer16_out0, %handshake_buffer16.out0 : i0
  sv.assign %_handshake_buffer16_in0_ready, %handshake_buffer16.in0_ready : i1
  %89 = sv.read_inout %_handshake_memory1_stDone2 : !hw.inout<i0>
  %90 = sv.read_inout %_handshake_memory1_stDone2_valid : !hw.inout<i1>
  %91 = sv.read_inout %_handshake_join0_in6_ready : !hw.inout<i1>
  %handshake_buffer17.in0_ready, %handshake_buffer17.out0, %handshake_buffer17.out0_valid = hw.instance "handshake_buffer17" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %89: i0, in0_valid: %90: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %91: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer17_out0_valid, %handshake_buffer17.out0_valid : i1
  sv.assign %_handshake_buffer17_out0, %handshake_buffer17.out0 : i0
  sv.assign %_handshake_buffer17_in0_ready, %handshake_buffer17.in0_ready : i1
  %92 = sv.read_inout %_handshake_memory1_stDone1 : !hw.inout<i0>
  %93 = sv.read_inout %_handshake_memory1_stDone1_valid : !hw.inout<i1>
  %94 = sv.read_inout %_handshake_fork1_in0_ready : !hw.inout<i1>
  %handshake_buffer18.in0_ready, %handshake_buffer18.out0, %handshake_buffer18.out0_valid = hw.instance "handshake_buffer18" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %92: i0, in0_valid: %93: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %94: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer18_out0_valid, %handshake_buffer18.out0_valid : i1
  sv.assign %_handshake_buffer18_out0, %handshake_buffer18.out0 : i0
  sv.assign %_handshake_buffer18_in0_ready, %handshake_buffer18.in0_ready : i1
  %95 = sv.read_inout %_handshake_memory1_stDone0 : !hw.inout<i0>
  %96 = sv.read_inout %_handshake_memory1_stDone0_valid : !hw.inout<i1>
  %97 = sv.read_inout %_handshake_fork2_in0_ready : !hw.inout<i1>
  %handshake_buffer19.in0_ready, %handshake_buffer19.out0, %handshake_buffer19.out0_valid = hw.instance "handshake_buffer19" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %95: i0, in0_valid: %96: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %97: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer19_out0_valid, %handshake_buffer19.out0_valid : i1
  sv.assign %_handshake_buffer19_out0, %handshake_buffer19.out0 : i0
  sv.assign %_handshake_buffer19_in0_ready, %handshake_buffer19.in0_ready : i1
  %98 = sv.read_inout %_handshake_memory1_ldData0 : !hw.inout<i64>
  %99 = sv.read_inout %_handshake_memory1_ldData0_valid : !hw.inout<i1>
  %100 = sv.read_inout %_handshake_load1_dataFromMem_ready : !hw.inout<i1>
  %handshake_buffer20.in0_ready, %handshake_buffer20.out0, %handshake_buffer20.out0_valid = hw.instance "handshake_buffer20" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %98: i64, in0_valid: %99: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %100: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer20_out0_valid, %handshake_buffer20.out0_valid : i1
  sv.assign %_handshake_buffer20_out0, %handshake_buffer20.out0 : i64
  sv.assign %_handshake_buffer20_in0_ready, %handshake_buffer20.in0_ready : i1
  %101 = sv.read_inout %_handshake_buffer18_out0 : !hw.inout<i0>
  %102 = sv.read_inout %_handshake_buffer18_out0_valid : !hw.inout<i1>
  %103 = sv.read_inout %_handshake_buffer21_in0_ready : !hw.inout<i1>
  %104 = sv.read_inout %_handshake_buffer22_in0_ready : !hw.inout<i1>
  %handshake_fork1.in0_ready, %handshake_fork1.out0, %handshake_fork1.out0_valid, %handshake_fork1.out1, %handshake_fork1.out1_valid = hw.instance "handshake_fork1" @handshake_fork_1ins_2outs_ctrl(in0: %101: i0, in0_valid: %102: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %104: i1, out1_ready: %103: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
  sv.assign %_handshake_fork1_out1_valid, %handshake_fork1.out1_valid : i1
  sv.assign %_handshake_fork1_out1, %handshake_fork1.out1 : i0
  sv.assign %_handshake_fork1_out0_valid, %handshake_fork1.out0_valid : i1
  sv.assign %_handshake_fork1_out0, %handshake_fork1.out0 : i0
  sv.assign %_handshake_fork1_in0_ready, %handshake_fork1.in0_ready : i1
  %105 = sv.read_inout %_handshake_fork1_out1 : !hw.inout<i0>
  %106 = sv.read_inout %_handshake_fork1_out1_valid : !hw.inout<i1>
  %107 = sv.read_inout %_handshake_join0_in5_ready : !hw.inout<i1>
  %handshake_buffer21.in0_ready, %handshake_buffer21.out0, %handshake_buffer21.out0_valid = hw.instance "handshake_buffer21" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %105: i0, in0_valid: %106: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %107: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer21_out0_valid, %handshake_buffer21.out0_valid : i1
  sv.assign %_handshake_buffer21_out0, %handshake_buffer21.out0 : i0
  sv.assign %_handshake_buffer21_in0_ready, %handshake_buffer21.in0_ready : i1
  %108 = sv.read_inout %_handshake_fork1_out0 : !hw.inout<i0>
  %109 = sv.read_inout %_handshake_fork1_out0_valid : !hw.inout<i1>
  %110 = sv.read_inout %_handshake_join4_in2_ready : !hw.inout<i1>
  %handshake_buffer22.in0_ready, %handshake_buffer22.out0, %handshake_buffer22.out0_valid = hw.instance "handshake_buffer22" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %108: i0, in0_valid: %109: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %110: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer22_out0_valid, %handshake_buffer22.out0_valid : i1
  sv.assign %_handshake_buffer22_out0, %handshake_buffer22.out0 : i0
  sv.assign %_handshake_buffer22_in0_ready, %handshake_buffer22.in0_ready : i1
  %111 = sv.read_inout %_handshake_buffer19_out0 : !hw.inout<i0>
  %112 = sv.read_inout %_handshake_buffer19_out0_valid : !hw.inout<i1>
  %113 = sv.read_inout %_handshake_buffer23_in0_ready : !hw.inout<i1>
  %114 = sv.read_inout %_handshake_buffer24_in0_ready : !hw.inout<i1>
  %115 = sv.read_inout %_handshake_buffer25_in0_ready : !hw.inout<i1>
  %handshake_fork2.in0_ready, %handshake_fork2.out0, %handshake_fork2.out0_valid, %handshake_fork2.out1, %handshake_fork2.out1_valid, %handshake_fork2.out2, %handshake_fork2.out2_valid = hw.instance "handshake_fork2" @handshake_fork_1ins_3outs_ctrl(in0: %111: i0, in0_valid: %112: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %115: i1, out1_ready: %114: i1, out2_ready: %113: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
  sv.assign %_handshake_fork2_out2_valid, %handshake_fork2.out2_valid : i1
  sv.assign %_handshake_fork2_out2, %handshake_fork2.out2 : i0
  sv.assign %_handshake_fork2_out1_valid, %handshake_fork2.out1_valid : i1
  sv.assign %_handshake_fork2_out1, %handshake_fork2.out1 : i0
  sv.assign %_handshake_fork2_out0_valid, %handshake_fork2.out0_valid : i1
  sv.assign %_handshake_fork2_out0, %handshake_fork2.out0 : i0
  sv.assign %_handshake_fork2_in0_ready, %handshake_fork2.in0_ready : i1
  %116 = sv.read_inout %_handshake_fork2_out2 : !hw.inout<i0>
  %117 = sv.read_inout %_handshake_fork2_out2_valid : !hw.inout<i1>
  %118 = sv.read_inout %_handshake_join0_in4_ready : !hw.inout<i1>
  %handshake_buffer23.in0_ready, %handshake_buffer23.out0, %handshake_buffer23.out0_valid = hw.instance "handshake_buffer23" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %116: i0, in0_valid: %117: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %118: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer23_out0_valid, %handshake_buffer23.out0_valid : i1
  sv.assign %_handshake_buffer23_out0, %handshake_buffer23.out0 : i0
  sv.assign %_handshake_buffer23_in0_ready, %handshake_buffer23.in0_ready : i1
  %119 = sv.read_inout %_handshake_fork2_out1 : !hw.inout<i0>
  %120 = sv.read_inout %_handshake_fork2_out1_valid : !hw.inout<i1>
  %121 = sv.read_inout %_handshake_join3_in1_ready : !hw.inout<i1>
  %handshake_buffer24.in0_ready, %handshake_buffer24.out0, %handshake_buffer24.out0_valid = hw.instance "handshake_buffer24" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %119: i0, in0_valid: %120: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %121: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer24_out0_valid, %handshake_buffer24.out0_valid : i1
  sv.assign %_handshake_buffer24_out0, %handshake_buffer24.out0 : i0
  sv.assign %_handshake_buffer24_in0_ready, %handshake_buffer24.in0_ready : i1
  %122 = sv.read_inout %_handshake_fork2_out0 : !hw.inout<i0>
  %123 = sv.read_inout %_handshake_fork2_out0_valid : !hw.inout<i1>
  %124 = sv.read_inout %_handshake_join4_in1_ready : !hw.inout<i1>
  %handshake_buffer25.in0_ready, %handshake_buffer25.out0, %handshake_buffer25.out0_valid = hw.instance "handshake_buffer25" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %122: i0, in0_valid: %123: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %124: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer25_out0_valid, %handshake_buffer25.out0_valid : i1
  sv.assign %_handshake_buffer25_out0, %handshake_buffer25.out0 : i0
  sv.assign %_handshake_buffer25_in0_ready, %handshake_buffer25.in0_ready : i1
  %125 = sv.read_inout %_handshake_buffer26_in0_ready : !hw.inout<i1>
  %126 = sv.read_inout %_handshake_buffer27_in0_ready : !hw.inout<i1>
  %127 = sv.read_inout %_handshake_buffer28_in0_ready : !hw.inout<i1>
  %128 = sv.read_inout %_handshake_buffer29_in0_ready : !hw.inout<i1>
  %129 = sv.read_inout %_handshake_buffer30_in0_ready : !hw.inout<i1>
  %130 = sv.read_inout %_handshake_buffer58_out0 : !hw.inout<i64>
  %131 = sv.read_inout %_handshake_buffer58_out0_valid : !hw.inout<i1>
  %132 = sv.read_inout %_handshake_buffer59_out0 : !hw.inout<i64>
  %133 = sv.read_inout %_handshake_buffer59_out0_valid : !hw.inout<i1>
  %134 = sv.read_inout %_handshake_buffer61_out0 : !hw.inout<i64>
  %135 = sv.read_inout %_handshake_buffer61_out0_valid : !hw.inout<i1>
  %136 = sv.read_inout %_handshake_buffer62_out0 : !hw.inout<i64>
  %137 = sv.read_inout %_handshake_buffer62_out0_valid : !hw.inout<i1>
  %138 = sv.read_inout %_handshake_buffer64_out0 : !hw.inout<i64>
  %139 = sv.read_inout %_handshake_buffer64_out0_valid : !hw.inout<i1>
  %140 = sv.read_inout %_handshake_buffer65_out0 : !hw.inout<i64>
  %141 = sv.read_inout %_handshake_buffer65_out0_valid : !hw.inout<i1>
  %142 = sv.read_inout %_handshake_buffer108_out0 : !hw.inout<i64>
  %143 = sv.read_inout %_handshake_buffer108_out0_valid : !hw.inout<i1>
  %handshake_memory2.stData0_ready, %handshake_memory2.stAddr0_ready, %handshake_memory2.stData1_ready, %handshake_memory2.stAddr1_ready, %handshake_memory2.stData2_ready, %handshake_memory2.stAddr2_ready, %handshake_memory2.ldAddr0_ready, %handshake_memory2.ldData0, %handshake_memory2.ldData0_valid, %handshake_memory2.stDone0, %handshake_memory2.stDone0_valid, %handshake_memory2.stDone1, %handshake_memory2.stDone1_valid, %handshake_memory2.stDone2, %handshake_memory2.stDone2_valid, %handshake_memory2.ldDone0, %handshake_memory2.ldDone0_valid = hw.instance "handshake_memory2" @handshake_memory_out_ui64_id0(stData0: %132: i64, stData0_valid: %133: i1, stAddr0: %130: i64, stAddr0_valid: %131: i1, stData1: %136: i64, stData1_valid: %137: i1, stAddr1: %134: i64, stAddr1_valid: %135: i1, stData2: %140: i64, stData2_valid: %141: i1, stAddr2: %138: i64, stAddr2_valid: %139: i1, ldAddr0: %142: i64, ldAddr0_valid: %143: i1, clock: %clock: i1, reset: %reset: i1, ldData0_ready: %129: i1, stDone0_ready: %128: i1, stDone1_ready: %127: i1, stDone2_ready: %126: i1, ldDone0_ready: %125: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1)
  sv.assign %_handshake_memory2_ldDone0_valid, %handshake_memory2.ldDone0_valid : i1
  sv.assign %_handshake_memory2_ldDone0, %handshake_memory2.ldDone0 : i0
  sv.assign %_handshake_memory2_stDone2_valid, %handshake_memory2.stDone2_valid : i1
  sv.assign %_handshake_memory2_stDone2, %handshake_memory2.stDone2 : i0
  sv.assign %_handshake_memory2_stDone1_valid, %handshake_memory2.stDone1_valid : i1
  sv.assign %_handshake_memory2_stDone1, %handshake_memory2.stDone1 : i0
  sv.assign %_handshake_memory2_stDone0_valid, %handshake_memory2.stDone0_valid : i1
  sv.assign %_handshake_memory2_stDone0, %handshake_memory2.stDone0 : i0
  sv.assign %_handshake_memory2_ldData0_valid, %handshake_memory2.ldData0_valid : i1
  sv.assign %_handshake_memory2_ldData0, %handshake_memory2.ldData0 : i64
  sv.assign %_handshake_memory2_ldAddr0_ready, %handshake_memory2.ldAddr0_ready : i1
  sv.assign %_handshake_memory2_stAddr2_ready, %handshake_memory2.stAddr2_ready : i1
  sv.assign %_handshake_memory2_stData2_ready, %handshake_memory2.stData2_ready : i1
  sv.assign %_handshake_memory2_stAddr1_ready, %handshake_memory2.stAddr1_ready : i1
  sv.assign %_handshake_memory2_stData1_ready, %handshake_memory2.stData1_ready : i1
  sv.assign %_handshake_memory2_stAddr0_ready, %handshake_memory2.stAddr0_ready : i1
  sv.assign %_handshake_memory2_stData0_ready, %handshake_memory2.stData0_ready : i1
  %144 = sv.read_inout %_handshake_memory2_ldDone0 : !hw.inout<i0>
  %145 = sv.read_inout %_handshake_memory2_ldDone0_valid : !hw.inout<i1>
  %146 = sv.read_inout %_handshake_join5_in1_ready : !hw.inout<i1>
  %handshake_buffer26.in0_ready, %handshake_buffer26.out0, %handshake_buffer26.out0_valid = hw.instance "handshake_buffer26" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %144: i0, in0_valid: %145: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %146: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer26_out0_valid, %handshake_buffer26.out0_valid : i1
  sv.assign %_handshake_buffer26_out0, %handshake_buffer26.out0 : i0
  sv.assign %_handshake_buffer26_in0_ready, %handshake_buffer26.in0_ready : i1
  %147 = sv.read_inout %_handshake_memory2_stDone2 : !hw.inout<i0>
  %148 = sv.read_inout %_handshake_memory2_stDone2_valid : !hw.inout<i1>
  %149 = sv.read_inout %_handshake_join0_in3_ready : !hw.inout<i1>
  %handshake_buffer27.in0_ready, %handshake_buffer27.out0, %handshake_buffer27.out0_valid = hw.instance "handshake_buffer27" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %147: i0, in0_valid: %148: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %149: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer27_out0_valid, %handshake_buffer27.out0_valid : i1
  sv.assign %_handshake_buffer27_out0, %handshake_buffer27.out0 : i0
  sv.assign %_handshake_buffer27_in0_ready, %handshake_buffer27.in0_ready : i1
  %150 = sv.read_inout %_handshake_memory2_stDone1 : !hw.inout<i0>
  %151 = sv.read_inout %_handshake_memory2_stDone1_valid : !hw.inout<i1>
  %152 = sv.read_inout %_handshake_fork3_in0_ready : !hw.inout<i1>
  %handshake_buffer28.in0_ready, %handshake_buffer28.out0, %handshake_buffer28.out0_valid = hw.instance "handshake_buffer28" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %150: i0, in0_valid: %151: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %152: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer28_out0_valid, %handshake_buffer28.out0_valid : i1
  sv.assign %_handshake_buffer28_out0, %handshake_buffer28.out0 : i0
  sv.assign %_handshake_buffer28_in0_ready, %handshake_buffer28.in0_ready : i1
  %153 = sv.read_inout %_handshake_memory2_stDone0 : !hw.inout<i0>
  %154 = sv.read_inout %_handshake_memory2_stDone0_valid : !hw.inout<i1>
  %155 = sv.read_inout %_handshake_fork4_in0_ready : !hw.inout<i1>
  %handshake_buffer29.in0_ready, %handshake_buffer29.out0, %handshake_buffer29.out0_valid = hw.instance "handshake_buffer29" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %153: i0, in0_valid: %154: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %155: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer29_out0_valid, %handshake_buffer29.out0_valid : i1
  sv.assign %_handshake_buffer29_out0, %handshake_buffer29.out0 : i0
  sv.assign %_handshake_buffer29_in0_ready, %handshake_buffer29.in0_ready : i1
  %156 = sv.read_inout %_handshake_memory2_ldData0 : !hw.inout<i64>
  %157 = sv.read_inout %_handshake_memory2_ldData0_valid : !hw.inout<i1>
  %158 = sv.read_inout %_handshake_load0_dataFromMem_ready : !hw.inout<i1>
  %handshake_buffer30.in0_ready, %handshake_buffer30.out0, %handshake_buffer30.out0_valid = hw.instance "handshake_buffer30" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %156: i64, in0_valid: %157: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %158: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer30_out0_valid, %handshake_buffer30.out0_valid : i1
  sv.assign %_handshake_buffer30_out0, %handshake_buffer30.out0 : i64
  sv.assign %_handshake_buffer30_in0_ready, %handshake_buffer30.in0_ready : i1
  %159 = sv.read_inout %_handshake_buffer28_out0 : !hw.inout<i0>
  %160 = sv.read_inout %_handshake_buffer28_out0_valid : !hw.inout<i1>
  %161 = sv.read_inout %_handshake_buffer31_in0_ready : !hw.inout<i1>
  %162 = sv.read_inout %_handshake_buffer32_in0_ready : !hw.inout<i1>
  %handshake_fork3.in0_ready, %handshake_fork3.out0, %handshake_fork3.out0_valid, %handshake_fork3.out1, %handshake_fork3.out1_valid = hw.instance "handshake_fork3" @handshake_fork_1ins_2outs_ctrl(in0: %159: i0, in0_valid: %160: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %162: i1, out1_ready: %161: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1)
  sv.assign %_handshake_fork3_out1_valid, %handshake_fork3.out1_valid : i1
  sv.assign %_handshake_fork3_out1, %handshake_fork3.out1 : i0
  sv.assign %_handshake_fork3_out0_valid, %handshake_fork3.out0_valid : i1
  sv.assign %_handshake_fork3_out0, %handshake_fork3.out0 : i0
  sv.assign %_handshake_fork3_in0_ready, %handshake_fork3.in0_ready : i1
  %163 = sv.read_inout %_handshake_fork3_out1 : !hw.inout<i0>
  %164 = sv.read_inout %_handshake_fork3_out1_valid : !hw.inout<i1>
  %165 = sv.read_inout %_handshake_join2_in2_ready : !hw.inout<i1>
  %handshake_buffer31.in0_ready, %handshake_buffer31.out0, %handshake_buffer31.out0_valid = hw.instance "handshake_buffer31" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %163: i0, in0_valid: %164: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %165: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer31_out0_valid, %handshake_buffer31.out0_valid : i1
  sv.assign %_handshake_buffer31_out0, %handshake_buffer31.out0 : i0
  sv.assign %_handshake_buffer31_in0_ready, %handshake_buffer31.in0_ready : i1
  %166 = sv.read_inout %_handshake_fork3_out0 : !hw.inout<i0>
  %167 = sv.read_inout %_handshake_fork3_out0_valid : !hw.inout<i1>
  %168 = sv.read_inout %_handshake_join0_in2_ready : !hw.inout<i1>
  %handshake_buffer32.in0_ready, %handshake_buffer32.out0, %handshake_buffer32.out0_valid = hw.instance "handshake_buffer32" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %166: i0, in0_valid: %167: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %168: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer32_out0_valid, %handshake_buffer32.out0_valid : i1
  sv.assign %_handshake_buffer32_out0, %handshake_buffer32.out0 : i0
  sv.assign %_handshake_buffer32_in0_ready, %handshake_buffer32.in0_ready : i1
  %169 = sv.read_inout %_handshake_buffer29_out0 : !hw.inout<i0>
  %170 = sv.read_inout %_handshake_buffer29_out0_valid : !hw.inout<i1>
  %171 = sv.read_inout %_handshake_buffer33_in0_ready : !hw.inout<i1>
  %172 = sv.read_inout %_handshake_buffer34_in0_ready : !hw.inout<i1>
  %173 = sv.read_inout %_handshake_buffer35_in0_ready : !hw.inout<i1>
  %handshake_fork4.in0_ready, %handshake_fork4.out0, %handshake_fork4.out0_valid, %handshake_fork4.out1, %handshake_fork4.out1_valid, %handshake_fork4.out2, %handshake_fork4.out2_valid = hw.instance "handshake_fork4" @handshake_fork_1ins_3outs_ctrl(in0: %169: i0, in0_valid: %170: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %173: i1, out1_ready: %172: i1, out2_ready: %171: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1)
  sv.assign %_handshake_fork4_out2_valid, %handshake_fork4.out2_valid : i1
  sv.assign %_handshake_fork4_out2, %handshake_fork4.out2 : i0
  sv.assign %_handshake_fork4_out1_valid, %handshake_fork4.out1_valid : i1
  sv.assign %_handshake_fork4_out1, %handshake_fork4.out1 : i0
  sv.assign %_handshake_fork4_out0_valid, %handshake_fork4.out0_valid : i1
  sv.assign %_handshake_fork4_out0, %handshake_fork4.out0 : i0
  sv.assign %_handshake_fork4_in0_ready, %handshake_fork4.in0_ready : i1
  %174 = sv.read_inout %_handshake_fork4_out2 : !hw.inout<i0>
  %175 = sv.read_inout %_handshake_fork4_out2_valid : !hw.inout<i1>
  %176 = sv.read_inout %_handshake_join1_in1_ready : !hw.inout<i1>
  %handshake_buffer33.in0_ready, %handshake_buffer33.out0, %handshake_buffer33.out0_valid = hw.instance "handshake_buffer33" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %174: i0, in0_valid: %175: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %176: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer33_out0_valid, %handshake_buffer33.out0_valid : i1
  sv.assign %_handshake_buffer33_out0, %handshake_buffer33.out0 : i0
  sv.assign %_handshake_buffer33_in0_ready, %handshake_buffer33.in0_ready : i1
  %177 = sv.read_inout %_handshake_fork4_out1 : !hw.inout<i0>
  %178 = sv.read_inout %_handshake_fork4_out1_valid : !hw.inout<i1>
  %179 = sv.read_inout %_handshake_join2_in1_ready : !hw.inout<i1>
  %handshake_buffer34.in0_ready, %handshake_buffer34.out0, %handshake_buffer34.out0_valid = hw.instance "handshake_buffer34" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %177: i0, in0_valid: %178: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %179: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer34_out0_valid, %handshake_buffer34.out0_valid : i1
  sv.assign %_handshake_buffer34_out0, %handshake_buffer34.out0 : i0
  sv.assign %_handshake_buffer34_in0_ready, %handshake_buffer34.in0_ready : i1
  %180 = sv.read_inout %_handshake_fork4_out0 : !hw.inout<i0>
  %181 = sv.read_inout %_handshake_fork4_out0_valid : !hw.inout<i1>
  %182 = sv.read_inout %_handshake_join0_in1_ready : !hw.inout<i1>
  %handshake_buffer35.in0_ready, %handshake_buffer35.out0, %handshake_buffer35.out0_valid = hw.instance "handshake_buffer35" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %180: i0, in0_valid: %181: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %182: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer35_out0_valid, %handshake_buffer35.out0_valid : i1
  sv.assign %_handshake_buffer35_out0, %handshake_buffer35.out0 : i0
  sv.assign %_handshake_buffer35_in0_ready, %handshake_buffer35.in0_ready : i1
  %183 = sv.read_inout %_handshake_buffer4_out0 : !hw.inout<i0>
  %184 = sv.read_inout %_handshake_buffer4_out0_valid : !hw.inout<i1>
  %185 = sv.read_inout %_handshake_buffer17_out0 : !hw.inout<i0>
  %186 = sv.read_inout %_handshake_buffer17_out0_valid : !hw.inout<i1>
  %187 = sv.read_inout %_handshake_buffer21_out0 : !hw.inout<i0>
  %188 = sv.read_inout %_handshake_buffer21_out0_valid : !hw.inout<i1>
  %189 = sv.read_inout %_handshake_buffer23_out0 : !hw.inout<i0>
  %190 = sv.read_inout %_handshake_buffer23_out0_valid : !hw.inout<i1>
  %191 = sv.read_inout %_handshake_buffer27_out0 : !hw.inout<i0>
  %192 = sv.read_inout %_handshake_buffer27_out0_valid : !hw.inout<i1>
  %193 = sv.read_inout %_handshake_buffer32_out0 : !hw.inout<i0>
  %194 = sv.read_inout %_handshake_buffer32_out0_valid : !hw.inout<i1>
  %195 = sv.read_inout %_handshake_buffer35_out0 : !hw.inout<i0>
  %196 = sv.read_inout %_handshake_buffer35_out0_valid : !hw.inout<i1>
  %197 = sv.read_inout %_handshake_buffer36_in0_ready : !hw.inout<i1>
  %handshake_join0.in0_ready, %handshake_join0.in1_ready, %handshake_join0.in2_ready, %handshake_join0.in3_ready, %handshake_join0.in4_ready, %handshake_join0.in5_ready, %handshake_join0.in6_ready, %handshake_join0.out0, %handshake_join0.out0_valid = hw.instance "handshake_join0" @handshake_join_7ins_1outs_ctrl(in0: %183: i0, in0_valid: %184: i1, in1: %195: i0, in1_valid: %196: i1, in2: %193: i0, in2_valid: %194: i1, in3: %191: i0, in3_valid: %192: i1, in4: %189: i0, in4_valid: %190: i1, in5: %187: i0, in5_valid: %188: i1, in6: %185: i0, in6_valid: %186: i1, out0_ready: %197: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, in4_ready: i1, in5_ready: i1, in6_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_join0_out0_valid, %handshake_join0.out0_valid : i1
  sv.assign %_handshake_join0_out0, %handshake_join0.out0 : i0
  sv.assign %_handshake_join0_in6_ready, %handshake_join0.in6_ready : i1
  sv.assign %_handshake_join0_in5_ready, %handshake_join0.in5_ready : i1
  sv.assign %_handshake_join0_in4_ready, %handshake_join0.in4_ready : i1
  sv.assign %_handshake_join0_in3_ready, %handshake_join0.in3_ready : i1
  sv.assign %_handshake_join0_in2_ready, %handshake_join0.in2_ready : i1
  sv.assign %_handshake_join0_in1_ready, %handshake_join0.in1_ready : i1
  sv.assign %_handshake_join0_in0_ready, %handshake_join0.in0_ready : i1
  %198 = sv.read_inout %_handshake_join0_out0 : !hw.inout<i0>
  %199 = sv.read_inout %_handshake_join0_out0_valid : !hw.inout<i1>
  %200 = sv.read_inout %_handshake_mux0_in0_ready : !hw.inout<i1>
  %handshake_buffer36.in0_ready, %handshake_buffer36.out0, %handshake_buffer36.out0_valid = hw.instance "handshake_buffer36" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %198: i0, in0_valid: %199: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %200: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer36_out0_valid, %handshake_buffer36.out0_valid : i1
  sv.assign %_handshake_buffer36_out0, %handshake_buffer36.out0 : i0
  sv.assign %_handshake_buffer36_in0_ready, %handshake_buffer36.in0_ready : i1
  %201 = sv.read_inout %_handshake_buffer14_out0 : !hw.inout<i0>
  %202 = sv.read_inout %_handshake_buffer14_out0_valid : !hw.inout<i1>
  %203 = sv.read_inout %_handshake_buffer37_in0_ready : !hw.inout<i1>
  %handshake_constant0.ctrl_ready, %handshake_constant0.out0, %handshake_constant0.out0_valid = hw.instance "handshake_constant0" @handshake_constant_c3_out_ui64(ctrl: %201: i0, ctrl_valid: %202: i1, out0_ready: %203: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_constant0_out0_valid, %handshake_constant0.out0_valid : i1
  sv.assign %_handshake_constant0_out0, %handshake_constant0.out0 : i64
  sv.assign %_handshake_constant0_ctrl_ready, %handshake_constant0.ctrl_ready : i1
  %204 = sv.read_inout %_handshake_constant0_out0 : !hw.inout<i64>
  %205 = sv.read_inout %_handshake_constant0_out0_valid : !hw.inout<i1>
  %206 = sv.read_inout %_handshake_mux2_in0_ready : !hw.inout<i1>
  %handshake_buffer37.in0_ready, %handshake_buffer37.out0, %handshake_buffer37.out0_valid = hw.instance "handshake_buffer37" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %204: i64, in0_valid: %205: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %206: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer37_out0_valid, %handshake_buffer37.out0_valid : i1
  sv.assign %_handshake_buffer37_out0, %handshake_buffer37.out0 : i64
  sv.assign %_handshake_buffer37_in0_ready, %handshake_buffer37.in0_ready : i1
  %207 = sv.read_inout %_handshake_buffer13_out0 : !hw.inout<i0>
  %208 = sv.read_inout %_handshake_buffer13_out0_valid : !hw.inout<i1>
  %209 = sv.read_inout %_handshake_buffer38_in0_ready : !hw.inout<i1>
  %handshake_constant1.ctrl_ready, %handshake_constant1.out0, %handshake_constant1.out0_valid = hw.instance "handshake_constant1" @handshake_constant_c3_out_ui64(ctrl: %207: i0, ctrl_valid: %208: i1, out0_ready: %209: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_constant1_out0_valid, %handshake_constant1.out0_valid : i1
  sv.assign %_handshake_constant1_out0, %handshake_constant1.out0 : i64
  sv.assign %_handshake_constant1_ctrl_ready, %handshake_constant1.ctrl_ready : i1
  %210 = sv.read_inout %_handshake_constant1_out0 : !hw.inout<i64>
  %211 = sv.read_inout %_handshake_constant1_out0_valid : !hw.inout<i1>
  %212 = sv.read_inout %_handshake_fork5_in0_ready : !hw.inout<i1>
  %handshake_buffer38.in0_ready, %handshake_buffer38.out0, %handshake_buffer38.out0_valid = hw.instance "handshake_buffer38" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %210: i64, in0_valid: %211: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %212: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer38_out0_valid, %handshake_buffer38.out0_valid : i1
  sv.assign %_handshake_buffer38_out0, %handshake_buffer38.out0 : i64
  sv.assign %_handshake_buffer38_in0_ready, %handshake_buffer38.in0_ready : i1
  %213 = sv.read_inout %_handshake_buffer38_out0 : !hw.inout<i64>
  %214 = sv.read_inout %_handshake_buffer38_out0_valid : !hw.inout<i1>
  %215 = sv.read_inout %_handshake_buffer39_in0_ready : !hw.inout<i1>
  %216 = sv.read_inout %_handshake_buffer40_in0_ready : !hw.inout<i1>
  %handshake_fork5.in0_ready, %handshake_fork5.out0, %handshake_fork5.out0_valid, %handshake_fork5.out1, %handshake_fork5.out1_valid = hw.instance "handshake_fork5" @handshake_fork_in_ui64_out_ui64_ui64(in0: %213: i64, in0_valid: %214: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %216: i1, out1_ready: %215: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  sv.assign %_handshake_fork5_out1_valid, %handshake_fork5.out1_valid : i1
  sv.assign %_handshake_fork5_out1, %handshake_fork5.out1 : i64
  sv.assign %_handshake_fork5_out0_valid, %handshake_fork5.out0_valid : i1
  sv.assign %_handshake_fork5_out0, %handshake_fork5.out0 : i64
  sv.assign %_handshake_fork5_in0_ready, %handshake_fork5.in0_ready : i1
  %217 = sv.read_inout %_handshake_fork5_out1 : !hw.inout<i64>
  %218 = sv.read_inout %_handshake_fork5_out1_valid : !hw.inout<i1>
  %219 = sv.read_inout %_handshake_store2_dataIn_ready : !hw.inout<i1>
  %handshake_buffer39.in0_ready, %handshake_buffer39.out0, %handshake_buffer39.out0_valid = hw.instance "handshake_buffer39" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %217: i64, in0_valid: %218: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %219: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer39_out0_valid, %handshake_buffer39.out0_valid : i1
  sv.assign %_handshake_buffer39_out0, %handshake_buffer39.out0 : i64
  sv.assign %_handshake_buffer39_in0_ready, %handshake_buffer39.in0_ready : i1
  %220 = sv.read_inout %_handshake_fork5_out0 : !hw.inout<i64>
  %221 = sv.read_inout %_handshake_fork5_out0_valid : !hw.inout<i1>
  %222 = sv.read_inout %_handshake_store5_dataIn_ready : !hw.inout<i1>
  %handshake_buffer40.in0_ready, %handshake_buffer40.out0, %handshake_buffer40.out0_valid = hw.instance "handshake_buffer40" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %220: i64, in0_valid: %221: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %222: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer40_out0_valid, %handshake_buffer40.out0_valid : i1
  sv.assign %_handshake_buffer40_out0, %handshake_buffer40.out0 : i64
  sv.assign %_handshake_buffer40_in0_ready, %handshake_buffer40.in0_ready : i1
  %223 = sv.read_inout %_handshake_buffer12_out0 : !hw.inout<i0>
  %224 = sv.read_inout %_handshake_buffer12_out0_valid : !hw.inout<i1>
  %225 = sv.read_inout %_handshake_buffer41_in0_ready : !hw.inout<i1>
  %handshake_constant2.ctrl_ready, %handshake_constant2.out0, %handshake_constant2.out0_valid = hw.instance "handshake_constant2" @handshake_constant_c2_out_ui64(ctrl: %223: i0, ctrl_valid: %224: i1, out0_ready: %225: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_constant2_out0_valid, %handshake_constant2.out0_valid : i1
  sv.assign %_handshake_constant2_out0, %handshake_constant2.out0 : i64
  sv.assign %_handshake_constant2_ctrl_ready, %handshake_constant2.ctrl_ready : i1
  %226 = sv.read_inout %_handshake_constant2_out0 : !hw.inout<i64>
  %227 = sv.read_inout %_handshake_constant2_out0_valid : !hw.inout<i1>
  %228 = sv.read_inout %_handshake_fork6_in0_ready : !hw.inout<i1>
  %handshake_buffer41.in0_ready, %handshake_buffer41.out0, %handshake_buffer41.out0_valid = hw.instance "handshake_buffer41" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %226: i64, in0_valid: %227: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %228: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer41_out0_valid, %handshake_buffer41.out0_valid : i1
  sv.assign %_handshake_buffer41_out0, %handshake_buffer41.out0 : i64
  sv.assign %_handshake_buffer41_in0_ready, %handshake_buffer41.in0_ready : i1
  %229 = sv.read_inout %_handshake_buffer41_out0 : !hw.inout<i64>
  %230 = sv.read_inout %_handshake_buffer41_out0_valid : !hw.inout<i1>
  %231 = sv.read_inout %_handshake_buffer42_in0_ready : !hw.inout<i1>
  %232 = sv.read_inout %_handshake_buffer43_in0_ready : !hw.inout<i1>
  %handshake_fork6.in0_ready, %handshake_fork6.out0, %handshake_fork6.out0_valid, %handshake_fork6.out1, %handshake_fork6.out1_valid = hw.instance "handshake_fork6" @handshake_fork_in_ui64_out_ui64_ui64(in0: %229: i64, in0_valid: %230: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %232: i1, out1_ready: %231: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  sv.assign %_handshake_fork6_out1_valid, %handshake_fork6.out1_valid : i1
  sv.assign %_handshake_fork6_out1, %handshake_fork6.out1 : i64
  sv.assign %_handshake_fork6_out0_valid, %handshake_fork6.out0_valid : i1
  sv.assign %_handshake_fork6_out0, %handshake_fork6.out0 : i64
  sv.assign %_handshake_fork6_in0_ready, %handshake_fork6.in0_ready : i1
  %233 = sv.read_inout %_handshake_fork6_out1 : !hw.inout<i64>
  %234 = sv.read_inout %_handshake_fork6_out1_valid : !hw.inout<i1>
  %235 = sv.read_inout %_handshake_store1_dataIn_ready : !hw.inout<i1>
  %handshake_buffer42.in0_ready, %handshake_buffer42.out0, %handshake_buffer42.out0_valid = hw.instance "handshake_buffer42" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %233: i64, in0_valid: %234: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %235: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer42_out0_valid, %handshake_buffer42.out0_valid : i1
  sv.assign %_handshake_buffer42_out0, %handshake_buffer42.out0 : i64
  sv.assign %_handshake_buffer42_in0_ready, %handshake_buffer42.in0_ready : i1
  %236 = sv.read_inout %_handshake_fork6_out0 : !hw.inout<i64>
  %237 = sv.read_inout %_handshake_fork6_out0_valid : !hw.inout<i1>
  %238 = sv.read_inout %_handshake_store4_dataIn_ready : !hw.inout<i1>
  %handshake_buffer43.in0_ready, %handshake_buffer43.out0, %handshake_buffer43.out0_valid = hw.instance "handshake_buffer43" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %236: i64, in0_valid: %237: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %238: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer43_out0_valid, %handshake_buffer43.out0_valid : i1
  sv.assign %_handshake_buffer43_out0, %handshake_buffer43.out0 : i64
  sv.assign %_handshake_buffer43_in0_ready, %handshake_buffer43.in0_ready : i1
  %239 = sv.read_inout %_handshake_buffer11_out0 : !hw.inout<i0>
  %240 = sv.read_inout %_handshake_buffer11_out0_valid : !hw.inout<i1>
  %241 = sv.read_inout %_handshake_buffer44_in0_ready : !hw.inout<i1>
  %handshake_constant3.ctrl_ready, %handshake_constant3.out0, %handshake_constant3.out0_valid = hw.instance "handshake_constant3" @handshake_constant_c1_out_ui64(ctrl: %239: i0, ctrl_valid: %240: i1, out0_ready: %241: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_constant3_out0_valid, %handshake_constant3.out0_valid : i1
  sv.assign %_handshake_constant3_out0, %handshake_constant3.out0 : i64
  sv.assign %_handshake_constant3_ctrl_ready, %handshake_constant3.ctrl_ready : i1
  %242 = sv.read_inout %_handshake_constant3_out0 : !hw.inout<i64>
  %243 = sv.read_inout %_handshake_constant3_out0_valid : !hw.inout<i1>
  %244 = sv.read_inout %_handshake_fork7_in0_ready : !hw.inout<i1>
  %handshake_buffer44.in0_ready, %handshake_buffer44.out0, %handshake_buffer44.out0_valid = hw.instance "handshake_buffer44" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %242: i64, in0_valid: %243: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %244: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer44_out0_valid, %handshake_buffer44.out0_valid : i1
  sv.assign %_handshake_buffer44_out0, %handshake_buffer44.out0 : i64
  sv.assign %_handshake_buffer44_in0_ready, %handshake_buffer44.in0_ready : i1
  %245 = sv.read_inout %_handshake_buffer44_out0 : !hw.inout<i64>
  %246 = sv.read_inout %_handshake_buffer44_out0_valid : !hw.inout<i1>
  %247 = sv.read_inout %_handshake_buffer45_in0_ready : !hw.inout<i1>
  %248 = sv.read_inout %_handshake_buffer46_in0_ready : !hw.inout<i1>
  %handshake_fork7.in0_ready, %handshake_fork7.out0, %handshake_fork7.out0_valid, %handshake_fork7.out1, %handshake_fork7.out1_valid = hw.instance "handshake_fork7" @handshake_fork_in_ui64_out_ui64_ui64(in0: %245: i64, in0_valid: %246: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %248: i1, out1_ready: %247: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  sv.assign %_handshake_fork7_out1_valid, %handshake_fork7.out1_valid : i1
  sv.assign %_handshake_fork7_out1, %handshake_fork7.out1 : i64
  sv.assign %_handshake_fork7_out0_valid, %handshake_fork7.out0_valid : i1
  sv.assign %_handshake_fork7_out0, %handshake_fork7.out0 : i64
  sv.assign %_handshake_fork7_in0_ready, %handshake_fork7.in0_ready : i1
  %249 = sv.read_inout %_handshake_fork7_out1 : !hw.inout<i64>
  %250 = sv.read_inout %_handshake_fork7_out1_valid : !hw.inout<i1>
  %251 = sv.read_inout %_handshake_store0_dataIn_ready : !hw.inout<i1>
  %handshake_buffer45.in0_ready, %handshake_buffer45.out0, %handshake_buffer45.out0_valid = hw.instance "handshake_buffer45" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %249: i64, in0_valid: %250: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %251: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer45_out0_valid, %handshake_buffer45.out0_valid : i1
  sv.assign %_handshake_buffer45_out0, %handshake_buffer45.out0 : i64
  sv.assign %_handshake_buffer45_in0_ready, %handshake_buffer45.in0_ready : i1
  %252 = sv.read_inout %_handshake_fork7_out0 : !hw.inout<i64>
  %253 = sv.read_inout %_handshake_fork7_out0_valid : !hw.inout<i1>
  %254 = sv.read_inout %_handshake_store3_dataIn_ready : !hw.inout<i1>
  %handshake_buffer46.in0_ready, %handshake_buffer46.out0, %handshake_buffer46.out0_valid = hw.instance "handshake_buffer46" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %252: i64, in0_valid: %253: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %254: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer46_out0_valid, %handshake_buffer46.out0_valid : i1
  sv.assign %_handshake_buffer46_out0, %handshake_buffer46.out0 : i64
  sv.assign %_handshake_buffer46_in0_ready, %handshake_buffer46.in0_ready : i1
  %255 = sv.read_inout %_handshake_buffer10_out0 : !hw.inout<i0>
  %256 = sv.read_inout %_handshake_buffer10_out0_valid : !hw.inout<i1>
  %257 = sv.read_inout %_handshake_buffer47_in0_ready : !hw.inout<i1>
  %handshake_constant4.ctrl_ready, %handshake_constant4.out0, %handshake_constant4.out0_valid = hw.instance "handshake_constant4" @handshake_constant_c2_out_ui64(ctrl: %255: i0, ctrl_valid: %256: i1, out0_ready: %257: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_constant4_out0_valid, %handshake_constant4.out0_valid : i1
  sv.assign %_handshake_constant4_out0, %handshake_constant4.out0 : i64
  sv.assign %_handshake_constant4_ctrl_ready, %handshake_constant4.ctrl_ready : i1
  %258 = sv.read_inout %_handshake_constant4_out0 : !hw.inout<i64>
  %259 = sv.read_inout %_handshake_constant4_out0_valid : !hw.inout<i1>
  %260 = sv.read_inout %_handshake_fork8_in0_ready : !hw.inout<i1>
  %handshake_buffer47.in0_ready, %handshake_buffer47.out0, %handshake_buffer47.out0_valid = hw.instance "handshake_buffer47" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %258: i64, in0_valid: %259: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %260: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer47_out0_valid, %handshake_buffer47.out0_valid : i1
  sv.assign %_handshake_buffer47_out0, %handshake_buffer47.out0 : i64
  sv.assign %_handshake_buffer47_in0_ready, %handshake_buffer47.in0_ready : i1
  %261 = sv.read_inout %_handshake_buffer47_out0 : !hw.inout<i64>
  %262 = sv.read_inout %_handshake_buffer47_out0_valid : !hw.inout<i1>
  %263 = sv.read_inout %_handshake_buffer48_in0_ready : !hw.inout<i1>
  %264 = sv.read_inout %_handshake_buffer49_in0_ready : !hw.inout<i1>
  %handshake_fork8.in0_ready, %handshake_fork8.out0, %handshake_fork8.out0_valid, %handshake_fork8.out1, %handshake_fork8.out1_valid = hw.instance "handshake_fork8" @handshake_fork_in_ui64_out_ui64_ui64(in0: %261: i64, in0_valid: %262: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %264: i1, out1_ready: %263: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  sv.assign %_handshake_fork8_out1_valid, %handshake_fork8.out1_valid : i1
  sv.assign %_handshake_fork8_out1, %handshake_fork8.out1 : i64
  sv.assign %_handshake_fork8_out0_valid, %handshake_fork8.out0_valid : i1
  sv.assign %_handshake_fork8_out0, %handshake_fork8.out0 : i64
  sv.assign %_handshake_fork8_in0_ready, %handshake_fork8.in0_ready : i1
  %265 = sv.read_inout %_handshake_fork8_out1 : !hw.inout<i64>
  %266 = sv.read_inout %_handshake_fork8_out1_valid : !hw.inout<i1>
  %267 = sv.read_inout %_handshake_store2_addrIn0_ready : !hw.inout<i1>
  %handshake_buffer48.in0_ready, %handshake_buffer48.out0, %handshake_buffer48.out0_valid = hw.instance "handshake_buffer48" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %265: i64, in0_valid: %266: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %267: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer48_out0_valid, %handshake_buffer48.out0_valid : i1
  sv.assign %_handshake_buffer48_out0, %handshake_buffer48.out0 : i64
  sv.assign %_handshake_buffer48_in0_ready, %handshake_buffer48.in0_ready : i1
  %268 = sv.read_inout %_handshake_fork8_out0 : !hw.inout<i64>
  %269 = sv.read_inout %_handshake_fork8_out0_valid : !hw.inout<i1>
  %270 = sv.read_inout %_handshake_store5_addrIn0_ready : !hw.inout<i1>
  %handshake_buffer49.in0_ready, %handshake_buffer49.out0, %handshake_buffer49.out0_valid = hw.instance "handshake_buffer49" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %268: i64, in0_valid: %269: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %270: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer49_out0_valid, %handshake_buffer49.out0_valid : i1
  sv.assign %_handshake_buffer49_out0, %handshake_buffer49.out0 : i64
  sv.assign %_handshake_buffer49_in0_ready, %handshake_buffer49.in0_ready : i1
  %271 = sv.read_inout %_handshake_buffer9_out0 : !hw.inout<i0>
  %272 = sv.read_inout %_handshake_buffer9_out0_valid : !hw.inout<i1>
  %273 = sv.read_inout %_handshake_buffer50_in0_ready : !hw.inout<i1>
  %handshake_constant5.ctrl_ready, %handshake_constant5.out0, %handshake_constant5.out0_valid = hw.instance "handshake_constant5" @handshake_constant_c1_out_ui64(ctrl: %271: i0, ctrl_valid: %272: i1, out0_ready: %273: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_constant5_out0_valid, %handshake_constant5.out0_valid : i1
  sv.assign %_handshake_constant5_out0, %handshake_constant5.out0 : i64
  sv.assign %_handshake_constant5_ctrl_ready, %handshake_constant5.ctrl_ready : i1
  %274 = sv.read_inout %_handshake_constant5_out0 : !hw.inout<i64>
  %275 = sv.read_inout %_handshake_constant5_out0_valid : !hw.inout<i1>
  %276 = sv.read_inout %_handshake_fork9_in0_ready : !hw.inout<i1>
  %handshake_buffer50.in0_ready, %handshake_buffer50.out0, %handshake_buffer50.out0_valid = hw.instance "handshake_buffer50" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %274: i64, in0_valid: %275: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %276: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer50_out0_valid, %handshake_buffer50.out0_valid : i1
  sv.assign %_handshake_buffer50_out0, %handshake_buffer50.out0 : i64
  sv.assign %_handshake_buffer50_in0_ready, %handshake_buffer50.in0_ready : i1
  %277 = sv.read_inout %_handshake_buffer50_out0 : !hw.inout<i64>
  %278 = sv.read_inout %_handshake_buffer50_out0_valid : !hw.inout<i1>
  %279 = sv.read_inout %_handshake_buffer51_in0_ready : !hw.inout<i1>
  %280 = sv.read_inout %_handshake_buffer52_in0_ready : !hw.inout<i1>
  %281 = sv.read_inout %_handshake_buffer53_in0_ready : !hw.inout<i1>
  %handshake_fork9.in0_ready, %handshake_fork9.out0, %handshake_fork9.out0_valid, %handshake_fork9.out1, %handshake_fork9.out1_valid, %handshake_fork9.out2, %handshake_fork9.out2_valid = hw.instance "handshake_fork9" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %277: i64, in0_valid: %278: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %281: i1, out1_ready: %280: i1, out2_ready: %279: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
  sv.assign %_handshake_fork9_out2_valid, %handshake_fork9.out2_valid : i1
  sv.assign %_handshake_fork9_out2, %handshake_fork9.out2 : i64
  sv.assign %_handshake_fork9_out1_valid, %handshake_fork9.out1_valid : i1
  sv.assign %_handshake_fork9_out1, %handshake_fork9.out1 : i64
  sv.assign %_handshake_fork9_out0_valid, %handshake_fork9.out0_valid : i1
  sv.assign %_handshake_fork9_out0, %handshake_fork9.out0 : i64
  sv.assign %_handshake_fork9_in0_ready, %handshake_fork9.in0_ready : i1
  %282 = sv.read_inout %_handshake_fork9_out2 : !hw.inout<i64>
  %283 = sv.read_inout %_handshake_fork9_out2_valid : !hw.inout<i1>
  %284 = sv.read_inout %_handshake_store1_addrIn0_ready : !hw.inout<i1>
  %handshake_buffer51.in0_ready, %handshake_buffer51.out0, %handshake_buffer51.out0_valid = hw.instance "handshake_buffer51" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %282: i64, in0_valid: %283: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %284: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer51_out0_valid, %handshake_buffer51.out0_valid : i1
  sv.assign %_handshake_buffer51_out0, %handshake_buffer51.out0 : i64
  sv.assign %_handshake_buffer51_in0_ready, %handshake_buffer51.in0_ready : i1
  %285 = sv.read_inout %_handshake_fork9_out1 : !hw.inout<i64>
  %286 = sv.read_inout %_handshake_fork9_out1_valid : !hw.inout<i1>
  %287 = sv.read_inout %_handshake_store4_addrIn0_ready : !hw.inout<i1>
  %handshake_buffer52.in0_ready, %handshake_buffer52.out0, %handshake_buffer52.out0_valid = hw.instance "handshake_buffer52" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %285: i64, in0_valid: %286: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %287: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer52_out0_valid, %handshake_buffer52.out0_valid : i1
  sv.assign %_handshake_buffer52_out0, %handshake_buffer52.out0 : i64
  sv.assign %_handshake_buffer52_in0_ready, %handshake_buffer52.in0_ready : i1
  %288 = sv.read_inout %_handshake_fork9_out0 : !hw.inout<i64>
  %289 = sv.read_inout %_handshake_fork9_out0_valid : !hw.inout<i1>
  %290 = sv.read_inout %_handshake_mux3_in0_ready : !hw.inout<i1>
  %handshake_buffer53.in0_ready, %handshake_buffer53.out0, %handshake_buffer53.out0_valid = hw.instance "handshake_buffer53" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %288: i64, in0_valid: %289: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %290: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer53_out0_valid, %handshake_buffer53.out0_valid : i1
  sv.assign %_handshake_buffer53_out0, %handshake_buffer53.out0 : i64
  sv.assign %_handshake_buffer53_in0_ready, %handshake_buffer53.in0_ready : i1
  %291 = sv.read_inout %_handshake_buffer8_out0 : !hw.inout<i0>
  %292 = sv.read_inout %_handshake_buffer8_out0_valid : !hw.inout<i1>
  %293 = sv.read_inout %_handshake_buffer54_in0_ready : !hw.inout<i1>
  %handshake_constant6.ctrl_ready, %handshake_constant6.out0, %handshake_constant6.out0_valid = hw.instance "handshake_constant6" @handshake_constant_c0_out_ui64(ctrl: %291: i0, ctrl_valid: %292: i1, out0_ready: %293: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_constant6_out0_valid, %handshake_constant6.out0_valid : i1
  sv.assign %_handshake_constant6_out0, %handshake_constant6.out0 : i64
  sv.assign %_handshake_constant6_ctrl_ready, %handshake_constant6.ctrl_ready : i1
  %294 = sv.read_inout %_handshake_constant6_out0 : !hw.inout<i64>
  %295 = sv.read_inout %_handshake_constant6_out0_valid : !hw.inout<i1>
  %296 = sv.read_inout %_handshake_fork10_in0_ready : !hw.inout<i1>
  %handshake_buffer54.in0_ready, %handshake_buffer54.out0, %handshake_buffer54.out0_valid = hw.instance "handshake_buffer54" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %294: i64, in0_valid: %295: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %296: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer54_out0_valid, %handshake_buffer54.out0_valid : i1
  sv.assign %_handshake_buffer54_out0, %handshake_buffer54.out0 : i64
  sv.assign %_handshake_buffer54_in0_ready, %handshake_buffer54.in0_ready : i1
  %297 = sv.read_inout %_handshake_buffer54_out0 : !hw.inout<i64>
  %298 = sv.read_inout %_handshake_buffer54_out0_valid : !hw.inout<i1>
  %299 = sv.read_inout %_handshake_buffer55_in0_ready : !hw.inout<i1>
  %300 = sv.read_inout %_handshake_buffer56_in0_ready : !hw.inout<i1>
  %301 = sv.read_inout %_handshake_buffer57_in0_ready : !hw.inout<i1>
  %handshake_fork10.in0_ready, %handshake_fork10.out0, %handshake_fork10.out0_valid, %handshake_fork10.out1, %handshake_fork10.out1_valid, %handshake_fork10.out2, %handshake_fork10.out2_valid = hw.instance "handshake_fork10" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %297: i64, in0_valid: %298: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %301: i1, out1_ready: %300: i1, out2_ready: %299: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1)
  sv.assign %_handshake_fork10_out2_valid, %handshake_fork10.out2_valid : i1
  sv.assign %_handshake_fork10_out2, %handshake_fork10.out2 : i64
  sv.assign %_handshake_fork10_out1_valid, %handshake_fork10.out1_valid : i1
  sv.assign %_handshake_fork10_out1, %handshake_fork10.out1 : i64
  sv.assign %_handshake_fork10_out0_valid, %handshake_fork10.out0_valid : i1
  sv.assign %_handshake_fork10_out0, %handshake_fork10.out0 : i64
  sv.assign %_handshake_fork10_in0_ready, %handshake_fork10.in0_ready : i1
  %302 = sv.read_inout %_handshake_fork10_out2 : !hw.inout<i64>
  %303 = sv.read_inout %_handshake_fork10_out2_valid : !hw.inout<i1>
  %304 = sv.read_inout %_handshake_store0_addrIn0_ready : !hw.inout<i1>
  %handshake_buffer55.in0_ready, %handshake_buffer55.out0, %handshake_buffer55.out0_valid = hw.instance "handshake_buffer55" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %302: i64, in0_valid: %303: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %304: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer55_out0_valid, %handshake_buffer55.out0_valid : i1
  sv.assign %_handshake_buffer55_out0, %handshake_buffer55.out0 : i64
  sv.assign %_handshake_buffer55_in0_ready, %handshake_buffer55.in0_ready : i1
  %305 = sv.read_inout %_handshake_fork10_out1 : !hw.inout<i64>
  %306 = sv.read_inout %_handshake_fork10_out1_valid : !hw.inout<i1>
  %307 = sv.read_inout %_handshake_store3_addrIn0_ready : !hw.inout<i1>
  %handshake_buffer56.in0_ready, %handshake_buffer56.out0, %handshake_buffer56.out0_valid = hw.instance "handshake_buffer56" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %305: i64, in0_valid: %306: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %307: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer56_out0_valid, %handshake_buffer56.out0_valid : i1
  sv.assign %_handshake_buffer56_out0, %handshake_buffer56.out0 : i64
  sv.assign %_handshake_buffer56_in0_ready, %handshake_buffer56.in0_ready : i1
  %308 = sv.read_inout %_handshake_fork10_out0 : !hw.inout<i64>
  %309 = sv.read_inout %_handshake_fork10_out0_valid : !hw.inout<i1>
  %310 = sv.read_inout %_handshake_mux1_in0_ready : !hw.inout<i1>
  %handshake_buffer57.in0_ready, %handshake_buffer57.out0, %handshake_buffer57.out0_valid = hw.instance "handshake_buffer57" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %308: i64, in0_valid: %309: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %310: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer57_out0_valid, %handshake_buffer57.out0_valid : i1
  sv.assign %_handshake_buffer57_out0, %handshake_buffer57.out0 : i64
  sv.assign %_handshake_buffer57_in0_ready, %handshake_buffer57.in0_ready : i1
  %311 = sv.read_inout %_handshake_buffer7_out0 : !hw.inout<i0>
  %312 = sv.read_inout %_handshake_buffer7_out0_valid : !hw.inout<i1>
  %313 = sv.read_inout %_handshake_buffer45_out0 : !hw.inout<i64>
  %314 = sv.read_inout %_handshake_buffer45_out0_valid : !hw.inout<i1>
  %315 = sv.read_inout %_handshake_buffer55_out0 : !hw.inout<i64>
  %316 = sv.read_inout %_handshake_buffer55_out0_valid : !hw.inout<i1>
  %317 = sv.read_inout %_handshake_buffer58_in0_ready : !hw.inout<i1>
  %318 = sv.read_inout %_handshake_buffer59_in0_ready : !hw.inout<i1>
  %handshake_store0.addrIn0_ready, %handshake_store0.dataIn_ready, %handshake_store0.ctrl_ready, %handshake_store0.dataToMem, %handshake_store0.dataToMem_valid, %handshake_store0.addrOut0, %handshake_store0.addrOut0_valid = hw.instance "handshake_store0" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %315: i64, addrIn0_valid: %316: i1, dataIn: %313: i64, dataIn_valid: %314: i1, ctrl: %311: i0, ctrl_valid: %312: i1, dataToMem_ready: %318: i1, addrOut0_ready: %317: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  sv.assign %_handshake_store0_addrOut0_valid, %handshake_store0.addrOut0_valid : i1
  sv.assign %_handshake_store0_addrOut0, %handshake_store0.addrOut0 : i64
  sv.assign %_handshake_store0_dataToMem_valid, %handshake_store0.dataToMem_valid : i1
  sv.assign %_handshake_store0_dataToMem, %handshake_store0.dataToMem : i64
  sv.assign %_handshake_store0_ctrl_ready, %handshake_store0.ctrl_ready : i1
  sv.assign %_handshake_store0_dataIn_ready, %handshake_store0.dataIn_ready : i1
  sv.assign %_handshake_store0_addrIn0_ready, %handshake_store0.addrIn0_ready : i1
  %319 = sv.read_inout %_handshake_memory2_stAddr0_ready : !hw.inout<i1>
  %320 = sv.read_inout %_handshake_store0_addrOut0 : !hw.inout<i64>
  %321 = sv.read_inout %_handshake_store0_addrOut0_valid : !hw.inout<i1>
  %handshake_buffer58.in0_ready, %handshake_buffer58.out0, %handshake_buffer58.out0_valid = hw.instance "handshake_buffer58" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %320: i64, in0_valid: %321: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %319: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer58_out0_valid, %handshake_buffer58.out0_valid : i1
  sv.assign %_handshake_buffer58_out0, %handshake_buffer58.out0 : i64
  sv.assign %_handshake_buffer58_in0_ready, %handshake_buffer58.in0_ready : i1
  %322 = sv.read_inout %_handshake_memory2_stData0_ready : !hw.inout<i1>
  %323 = sv.read_inout %_handshake_store0_dataToMem : !hw.inout<i64>
  %324 = sv.read_inout %_handshake_store0_dataToMem_valid : !hw.inout<i1>
  %handshake_buffer59.in0_ready, %handshake_buffer59.out0, %handshake_buffer59.out0_valid = hw.instance "handshake_buffer59" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %323: i64, in0_valid: %324: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %322: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer59_out0_valid, %handshake_buffer59.out0_valid : i1
  sv.assign %_handshake_buffer59_out0, %handshake_buffer59.out0 : i64
  sv.assign %_handshake_buffer59_in0_ready, %handshake_buffer59.in0_ready : i1
  %325 = sv.read_inout %_handshake_buffer6_out0 : !hw.inout<i0>
  %326 = sv.read_inout %_handshake_buffer6_out0_valid : !hw.inout<i1>
  %327 = sv.read_inout %_handshake_buffer33_out0 : !hw.inout<i0>
  %328 = sv.read_inout %_handshake_buffer33_out0_valid : !hw.inout<i1>
  %329 = sv.read_inout %_handshake_buffer60_in0_ready : !hw.inout<i1>
  %handshake_join1.in0_ready, %handshake_join1.in1_ready, %handshake_join1.out0, %handshake_join1.out0_valid = hw.instance "handshake_join1" @handshake_join_2ins_1outs_ctrl(in0: %325: i0, in0_valid: %326: i1, in1: %327: i0, in1_valid: %328: i1, out0_ready: %329: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_join1_out0_valid, %handshake_join1.out0_valid : i1
  sv.assign %_handshake_join1_out0, %handshake_join1.out0 : i0
  sv.assign %_handshake_join1_in1_ready, %handshake_join1.in1_ready : i1
  sv.assign %_handshake_join1_in0_ready, %handshake_join1.in0_ready : i1
  %330 = sv.read_inout %_handshake_join1_out0 : !hw.inout<i0>
  %331 = sv.read_inout %_handshake_join1_out0_valid : !hw.inout<i1>
  %332 = sv.read_inout %_handshake_store1_ctrl_ready : !hw.inout<i1>
  %handshake_buffer60.in0_ready, %handshake_buffer60.out0, %handshake_buffer60.out0_valid = hw.instance "handshake_buffer60" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %330: i0, in0_valid: %331: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %332: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer60_out0_valid, %handshake_buffer60.out0_valid : i1
  sv.assign %_handshake_buffer60_out0, %handshake_buffer60.out0 : i0
  sv.assign %_handshake_buffer60_in0_ready, %handshake_buffer60.in0_ready : i1
  %333 = sv.read_inout %_handshake_buffer42_out0 : !hw.inout<i64>
  %334 = sv.read_inout %_handshake_buffer42_out0_valid : !hw.inout<i1>
  %335 = sv.read_inout %_handshake_buffer51_out0 : !hw.inout<i64>
  %336 = sv.read_inout %_handshake_buffer51_out0_valid : !hw.inout<i1>
  %337 = sv.read_inout %_handshake_buffer60_out0 : !hw.inout<i0>
  %338 = sv.read_inout %_handshake_buffer60_out0_valid : !hw.inout<i1>
  %339 = sv.read_inout %_handshake_buffer61_in0_ready : !hw.inout<i1>
  %340 = sv.read_inout %_handshake_buffer62_in0_ready : !hw.inout<i1>
  %handshake_store1.addrIn0_ready, %handshake_store1.dataIn_ready, %handshake_store1.ctrl_ready, %handshake_store1.dataToMem, %handshake_store1.dataToMem_valid, %handshake_store1.addrOut0, %handshake_store1.addrOut0_valid = hw.instance "handshake_store1" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %335: i64, addrIn0_valid: %336: i1, dataIn: %333: i64, dataIn_valid: %334: i1, ctrl: %337: i0, ctrl_valid: %338: i1, dataToMem_ready: %340: i1, addrOut0_ready: %339: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  sv.assign %_handshake_store1_addrOut0_valid, %handshake_store1.addrOut0_valid : i1
  sv.assign %_handshake_store1_addrOut0, %handshake_store1.addrOut0 : i64
  sv.assign %_handshake_store1_dataToMem_valid, %handshake_store1.dataToMem_valid : i1
  sv.assign %_handshake_store1_dataToMem, %handshake_store1.dataToMem : i64
  sv.assign %_handshake_store1_ctrl_ready, %handshake_store1.ctrl_ready : i1
  sv.assign %_handshake_store1_dataIn_ready, %handshake_store1.dataIn_ready : i1
  sv.assign %_handshake_store1_addrIn0_ready, %handshake_store1.addrIn0_ready : i1
  %341 = sv.read_inout %_handshake_memory2_stAddr1_ready : !hw.inout<i1>
  %342 = sv.read_inout %_handshake_store1_addrOut0 : !hw.inout<i64>
  %343 = sv.read_inout %_handshake_store1_addrOut0_valid : !hw.inout<i1>
  %handshake_buffer61.in0_ready, %handshake_buffer61.out0, %handshake_buffer61.out0_valid = hw.instance "handshake_buffer61" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %342: i64, in0_valid: %343: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %341: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer61_out0_valid, %handshake_buffer61.out0_valid : i1
  sv.assign %_handshake_buffer61_out0, %handshake_buffer61.out0 : i64
  sv.assign %_handshake_buffer61_in0_ready, %handshake_buffer61.in0_ready : i1
  %344 = sv.read_inout %_handshake_memory2_stData1_ready : !hw.inout<i1>
  %345 = sv.read_inout %_handshake_store1_dataToMem : !hw.inout<i64>
  %346 = sv.read_inout %_handshake_store1_dataToMem_valid : !hw.inout<i1>
  %handshake_buffer62.in0_ready, %handshake_buffer62.out0, %handshake_buffer62.out0_valid = hw.instance "handshake_buffer62" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %345: i64, in0_valid: %346: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %344: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer62_out0_valid, %handshake_buffer62.out0_valid : i1
  sv.assign %_handshake_buffer62_out0, %handshake_buffer62.out0 : i64
  sv.assign %_handshake_buffer62_in0_ready, %handshake_buffer62.in0_ready : i1
  %347 = sv.read_inout %_handshake_buffer5_out0 : !hw.inout<i0>
  %348 = sv.read_inout %_handshake_buffer5_out0_valid : !hw.inout<i1>
  %349 = sv.read_inout %_handshake_buffer31_out0 : !hw.inout<i0>
  %350 = sv.read_inout %_handshake_buffer31_out0_valid : !hw.inout<i1>
  %351 = sv.read_inout %_handshake_buffer34_out0 : !hw.inout<i0>
  %352 = sv.read_inout %_handshake_buffer34_out0_valid : !hw.inout<i1>
  %353 = sv.read_inout %_handshake_buffer63_in0_ready : !hw.inout<i1>
  %handshake_join2.in0_ready, %handshake_join2.in1_ready, %handshake_join2.in2_ready, %handshake_join2.out0, %handshake_join2.out0_valid = hw.instance "handshake_join2" @handshake_join_3ins_1outs_ctrl(in0: %347: i0, in0_valid: %348: i1, in1: %351: i0, in1_valid: %352: i1, in2: %349: i0, in2_valid: %350: i1, out0_ready: %353: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_join2_out0_valid, %handshake_join2.out0_valid : i1
  sv.assign %_handshake_join2_out0, %handshake_join2.out0 : i0
  sv.assign %_handshake_join2_in2_ready, %handshake_join2.in2_ready : i1
  sv.assign %_handshake_join2_in1_ready, %handshake_join2.in1_ready : i1
  sv.assign %_handshake_join2_in0_ready, %handshake_join2.in0_ready : i1
  %354 = sv.read_inout %_handshake_join2_out0 : !hw.inout<i0>
  %355 = sv.read_inout %_handshake_join2_out0_valid : !hw.inout<i1>
  %356 = sv.read_inout %_handshake_store2_ctrl_ready : !hw.inout<i1>
  %handshake_buffer63.in0_ready, %handshake_buffer63.out0, %handshake_buffer63.out0_valid = hw.instance "handshake_buffer63" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %354: i0, in0_valid: %355: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %356: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer63_out0_valid, %handshake_buffer63.out0_valid : i1
  sv.assign %_handshake_buffer63_out0, %handshake_buffer63.out0 : i0
  sv.assign %_handshake_buffer63_in0_ready, %handshake_buffer63.in0_ready : i1
  %357 = sv.read_inout %_handshake_buffer39_out0 : !hw.inout<i64>
  %358 = sv.read_inout %_handshake_buffer39_out0_valid : !hw.inout<i1>
  %359 = sv.read_inout %_handshake_buffer48_out0 : !hw.inout<i64>
  %360 = sv.read_inout %_handshake_buffer48_out0_valid : !hw.inout<i1>
  %361 = sv.read_inout %_handshake_buffer63_out0 : !hw.inout<i0>
  %362 = sv.read_inout %_handshake_buffer63_out0_valid : !hw.inout<i1>
  %363 = sv.read_inout %_handshake_buffer64_in0_ready : !hw.inout<i1>
  %364 = sv.read_inout %_handshake_buffer65_in0_ready : !hw.inout<i1>
  %handshake_store2.addrIn0_ready, %handshake_store2.dataIn_ready, %handshake_store2.ctrl_ready, %handshake_store2.dataToMem, %handshake_store2.dataToMem_valid, %handshake_store2.addrOut0, %handshake_store2.addrOut0_valid = hw.instance "handshake_store2" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %359: i64, addrIn0_valid: %360: i1, dataIn: %357: i64, dataIn_valid: %358: i1, ctrl: %361: i0, ctrl_valid: %362: i1, dataToMem_ready: %364: i1, addrOut0_ready: %363: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  sv.assign %_handshake_store2_addrOut0_valid, %handshake_store2.addrOut0_valid : i1
  sv.assign %_handshake_store2_addrOut0, %handshake_store2.addrOut0 : i64
  sv.assign %_handshake_store2_dataToMem_valid, %handshake_store2.dataToMem_valid : i1
  sv.assign %_handshake_store2_dataToMem, %handshake_store2.dataToMem : i64
  sv.assign %_handshake_store2_ctrl_ready, %handshake_store2.ctrl_ready : i1
  sv.assign %_handshake_store2_dataIn_ready, %handshake_store2.dataIn_ready : i1
  sv.assign %_handshake_store2_addrIn0_ready, %handshake_store2.addrIn0_ready : i1
  %365 = sv.read_inout %_handshake_memory2_stAddr2_ready : !hw.inout<i1>
  %366 = sv.read_inout %_handshake_store2_addrOut0 : !hw.inout<i64>
  %367 = sv.read_inout %_handshake_store2_addrOut0_valid : !hw.inout<i1>
  %handshake_buffer64.in0_ready, %handshake_buffer64.out0, %handshake_buffer64.out0_valid = hw.instance "handshake_buffer64" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %366: i64, in0_valid: %367: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %365: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer64_out0_valid, %handshake_buffer64.out0_valid : i1
  sv.assign %_handshake_buffer64_out0, %handshake_buffer64.out0 : i64
  sv.assign %_handshake_buffer64_in0_ready, %handshake_buffer64.in0_ready : i1
  %368 = sv.read_inout %_handshake_memory2_stData2_ready : !hw.inout<i1>
  %369 = sv.read_inout %_handshake_store2_dataToMem : !hw.inout<i64>
  %370 = sv.read_inout %_handshake_store2_dataToMem_valid : !hw.inout<i1>
  %handshake_buffer65.in0_ready, %handshake_buffer65.out0, %handshake_buffer65.out0_valid = hw.instance "handshake_buffer65" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %369: i64, in0_valid: %370: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %368: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer65_out0_valid, %handshake_buffer65.out0_valid : i1
  sv.assign %_handshake_buffer65_out0, %handshake_buffer65.out0 : i64
  sv.assign %_handshake_buffer65_in0_ready, %handshake_buffer65.in0_ready : i1
  %371 = sv.read_inout %_handshake_buffer3_out0 : !hw.inout<i0>
  %372 = sv.read_inout %_handshake_buffer3_out0_valid : !hw.inout<i1>
  %373 = sv.read_inout %_handshake_buffer46_out0 : !hw.inout<i64>
  %374 = sv.read_inout %_handshake_buffer46_out0_valid : !hw.inout<i1>
  %375 = sv.read_inout %_handshake_buffer56_out0 : !hw.inout<i64>
  %376 = sv.read_inout %_handshake_buffer56_out0_valid : !hw.inout<i1>
  %377 = sv.read_inout %_handshake_buffer66_in0_ready : !hw.inout<i1>
  %378 = sv.read_inout %_handshake_buffer67_in0_ready : !hw.inout<i1>
  %handshake_store3.addrIn0_ready, %handshake_store3.dataIn_ready, %handshake_store3.ctrl_ready, %handshake_store3.dataToMem, %handshake_store3.dataToMem_valid, %handshake_store3.addrOut0, %handshake_store3.addrOut0_valid = hw.instance "handshake_store3" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %375: i64, addrIn0_valid: %376: i1, dataIn: %373: i64, dataIn_valid: %374: i1, ctrl: %371: i0, ctrl_valid: %372: i1, dataToMem_ready: %378: i1, addrOut0_ready: %377: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  sv.assign %_handshake_store3_addrOut0_valid, %handshake_store3.addrOut0_valid : i1
  sv.assign %_handshake_store3_addrOut0, %handshake_store3.addrOut0 : i64
  sv.assign %_handshake_store3_dataToMem_valid, %handshake_store3.dataToMem_valid : i1
  sv.assign %_handshake_store3_dataToMem, %handshake_store3.dataToMem : i64
  sv.assign %_handshake_store3_ctrl_ready, %handshake_store3.ctrl_ready : i1
  sv.assign %_handshake_store3_dataIn_ready, %handshake_store3.dataIn_ready : i1
  sv.assign %_handshake_store3_addrIn0_ready, %handshake_store3.addrIn0_ready : i1
  %379 = sv.read_inout %_handshake_memory1_stAddr0_ready : !hw.inout<i1>
  %380 = sv.read_inout %_handshake_store3_addrOut0 : !hw.inout<i64>
  %381 = sv.read_inout %_handshake_store3_addrOut0_valid : !hw.inout<i1>
  %handshake_buffer66.in0_ready, %handshake_buffer66.out0, %handshake_buffer66.out0_valid = hw.instance "handshake_buffer66" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %380: i64, in0_valid: %381: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %379: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer66_out0_valid, %handshake_buffer66.out0_valid : i1
  sv.assign %_handshake_buffer66_out0, %handshake_buffer66.out0 : i64
  sv.assign %_handshake_buffer66_in0_ready, %handshake_buffer66.in0_ready : i1
  %382 = sv.read_inout %_handshake_memory1_stData0_ready : !hw.inout<i1>
  %383 = sv.read_inout %_handshake_store3_dataToMem : !hw.inout<i64>
  %384 = sv.read_inout %_handshake_store3_dataToMem_valid : !hw.inout<i1>
  %handshake_buffer67.in0_ready, %handshake_buffer67.out0, %handshake_buffer67.out0_valid = hw.instance "handshake_buffer67" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %383: i64, in0_valid: %384: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %382: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer67_out0_valid, %handshake_buffer67.out0_valid : i1
  sv.assign %_handshake_buffer67_out0, %handshake_buffer67.out0 : i64
  sv.assign %_handshake_buffer67_in0_ready, %handshake_buffer67.in0_ready : i1
  %385 = sv.read_inout %_handshake_buffer2_out0 : !hw.inout<i0>
  %386 = sv.read_inout %_handshake_buffer2_out0_valid : !hw.inout<i1>
  %387 = sv.read_inout %_handshake_buffer24_out0 : !hw.inout<i0>
  %388 = sv.read_inout %_handshake_buffer24_out0_valid : !hw.inout<i1>
  %389 = sv.read_inout %_handshake_buffer68_in0_ready : !hw.inout<i1>
  %handshake_join3.in0_ready, %handshake_join3.in1_ready, %handshake_join3.out0, %handshake_join3.out0_valid = hw.instance "handshake_join3" @handshake_join_2ins_1outs_ctrl(in0: %385: i0, in0_valid: %386: i1, in1: %387: i0, in1_valid: %388: i1, out0_ready: %389: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_join3_out0_valid, %handshake_join3.out0_valid : i1
  sv.assign %_handshake_join3_out0, %handshake_join3.out0 : i0
  sv.assign %_handshake_join3_in1_ready, %handshake_join3.in1_ready : i1
  sv.assign %_handshake_join3_in0_ready, %handshake_join3.in0_ready : i1
  %390 = sv.read_inout %_handshake_join3_out0 : !hw.inout<i0>
  %391 = sv.read_inout %_handshake_join3_out0_valid : !hw.inout<i1>
  %392 = sv.read_inout %_handshake_store4_ctrl_ready : !hw.inout<i1>
  %handshake_buffer68.in0_ready, %handshake_buffer68.out0, %handshake_buffer68.out0_valid = hw.instance "handshake_buffer68" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %390: i0, in0_valid: %391: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %392: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer68_out0_valid, %handshake_buffer68.out0_valid : i1
  sv.assign %_handshake_buffer68_out0, %handshake_buffer68.out0 : i0
  sv.assign %_handshake_buffer68_in0_ready, %handshake_buffer68.in0_ready : i1
  %393 = sv.read_inout %_handshake_buffer43_out0 : !hw.inout<i64>
  %394 = sv.read_inout %_handshake_buffer43_out0_valid : !hw.inout<i1>
  %395 = sv.read_inout %_handshake_buffer52_out0 : !hw.inout<i64>
  %396 = sv.read_inout %_handshake_buffer52_out0_valid : !hw.inout<i1>
  %397 = sv.read_inout %_handshake_buffer68_out0 : !hw.inout<i0>
  %398 = sv.read_inout %_handshake_buffer68_out0_valid : !hw.inout<i1>
  %399 = sv.read_inout %_handshake_buffer69_in0_ready : !hw.inout<i1>
  %400 = sv.read_inout %_handshake_buffer70_in0_ready : !hw.inout<i1>
  %handshake_store4.addrIn0_ready, %handshake_store4.dataIn_ready, %handshake_store4.ctrl_ready, %handshake_store4.dataToMem, %handshake_store4.dataToMem_valid, %handshake_store4.addrOut0, %handshake_store4.addrOut0_valid = hw.instance "handshake_store4" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %395: i64, addrIn0_valid: %396: i1, dataIn: %393: i64, dataIn_valid: %394: i1, ctrl: %397: i0, ctrl_valid: %398: i1, dataToMem_ready: %400: i1, addrOut0_ready: %399: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  sv.assign %_handshake_store4_addrOut0_valid, %handshake_store4.addrOut0_valid : i1
  sv.assign %_handshake_store4_addrOut0, %handshake_store4.addrOut0 : i64
  sv.assign %_handshake_store4_dataToMem_valid, %handshake_store4.dataToMem_valid : i1
  sv.assign %_handshake_store4_dataToMem, %handshake_store4.dataToMem : i64
  sv.assign %_handshake_store4_ctrl_ready, %handshake_store4.ctrl_ready : i1
  sv.assign %_handshake_store4_dataIn_ready, %handshake_store4.dataIn_ready : i1
  sv.assign %_handshake_store4_addrIn0_ready, %handshake_store4.addrIn0_ready : i1
  %401 = sv.read_inout %_handshake_memory1_stAddr1_ready : !hw.inout<i1>
  %402 = sv.read_inout %_handshake_store4_addrOut0 : !hw.inout<i64>
  %403 = sv.read_inout %_handshake_store4_addrOut0_valid : !hw.inout<i1>
  %handshake_buffer69.in0_ready, %handshake_buffer69.out0, %handshake_buffer69.out0_valid = hw.instance "handshake_buffer69" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %402: i64, in0_valid: %403: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %401: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer69_out0_valid, %handshake_buffer69.out0_valid : i1
  sv.assign %_handshake_buffer69_out0, %handshake_buffer69.out0 : i64
  sv.assign %_handshake_buffer69_in0_ready, %handshake_buffer69.in0_ready : i1
  %404 = sv.read_inout %_handshake_memory1_stData1_ready : !hw.inout<i1>
  %405 = sv.read_inout %_handshake_store4_dataToMem : !hw.inout<i64>
  %406 = sv.read_inout %_handshake_store4_dataToMem_valid : !hw.inout<i1>
  %handshake_buffer70.in0_ready, %handshake_buffer70.out0, %handshake_buffer70.out0_valid = hw.instance "handshake_buffer70" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %405: i64, in0_valid: %406: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %404: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer70_out0_valid, %handshake_buffer70.out0_valid : i1
  sv.assign %_handshake_buffer70_out0, %handshake_buffer70.out0 : i64
  sv.assign %_handshake_buffer70_in0_ready, %handshake_buffer70.in0_ready : i1
  %407 = sv.read_inout %_handshake_buffer1_out0 : !hw.inout<i0>
  %408 = sv.read_inout %_handshake_buffer1_out0_valid : !hw.inout<i1>
  %409 = sv.read_inout %_handshake_buffer22_out0 : !hw.inout<i0>
  %410 = sv.read_inout %_handshake_buffer22_out0_valid : !hw.inout<i1>
  %411 = sv.read_inout %_handshake_buffer25_out0 : !hw.inout<i0>
  %412 = sv.read_inout %_handshake_buffer25_out0_valid : !hw.inout<i1>
  %413 = sv.read_inout %_handshake_buffer71_in0_ready : !hw.inout<i1>
  %handshake_join4.in0_ready, %handshake_join4.in1_ready, %handshake_join4.in2_ready, %handshake_join4.out0, %handshake_join4.out0_valid = hw.instance "handshake_join4" @handshake_join_3ins_1outs_ctrl(in0: %407: i0, in0_valid: %408: i1, in1: %411: i0, in1_valid: %412: i1, in2: %409: i0, in2_valid: %410: i1, out0_ready: %413: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_join4_out0_valid, %handshake_join4.out0_valid : i1
  sv.assign %_handshake_join4_out0, %handshake_join4.out0 : i0
  sv.assign %_handshake_join4_in2_ready, %handshake_join4.in2_ready : i1
  sv.assign %_handshake_join4_in1_ready, %handshake_join4.in1_ready : i1
  sv.assign %_handshake_join4_in0_ready, %handshake_join4.in0_ready : i1
  %414 = sv.read_inout %_handshake_join4_out0 : !hw.inout<i0>
  %415 = sv.read_inout %_handshake_join4_out0_valid : !hw.inout<i1>
  %416 = sv.read_inout %_handshake_store5_ctrl_ready : !hw.inout<i1>
  %handshake_buffer71.in0_ready, %handshake_buffer71.out0, %handshake_buffer71.out0_valid = hw.instance "handshake_buffer71" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %414: i0, in0_valid: %415: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %416: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer71_out0_valid, %handshake_buffer71.out0_valid : i1
  sv.assign %_handshake_buffer71_out0, %handshake_buffer71.out0 : i0
  sv.assign %_handshake_buffer71_in0_ready, %handshake_buffer71.in0_ready : i1
  %417 = sv.read_inout %_handshake_buffer40_out0 : !hw.inout<i64>
  %418 = sv.read_inout %_handshake_buffer40_out0_valid : !hw.inout<i1>
  %419 = sv.read_inout %_handshake_buffer49_out0 : !hw.inout<i64>
  %420 = sv.read_inout %_handshake_buffer49_out0_valid : !hw.inout<i1>
  %421 = sv.read_inout %_handshake_buffer71_out0 : !hw.inout<i0>
  %422 = sv.read_inout %_handshake_buffer71_out0_valid : !hw.inout<i1>
  %423 = sv.read_inout %_handshake_buffer72_in0_ready : !hw.inout<i1>
  %424 = sv.read_inout %_handshake_buffer73_in0_ready : !hw.inout<i1>
  %handshake_store5.addrIn0_ready, %handshake_store5.dataIn_ready, %handshake_store5.ctrl_ready, %handshake_store5.dataToMem, %handshake_store5.dataToMem_valid, %handshake_store5.addrOut0, %handshake_store5.addrOut0_valid = hw.instance "handshake_store5" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %419: i64, addrIn0_valid: %420: i1, dataIn: %417: i64, dataIn_valid: %418: i1, ctrl: %421: i0, ctrl_valid: %422: i1, dataToMem_ready: %424: i1, addrOut0_ready: %423: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  sv.assign %_handshake_store5_addrOut0_valid, %handshake_store5.addrOut0_valid : i1
  sv.assign %_handshake_store5_addrOut0, %handshake_store5.addrOut0 : i64
  sv.assign %_handshake_store5_dataToMem_valid, %handshake_store5.dataToMem_valid : i1
  sv.assign %_handshake_store5_dataToMem, %handshake_store5.dataToMem : i64
  sv.assign %_handshake_store5_ctrl_ready, %handshake_store5.ctrl_ready : i1
  sv.assign %_handshake_store5_dataIn_ready, %handshake_store5.dataIn_ready : i1
  sv.assign %_handshake_store5_addrIn0_ready, %handshake_store5.addrIn0_ready : i1
  %425 = sv.read_inout %_handshake_memory1_stAddr2_ready : !hw.inout<i1>
  %426 = sv.read_inout %_handshake_store5_addrOut0 : !hw.inout<i64>
  %427 = sv.read_inout %_handshake_store5_addrOut0_valid : !hw.inout<i1>
  %handshake_buffer72.in0_ready, %handshake_buffer72.out0, %handshake_buffer72.out0_valid = hw.instance "handshake_buffer72" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %426: i64, in0_valid: %427: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %425: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer72_out0_valid, %handshake_buffer72.out0_valid : i1
  sv.assign %_handshake_buffer72_out0, %handshake_buffer72.out0 : i64
  sv.assign %_handshake_buffer72_in0_ready, %handshake_buffer72.in0_ready : i1
  %428 = sv.read_inout %_handshake_memory1_stData2_ready : !hw.inout<i1>
  %429 = sv.read_inout %_handshake_store5_dataToMem : !hw.inout<i64>
  %430 = sv.read_inout %_handshake_store5_dataToMem_valid : !hw.inout<i1>
  %handshake_buffer73.in0_ready, %handshake_buffer73.out0, %handshake_buffer73.out0_valid = hw.instance "handshake_buffer73" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %429: i64, in0_valid: %430: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %428: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer73_out0_valid, %handshake_buffer73.out0_valid : i1
  sv.assign %_handshake_buffer73_out0, %handshake_buffer73.out0 : i64
  sv.assign %_handshake_buffer73_in0_ready, %handshake_buffer73.in0_ready : i1
  %431 = sv.read_inout %_handshake_fork11_in0_ready : !hw.inout<i1>
  %432 = sv.read_inout %_handshake_fork14_out0 : !hw.inout<i1>
  %433 = sv.read_inout %_handshake_fork14_out0_valid : !hw.inout<i1>
  %handshake_buffer74.in0_ready, %handshake_buffer74.out0, %handshake_buffer74.out0_valid = hw.instance "handshake_buffer74" @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in0: %432: i1, in0_valid: %433: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %431: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  sv.assign %_handshake_buffer74_out0_valid, %handshake_buffer74.out0_valid : i1
  sv.assign %_handshake_buffer74_out0, %handshake_buffer74.out0 : i1
  sv.assign %_handshake_buffer74_in0_ready, %handshake_buffer74.in0_ready : i1
  %434 = sv.read_inout %_handshake_buffer74_out0 : !hw.inout<i1>
  %435 = sv.read_inout %_handshake_buffer74_out0_valid : !hw.inout<i1>
  %436 = sv.read_inout %_handshake_buffer75_in0_ready : !hw.inout<i1>
  %437 = sv.read_inout %_handshake_buffer76_in0_ready : !hw.inout<i1>
  %438 = sv.read_inout %_handshake_buffer77_in0_ready : !hw.inout<i1>
  %439 = sv.read_inout %_handshake_buffer78_in0_ready : !hw.inout<i1>
  %handshake_fork11.in0_ready, %handshake_fork11.out0, %handshake_fork11.out0_valid, %handshake_fork11.out1, %handshake_fork11.out1_valid, %handshake_fork11.out2, %handshake_fork11.out2_valid, %handshake_fork11.out3, %handshake_fork11.out3_valid = hw.instance "handshake_fork11" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in0: %434: i1, in0_valid: %435: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %439: i1, out1_ready: %438: i1, out2_ready: %437: i1, out3_ready: %436: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1)
  sv.assign %_handshake_fork11_out3_valid, %handshake_fork11.out3_valid : i1
  sv.assign %_handshake_fork11_out3, %handshake_fork11.out3 : i1
  sv.assign %_handshake_fork11_out2_valid, %handshake_fork11.out2_valid : i1
  sv.assign %_handshake_fork11_out2, %handshake_fork11.out2 : i1
  sv.assign %_handshake_fork11_out1_valid, %handshake_fork11.out1_valid : i1
  sv.assign %_handshake_fork11_out1, %handshake_fork11.out1 : i1
  sv.assign %_handshake_fork11_out0_valid, %handshake_fork11.out0_valid : i1
  sv.assign %_handshake_fork11_out0, %handshake_fork11.out0 : i1
  sv.assign %_handshake_fork11_in0_ready, %handshake_fork11.in0_ready : i1
  %440 = sv.read_inout %_handshake_fork11_out3 : !hw.inout<i1>
  %441 = sv.read_inout %_handshake_fork11_out3_valid : !hw.inout<i1>
  %442 = sv.read_inout %_handshake_mux0_select_ready : !hw.inout<i1>
  %handshake_buffer75.in0_ready, %handshake_buffer75.out0, %handshake_buffer75.out0_valid = hw.instance "handshake_buffer75" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %440: i1, in0_valid: %441: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %442: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  sv.assign %_handshake_buffer75_out0_valid, %handshake_buffer75.out0_valid : i1
  sv.assign %_handshake_buffer75_out0, %handshake_buffer75.out0 : i1
  sv.assign %_handshake_buffer75_in0_ready, %handshake_buffer75.in0_ready : i1
  %443 = sv.read_inout %_handshake_fork11_out2 : !hw.inout<i1>
  %444 = sv.read_inout %_handshake_fork11_out2_valid : !hw.inout<i1>
  %445 = sv.read_inout %_handshake_mux1_select_ready : !hw.inout<i1>
  %handshake_buffer76.in0_ready, %handshake_buffer76.out0, %handshake_buffer76.out0_valid = hw.instance "handshake_buffer76" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %443: i1, in0_valid: %444: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %445: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  sv.assign %_handshake_buffer76_out0_valid, %handshake_buffer76.out0_valid : i1
  sv.assign %_handshake_buffer76_out0, %handshake_buffer76.out0 : i1
  sv.assign %_handshake_buffer76_in0_ready, %handshake_buffer76.in0_ready : i1
  %446 = sv.read_inout %_handshake_fork11_out1 : !hw.inout<i1>
  %447 = sv.read_inout %_handshake_fork11_out1_valid : !hw.inout<i1>
  %448 = sv.read_inout %_handshake_mux2_select_ready : !hw.inout<i1>
  %handshake_buffer77.in0_ready, %handshake_buffer77.out0, %handshake_buffer77.out0_valid = hw.instance "handshake_buffer77" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %446: i1, in0_valid: %447: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %448: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  sv.assign %_handshake_buffer77_out0_valid, %handshake_buffer77.out0_valid : i1
  sv.assign %_handshake_buffer77_out0, %handshake_buffer77.out0 : i1
  sv.assign %_handshake_buffer77_in0_ready, %handshake_buffer77.in0_ready : i1
  %449 = sv.read_inout %_handshake_fork11_out0 : !hw.inout<i1>
  %450 = sv.read_inout %_handshake_fork11_out0_valid : !hw.inout<i1>
  %451 = sv.read_inout %_handshake_mux3_select_ready : !hw.inout<i1>
  %handshake_buffer78.in0_ready, %handshake_buffer78.out0, %handshake_buffer78.out0_valid = hw.instance "handshake_buffer78" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %449: i1, in0_valid: %450: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %451: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  sv.assign %_handshake_buffer78_out0_valid, %handshake_buffer78.out0_valid : i1
  sv.assign %_handshake_buffer78_out0, %handshake_buffer78.out0 : i1
  sv.assign %_handshake_buffer78_in0_ready, %handshake_buffer78.in0_ready : i1
  %452 = sv.read_inout %_handshake_buffer36_out0 : !hw.inout<i0>
  %453 = sv.read_inout %_handshake_buffer36_out0_valid : !hw.inout<i1>
  %454 = sv.read_inout %_handshake_buffer75_out0 : !hw.inout<i1>
  %455 = sv.read_inout %_handshake_buffer75_out0_valid : !hw.inout<i1>
  %456 = sv.read_inout %_handshake_buffer79_in0_ready : !hw.inout<i1>
  %457 = sv.read_inout %_handshake_buffer107_out0 : !hw.inout<i0>
  %458 = sv.read_inout %_handshake_buffer107_out0_valid : !hw.inout<i1>
  %handshake_mux0.select_ready, %handshake_mux0.in0_ready, %handshake_mux0.in1_ready, %handshake_mux0.out0, %handshake_mux0.out0_valid = hw.instance "handshake_mux0" @handshake_mux_in_ui1_3ins_1outs_ctrl(select: %454: i1, select_valid: %455: i1, in0: %452: i0, in0_valid: %453: i1, in1: %457: i0, in1_valid: %458: i1, out0_ready: %456: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_mux0_out0_valid, %handshake_mux0.out0_valid : i1
  sv.assign %_handshake_mux0_out0, %handshake_mux0.out0 : i0
  sv.assign %_handshake_mux0_in1_ready, %handshake_mux0.in1_ready : i1
  sv.assign %_handshake_mux0_in0_ready, %handshake_mux0.in0_ready : i1
  sv.assign %_handshake_mux0_select_ready, %handshake_mux0.select_ready : i1
  %459 = sv.read_inout %_handshake_mux0_out0 : !hw.inout<i0>
  %460 = sv.read_inout %_handshake_mux0_out0_valid : !hw.inout<i1>
  %461 = sv.read_inout %_handshake_cond_br3_data_ready : !hw.inout<i1>
  %handshake_buffer79.in0_ready, %handshake_buffer79.out0, %handshake_buffer79.out0_valid = hw.instance "handshake_buffer79" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %459: i0, in0_valid: %460: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %461: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer79_out0_valid, %handshake_buffer79.out0_valid : i1
  sv.assign %_handshake_buffer79_out0, %handshake_buffer79.out0 : i0
  sv.assign %_handshake_buffer79_in0_ready, %handshake_buffer79.in0_ready : i1
  %462 = sv.read_inout %_handshake_buffer57_out0 : !hw.inout<i64>
  %463 = sv.read_inout %_handshake_buffer57_out0_valid : !hw.inout<i1>
  %464 = sv.read_inout %_handshake_buffer76_out0 : !hw.inout<i1>
  %465 = sv.read_inout %_handshake_buffer76_out0_valid : !hw.inout<i1>
  %466 = sv.read_inout %_handshake_buffer80_in0_ready : !hw.inout<i1>
  %467 = sv.read_inout %_handshake_buffer115_out0 : !hw.inout<i64>
  %468 = sv.read_inout %_handshake_buffer115_out0_valid : !hw.inout<i1>
  %handshake_mux1.select_ready, %handshake_mux1.in0_ready, %handshake_mux1.in1_ready, %handshake_mux1.out0, %handshake_mux1.out0_valid = hw.instance "handshake_mux1" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %464: i1, select_valid: %465: i1, in0: %462: i64, in0_valid: %463: i1, in1: %467: i64, in1_valid: %468: i1, out0_ready: %466: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_mux1_out0_valid, %handshake_mux1.out0_valid : i1
  sv.assign %_handshake_mux1_out0, %handshake_mux1.out0 : i64
  sv.assign %_handshake_mux1_in1_ready, %handshake_mux1.in1_ready : i1
  sv.assign %_handshake_mux1_in0_ready, %handshake_mux1.in0_ready : i1
  sv.assign %_handshake_mux1_select_ready, %handshake_mux1.select_ready : i1
  %469 = sv.read_inout %_handshake_mux1_out0 : !hw.inout<i64>
  %470 = sv.read_inout %_handshake_mux1_out0_valid : !hw.inout<i1>
  %471 = sv.read_inout %_handshake_fork12_in0_ready : !hw.inout<i1>
  %handshake_buffer80.in0_ready, %handshake_buffer80.out0, %handshake_buffer80.out0_valid = hw.instance "handshake_buffer80" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %469: i64, in0_valid: %470: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %471: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer80_out0_valid, %handshake_buffer80.out0_valid : i1
  sv.assign %_handshake_buffer80_out0, %handshake_buffer80.out0 : i64
  sv.assign %_handshake_buffer80_in0_ready, %handshake_buffer80.in0_ready : i1
  %472 = sv.read_inout %_handshake_buffer80_out0 : !hw.inout<i64>
  %473 = sv.read_inout %_handshake_buffer80_out0_valid : !hw.inout<i1>
  %474 = sv.read_inout %_handshake_buffer81_in0_ready : !hw.inout<i1>
  %475 = sv.read_inout %_handshake_buffer82_in0_ready : !hw.inout<i1>
  %handshake_fork12.in0_ready, %handshake_fork12.out0, %handshake_fork12.out0_valid, %handshake_fork12.out1, %handshake_fork12.out1_valid = hw.instance "handshake_fork12" @handshake_fork_in_ui64_out_ui64_ui64(in0: %472: i64, in0_valid: %473: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %475: i1, out1_ready: %474: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  sv.assign %_handshake_fork12_out1_valid, %handshake_fork12.out1_valid : i1
  sv.assign %_handshake_fork12_out1, %handshake_fork12.out1 : i64
  sv.assign %_handshake_fork12_out0_valid, %handshake_fork12.out0_valid : i1
  sv.assign %_handshake_fork12_out0, %handshake_fork12.out0 : i64
  sv.assign %_handshake_fork12_in0_ready, %handshake_fork12.in0_ready : i1
  %476 = sv.read_inout %_handshake_fork12_out1 : !hw.inout<i64>
  %477 = sv.read_inout %_handshake_fork12_out1_valid : !hw.inout<i1>
  %478 = sv.read_inout %_handshake_cond_br0_data_ready : !hw.inout<i1>
  %handshake_buffer81.in0_ready, %handshake_buffer81.out0, %handshake_buffer81.out0_valid = hw.instance "handshake_buffer81" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %476: i64, in0_valid: %477: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %478: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer81_out0_valid, %handshake_buffer81.out0_valid : i1
  sv.assign %_handshake_buffer81_out0, %handshake_buffer81.out0 : i64
  sv.assign %_handshake_buffer81_in0_ready, %handshake_buffer81.in0_ready : i1
  %479 = sv.read_inout %_handshake_fork12_out0 : !hw.inout<i64>
  %480 = sv.read_inout %_handshake_fork12_out0_valid : !hw.inout<i1>
  %481 = sv.read_inout %_arith_cmpi0_in0_ready : !hw.inout<i1>
  %handshake_buffer82.in0_ready, %handshake_buffer82.out0, %handshake_buffer82.out0_valid = hw.instance "handshake_buffer82" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %479: i64, in0_valid: %480: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %481: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer82_out0_valid, %handshake_buffer82.out0_valid : i1
  sv.assign %_handshake_buffer82_out0, %handshake_buffer82.out0 : i64
  sv.assign %_handshake_buffer82_in0_ready, %handshake_buffer82.in0_ready : i1
  %482 = sv.read_inout %_handshake_buffer37_out0 : !hw.inout<i64>
  %483 = sv.read_inout %_handshake_buffer37_out0_valid : !hw.inout<i1>
  %484 = sv.read_inout %_handshake_buffer77_out0 : !hw.inout<i1>
  %485 = sv.read_inout %_handshake_buffer77_out0_valid : !hw.inout<i1>
  %486 = sv.read_inout %_handshake_buffer83_in0_ready : !hw.inout<i1>
  %487 = sv.read_inout %_handshake_buffer97_out0 : !hw.inout<i64>
  %488 = sv.read_inout %_handshake_buffer97_out0_valid : !hw.inout<i1>
  %handshake_mux2.select_ready, %handshake_mux2.in0_ready, %handshake_mux2.in1_ready, %handshake_mux2.out0, %handshake_mux2.out0_valid = hw.instance "handshake_mux2" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %484: i1, select_valid: %485: i1, in0: %482: i64, in0_valid: %483: i1, in1: %487: i64, in1_valid: %488: i1, out0_ready: %486: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_mux2_out0_valid, %handshake_mux2.out0_valid : i1
  sv.assign %_handshake_mux2_out0, %handshake_mux2.out0 : i64
  sv.assign %_handshake_mux2_in1_ready, %handshake_mux2.in1_ready : i1
  sv.assign %_handshake_mux2_in0_ready, %handshake_mux2.in0_ready : i1
  sv.assign %_handshake_mux2_select_ready, %handshake_mux2.select_ready : i1
  %489 = sv.read_inout %_handshake_mux2_out0 : !hw.inout<i64>
  %490 = sv.read_inout %_handshake_mux2_out0_valid : !hw.inout<i1>
  %491 = sv.read_inout %_handshake_fork13_in0_ready : !hw.inout<i1>
  %handshake_buffer83.in0_ready, %handshake_buffer83.out0, %handshake_buffer83.out0_valid = hw.instance "handshake_buffer83" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %489: i64, in0_valid: %490: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %491: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer83_out0_valid, %handshake_buffer83.out0_valid : i1
  sv.assign %_handshake_buffer83_out0, %handshake_buffer83.out0 : i64
  sv.assign %_handshake_buffer83_in0_ready, %handshake_buffer83.in0_ready : i1
  %492 = sv.read_inout %_handshake_buffer83_out0 : !hw.inout<i64>
  %493 = sv.read_inout %_handshake_buffer83_out0_valid : !hw.inout<i1>
  %494 = sv.read_inout %_handshake_buffer84_in0_ready : !hw.inout<i1>
  %495 = sv.read_inout %_handshake_buffer85_in0_ready : !hw.inout<i1>
  %handshake_fork13.in0_ready, %handshake_fork13.out0, %handshake_fork13.out0_valid, %handshake_fork13.out1, %handshake_fork13.out1_valid = hw.instance "handshake_fork13" @handshake_fork_in_ui64_out_ui64_ui64(in0: %492: i64, in0_valid: %493: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %495: i1, out1_ready: %494: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  sv.assign %_handshake_fork13_out1_valid, %handshake_fork13.out1_valid : i1
  sv.assign %_handshake_fork13_out1, %handshake_fork13.out1 : i64
  sv.assign %_handshake_fork13_out0_valid, %handshake_fork13.out0_valid : i1
  sv.assign %_handshake_fork13_out0, %handshake_fork13.out0 : i64
  sv.assign %_handshake_fork13_in0_ready, %handshake_fork13.in0_ready : i1
  %496 = sv.read_inout %_handshake_fork13_out1 : !hw.inout<i64>
  %497 = sv.read_inout %_handshake_fork13_out1_valid : !hw.inout<i1>
  %498 = sv.read_inout %_handshake_cond_br1_data_ready : !hw.inout<i1>
  %handshake_buffer84.in0_ready, %handshake_buffer84.out0, %handshake_buffer84.out0_valid = hw.instance "handshake_buffer84" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %496: i64, in0_valid: %497: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %498: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer84_out0_valid, %handshake_buffer84.out0_valid : i1
  sv.assign %_handshake_buffer84_out0, %handshake_buffer84.out0 : i64
  sv.assign %_handshake_buffer84_in0_ready, %handshake_buffer84.in0_ready : i1
  %499 = sv.read_inout %_handshake_fork13_out0 : !hw.inout<i64>
  %500 = sv.read_inout %_handshake_fork13_out0_valid : !hw.inout<i1>
  %501 = sv.read_inout %_arith_cmpi0_in1_ready : !hw.inout<i1>
  %handshake_buffer85.in0_ready, %handshake_buffer85.out0, %handshake_buffer85.out0_valid = hw.instance "handshake_buffer85" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %499: i64, in0_valid: %500: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %501: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer85_out0_valid, %handshake_buffer85.out0_valid : i1
  sv.assign %_handshake_buffer85_out0, %handshake_buffer85.out0 : i64
  sv.assign %_handshake_buffer85_in0_ready, %handshake_buffer85.in0_ready : i1
  %502 = sv.read_inout %_handshake_buffer53_out0 : !hw.inout<i64>
  %503 = sv.read_inout %_handshake_buffer53_out0_valid : !hw.inout<i1>
  %504 = sv.read_inout %_handshake_buffer78_out0 : !hw.inout<i1>
  %505 = sv.read_inout %_handshake_buffer78_out0_valid : !hw.inout<i1>
  %506 = sv.read_inout %_handshake_buffer86_in0_ready : !hw.inout<i1>
  %507 = sv.read_inout %_handshake_buffer100_out0 : !hw.inout<i64>
  %508 = sv.read_inout %_handshake_buffer100_out0_valid : !hw.inout<i1>
  %handshake_mux3.select_ready, %handshake_mux3.in0_ready, %handshake_mux3.in1_ready, %handshake_mux3.out0, %handshake_mux3.out0_valid = hw.instance "handshake_mux3" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %504: i1, select_valid: %505: i1, in0: %502: i64, in0_valid: %503: i1, in1: %507: i64, in1_valid: %508: i1, out0_ready: %506: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_mux3_out0_valid, %handshake_mux3.out0_valid : i1
  sv.assign %_handshake_mux3_out0, %handshake_mux3.out0 : i64
  sv.assign %_handshake_mux3_in1_ready, %handshake_mux3.in1_ready : i1
  sv.assign %_handshake_mux3_in0_ready, %handshake_mux3.in0_ready : i1
  sv.assign %_handshake_mux3_select_ready, %handshake_mux3.select_ready : i1
  %509 = sv.read_inout %_handshake_mux3_out0 : !hw.inout<i64>
  %510 = sv.read_inout %_handshake_mux3_out0_valid : !hw.inout<i1>
  %511 = sv.read_inout %_handshake_cond_br2_data_ready : !hw.inout<i1>
  %handshake_buffer86.in0_ready, %handshake_buffer86.out0, %handshake_buffer86.out0_valid = hw.instance "handshake_buffer86" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %509: i64, in0_valid: %510: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %511: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer86_out0_valid, %handshake_buffer86.out0_valid : i1
  sv.assign %_handshake_buffer86_out0, %handshake_buffer86.out0 : i64
  sv.assign %_handshake_buffer86_in0_ready, %handshake_buffer86.in0_ready : i1
  %512 = sv.read_inout %_handshake_buffer82_out0 : !hw.inout<i64>
  %513 = sv.read_inout %_handshake_buffer82_out0_valid : !hw.inout<i1>
  %514 = sv.read_inout %_handshake_buffer85_out0 : !hw.inout<i64>
  %515 = sv.read_inout %_handshake_buffer85_out0_valid : !hw.inout<i1>
  %516 = sv.read_inout %_handshake_buffer87_in0_ready : !hw.inout<i1>
  %arith_cmpi0.in0_ready, %arith_cmpi0.in1_ready, %arith_cmpi0.out0, %arith_cmpi0.out0_valid = hw.instance "arith_cmpi0" @arith_cmpi_in_ui64_ui64_out_ui1_slt(in0: %512: i64, in0_valid: %513: i1, in1: %514: i64, in1_valid: %515: i1, out0_ready: %516: i1) -> (in0_ready: i1, in1_ready: i1, out0: i1, out0_valid: i1)
  sv.assign %_arith_cmpi0_out0_valid, %arith_cmpi0.out0_valid : i1
  sv.assign %_arith_cmpi0_out0, %arith_cmpi0.out0 : i1
  sv.assign %_arith_cmpi0_in1_ready, %arith_cmpi0.in1_ready : i1
  sv.assign %_arith_cmpi0_in0_ready, %arith_cmpi0.in0_ready : i1
  %517 = sv.read_inout %_arith_cmpi0_out0 : !hw.inout<i1>
  %518 = sv.read_inout %_arith_cmpi0_out0_valid : !hw.inout<i1>
  %519 = sv.read_inout %_handshake_fork14_in0_ready : !hw.inout<i1>
  %handshake_buffer87.in0_ready, %handshake_buffer87.out0, %handshake_buffer87.out0_valid = hw.instance "handshake_buffer87" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %517: i1, in0_valid: %518: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %519: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  sv.assign %_handshake_buffer87_out0_valid, %handshake_buffer87.out0_valid : i1
  sv.assign %_handshake_buffer87_out0, %handshake_buffer87.out0 : i1
  sv.assign %_handshake_buffer87_in0_ready, %handshake_buffer87.in0_ready : i1
  %520 = sv.read_inout %_handshake_buffer74_in0_ready : !hw.inout<i1>
  %521 = sv.read_inout %_handshake_buffer87_out0 : !hw.inout<i1>
  %522 = sv.read_inout %_handshake_buffer87_out0_valid : !hw.inout<i1>
  %523 = sv.read_inout %_handshake_buffer88_in0_ready : !hw.inout<i1>
  %524 = sv.read_inout %_handshake_buffer89_in0_ready : !hw.inout<i1>
  %525 = sv.read_inout %_handshake_buffer90_in0_ready : !hw.inout<i1>
  %526 = sv.read_inout %_handshake_buffer91_in0_ready : !hw.inout<i1>
  %handshake_fork14.in0_ready, %handshake_fork14.out0, %handshake_fork14.out0_valid, %handshake_fork14.out1, %handshake_fork14.out1_valid, %handshake_fork14.out2, %handshake_fork14.out2_valid, %handshake_fork14.out3, %handshake_fork14.out3_valid, %handshake_fork14.out4, %handshake_fork14.out4_valid = hw.instance "handshake_fork14" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in0: %521: i1, in0_valid: %522: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %520: i1, out1_ready: %526: i1, out2_ready: %525: i1, out3_ready: %524: i1, out4_ready: %523: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1, out4: i1, out4_valid: i1)
  sv.assign %_handshake_fork14_out4_valid, %handshake_fork14.out4_valid : i1
  sv.assign %_handshake_fork14_out4, %handshake_fork14.out4 : i1
  sv.assign %_handshake_fork14_out3_valid, %handshake_fork14.out3_valid : i1
  sv.assign %_handshake_fork14_out3, %handshake_fork14.out3 : i1
  sv.assign %_handshake_fork14_out2_valid, %handshake_fork14.out2_valid : i1
  sv.assign %_handshake_fork14_out2, %handshake_fork14.out2 : i1
  sv.assign %_handshake_fork14_out1_valid, %handshake_fork14.out1_valid : i1
  sv.assign %_handshake_fork14_out1, %handshake_fork14.out1 : i1
  sv.assign %_handshake_fork14_out0_valid, %handshake_fork14.out0_valid : i1
  sv.assign %_handshake_fork14_out0, %handshake_fork14.out0 : i1
  sv.assign %_handshake_fork14_in0_ready, %handshake_fork14.in0_ready : i1
  %527 = sv.read_inout %_handshake_fork14_out4 : !hw.inout<i1>
  %528 = sv.read_inout %_handshake_fork14_out4_valid : !hw.inout<i1>
  %529 = sv.read_inout %_handshake_cond_br0_cond_ready : !hw.inout<i1>
  %handshake_buffer88.in0_ready, %handshake_buffer88.out0, %handshake_buffer88.out0_valid = hw.instance "handshake_buffer88" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %527: i1, in0_valid: %528: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %529: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  sv.assign %_handshake_buffer88_out0_valid, %handshake_buffer88.out0_valid : i1
  sv.assign %_handshake_buffer88_out0, %handshake_buffer88.out0 : i1
  sv.assign %_handshake_buffer88_in0_ready, %handshake_buffer88.in0_ready : i1
  %530 = sv.read_inout %_handshake_fork14_out3 : !hw.inout<i1>
  %531 = sv.read_inout %_handshake_fork14_out3_valid : !hw.inout<i1>
  %532 = sv.read_inout %_handshake_cond_br1_cond_ready : !hw.inout<i1>
  %handshake_buffer89.in0_ready, %handshake_buffer89.out0, %handshake_buffer89.out0_valid = hw.instance "handshake_buffer89" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %530: i1, in0_valid: %531: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %532: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  sv.assign %_handshake_buffer89_out0_valid, %handshake_buffer89.out0_valid : i1
  sv.assign %_handshake_buffer89_out0, %handshake_buffer89.out0 : i1
  sv.assign %_handshake_buffer89_in0_ready, %handshake_buffer89.in0_ready : i1
  %533 = sv.read_inout %_handshake_fork14_out2 : !hw.inout<i1>
  %534 = sv.read_inout %_handshake_fork14_out2_valid : !hw.inout<i1>
  %535 = sv.read_inout %_handshake_cond_br2_cond_ready : !hw.inout<i1>
  %handshake_buffer90.in0_ready, %handshake_buffer90.out0, %handshake_buffer90.out0_valid = hw.instance "handshake_buffer90" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %533: i1, in0_valid: %534: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %535: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  sv.assign %_handshake_buffer90_out0_valid, %handshake_buffer90.out0_valid : i1
  sv.assign %_handshake_buffer90_out0, %handshake_buffer90.out0 : i1
  sv.assign %_handshake_buffer90_in0_ready, %handshake_buffer90.in0_ready : i1
  %536 = sv.read_inout %_handshake_fork14_out1 : !hw.inout<i1>
  %537 = sv.read_inout %_handshake_fork14_out1_valid : !hw.inout<i1>
  %538 = sv.read_inout %_handshake_cond_br3_cond_ready : !hw.inout<i1>
  %handshake_buffer91.in0_ready, %handshake_buffer91.out0, %handshake_buffer91.out0_valid = hw.instance "handshake_buffer91" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %536: i1, in0_valid: %537: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %538: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1)
  sv.assign %_handshake_buffer91_out0_valid, %handshake_buffer91.out0_valid : i1
  sv.assign %_handshake_buffer91_out0, %handshake_buffer91.out0 : i1
  sv.assign %_handshake_buffer91_in0_ready, %handshake_buffer91.in0_ready : i1
  %539 = sv.read_inout %_handshake_buffer81_out0 : !hw.inout<i64>
  %540 = sv.read_inout %_handshake_buffer81_out0_valid : !hw.inout<i1>
  %541 = sv.read_inout %_handshake_buffer88_out0 : !hw.inout<i1>
  %542 = sv.read_inout %_handshake_buffer88_out0_valid : !hw.inout<i1>
  %543 = sv.read_inout %_handshake_buffer92_in0_ready : !hw.inout<i1>
  %544 = sv.read_inout %_handshake_sink0_in0_ready : !hw.inout<i1>
  %handshake_cond_br0.cond_ready, %handshake_cond_br0.data_ready, %handshake_cond_br0.outTrue, %handshake_cond_br0.outTrue_valid, %handshake_cond_br0.outFalse, %handshake_cond_br0.outFalse_valid = hw.instance "handshake_cond_br0" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %541: i1, cond_valid: %542: i1, data: %539: i64, data_valid: %540: i1, outTrue_ready: %543: i1, outFalse_ready: %544: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
  sv.assign %_handshake_cond_br0_outFalse_valid, %handshake_cond_br0.outFalse_valid : i1
  sv.assign %_handshake_cond_br0_outFalse, %handshake_cond_br0.outFalse : i64
  sv.assign %_handshake_cond_br0_outTrue_valid, %handshake_cond_br0.outTrue_valid : i1
  sv.assign %_handshake_cond_br0_outTrue, %handshake_cond_br0.outTrue : i64
  sv.assign %_handshake_cond_br0_data_ready, %handshake_cond_br0.data_ready : i1
  sv.assign %_handshake_cond_br0_cond_ready, %handshake_cond_br0.cond_ready : i1
  %545 = sv.read_inout %_handshake_cond_br0_outTrue : !hw.inout<i64>
  %546 = sv.read_inout %_handshake_cond_br0_outTrue_valid : !hw.inout<i1>
  %547 = sv.read_inout %_handshake_fork15_in0_ready : !hw.inout<i1>
  %handshake_buffer92.in0_ready, %handshake_buffer92.out0, %handshake_buffer92.out0_valid = hw.instance "handshake_buffer92" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %545: i64, in0_valid: %546: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %547: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer92_out0_valid, %handshake_buffer92.out0_valid : i1
  sv.assign %_handshake_buffer92_out0, %handshake_buffer92.out0 : i64
  sv.assign %_handshake_buffer92_in0_ready, %handshake_buffer92.in0_ready : i1
  %548 = sv.read_inout %_handshake_cond_br0_outFalse : !hw.inout<i64>
  %549 = sv.read_inout %_handshake_cond_br0_outFalse_valid : !hw.inout<i1>
  %handshake_sink0.in0_ready = hw.instance "handshake_sink0" @handshake_sink_in_ui64(in0: %548: i64, in0_valid: %549: i1) -> (in0_ready: i1)
  sv.assign %_handshake_sink0_in0_ready, %handshake_sink0.in0_ready : i1
  %550 = sv.read_inout %_handshake_buffer92_out0 : !hw.inout<i64>
  %551 = sv.read_inout %_handshake_buffer92_out0_valid : !hw.inout<i1>
  %552 = sv.read_inout %_handshake_buffer93_in0_ready : !hw.inout<i1>
  %553 = sv.read_inout %_handshake_buffer94_in0_ready : !hw.inout<i1>
  %554 = sv.read_inout %_handshake_buffer95_in0_ready : !hw.inout<i1>
  %555 = sv.read_inout %_handshake_buffer96_in0_ready : !hw.inout<i1>
  %handshake_fork15.in0_ready, %handshake_fork15.out0, %handshake_fork15.out0_valid, %handshake_fork15.out1, %handshake_fork15.out1_valid, %handshake_fork15.out2, %handshake_fork15.out2_valid, %handshake_fork15.out3, %handshake_fork15.out3_valid = hw.instance "handshake_fork15" @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in0: %550: i64, in0_valid: %551: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %555: i1, out1_ready: %554: i1, out2_ready: %553: i1, out3_ready: %552: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1, out3: i64, out3_valid: i1)
  sv.assign %_handshake_fork15_out3_valid, %handshake_fork15.out3_valid : i1
  sv.assign %_handshake_fork15_out3, %handshake_fork15.out3 : i64
  sv.assign %_handshake_fork15_out2_valid, %handshake_fork15.out2_valid : i1
  sv.assign %_handshake_fork15_out2, %handshake_fork15.out2 : i64
  sv.assign %_handshake_fork15_out1_valid, %handshake_fork15.out1_valid : i1
  sv.assign %_handshake_fork15_out1, %handshake_fork15.out1 : i64
  sv.assign %_handshake_fork15_out0_valid, %handshake_fork15.out0_valid : i1
  sv.assign %_handshake_fork15_out0, %handshake_fork15.out0 : i64
  sv.assign %_handshake_fork15_in0_ready, %handshake_fork15.in0_ready : i1
  %556 = sv.read_inout %_handshake_fork15_out3 : !hw.inout<i64>
  %557 = sv.read_inout %_handshake_fork15_out3_valid : !hw.inout<i1>
  %558 = sv.read_inout %_handshake_store6_addrIn0_ready : !hw.inout<i1>
  %handshake_buffer93.in0_ready, %handshake_buffer93.out0, %handshake_buffer93.out0_valid = hw.instance "handshake_buffer93" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %556: i64, in0_valid: %557: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %558: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer93_out0_valid, %handshake_buffer93.out0_valid : i1
  sv.assign %_handshake_buffer93_out0, %handshake_buffer93.out0 : i64
  sv.assign %_handshake_buffer93_in0_ready, %handshake_buffer93.in0_ready : i1
  %559 = sv.read_inout %_handshake_fork15_out2 : !hw.inout<i64>
  %560 = sv.read_inout %_handshake_fork15_out2_valid : !hw.inout<i1>
  %561 = sv.read_inout %_handshake_load1_addrIn0_ready : !hw.inout<i1>
  %handshake_buffer94.in0_ready, %handshake_buffer94.out0, %handshake_buffer94.out0_valid = hw.instance "handshake_buffer94" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %559: i64, in0_valid: %560: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %561: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer94_out0_valid, %handshake_buffer94.out0_valid : i1
  sv.assign %_handshake_buffer94_out0, %handshake_buffer94.out0 : i64
  sv.assign %_handshake_buffer94_in0_ready, %handshake_buffer94.in0_ready : i1
  %562 = sv.read_inout %_handshake_fork15_out1 : !hw.inout<i64>
  %563 = sv.read_inout %_handshake_fork15_out1_valid : !hw.inout<i1>
  %564 = sv.read_inout %_handshake_load0_addrIn0_ready : !hw.inout<i1>
  %handshake_buffer95.in0_ready, %handshake_buffer95.out0, %handshake_buffer95.out0_valid = hw.instance "handshake_buffer95" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %562: i64, in0_valid: %563: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %564: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer95_out0_valid, %handshake_buffer95.out0_valid : i1
  sv.assign %_handshake_buffer95_out0, %handshake_buffer95.out0 : i64
  sv.assign %_handshake_buffer95_in0_ready, %handshake_buffer95.in0_ready : i1
  %565 = sv.read_inout %_handshake_fork15_out0 : !hw.inout<i64>
  %566 = sv.read_inout %_handshake_fork15_out0_valid : !hw.inout<i1>
  %567 = sv.read_inout %_arith_addi1_in0_ready : !hw.inout<i1>
  %handshake_buffer96.in0_ready, %handshake_buffer96.out0, %handshake_buffer96.out0_valid = hw.instance "handshake_buffer96" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %565: i64, in0_valid: %566: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %567: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer96_out0_valid, %handshake_buffer96.out0_valid : i1
  sv.assign %_handshake_buffer96_out0, %handshake_buffer96.out0 : i64
  sv.assign %_handshake_buffer96_in0_ready, %handshake_buffer96.in0_ready : i1
  %568 = sv.read_inout %_handshake_buffer84_out0 : !hw.inout<i64>
  %569 = sv.read_inout %_handshake_buffer84_out0_valid : !hw.inout<i1>
  %570 = sv.read_inout %_handshake_buffer89_out0 : !hw.inout<i1>
  %571 = sv.read_inout %_handshake_buffer89_out0_valid : !hw.inout<i1>
  %572 = sv.read_inout %_handshake_buffer97_in0_ready : !hw.inout<i1>
  %573 = sv.read_inout %_handshake_sink1_in0_ready : !hw.inout<i1>
  %handshake_cond_br1.cond_ready, %handshake_cond_br1.data_ready, %handshake_cond_br1.outTrue, %handshake_cond_br1.outTrue_valid, %handshake_cond_br1.outFalse, %handshake_cond_br1.outFalse_valid = hw.instance "handshake_cond_br1" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %570: i1, cond_valid: %571: i1, data: %568: i64, data_valid: %569: i1, outTrue_ready: %572: i1, outFalse_ready: %573: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
  sv.assign %_handshake_cond_br1_outFalse_valid, %handshake_cond_br1.outFalse_valid : i1
  sv.assign %_handshake_cond_br1_outFalse, %handshake_cond_br1.outFalse : i64
  sv.assign %_handshake_cond_br1_outTrue_valid, %handshake_cond_br1.outTrue_valid : i1
  sv.assign %_handshake_cond_br1_outTrue, %handshake_cond_br1.outTrue : i64
  sv.assign %_handshake_cond_br1_data_ready, %handshake_cond_br1.data_ready : i1
  sv.assign %_handshake_cond_br1_cond_ready, %handshake_cond_br1.cond_ready : i1
  %574 = sv.read_inout %_handshake_mux2_in1_ready : !hw.inout<i1>
  %575 = sv.read_inout %_handshake_cond_br1_outTrue : !hw.inout<i64>
  %576 = sv.read_inout %_handshake_cond_br1_outTrue_valid : !hw.inout<i1>
  %handshake_buffer97.in0_ready, %handshake_buffer97.out0, %handshake_buffer97.out0_valid = hw.instance "handshake_buffer97" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %575: i64, in0_valid: %576: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %574: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer97_out0_valid, %handshake_buffer97.out0_valid : i1
  sv.assign %_handshake_buffer97_out0, %handshake_buffer97.out0 : i64
  sv.assign %_handshake_buffer97_in0_ready, %handshake_buffer97.in0_ready : i1
  %577 = sv.read_inout %_handshake_cond_br1_outFalse : !hw.inout<i64>
  %578 = sv.read_inout %_handshake_cond_br1_outFalse_valid : !hw.inout<i1>
  %handshake_sink1.in0_ready = hw.instance "handshake_sink1" @handshake_sink_in_ui64(in0: %577: i64, in0_valid: %578: i1) -> (in0_ready: i1)
  sv.assign %_handshake_sink1_in0_ready, %handshake_sink1.in0_ready : i1
  %579 = sv.read_inout %_handshake_buffer86_out0 : !hw.inout<i64>
  %580 = sv.read_inout %_handshake_buffer86_out0_valid : !hw.inout<i1>
  %581 = sv.read_inout %_handshake_buffer90_out0 : !hw.inout<i1>
  %582 = sv.read_inout %_handshake_buffer90_out0_valid : !hw.inout<i1>
  %583 = sv.read_inout %_handshake_buffer98_in0_ready : !hw.inout<i1>
  %584 = sv.read_inout %_handshake_sink2_in0_ready : !hw.inout<i1>
  %handshake_cond_br2.cond_ready, %handshake_cond_br2.data_ready, %handshake_cond_br2.outTrue, %handshake_cond_br2.outTrue_valid, %handshake_cond_br2.outFalse, %handshake_cond_br2.outFalse_valid = hw.instance "handshake_cond_br2" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %581: i1, cond_valid: %582: i1, data: %579: i64, data_valid: %580: i1, outTrue_ready: %583: i1, outFalse_ready: %584: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1)
  sv.assign %_handshake_cond_br2_outFalse_valid, %handshake_cond_br2.outFalse_valid : i1
  sv.assign %_handshake_cond_br2_outFalse, %handshake_cond_br2.outFalse : i64
  sv.assign %_handshake_cond_br2_outTrue_valid, %handshake_cond_br2.outTrue_valid : i1
  sv.assign %_handshake_cond_br2_outTrue, %handshake_cond_br2.outTrue : i64
  sv.assign %_handshake_cond_br2_data_ready, %handshake_cond_br2.data_ready : i1
  sv.assign %_handshake_cond_br2_cond_ready, %handshake_cond_br2.cond_ready : i1
  %585 = sv.read_inout %_handshake_cond_br2_outTrue : !hw.inout<i64>
  %586 = sv.read_inout %_handshake_cond_br2_outTrue_valid : !hw.inout<i1>
  %587 = sv.read_inout %_handshake_fork16_in0_ready : !hw.inout<i1>
  %handshake_buffer98.in0_ready, %handshake_buffer98.out0, %handshake_buffer98.out0_valid = hw.instance "handshake_buffer98" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %585: i64, in0_valid: %586: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %587: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer98_out0_valid, %handshake_buffer98.out0_valid : i1
  sv.assign %_handshake_buffer98_out0, %handshake_buffer98.out0 : i64
  sv.assign %_handshake_buffer98_in0_ready, %handshake_buffer98.in0_ready : i1
  %588 = sv.read_inout %_handshake_cond_br2_outFalse : !hw.inout<i64>
  %589 = sv.read_inout %_handshake_cond_br2_outFalse_valid : !hw.inout<i1>
  %handshake_sink2.in0_ready = hw.instance "handshake_sink2" @handshake_sink_in_ui64(in0: %588: i64, in0_valid: %589: i1) -> (in0_ready: i1)
  sv.assign %_handshake_sink2_in0_ready, %handshake_sink2.in0_ready : i1
  %590 = sv.read_inout %_handshake_buffer98_out0 : !hw.inout<i64>
  %591 = sv.read_inout %_handshake_buffer98_out0_valid : !hw.inout<i1>
  %592 = sv.read_inout %_handshake_buffer99_in0_ready : !hw.inout<i1>
  %593 = sv.read_inout %_handshake_buffer100_in0_ready : !hw.inout<i1>
  %handshake_fork16.in0_ready, %handshake_fork16.out0, %handshake_fork16.out0_valid, %handshake_fork16.out1, %handshake_fork16.out1_valid = hw.instance "handshake_fork16" @handshake_fork_in_ui64_out_ui64_ui64(in0: %590: i64, in0_valid: %591: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %593: i1, out1_ready: %592: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1)
  sv.assign %_handshake_fork16_out1_valid, %handshake_fork16.out1_valid : i1
  sv.assign %_handshake_fork16_out1, %handshake_fork16.out1 : i64
  sv.assign %_handshake_fork16_out0_valid, %handshake_fork16.out0_valid : i1
  sv.assign %_handshake_fork16_out0, %handshake_fork16.out0 : i64
  sv.assign %_handshake_fork16_in0_ready, %handshake_fork16.in0_ready : i1
  %594 = sv.read_inout %_handshake_fork16_out1 : !hw.inout<i64>
  %595 = sv.read_inout %_handshake_fork16_out1_valid : !hw.inout<i1>
  %596 = sv.read_inout %_arith_addi1_in1_ready : !hw.inout<i1>
  %handshake_buffer99.in0_ready, %handshake_buffer99.out0, %handshake_buffer99.out0_valid = hw.instance "handshake_buffer99" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %594: i64, in0_valid: %595: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %596: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer99_out0_valid, %handshake_buffer99.out0_valid : i1
  sv.assign %_handshake_buffer99_out0, %handshake_buffer99.out0 : i64
  sv.assign %_handshake_buffer99_in0_ready, %handshake_buffer99.in0_ready : i1
  %597 = sv.read_inout %_handshake_mux3_in1_ready : !hw.inout<i1>
  %598 = sv.read_inout %_handshake_fork16_out0 : !hw.inout<i64>
  %599 = sv.read_inout %_handshake_fork16_out0_valid : !hw.inout<i1>
  %handshake_buffer100.in0_ready, %handshake_buffer100.out0, %handshake_buffer100.out0_valid = hw.instance "handshake_buffer100" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %598: i64, in0_valid: %599: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %597: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer100_out0_valid, %handshake_buffer100.out0_valid : i1
  sv.assign %_handshake_buffer100_out0, %handshake_buffer100.out0 : i64
  sv.assign %_handshake_buffer100_in0_ready, %handshake_buffer100.in0_ready : i1
  %600 = sv.read_inout %_handshake_buffer79_out0 : !hw.inout<i0>
  %601 = sv.read_inout %_handshake_buffer79_out0_valid : !hw.inout<i1>
  %602 = sv.read_inout %_handshake_buffer91_out0 : !hw.inout<i1>
  %603 = sv.read_inout %_handshake_buffer91_out0_valid : !hw.inout<i1>
  %604 = sv.read_inout %_handshake_buffer101_in0_ready : !hw.inout<i1>
  %605 = sv.read_inout %_handshake_buffer102_in0_ready : !hw.inout<i1>
  %handshake_cond_br3.cond_ready, %handshake_cond_br3.data_ready, %handshake_cond_br3.outTrue, %handshake_cond_br3.outTrue_valid, %handshake_cond_br3.outFalse, %handshake_cond_br3.outFalse_valid = hw.instance "handshake_cond_br3" @handshake_cond_br_in_ui1_2ins_2outs_ctrl(cond: %602: i1, cond_valid: %603: i1, data: %600: i0, data_valid: %601: i1, outTrue_ready: %605: i1, outFalse_ready: %604: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i0, outTrue_valid: i1, outFalse: i0, outFalse_valid: i1)
  sv.assign %_handshake_cond_br3_outFalse_valid, %handshake_cond_br3.outFalse_valid : i1
  sv.assign %_handshake_cond_br3_outFalse, %handshake_cond_br3.outFalse : i0
  sv.assign %_handshake_cond_br3_outTrue_valid, %handshake_cond_br3.outTrue_valid : i1
  sv.assign %_handshake_cond_br3_outTrue, %handshake_cond_br3.outTrue : i0
  sv.assign %_handshake_cond_br3_data_ready, %handshake_cond_br3.data_ready : i1
  sv.assign %_handshake_cond_br3_cond_ready, %handshake_cond_br3.cond_ready : i1
  %606 = sv.read_inout %_handshake_cond_br3_outFalse : !hw.inout<i0>
  %607 = sv.read_inout %_handshake_cond_br3_outFalse_valid : !hw.inout<i1>
  %handshake_buffer101.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid = hw.instance "handshake_buffer101" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %606: i0, in0_valid: %607: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %out0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer101_in0_ready, %handshake_buffer101.in0_ready : i1
  %608 = sv.read_inout %_handshake_cond_br3_outTrue : !hw.inout<i0>
  %609 = sv.read_inout %_handshake_cond_br3_outTrue_valid : !hw.inout<i1>
  %610 = sv.read_inout %_handshake_fork17_in0_ready : !hw.inout<i1>
  %handshake_buffer102.in0_ready, %handshake_buffer102.out0, %handshake_buffer102.out0_valid = hw.instance "handshake_buffer102" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %608: i0, in0_valid: %609: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %610: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer102_out0_valid, %handshake_buffer102.out0_valid : i1
  sv.assign %_handshake_buffer102_out0, %handshake_buffer102.out0 : i0
  sv.assign %_handshake_buffer102_in0_ready, %handshake_buffer102.in0_ready : i1
  %611 = sv.read_inout %_handshake_buffer102_out0 : !hw.inout<i0>
  %612 = sv.read_inout %_handshake_buffer102_out0_valid : !hw.inout<i1>
  %613 = sv.read_inout %_handshake_buffer103_in0_ready : !hw.inout<i1>
  %614 = sv.read_inout %_handshake_buffer104_in0_ready : !hw.inout<i1>
  %615 = sv.read_inout %_handshake_buffer105_in0_ready : !hw.inout<i1>
  %616 = sv.read_inout %_handshake_buffer106_in0_ready : !hw.inout<i1>
  %handshake_fork17.in0_ready, %handshake_fork17.out0, %handshake_fork17.out0_valid, %handshake_fork17.out1, %handshake_fork17.out1_valid, %handshake_fork17.out2, %handshake_fork17.out2_valid, %handshake_fork17.out3, %handshake_fork17.out3_valid = hw.instance "handshake_fork17" @handshake_fork_1ins_4outs_ctrl(in0: %611: i0, in0_valid: %612: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %616: i1, out1_ready: %615: i1, out2_ready: %614: i1, out3_ready: %613: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1)
  sv.assign %_handshake_fork17_out3_valid, %handshake_fork17.out3_valid : i1
  sv.assign %_handshake_fork17_out3, %handshake_fork17.out3 : i0
  sv.assign %_handshake_fork17_out2_valid, %handshake_fork17.out2_valid : i1
  sv.assign %_handshake_fork17_out2, %handshake_fork17.out2 : i0
  sv.assign %_handshake_fork17_out1_valid, %handshake_fork17.out1_valid : i1
  sv.assign %_handshake_fork17_out1, %handshake_fork17.out1 : i0
  sv.assign %_handshake_fork17_out0_valid, %handshake_fork17.out0_valid : i1
  sv.assign %_handshake_fork17_out0, %handshake_fork17.out0 : i0
  sv.assign %_handshake_fork17_in0_ready, %handshake_fork17.in0_ready : i1
  %617 = sv.read_inout %_handshake_fork17_out3 : !hw.inout<i0>
  %618 = sv.read_inout %_handshake_fork17_out3_valid : !hw.inout<i1>
  %619 = sv.read_inout %_handshake_load0_ctrl_ready : !hw.inout<i1>
  %handshake_buffer103.in0_ready, %handshake_buffer103.out0, %handshake_buffer103.out0_valid = hw.instance "handshake_buffer103" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %617: i0, in0_valid: %618: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %619: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer103_out0_valid, %handshake_buffer103.out0_valid : i1
  sv.assign %_handshake_buffer103_out0, %handshake_buffer103.out0 : i0
  sv.assign %_handshake_buffer103_in0_ready, %handshake_buffer103.in0_ready : i1
  %620 = sv.read_inout %_handshake_fork17_out2 : !hw.inout<i0>
  %621 = sv.read_inout %_handshake_fork17_out2_valid : !hw.inout<i1>
  %622 = sv.read_inout %_handshake_load1_ctrl_ready : !hw.inout<i1>
  %handshake_buffer104.in0_ready, %handshake_buffer104.out0, %handshake_buffer104.out0_valid = hw.instance "handshake_buffer104" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %620: i0, in0_valid: %621: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %622: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer104_out0_valid, %handshake_buffer104.out0_valid : i1
  sv.assign %_handshake_buffer104_out0, %handshake_buffer104.out0 : i0
  sv.assign %_handshake_buffer104_in0_ready, %handshake_buffer104.in0_ready : i1
  %623 = sv.read_inout %_handshake_fork17_out1 : !hw.inout<i0>
  %624 = sv.read_inout %_handshake_fork17_out1_valid : !hw.inout<i1>
  %625 = sv.read_inout %_handshake_join5_in0_ready : !hw.inout<i1>
  %handshake_buffer105.in0_ready, %handshake_buffer105.out0, %handshake_buffer105.out0_valid = hw.instance "handshake_buffer105" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %623: i0, in0_valid: %624: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %625: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer105_out0_valid, %handshake_buffer105.out0_valid : i1
  sv.assign %_handshake_buffer105_out0, %handshake_buffer105.out0 : i0
  sv.assign %_handshake_buffer105_in0_ready, %handshake_buffer105.in0_ready : i1
  %626 = sv.read_inout %_handshake_fork17_out0 : !hw.inout<i0>
  %627 = sv.read_inout %_handshake_fork17_out0_valid : !hw.inout<i1>
  %628 = sv.read_inout %_handshake_store6_ctrl_ready : !hw.inout<i1>
  %handshake_buffer106.in0_ready, %handshake_buffer106.out0, %handshake_buffer106.out0_valid = hw.instance "handshake_buffer106" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %626: i0, in0_valid: %627: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %628: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer106_out0_valid, %handshake_buffer106.out0_valid : i1
  sv.assign %_handshake_buffer106_out0, %handshake_buffer106.out0 : i0
  sv.assign %_handshake_buffer106_in0_ready, %handshake_buffer106.in0_ready : i1
  %629 = sv.read_inout %_handshake_buffer15_out0 : !hw.inout<i0>
  %630 = sv.read_inout %_handshake_buffer15_out0_valid : !hw.inout<i1>
  %631 = sv.read_inout %_handshake_buffer16_out0 : !hw.inout<i0>
  %632 = sv.read_inout %_handshake_buffer16_out0_valid : !hw.inout<i1>
  %633 = sv.read_inout %_handshake_buffer26_out0 : !hw.inout<i0>
  %634 = sv.read_inout %_handshake_buffer26_out0_valid : !hw.inout<i1>
  %635 = sv.read_inout %_handshake_buffer105_out0 : !hw.inout<i0>
  %636 = sv.read_inout %_handshake_buffer105_out0_valid : !hw.inout<i1>
  %637 = sv.read_inout %_handshake_buffer107_in0_ready : !hw.inout<i1>
  %handshake_join5.in0_ready, %handshake_join5.in1_ready, %handshake_join5.in2_ready, %handshake_join5.in3_ready, %handshake_join5.out0, %handshake_join5.out0_valid = hw.instance "handshake_join5" @handshake_join_4ins_1outs_ctrl(in0: %635: i0, in0_valid: %636: i1, in1: %633: i0, in1_valid: %634: i1, in2: %631: i0, in2_valid: %632: i1, in3: %629: i0, in3_valid: %630: i1, out0_ready: %637: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_join5_out0_valid, %handshake_join5.out0_valid : i1
  sv.assign %_handshake_join5_out0, %handshake_join5.out0 : i0
  sv.assign %_handshake_join5_in3_ready, %handshake_join5.in3_ready : i1
  sv.assign %_handshake_join5_in2_ready, %handshake_join5.in2_ready : i1
  sv.assign %_handshake_join5_in1_ready, %handshake_join5.in1_ready : i1
  sv.assign %_handshake_join5_in0_ready, %handshake_join5.in0_ready : i1
  %638 = sv.read_inout %_handshake_mux0_in1_ready : !hw.inout<i1>
  %639 = sv.read_inout %_handshake_join5_out0 : !hw.inout<i0>
  %640 = sv.read_inout %_handshake_join5_out0_valid : !hw.inout<i1>
  %handshake_buffer107.in0_ready, %handshake_buffer107.out0, %handshake_buffer107.out0_valid = hw.instance "handshake_buffer107" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %639: i0, in0_valid: %640: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %638: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1)
  sv.assign %_handshake_buffer107_out0_valid, %handshake_buffer107.out0_valid : i1
  sv.assign %_handshake_buffer107_out0, %handshake_buffer107.out0 : i0
  sv.assign %_handshake_buffer107_in0_ready, %handshake_buffer107.in0_ready : i1
  %641 = sv.read_inout %_handshake_buffer30_out0 : !hw.inout<i64>
  %642 = sv.read_inout %_handshake_buffer30_out0_valid : !hw.inout<i1>
  %643 = sv.read_inout %_handshake_buffer95_out0 : !hw.inout<i64>
  %644 = sv.read_inout %_handshake_buffer95_out0_valid : !hw.inout<i1>
  %645 = sv.read_inout %_handshake_buffer103_out0 : !hw.inout<i0>
  %646 = sv.read_inout %_handshake_buffer103_out0_valid : !hw.inout<i1>
  %647 = sv.read_inout %_handshake_buffer108_in0_ready : !hw.inout<i1>
  %648 = sv.read_inout %_handshake_buffer109_in0_ready : !hw.inout<i1>
  %handshake_load0.addrIn0_ready, %handshake_load0.dataFromMem_ready, %handshake_load0.ctrl_ready, %handshake_load0.dataOut, %handshake_load0.dataOut_valid, %handshake_load0.addrOut0, %handshake_load0.addrOut0_valid = hw.instance "handshake_load0" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %643: i64, addrIn0_valid: %644: i1, dataFromMem: %641: i64, dataFromMem_valid: %642: i1, ctrl: %645: i0, ctrl_valid: %646: i1, dataOut_ready: %648: i1, addrOut0_ready: %647: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  sv.assign %_handshake_load0_addrOut0_valid, %handshake_load0.addrOut0_valid : i1
  sv.assign %_handshake_load0_addrOut0, %handshake_load0.addrOut0 : i64
  sv.assign %_handshake_load0_dataOut_valid, %handshake_load0.dataOut_valid : i1
  sv.assign %_handshake_load0_dataOut, %handshake_load0.dataOut : i64
  sv.assign %_handshake_load0_ctrl_ready, %handshake_load0.ctrl_ready : i1
  sv.assign %_handshake_load0_dataFromMem_ready, %handshake_load0.dataFromMem_ready : i1
  sv.assign %_handshake_load0_addrIn0_ready, %handshake_load0.addrIn0_ready : i1
  %649 = sv.read_inout %_handshake_memory2_ldAddr0_ready : !hw.inout<i1>
  %650 = sv.read_inout %_handshake_load0_addrOut0 : !hw.inout<i64>
  %651 = sv.read_inout %_handshake_load0_addrOut0_valid : !hw.inout<i1>
  %handshake_buffer108.in0_ready, %handshake_buffer108.out0, %handshake_buffer108.out0_valid = hw.instance "handshake_buffer108" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %650: i64, in0_valid: %651: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %649: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer108_out0_valid, %handshake_buffer108.out0_valid : i1
  sv.assign %_handshake_buffer108_out0, %handshake_buffer108.out0 : i64
  sv.assign %_handshake_buffer108_in0_ready, %handshake_buffer108.in0_ready : i1
  %652 = sv.read_inout %_handshake_load0_dataOut : !hw.inout<i64>
  %653 = sv.read_inout %_handshake_load0_dataOut_valid : !hw.inout<i1>
  %654 = sv.read_inout %_arith_addi0_in0_ready : !hw.inout<i1>
  %handshake_buffer109.in0_ready, %handshake_buffer109.out0, %handshake_buffer109.out0_valid = hw.instance "handshake_buffer109" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %652: i64, in0_valid: %653: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %654: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer109_out0_valid, %handshake_buffer109.out0_valid : i1
  sv.assign %_handshake_buffer109_out0, %handshake_buffer109.out0 : i64
  sv.assign %_handshake_buffer109_in0_ready, %handshake_buffer109.in0_ready : i1
  %655 = sv.read_inout %_handshake_buffer20_out0 : !hw.inout<i64>
  %656 = sv.read_inout %_handshake_buffer20_out0_valid : !hw.inout<i1>
  %657 = sv.read_inout %_handshake_buffer94_out0 : !hw.inout<i64>
  %658 = sv.read_inout %_handshake_buffer94_out0_valid : !hw.inout<i1>
  %659 = sv.read_inout %_handshake_buffer104_out0 : !hw.inout<i0>
  %660 = sv.read_inout %_handshake_buffer104_out0_valid : !hw.inout<i1>
  %661 = sv.read_inout %_handshake_buffer110_in0_ready : !hw.inout<i1>
  %662 = sv.read_inout %_handshake_buffer111_in0_ready : !hw.inout<i1>
  %handshake_load1.addrIn0_ready, %handshake_load1.dataFromMem_ready, %handshake_load1.ctrl_ready, %handshake_load1.dataOut, %handshake_load1.dataOut_valid, %handshake_load1.addrOut0, %handshake_load1.addrOut0_valid = hw.instance "handshake_load1" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %657: i64, addrIn0_valid: %658: i1, dataFromMem: %655: i64, dataFromMem_valid: %656: i1, ctrl: %659: i0, ctrl_valid: %660: i1, dataOut_ready: %662: i1, addrOut0_ready: %661: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  sv.assign %_handshake_load1_addrOut0_valid, %handshake_load1.addrOut0_valid : i1
  sv.assign %_handshake_load1_addrOut0, %handshake_load1.addrOut0 : i64
  sv.assign %_handshake_load1_dataOut_valid, %handshake_load1.dataOut_valid : i1
  sv.assign %_handshake_load1_dataOut, %handshake_load1.dataOut : i64
  sv.assign %_handshake_load1_ctrl_ready, %handshake_load1.ctrl_ready : i1
  sv.assign %_handshake_load1_dataFromMem_ready, %handshake_load1.dataFromMem_ready : i1
  sv.assign %_handshake_load1_addrIn0_ready, %handshake_load1.addrIn0_ready : i1
  %663 = sv.read_inout %_handshake_memory1_ldAddr0_ready : !hw.inout<i1>
  %664 = sv.read_inout %_handshake_load1_addrOut0 : !hw.inout<i64>
  %665 = sv.read_inout %_handshake_load1_addrOut0_valid : !hw.inout<i1>
  %handshake_buffer110.in0_ready, %handshake_buffer110.out0, %handshake_buffer110.out0_valid = hw.instance "handshake_buffer110" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %664: i64, in0_valid: %665: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %663: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer110_out0_valid, %handshake_buffer110.out0_valid : i1
  sv.assign %_handshake_buffer110_out0, %handshake_buffer110.out0 : i64
  sv.assign %_handshake_buffer110_in0_ready, %handshake_buffer110.in0_ready : i1
  %666 = sv.read_inout %_handshake_load1_dataOut : !hw.inout<i64>
  %667 = sv.read_inout %_handshake_load1_dataOut_valid : !hw.inout<i1>
  %668 = sv.read_inout %_arith_addi0_in1_ready : !hw.inout<i1>
  %handshake_buffer111.in0_ready, %handshake_buffer111.out0, %handshake_buffer111.out0_valid = hw.instance "handshake_buffer111" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %666: i64, in0_valid: %667: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %668: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer111_out0_valid, %handshake_buffer111.out0_valid : i1
  sv.assign %_handshake_buffer111_out0, %handshake_buffer111.out0 : i64
  sv.assign %_handshake_buffer111_in0_ready, %handshake_buffer111.in0_ready : i1
  %669 = sv.read_inout %_handshake_buffer109_out0 : !hw.inout<i64>
  %670 = sv.read_inout %_handshake_buffer109_out0_valid : !hw.inout<i1>
  %671 = sv.read_inout %_handshake_buffer111_out0 : !hw.inout<i64>
  %672 = sv.read_inout %_handshake_buffer111_out0_valid : !hw.inout<i1>
  %673 = sv.read_inout %_handshake_buffer112_in0_ready : !hw.inout<i1>
  %arith_addi0.in0_ready, %arith_addi0.in1_ready, %arith_addi0.out0, %arith_addi0.out0_valid = hw.instance "arith_addi0" @arith_addi_in_ui64_ui64_out_ui64(in0: %669: i64, in0_valid: %670: i1, in1: %671: i64, in1_valid: %672: i1, out0_ready: %673: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_arith_addi0_out0_valid, %arith_addi0.out0_valid : i1
  sv.assign %_arith_addi0_out0, %arith_addi0.out0 : i64
  sv.assign %_arith_addi0_in1_ready, %arith_addi0.in1_ready : i1
  sv.assign %_arith_addi0_in0_ready, %arith_addi0.in0_ready : i1
  %674 = sv.read_inout %_arith_addi0_out0 : !hw.inout<i64>
  %675 = sv.read_inout %_arith_addi0_out0_valid : !hw.inout<i1>
  %676 = sv.read_inout %_handshake_store6_dataIn_ready : !hw.inout<i1>
  %handshake_buffer112.in0_ready, %handshake_buffer112.out0, %handshake_buffer112.out0_valid = hw.instance "handshake_buffer112" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %674: i64, in0_valid: %675: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %676: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer112_out0_valid, %handshake_buffer112.out0_valid : i1
  sv.assign %_handshake_buffer112_out0, %handshake_buffer112.out0 : i64
  sv.assign %_handshake_buffer112_in0_ready, %handshake_buffer112.in0_ready : i1
  %677 = sv.read_inout %_handshake_buffer93_out0 : !hw.inout<i64>
  %678 = sv.read_inout %_handshake_buffer93_out0_valid : !hw.inout<i1>
  %679 = sv.read_inout %_handshake_buffer106_out0 : !hw.inout<i0>
  %680 = sv.read_inout %_handshake_buffer106_out0_valid : !hw.inout<i1>
  %681 = sv.read_inout %_handshake_buffer112_out0 : !hw.inout<i64>
  %682 = sv.read_inout %_handshake_buffer112_out0_valid : !hw.inout<i1>
  %683 = sv.read_inout %_handshake_buffer113_in0_ready : !hw.inout<i1>
  %684 = sv.read_inout %_handshake_buffer114_in0_ready : !hw.inout<i1>
  %handshake_store6.addrIn0_ready, %handshake_store6.dataIn_ready, %handshake_store6.ctrl_ready, %handshake_store6.dataToMem, %handshake_store6.dataToMem_valid, %handshake_store6.addrOut0, %handshake_store6.addrOut0_valid = hw.instance "handshake_store6" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %677: i64, addrIn0_valid: %678: i1, dataIn: %681: i64, dataIn_valid: %682: i1, ctrl: %679: i0, ctrl_valid: %680: i1, dataToMem_ready: %684: i1, addrOut0_ready: %683: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1)
  sv.assign %_handshake_store6_addrOut0_valid, %handshake_store6.addrOut0_valid : i1
  sv.assign %_handshake_store6_addrOut0, %handshake_store6.addrOut0 : i64
  sv.assign %_handshake_store6_dataToMem_valid, %handshake_store6.dataToMem_valid : i1
  sv.assign %_handshake_store6_dataToMem, %handshake_store6.dataToMem : i64
  sv.assign %_handshake_store6_ctrl_ready, %handshake_store6.ctrl_ready : i1
  sv.assign %_handshake_store6_dataIn_ready, %handshake_store6.dataIn_ready : i1
  sv.assign %_handshake_store6_addrIn0_ready, %handshake_store6.addrIn0_ready : i1
  %685 = sv.read_inout %_handshake_memory0_stAddr0_ready : !hw.inout<i1>
  %686 = sv.read_inout %_handshake_store6_addrOut0 : !hw.inout<i64>
  %687 = sv.read_inout %_handshake_store6_addrOut0_valid : !hw.inout<i1>
  %handshake_buffer113.in0_ready, %handshake_buffer113.out0, %handshake_buffer113.out0_valid = hw.instance "handshake_buffer113" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %686: i64, in0_valid: %687: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %685: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer113_out0_valid, %handshake_buffer113.out0_valid : i1
  sv.assign %_handshake_buffer113_out0, %handshake_buffer113.out0 : i64
  sv.assign %_handshake_buffer113_in0_ready, %handshake_buffer113.in0_ready : i1
  %688 = sv.read_inout %_handshake_memory0_stData0_ready : !hw.inout<i1>
  %689 = sv.read_inout %_handshake_store6_dataToMem : !hw.inout<i64>
  %690 = sv.read_inout %_handshake_store6_dataToMem_valid : !hw.inout<i1>
  %handshake_buffer114.in0_ready, %handshake_buffer114.out0, %handshake_buffer114.out0_valid = hw.instance "handshake_buffer114" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %689: i64, in0_valid: %690: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %688: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer114_out0_valid, %handshake_buffer114.out0_valid : i1
  sv.assign %_handshake_buffer114_out0, %handshake_buffer114.out0 : i64
  sv.assign %_handshake_buffer114_in0_ready, %handshake_buffer114.in0_ready : i1
  %691 = sv.read_inout %_handshake_buffer96_out0 : !hw.inout<i64>
  %692 = sv.read_inout %_handshake_buffer96_out0_valid : !hw.inout<i1>
  %693 = sv.read_inout %_handshake_buffer99_out0 : !hw.inout<i64>
  %694 = sv.read_inout %_handshake_buffer99_out0_valid : !hw.inout<i1>
  %695 = sv.read_inout %_handshake_buffer115_in0_ready : !hw.inout<i1>
  %arith_addi1.in0_ready, %arith_addi1.in1_ready, %arith_addi1.out0, %arith_addi1.out0_valid = hw.instance "arith_addi1" @arith_addi_in_ui64_ui64_out_ui64(in0: %691: i64, in0_valid: %692: i1, in1: %693: i64, in1_valid: %694: i1, out0_ready: %695: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_arith_addi1_out0_valid, %arith_addi1.out0_valid : i1
  sv.assign %_arith_addi1_out0, %arith_addi1.out0 : i64
  sv.assign %_arith_addi1_in1_ready, %arith_addi1.in1_ready : i1
  sv.assign %_arith_addi1_in0_ready, %arith_addi1.in0_ready : i1
  %696 = sv.read_inout %_handshake_mux1_in1_ready : !hw.inout<i1>
  %697 = sv.read_inout %_arith_addi1_out0 : !hw.inout<i64>
  %698 = sv.read_inout %_arith_addi1_out0_valid : !hw.inout<i1>
  %handshake_buffer115.in0_ready, %handshake_buffer115.out0, %handshake_buffer115.out0_valid = hw.instance "handshake_buffer115" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %697: i64, in0_valid: %698: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %696: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1)
  sv.assign %_handshake_buffer115_out0_valid, %handshake_buffer115.out0_valid : i1
  sv.assign %_handshake_buffer115_out0, %handshake_buffer115.out0 : i64
  sv.assign %_handshake_buffer115_in0_ready, %handshake_buffer115.in0_ready : i1
  hw.output %handshake_buffer0.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid : i1, i0, i1
}

// -----// IR Dump After ExportVerilog (export-verilog) //----- //
module {
  hw.module @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
    %ready1_reg = sv.reg sym @ready1_reg {hw.verilogName = "ready1_reg"} : !hw.inout<i1> 
    %ready0_reg = sv.reg sym @ready0_reg {hw.verilogName = "ready0_reg"} : !hw.inout<i1> 
    %true = hw.constant true
    %valid0_reg = sv.reg sym @valid0_reg {hw.verilogName = "valid0_reg"} : !hw.inout<i1> 
    %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %3 = comb.xor %2, %true : i1
    %4 = comb.or %1, %3 : i1
    %5 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %5, %4 : i1
    %c0_i0 = hw.constant 0 : i0
    %c0_i0_0 = hw.constant 0 : i0
    %c0_i0_1 = hw.constant 0 : i0
    %valid1_reg = sv.reg sym @valid1_reg {hw.verilogName = "valid1_reg"} : !hw.inout<i1> 
    %6 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %7 = comb.xor %6, %true : i1
    %8 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %9 = comb.xor %8, %true : i1
    %10 = comb.or %7, %9 : i1
    %11 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %11, %10 : i1
    %c0_i0_2 = hw.constant 0 : i0
    %c0_i0_3 = hw.constant 0 : i0
    %12 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %13 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %14 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %15 = comb.mux %13, %14, %12 : i1
    %c0_i0_4 = hw.constant 0 : i0
    %c0_i0_5 = hw.constant 0 : i0
    sv.alwaysff(posedge %clock) {
      %true_7 = hw.constant true
      %c0_i0_8 = hw.constant 0 : i0
      %c0_i0_9 = hw.constant 0 : i0
      %17 = sv.read_inout %11 : !hw.inout<i1>
      %18 = comb.xor %17, %true_7 : i1
      %true_10 = hw.constant true
      %19 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %20 = comb.xor %19, %true_10 : i1
      %21 = comb.and %18, %20 : i1
      %22 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %23 = sv.read_inout %11 : !hw.inout<i1>
      %24 = comb.and %23, %22 : i1
      %c0_i0_11 = hw.constant 0 : i0
      %c0_i0_12 = hw.constant 0 : i0
      %25 = comb.xor %out0_ready, %true_7 : i1
      %true_13 = hw.constant true
      %26 = sv.read_inout %ready1_reg : !hw.inout<i1>
      %27 = comb.xor %26, %true_13 : i1
      %28 = comb.and %25, %27 : i1
      %29 = sv.read_inout %ready1_reg : !hw.inout<i1>
      %30 = comb.and %out0_ready, %29 : i1
      %c0_i0_14 = hw.constant 0 : i0
      %31 = sv.read_inout %valid0_reg : !hw.inout<i1>
      %32 = sv.read_inout %5 : !hw.inout<i1>
      %33 = comb.mux %32, %in0_valid, %31 : i1
      sv.passign %valid0_reg, %33 : i1
      %c0_i0_15 = hw.constant 0 : i0
      %34 = comb.xor %24, %true_7 : i1
      %35 = sv.read_inout %valid0_reg : !hw.inout<i1>
      %36 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %37 = comb.mux %21, %35, %36 : i1
      %38 = comb.and %34, %37 : i1
      sv.passign %ready0_reg, %38 : i1
      %c0_i0_16 = hw.constant 0 : i0
      %c0_i0_17 = hw.constant 0 : i0
      %39 = sv.read_inout %valid0_reg : !hw.inout<i1>
      %40 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %41 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %42 = comb.mux %41, %40, %39 : i1
      %43 = sv.read_inout %valid1_reg : !hw.inout<i1>
      %44 = sv.read_inout %11 : !hw.inout<i1>
      %45 = comb.mux %44, %42, %43 : i1
      sv.passign %valid1_reg, %45 : i1
      %c0_i0_18 = hw.constant 0 : i0
      %c0_i0_19 = hw.constant 0 : i0
      %46 = comb.xor %30, %true_7 : i1
      %47 = sv.read_inout %valid1_reg : !hw.inout<i1>
      %48 = sv.read_inout %ready1_reg : !hw.inout<i1>
      %49 = comb.mux %28, %47, %48 : i1
      %50 = comb.and %46, %49 : i1
      sv.passign %ready1_reg, %50 : i1
      %c0_i0_20 = hw.constant 0 : i0
      %c0_i0_21 = hw.constant 0 : i0
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      %c0_i0_7 = hw.constant 0 : i0
      sv.passign %valid0_reg, %false : i1
      sv.passign %ready0_reg, %false : i1
      sv.passign %valid1_reg, %false : i1
      sv.passign %ready1_reg, %false : i1
    }
    %c0_i0_6 = hw.constant 0 : i0
    %16 = sv.read_inout %5 : !hw.inout<i1>
    hw.output %16, %c0_i0_6, %15 : i1, i0, i1
  }
  hw.module @handshake_fork_1ins_14outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, in %out5_ready : i1, in %out6_ready : i1, in %out7_ready : i1, in %out8_ready : i1, in %out9_ready : i1, in %out10_ready : i1, in %out11_ready : i1, in %out12_ready : i1, in %out13_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1, out out4 : i0, out out4_valid : i1, out out5 : i0, out out5_valid : i1, out out6 : i0, out out6_valid : i1, out out7 : i0, out out7_valid : i1, out out8 : i0, out out8_valid : i1, out out9 : i0, out out9_valid : i1, out out10 : i0, out out10_valid : i1, out out11 : i0, out out11_valid : i1, out out12 : i0, out out12_valid : i1, out out13 : i0, out out13_valid : i1) {
    %allDone = sv.wire {hw.verilogName = "allDone"} : !hw.inout<i1>
    %done13 = sv.wire {hw.verilogName = "done13"} : !hw.inout<i1>
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 {hw.verilogName = "emitted_0"} : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %3, %2 : i1
    %4 = sv.read_inout %3 : !hw.inout<i1>
    %5 = comb.and %out0_ready, %4 : i1
    %6 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %7 = comb.or %5, %6 : i1
    %done0 = sv.wire {hw.verilogName = "done0"} : !hw.inout<i1>
    sv.assign %done0, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 {hw.verilogName = "emitted_1"} : !hw.inout<i1> 
    %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %9 = comb.xor %8, %true : i1
    %10 = comb.and %9, %in0_valid : i1
    %11 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %11, %10 : i1
    %12 = sv.read_inout %11 : !hw.inout<i1>
    %13 = comb.and %out1_ready, %12 : i1
    %14 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %15 = comb.or %13, %14 : i1
    %done1 = sv.wire {hw.verilogName = "done1"} : !hw.inout<i1>
    sv.assign %done1, %15 : i1
    %emitted_2 = sv.reg sym @emitted_2 {hw.verilogName = "emitted_2"} : !hw.inout<i1> 
    %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %17 = comb.xor %16, %true : i1
    %18 = comb.and %17, %in0_valid : i1
    %19 = sv.wire {hw.verilogName = "_GEN_1"} : !hw.inout<i1>
    sv.assign %19, %18 : i1
    %20 = sv.read_inout %19 : !hw.inout<i1>
    %21 = comb.and %out2_ready, %20 : i1
    %22 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %23 = comb.or %21, %22 : i1
    %done2 = sv.wire {hw.verilogName = "done2"} : !hw.inout<i1>
    sv.assign %done2, %23 : i1
    %emitted_3 = sv.reg sym @emitted_3 {hw.verilogName = "emitted_3"} : !hw.inout<i1> 
    %24 = sv.read_inout %emitted_3 : !hw.inout<i1>
    %25 = comb.xor %24, %true : i1
    %26 = comb.and %25, %in0_valid : i1
    %27 = sv.wire {hw.verilogName = "_GEN_2"} : !hw.inout<i1>
    sv.assign %27, %26 : i1
    %28 = sv.read_inout %27 : !hw.inout<i1>
    %29 = comb.and %out3_ready, %28 : i1
    %30 = sv.read_inout %emitted_3 : !hw.inout<i1>
    %31 = comb.or %29, %30 : i1
    %done3 = sv.wire {hw.verilogName = "done3"} : !hw.inout<i1>
    sv.assign %done3, %31 : i1
    %emitted_4 = sv.reg sym @emitted_4 {hw.verilogName = "emitted_4"} : !hw.inout<i1> 
    %32 = sv.read_inout %emitted_4 : !hw.inout<i1>
    %33 = comb.xor %32, %true : i1
    %34 = comb.and %33, %in0_valid : i1
    %35 = sv.wire {hw.verilogName = "_GEN_3"} : !hw.inout<i1>
    sv.assign %35, %34 : i1
    %36 = sv.read_inout %35 : !hw.inout<i1>
    %37 = comb.and %out4_ready, %36 : i1
    %38 = sv.read_inout %emitted_4 : !hw.inout<i1>
    %39 = comb.or %37, %38 : i1
    %done4 = sv.wire {hw.verilogName = "done4"} : !hw.inout<i1>
    sv.assign %done4, %39 : i1
    %emitted_5 = sv.reg sym @emitted_5 {hw.verilogName = "emitted_5"} : !hw.inout<i1> 
    %40 = sv.read_inout %emitted_5 : !hw.inout<i1>
    %41 = comb.xor %40, %true : i1
    %42 = comb.and %41, %in0_valid : i1
    %43 = sv.wire {hw.verilogName = "_GEN_4"} : !hw.inout<i1>
    sv.assign %43, %42 : i1
    %44 = sv.read_inout %43 : !hw.inout<i1>
    %45 = comb.and %out5_ready, %44 : i1
    %46 = sv.read_inout %emitted_5 : !hw.inout<i1>
    %47 = comb.or %45, %46 : i1
    %done5 = sv.wire {hw.verilogName = "done5"} : !hw.inout<i1>
    sv.assign %done5, %47 : i1
    %emitted_6 = sv.reg sym @emitted_6 {hw.verilogName = "emitted_6"} : !hw.inout<i1> 
    %48 = sv.read_inout %emitted_6 : !hw.inout<i1>
    %49 = comb.xor %48, %true : i1
    %50 = comb.and %49, %in0_valid : i1
    %51 = sv.wire {hw.verilogName = "_GEN_5"} : !hw.inout<i1>
    sv.assign %51, %50 : i1
    %52 = sv.read_inout %51 : !hw.inout<i1>
    %53 = comb.and %out6_ready, %52 : i1
    %54 = sv.read_inout %emitted_6 : !hw.inout<i1>
    %55 = comb.or %53, %54 : i1
    %done6 = sv.wire {hw.verilogName = "done6"} : !hw.inout<i1>
    sv.assign %done6, %55 : i1
    %emitted_7 = sv.reg sym @emitted_7 {hw.verilogName = "emitted_7"} : !hw.inout<i1> 
    %56 = sv.read_inout %emitted_7 : !hw.inout<i1>
    %57 = comb.xor %56, %true : i1
    %58 = comb.and %57, %in0_valid : i1
    %59 = sv.wire {hw.verilogName = "_GEN_6"} : !hw.inout<i1>
    sv.assign %59, %58 : i1
    %60 = sv.read_inout %59 : !hw.inout<i1>
    %61 = comb.and %out7_ready, %60 : i1
    %62 = sv.read_inout %emitted_7 : !hw.inout<i1>
    %63 = comb.or %61, %62 : i1
    %done7 = sv.wire {hw.verilogName = "done7"} : !hw.inout<i1>
    sv.assign %done7, %63 : i1
    %emitted_8 = sv.reg sym @emitted_8 {hw.verilogName = "emitted_8"} : !hw.inout<i1> 
    %64 = sv.read_inout %emitted_8 : !hw.inout<i1>
    %65 = comb.xor %64, %true : i1
    %66 = comb.and %65, %in0_valid : i1
    %67 = sv.wire {hw.verilogName = "_GEN_7"} : !hw.inout<i1>
    sv.assign %67, %66 : i1
    %68 = sv.read_inout %67 : !hw.inout<i1>
    %69 = comb.and %out8_ready, %68 : i1
    %70 = sv.read_inout %emitted_8 : !hw.inout<i1>
    %71 = comb.or %69, %70 : i1
    %done8 = sv.wire {hw.verilogName = "done8"} : !hw.inout<i1>
    sv.assign %done8, %71 : i1
    %emitted_9 = sv.reg sym @emitted_9 {hw.verilogName = "emitted_9"} : !hw.inout<i1> 
    %72 = sv.read_inout %emitted_9 : !hw.inout<i1>
    %73 = comb.xor %72, %true : i1
    %74 = comb.and %73, %in0_valid : i1
    %75 = sv.wire {hw.verilogName = "_GEN_8"} : !hw.inout<i1>
    sv.assign %75, %74 : i1
    %76 = sv.read_inout %75 : !hw.inout<i1>
    %77 = comb.and %out9_ready, %76 : i1
    %78 = sv.read_inout %emitted_9 : !hw.inout<i1>
    %79 = comb.or %77, %78 : i1
    %done9 = sv.wire {hw.verilogName = "done9"} : !hw.inout<i1>
    sv.assign %done9, %79 : i1
    %emitted_10 = sv.reg sym @emitted_10 {hw.verilogName = "emitted_10"} : !hw.inout<i1> 
    %80 = sv.read_inout %emitted_10 : !hw.inout<i1>
    %81 = comb.xor %80, %true : i1
    %82 = comb.and %81, %in0_valid : i1
    %83 = sv.wire {hw.verilogName = "_GEN_9"} : !hw.inout<i1>
    sv.assign %83, %82 : i1
    %84 = sv.read_inout %83 : !hw.inout<i1>
    %85 = comb.and %out10_ready, %84 : i1
    %86 = sv.read_inout %emitted_10 : !hw.inout<i1>
    %87 = comb.or %85, %86 : i1
    %done10 = sv.wire {hw.verilogName = "done10"} : !hw.inout<i1>
    sv.assign %done10, %87 : i1
    %emitted_11 = sv.reg sym @emitted_11 {hw.verilogName = "emitted_11"} : !hw.inout<i1> 
    %88 = sv.read_inout %emitted_11 : !hw.inout<i1>
    %89 = comb.xor %88, %true : i1
    %90 = comb.and %89, %in0_valid : i1
    %91 = sv.wire {hw.verilogName = "_GEN_10"} : !hw.inout<i1>
    sv.assign %91, %90 : i1
    %92 = sv.read_inout %91 : !hw.inout<i1>
    %93 = comb.and %out11_ready, %92 : i1
    %94 = sv.read_inout %emitted_11 : !hw.inout<i1>
    %95 = comb.or %93, %94 : i1
    %done11 = sv.wire {hw.verilogName = "done11"} : !hw.inout<i1>
    sv.assign %done11, %95 : i1
    %emitted_12 = sv.reg sym @emitted_12 {hw.verilogName = "emitted_12"} : !hw.inout<i1> 
    %96 = sv.read_inout %emitted_12 : !hw.inout<i1>
    %97 = comb.xor %96, %true : i1
    %98 = comb.and %97, %in0_valid : i1
    %99 = sv.wire {hw.verilogName = "_GEN_11"} : !hw.inout<i1>
    sv.assign %99, %98 : i1
    %100 = sv.read_inout %99 : !hw.inout<i1>
    %101 = comb.and %out12_ready, %100 : i1
    %102 = sv.read_inout %emitted_12 : !hw.inout<i1>
    %103 = comb.or %101, %102 : i1
    %done12 = sv.wire {hw.verilogName = "done12"} : !hw.inout<i1>
    sv.assign %done12, %103 : i1
    %emitted_13 = sv.reg sym @emitted_13 {hw.verilogName = "emitted_13"} : !hw.inout<i1> 
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %154 = sv.read_inout %allDone : !hw.inout<i1>
      %155 = comb.xor %154, %true_0 : i1
      %156 = sv.read_inout %done0 : !hw.inout<i1>
      %157 = comb.and %156, %155 : i1
      sv.passign %emitted_0, %157 : i1
      %158 = sv.read_inout %allDone : !hw.inout<i1>
      %159 = comb.xor %158, %true_0 : i1
      %160 = sv.read_inout %done1 : !hw.inout<i1>
      %161 = comb.and %160, %159 : i1
      sv.passign %emitted_1, %161 : i1
      %162 = sv.read_inout %allDone : !hw.inout<i1>
      %163 = comb.xor %162, %true_0 : i1
      %164 = sv.read_inout %done2 : !hw.inout<i1>
      %165 = comb.and %164, %163 : i1
      sv.passign %emitted_2, %165 : i1
      %166 = sv.read_inout %allDone : !hw.inout<i1>
      %167 = comb.xor %166, %true_0 : i1
      %168 = sv.read_inout %done3 : !hw.inout<i1>
      %169 = comb.and %168, %167 : i1
      sv.passign %emitted_3, %169 : i1
      %170 = sv.read_inout %allDone : !hw.inout<i1>
      %171 = comb.xor %170, %true_0 : i1
      %172 = sv.read_inout %done4 : !hw.inout<i1>
      %173 = comb.and %172, %171 : i1
      sv.passign %emitted_4, %173 : i1
      %174 = sv.read_inout %allDone : !hw.inout<i1>
      %175 = comb.xor %174, %true_0 : i1
      %176 = sv.read_inout %done5 : !hw.inout<i1>
      %177 = comb.and %176, %175 : i1
      sv.passign %emitted_5, %177 : i1
      %178 = sv.read_inout %allDone : !hw.inout<i1>
      %179 = comb.xor %178, %true_0 : i1
      %180 = sv.read_inout %done6 : !hw.inout<i1>
      %181 = comb.and %180, %179 : i1
      sv.passign %emitted_6, %181 : i1
      %182 = sv.read_inout %allDone : !hw.inout<i1>
      %183 = comb.xor %182, %true_0 : i1
      %184 = sv.read_inout %done7 : !hw.inout<i1>
      %185 = comb.and %184, %183 : i1
      sv.passign %emitted_7, %185 : i1
      %186 = sv.read_inout %allDone : !hw.inout<i1>
      %187 = comb.xor %186, %true_0 : i1
      %188 = sv.read_inout %done8 : !hw.inout<i1>
      %189 = comb.and %188, %187 : i1
      sv.passign %emitted_8, %189 : i1
      %190 = sv.read_inout %allDone : !hw.inout<i1>
      %191 = comb.xor %190, %true_0 : i1
      %192 = sv.read_inout %done9 : !hw.inout<i1>
      %193 = comb.and %192, %191 : i1
      sv.passign %emitted_9, %193 : i1
      %194 = sv.read_inout %allDone : !hw.inout<i1>
      %195 = comb.xor %194, %true_0 : i1
      %196 = sv.read_inout %done10 : !hw.inout<i1>
      %197 = comb.and %196, %195 : i1
      sv.passign %emitted_10, %197 : i1
      %198 = sv.read_inout %allDone : !hw.inout<i1>
      %199 = comb.xor %198, %true_0 : i1
      %200 = sv.read_inout %done11 : !hw.inout<i1>
      %201 = comb.and %200, %199 : i1
      sv.passign %emitted_11, %201 : i1
      %202 = sv.read_inout %allDone : !hw.inout<i1>
      %203 = comb.xor %202, %true_0 : i1
      %204 = sv.read_inout %done12 : !hw.inout<i1>
      %205 = comb.and %204, %203 : i1
      sv.passign %emitted_12, %205 : i1
      %206 = sv.read_inout %allDone : !hw.inout<i1>
      %207 = comb.xor %206, %true_0 : i1
      %208 = sv.read_inout %done13 : !hw.inout<i1>
      %209 = comb.and %208, %207 : i1
      sv.passign %emitted_13, %209 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
      sv.passign %emitted_3, %false : i1
      sv.passign %emitted_4, %false : i1
      sv.passign %emitted_5, %false : i1
      sv.passign %emitted_6, %false : i1
      sv.passign %emitted_7, %false : i1
      sv.passign %emitted_8, %false : i1
      sv.passign %emitted_9, %false : i1
      sv.passign %emitted_10, %false : i1
      sv.passign %emitted_11, %false : i1
      sv.passign %emitted_12, %false : i1
      sv.passign %emitted_13, %false : i1
    }
    %104 = sv.read_inout %emitted_13 : !hw.inout<i1>
    %105 = comb.xor %104, %true : i1
    %106 = comb.and %105, %in0_valid : i1
    %107 = sv.wire {hw.verilogName = "_GEN_12"} : !hw.inout<i1>
    sv.assign %107, %106 : i1
    %108 = sv.read_inout %107 : !hw.inout<i1>
    %109 = comb.and %out13_ready, %108 : i1
    %110 = sv.read_inout %emitted_13 : !hw.inout<i1>
    %111 = comb.or %109, %110 : i1
    sv.assign %done13, %111 : i1
    %112 = sv.read_inout %done0 : !hw.inout<i1>
    %113 = sv.read_inout %done1 : !hw.inout<i1>
    %114 = sv.read_inout %done2 : !hw.inout<i1>
    %115 = sv.read_inout %done3 : !hw.inout<i1>
    %116 = sv.read_inout %done4 : !hw.inout<i1>
    %117 = sv.read_inout %done5 : !hw.inout<i1>
    %118 = sv.read_inout %done6 : !hw.inout<i1>
    %119 = sv.read_inout %done7 : !hw.inout<i1>
    %120 = sv.read_inout %done8 : !hw.inout<i1>
    %121 = sv.read_inout %done9 : !hw.inout<i1>
    %122 = sv.read_inout %done10 : !hw.inout<i1>
    %123 = sv.read_inout %done11 : !hw.inout<i1>
    %124 = sv.read_inout %done12 : !hw.inout<i1>
    %125 = sv.read_inout %done13 : !hw.inout<i1>
    %126 = comb.and %113, %114 : i1
    %127 = comb.and %112, %126 : i1
    %128 = comb.and %115, %116 : i1
    %129 = comb.and %117, %118 : i1
    %130 = comb.and %128, %129 : i1
    %131 = comb.and %127, %130 : i1
    %132 = comb.and %120, %121 : i1
    %133 = comb.and %119, %132 : i1
    %134 = comb.and %122, %123 : i1
    %135 = comb.and %124, %125 : i1
    %136 = comb.and %134, %135 : i1
    %137 = comb.and %133, %136 : i1
    %138 = comb.and %131, %137 : i1
    sv.assign %allDone, %138 : i1
    %139 = sv.read_inout %3 : !hw.inout<i1>
    %140 = sv.read_inout %11 : !hw.inout<i1>
    %141 = sv.read_inout %19 : !hw.inout<i1>
    %142 = sv.read_inout %27 : !hw.inout<i1>
    %143 = sv.read_inout %35 : !hw.inout<i1>
    %144 = sv.read_inout %43 : !hw.inout<i1>
    %145 = sv.read_inout %51 : !hw.inout<i1>
    %146 = sv.read_inout %59 : !hw.inout<i1>
    %147 = sv.read_inout %67 : !hw.inout<i1>
    %148 = sv.read_inout %75 : !hw.inout<i1>
    %149 = sv.read_inout %83 : !hw.inout<i1>
    %150 = sv.read_inout %91 : !hw.inout<i1>
    %151 = sv.read_inout %99 : !hw.inout<i1>
    %152 = sv.read_inout %107 : !hw.inout<i1>
    %153 = sv.read_inout %allDone : !hw.inout<i1>
    hw.output %153, %in0, %139, %in0, %140, %in0, %141, %in0, %142, %in0, %143, %in0, %144, %in0, %145, %in0, %146, %in0, %147, %in0, %148, %in0, %149, %in0, %150, %in0, %151, %in0, %152 : i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id2(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %clock : i1, in %reset : i1, in %stDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stDone0 : i0, out stDone0_valid : i1) {
    %emptyOrComplete = sv.wire {hw.verilogName = "emptyOrComplete"} : !hw.inout<i1>
    %true = hw.constant true
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_2 = sv.reg {hw.verilogName = "_handshake_memory_2"} : !hw.inout<uarray<3xi64>> 
    %writeValidBuffer = sv.reg sym @writeValidBuffer {hw.verilogName = "writeValidBuffer"} : !hw.inout<i1> 
    sv.alwaysff(posedge %clock) {
      %writeValid = sv.logic {hw.verilogName = "writeValid"} : !hw.inout<i1>
      %8 = comb.and %stAddr0_valid, %stData0_valid : i1
      sv.bpassign %writeValid, %8 : i1
      %9 = sv.read_inout %writeValid : !hw.inout<i1>
      sv.if %9 {
        %14 = comb.extract %stAddr0 from 0 : (i64) -> i2
        %15 = sv.array_index_inout %_handshake_memory_2[%14] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %15, %stData0 : i64
      }
      %10 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
      %11 = sv.read_inout %writeValid : !hw.inout<i1>
      %12 = sv.read_inout %emptyOrComplete : !hw.inout<i1>
      %13 = comb.mux %12, %11, %10 : i1
      sv.passign %writeValidBuffer, %13 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %writeValidBuffer, %false : i1
    }
    %0 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    %1 = comb.and %stDone0_ready, %0 {sv.namehint = "storeCompleted"} : i1
    %2 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    %3 = comb.xor %2, %true : i1
    %4 = comb.or %3, %1 : i1
    sv.assign %emptyOrComplete, %4 : i1
    %5 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    %6 = sv.read_inout %emptyOrComplete : !hw.inout<i1>
    %7 = sv.read_inout %emptyOrComplete : !hw.inout<i1>
    hw.output %6, %7, %c0_i0, %5 : i1, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id1(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : i1, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
    %emptyOrComplete = sv.wire {hw.verilogName = "emptyOrComplete"} : !hw.inout<i1>
    %true = hw.constant true
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_1 = sv.reg {hw.verilogName = "_handshake_memory_1"} : !hw.inout<uarray<3xi64>> 
    %0 = comb.extract %ldAddr0 from 0 : (i64) -> i2
    %emitted_0 = sv.reg sym @emitted_0 {hw.verilogName = "emitted_0"} : !hw.inout<i1> 
    %1 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %2 = comb.xor %1, %true : i1
    %3 = comb.and %2, %ldAddr0_valid : i1
    %4 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %4, %3 : i1
    %5 = sv.read_inout %4 : !hw.inout<i1>
    %6 = comb.and %ldData0_ready, %5 : i1
    %7 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %8 = comb.or %6, %7 : i1
    %done0 = sv.wire {hw.verilogName = "done0"} : !hw.inout<i1>
    sv.assign %done0, %8 : i1
    %emitted_1 = sv.reg sym @emitted_1 {hw.verilogName = "emitted_1"} : !hw.inout<i1> 
    %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %ldAddr0_valid : i1
    %12 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %12, %11 : i1
    %13 = sv.read_inout %12 : !hw.inout<i1>
    %14 = comb.and %ldDone0_ready, %13 : i1
    %15 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %16 = comb.or %14, %15 : i1
    %done1 = sv.wire {hw.verilogName = "done1"} : !hw.inout<i1>
    sv.assign %done1, %16 : i1
    %17 = sv.read_inout %done0 : !hw.inout<i1>
    %18 = sv.read_inout %done1 : !hw.inout<i1>
    %19 = comb.and %17, %18 : i1
    %allDone = sv.wire {hw.verilogName = "allDone"} : !hw.inout<i1>
    sv.assign %allDone, %19 : i1
    %writeValidBuffer = sv.reg sym @writeValidBuffer {hw.verilogName = "writeValidBuffer"} : !hw.inout<i1> 
    %20 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    %21 = comb.and %stDone0_ready, %20 {sv.namehint = "storeCompleted"} : i1
    %22 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    %23 = comb.xor %22, %true : i1
    %24 = comb.or %23, %21 : i1
    %emptyOrComplete_0 = sv.wire name "emptyOrComplete" {hw.verilogName = "emptyOrComplete_0"} : !hw.inout<i1>
    sv.assign %emptyOrComplete_0, %24 : i1
    %writeValidBuffer_1 = sv.reg sym @writeValidBuffer name "writeValidBuffer" {hw.verilogName = "writeValidBuffer_0"} : !hw.inout<i1> 
    %25 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
    %26 = comb.and %stDone1_ready, %25 {sv.namehint = "storeCompleted"} : i1
    %27 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
    %28 = comb.xor %27, %true : i1
    %29 = comb.or %28, %26 : i1
    %emptyOrComplete_2 = sv.wire name "emptyOrComplete" {hw.verilogName = "emptyOrComplete_1"} : !hw.inout<i1>
    sv.assign %emptyOrComplete_2, %29 : i1
    %writeValidBuffer_3 = sv.reg sym @writeValidBuffer name "writeValidBuffer" {hw.verilogName = "writeValidBuffer_1"} : !hw.inout<i1> 
    sv.alwaysff(posedge %clock) {
      %writeValid = sv.logic {hw.verilogName = "writeValid"} : !hw.inout<i1>
      %writeValid_4 = sv.logic name "writeValid" {hw.verilogName = "writeValid_0"} : !hw.inout<i1>
      %writeValid_5 = sv.logic name "writeValid" {hw.verilogName = "writeValid_1"} : !hw.inout<i1>
      %true_6 = hw.constant true
      %49 = comb.and %stAddr0_valid, %stData0_valid : i1
      sv.bpassign %writeValid, %49 : i1
      %50 = comb.and %stAddr1_valid, %stData1_valid : i1
      sv.bpassign %writeValid_4, %50 : i1
      %51 = comb.and %stAddr2_valid, %stData2_valid : i1
      sv.bpassign %writeValid_5, %51 : i1
      %52 = sv.read_inout %writeValid_5 : !hw.inout<i1>
      sv.if %52 {
        %75 = comb.extract %stAddr2 from 0 : (i64) -> i2
        %76 = sv.array_index_inout %_handshake_memory_1[%75] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %76, %stData2 : i64
      }
      %53 = sv.read_inout %writeValid_4 : !hw.inout<i1>
      sv.if %53 {
        %75 = comb.extract %stAddr1 from 0 : (i64) -> i2
        %76 = sv.array_index_inout %_handshake_memory_1[%75] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %76, %stData1 : i64
      }
      %54 = sv.read_inout %writeValid : !hw.inout<i1>
      sv.if %54 {
        %75 = comb.extract %stAddr0 from 0 : (i64) -> i2
        %76 = sv.array_index_inout %_handshake_memory_1[%75] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %76, %stData0 : i64
      }
      %55 = sv.read_inout %allDone : !hw.inout<i1>
      %56 = comb.xor %55, %true_6 : i1
      %57 = sv.read_inout %done0 : !hw.inout<i1>
      %58 = comb.and %57, %56 : i1
      sv.passign %emitted_0, %58 : i1
      %59 = sv.read_inout %allDone : !hw.inout<i1>
      %60 = comb.xor %59, %true_6 : i1
      %61 = sv.read_inout %done1 : !hw.inout<i1>
      %62 = comb.and %61, %60 : i1
      sv.passign %emitted_1, %62 : i1
      %63 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
      %64 = sv.read_inout %writeValid : !hw.inout<i1>
      %65 = sv.read_inout %emptyOrComplete_0 : !hw.inout<i1>
      %66 = comb.mux %65, %64, %63 : i1
      sv.passign %writeValidBuffer, %66 : i1
      %67 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
      %68 = sv.read_inout %writeValid_4 : !hw.inout<i1>
      %69 = sv.read_inout %emptyOrComplete_2 : !hw.inout<i1>
      %70 = comb.mux %69, %68, %67 : i1
      sv.passign %writeValidBuffer_1, %70 : i1
      %71 = sv.read_inout %writeValidBuffer_3 : !hw.inout<i1>
      %72 = sv.read_inout %writeValid_5 : !hw.inout<i1>
      %73 = sv.read_inout %emptyOrComplete : !hw.inout<i1>
      %74 = comb.mux %73, %72, %71 : i1
      sv.passign %writeValidBuffer_3, %74 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %writeValidBuffer, %false : i1
      sv.passign %writeValidBuffer_1, %false : i1
      sv.passign %writeValidBuffer_3, %false : i1
    }
    %30 = sv.read_inout %writeValidBuffer_3 : !hw.inout<i1>
    %31 = comb.and %stDone2_ready, %30 {sv.namehint = "storeCompleted"} : i1
    %32 = sv.read_inout %writeValidBuffer_3 : !hw.inout<i1>
    %33 = comb.xor %32, %true : i1
    %34 = comb.or %33, %31 : i1
    sv.assign %emptyOrComplete, %34 : i1
    %35 = sv.array_index_inout %_handshake_memory_1[%0] : !hw.inout<uarray<3xi64>>, i2
    %36 = sv.read_inout %35 : !hw.inout<i64>
    %37 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    %38 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
    %39 = sv.read_inout %writeValidBuffer_3 : !hw.inout<i1>
    %40 = sv.read_inout %4 : !hw.inout<i1>
    %41 = sv.read_inout %12 : !hw.inout<i1>
    %42 = sv.read_inout %allDone : !hw.inout<i1>
    %43 = sv.read_inout %emptyOrComplete_0 : !hw.inout<i1>
    %44 = sv.read_inout %emptyOrComplete_0 : !hw.inout<i1>
    %45 = sv.read_inout %emptyOrComplete_2 : !hw.inout<i1>
    %46 = sv.read_inout %emptyOrComplete_2 : !hw.inout<i1>
    %47 = sv.read_inout %emptyOrComplete : !hw.inout<i1>
    %48 = sv.read_inout %emptyOrComplete : !hw.inout<i1>
    hw.output %43, %44, %45, %46, %47, %48, %42, %36, %40, %c0_i0, %37, %c0_i0, %38, %c0_i0, %39, %c0_i0, %41 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_buffer_in_ui64_out_ui64_2slots_seq(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1) {
    %ready1_reg = sv.reg sym @ready1_reg {hw.verilogName = "ready1_reg"} : !hw.inout<i1> 
    %ready0_reg = sv.reg sym @ready0_reg {hw.verilogName = "ready0_reg"} : !hw.inout<i1> 
    %true = hw.constant true
    %valid0_reg = sv.reg sym @valid0_reg {hw.verilogName = "valid0_reg"} : !hw.inout<i1> 
    %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %3 = comb.xor %2, %true : i1
    %4 = comb.or %1, %3 : i1
    %5 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %5, %4 : i1
    %data0_reg = sv.reg sym @data0_reg {hw.verilogName = "data0_reg"} : !hw.inout<i64> 
    %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg {hw.verilogName = "ctrl_data0_reg"} : !hw.inout<i64> 
    %valid1_reg = sv.reg sym @valid1_reg {hw.verilogName = "valid1_reg"} : !hw.inout<i1> 
    %6 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %7 = comb.xor %6, %true : i1
    %8 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %9 = comb.xor %8, %true : i1
    %10 = comb.or %7, %9 : i1
    %11 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %11, %10 : i1
    %data1_reg = sv.reg sym @data1_reg {hw.verilogName = "data1_reg"} : !hw.inout<i64> 
    %12 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %13 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %14 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %15 = comb.mux %13, %14, %12 : i1
    %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg {hw.verilogName = "ctrl_data1_reg"} : !hw.inout<i64> 
    sv.alwaysff(posedge %clock) {
      %21 = sv.logic {hw.verilogName = "_GEN_1"} : !hw.inout<i1>
      %22 = sv.logic {hw.verilogName = "_GEN_2"} : !hw.inout<i1>
      %23 = sv.logic {hw.verilogName = "_GEN_3"} : !hw.inout<i1>
      %24 = sv.logic {hw.verilogName = "_GEN_4"} : !hw.inout<i1>
      %true_0 = hw.constant true
      %c0_i64 = hw.constant 0 : i64
      %25 = sv.read_inout %11 : !hw.inout<i1>
      %26 = comb.xor %25, %true_0 : i1
      %true_1 = hw.constant true
      %27 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %28 = comb.xor %27, %true_1 : i1
      %29 = comb.and %26, %28 : i1
      sv.bpassign %21, %29 : i1
      %30 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %31 = sv.read_inout %11 : !hw.inout<i1>
      %32 = comb.and %31, %30 : i1
      sv.bpassign %22, %32 : i1
      %33 = comb.xor %out0_ready, %true_0 : i1
      %true_2 = hw.constant true
      %34 = sv.read_inout %ready1_reg : !hw.inout<i1>
      %35 = comb.xor %34, %true_2 : i1
      %36 = comb.and %33, %35 : i1
      sv.bpassign %23, %36 : i1
      %37 = sv.read_inout %ready1_reg : !hw.inout<i1>
      %38 = comb.and %out0_ready, %37 : i1
      sv.bpassign %24, %38 : i1
      %39 = sv.read_inout %valid0_reg : !hw.inout<i1>
      %40 = sv.read_inout %5 : !hw.inout<i1>
      %41 = comb.mux %40, %in0_valid, %39 : i1
      sv.passign %valid0_reg, %41 : i1
      %42 = sv.read_inout %5 : !hw.inout<i1>
      %43 = sv.read_inout %data0_reg : !hw.inout<i64>
      %44 = comb.mux %42, %in0, %43 : i64
      sv.passign %data0_reg, %44 : i64
      %45 = sv.read_inout %22 : !hw.inout<i1>
      %46 = comb.xor %45, %true_0 : i1
      %47 = sv.read_inout %valid0_reg : !hw.inout<i1>
      %48 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %49 = sv.read_inout %21 : !hw.inout<i1>
      %50 = comb.mux %49, %47, %48 : i1
      %51 = comb.and %46, %50 : i1
      sv.passign %ready0_reg, %51 : i1
      %52 = sv.read_inout %data0_reg : !hw.inout<i64>
      %53 = sv.read_inout %21 : !hw.inout<i1>
      %54 = sv.read_inout %ctrl_data0_reg : !hw.inout<i64>
      %55 = comb.mux %53, %52, %54 : i64
      %56 = sv.read_inout %22 : !hw.inout<i1>
      %57 = comb.mux %56, %c0_i64, %55 : i64
      sv.passign %ctrl_data0_reg, %57 : i64
      %58 = sv.read_inout %valid0_reg : !hw.inout<i1>
      %59 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %60 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %61 = comb.mux %60, %59, %58 : i1
      %62 = sv.read_inout %valid1_reg : !hw.inout<i1>
      %63 = sv.read_inout %11 : !hw.inout<i1>
      %64 = comb.mux %63, %61, %62 : i1
      sv.passign %valid1_reg, %64 : i1
      %65 = sv.read_inout %data0_reg : !hw.inout<i64>
      %66 = sv.read_inout %ctrl_data0_reg : !hw.inout<i64>
      %67 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %68 = comb.mux %67, %66, %65 : i64
      %69 = sv.read_inout %11 : !hw.inout<i1>
      %70 = sv.read_inout %data1_reg : !hw.inout<i64>
      %71 = comb.mux %69, %68, %70 : i64
      sv.passign %data1_reg, %71 : i64
      %72 = sv.read_inout %24 : !hw.inout<i1>
      %73 = comb.xor %72, %true_0 : i1
      %74 = sv.read_inout %valid1_reg : !hw.inout<i1>
      %75 = sv.read_inout %ready1_reg : !hw.inout<i1>
      %76 = sv.read_inout %23 : !hw.inout<i1>
      %77 = comb.mux %76, %74, %75 : i1
      %78 = comb.and %73, %77 : i1
      sv.passign %ready1_reg, %78 : i1
      %79 = sv.read_inout %data1_reg : !hw.inout<i64>
      %80 = sv.read_inout %ctrl_data1_reg : !hw.inout<i64>
      %81 = sv.read_inout %23 : !hw.inout<i1>
      %82 = comb.mux %81, %79, %80 : i64
      %83 = sv.read_inout %24 : !hw.inout<i1>
      %84 = comb.mux %83, %c0_i64, %82 : i64
      sv.passign %ctrl_data1_reg, %84 : i64
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      %c0_i64 = hw.constant 0 : i64
      sv.passign %valid0_reg, %false : i1
      sv.passign %data0_reg, %c0_i64 : i64
      sv.passign %ready0_reg, %false : i1
      sv.passign %ctrl_data0_reg, %c0_i64 : i64
      sv.passign %valid1_reg, %false : i1
      sv.passign %data1_reg, %c0_i64 : i64
      sv.passign %ready1_reg, %false : i1
      sv.passign %ctrl_data1_reg, %c0_i64 : i64
    }
    %16 = sv.read_inout %data1_reg : !hw.inout<i64>
    %17 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %18 = sv.read_inout %ctrl_data1_reg : !hw.inout<i64>
    %19 = comb.mux %17, %18, %16 : i64
    %20 = sv.read_inout %5 : !hw.inout<i1>
    hw.output %20, %19, %15 : i1, i64, i1
  }
  hw.module @handshake_fork_1ins_2outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1) {
    %allDone = sv.wire {hw.verilogName = "allDone"} : !hw.inout<i1>
    %done1 = sv.wire {hw.verilogName = "done1"} : !hw.inout<i1>
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 {hw.verilogName = "emitted_0"} : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %3, %2 : i1
    %4 = sv.read_inout %3 : !hw.inout<i1>
    %5 = comb.and %out0_ready, %4 : i1
    %6 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %7 = comb.or %5, %6 : i1
    %done0 = sv.wire {hw.verilogName = "done0"} : !hw.inout<i1>
    sv.assign %done0, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 {hw.verilogName = "emitted_1"} : !hw.inout<i1> 
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %22 = sv.read_inout %allDone : !hw.inout<i1>
      %23 = comb.xor %22, %true_0 : i1
      %24 = sv.read_inout %done0 : !hw.inout<i1>
      %25 = comb.and %24, %23 : i1
      sv.passign %emitted_0, %25 : i1
      %26 = sv.read_inout %allDone : !hw.inout<i1>
      %27 = comb.xor %26, %true_0 : i1
      %28 = sv.read_inout %done1 : !hw.inout<i1>
      %29 = comb.and %28, %27 : i1
      sv.passign %emitted_1, %29 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
    }
    %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %9 = comb.xor %8, %true : i1
    %10 = comb.and %9, %in0_valid : i1
    %11 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %11, %10 : i1
    %12 = sv.read_inout %11 : !hw.inout<i1>
    %13 = comb.and %out1_ready, %12 : i1
    %14 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %15 = comb.or %13, %14 : i1
    sv.assign %done1, %15 : i1
    %16 = sv.read_inout %done0 : !hw.inout<i1>
    %17 = sv.read_inout %done1 : !hw.inout<i1>
    %18 = comb.and %16, %17 : i1
    sv.assign %allDone, %18 : i1
    %19 = sv.read_inout %3 : !hw.inout<i1>
    %20 = sv.read_inout %11 : !hw.inout<i1>
    %21 = sv.read_inout %allDone : !hw.inout<i1>
    hw.output %21, %in0, %19, %in0, %20 : i1, i0, i1, i0, i1
  }
  hw.module @handshake_fork_1ins_3outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1) {
    %allDone = sv.wire {hw.verilogName = "allDone"} : !hw.inout<i1>
    %done2 = sv.wire {hw.verilogName = "done2"} : !hw.inout<i1>
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 {hw.verilogName = "emitted_0"} : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %3, %2 : i1
    %4 = sv.read_inout %3 : !hw.inout<i1>
    %5 = comb.and %out0_ready, %4 : i1
    %6 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %7 = comb.or %5, %6 : i1
    %done0 = sv.wire {hw.verilogName = "done0"} : !hw.inout<i1>
    sv.assign %done0, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 {hw.verilogName = "emitted_1"} : !hw.inout<i1> 
    %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %9 = comb.xor %8, %true : i1
    %10 = comb.and %9, %in0_valid : i1
    %11 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %11, %10 : i1
    %12 = sv.read_inout %11 : !hw.inout<i1>
    %13 = comb.and %out1_ready, %12 : i1
    %14 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %15 = comb.or %13, %14 : i1
    %done1 = sv.wire {hw.verilogName = "done1"} : !hw.inout<i1>
    sv.assign %done1, %15 : i1
    %emitted_2 = sv.reg sym @emitted_2 {hw.verilogName = "emitted_2"} : !hw.inout<i1> 
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %33 = sv.read_inout %allDone : !hw.inout<i1>
      %34 = comb.xor %33, %true_0 : i1
      %35 = sv.read_inout %done0 : !hw.inout<i1>
      %36 = comb.and %35, %34 : i1
      sv.passign %emitted_0, %36 : i1
      %37 = sv.read_inout %allDone : !hw.inout<i1>
      %38 = comb.xor %37, %true_0 : i1
      %39 = sv.read_inout %done1 : !hw.inout<i1>
      %40 = comb.and %39, %38 : i1
      sv.passign %emitted_1, %40 : i1
      %41 = sv.read_inout %allDone : !hw.inout<i1>
      %42 = comb.xor %41, %true_0 : i1
      %43 = sv.read_inout %done2 : !hw.inout<i1>
      %44 = comb.and %43, %42 : i1
      sv.passign %emitted_2, %44 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
    }
    %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %17 = comb.xor %16, %true : i1
    %18 = comb.and %17, %in0_valid : i1
    %19 = sv.wire {hw.verilogName = "_GEN_1"} : !hw.inout<i1>
    sv.assign %19, %18 : i1
    %20 = sv.read_inout %19 : !hw.inout<i1>
    %21 = comb.and %out2_ready, %20 : i1
    %22 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %23 = comb.or %21, %22 : i1
    sv.assign %done2, %23 : i1
    %24 = sv.read_inout %done0 : !hw.inout<i1>
    %25 = sv.read_inout %done1 : !hw.inout<i1>
    %26 = sv.read_inout %done2 : !hw.inout<i1>
    %27 = comb.and %25, %26 : i1
    %28 = comb.and %24, %27 : i1
    sv.assign %allDone, %28 : i1
    %29 = sv.read_inout %3 : !hw.inout<i1>
    %30 = sv.read_inout %11 : !hw.inout<i1>
    %31 = sv.read_inout %19 : !hw.inout<i1>
    %32 = sv.read_inout %allDone : !hw.inout<i1>
    hw.output %32, %in0, %29, %in0, %30, %in0, %31 : i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_memory_out_ui64_id0(in %stData0 : i64, in %stData0_valid : i1, in %stAddr0 : i64, in %stAddr0_valid : i1, in %stData1 : i64, in %stData1_valid : i1, in %stAddr1 : i64, in %stAddr1_valid : i1, in %stData2 : i64, in %stData2_valid : i1, in %stAddr2 : i64, in %stAddr2_valid : i1, in %ldAddr0 : i64, in %ldAddr0_valid : i1, in %clock : i1, in %reset : i1, in %ldData0_ready : i1, in %stDone0_ready : i1, in %stDone1_ready : i1, in %stDone2_ready : i1, in %ldDone0_ready : i1, out stData0_ready : i1, out stAddr0_ready : i1, out stData1_ready : i1, out stAddr1_ready : i1, out stData2_ready : i1, out stAddr2_ready : i1, out ldAddr0_ready : i1, out ldData0 : i64, out ldData0_valid : i1, out stDone0 : i0, out stDone0_valid : i1, out stDone1 : i0, out stDone1_valid : i1, out stDone2 : i0, out stDone2_valid : i1, out ldDone0 : i0, out ldDone0_valid : i1) {
    %emptyOrComplete = sv.wire {hw.verilogName = "emptyOrComplete"} : !hw.inout<i1>
    %true = hw.constant true
    %c0_i0 = hw.constant 0 : i0
    %_handshake_memory_0 = sv.reg {hw.verilogName = "_handshake_memory_0"} : !hw.inout<uarray<3xi64>> 
    %0 = comb.extract %ldAddr0 from 0 : (i64) -> i2
    %emitted_0 = sv.reg sym @emitted_0 {hw.verilogName = "emitted_0"} : !hw.inout<i1> 
    %1 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %2 = comb.xor %1, %true : i1
    %3 = comb.and %2, %ldAddr0_valid : i1
    %4 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %4, %3 : i1
    %5 = sv.read_inout %4 : !hw.inout<i1>
    %6 = comb.and %ldData0_ready, %5 : i1
    %7 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %8 = comb.or %6, %7 : i1
    %done0 = sv.wire {hw.verilogName = "done0"} : !hw.inout<i1>
    sv.assign %done0, %8 : i1
    %emitted_1 = sv.reg sym @emitted_1 {hw.verilogName = "emitted_1"} : !hw.inout<i1> 
    %9 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %10 = comb.xor %9, %true : i1
    %11 = comb.and %10, %ldAddr0_valid : i1
    %12 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %12, %11 : i1
    %13 = sv.read_inout %12 : !hw.inout<i1>
    %14 = comb.and %ldDone0_ready, %13 : i1
    %15 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %16 = comb.or %14, %15 : i1
    %done1 = sv.wire {hw.verilogName = "done1"} : !hw.inout<i1>
    sv.assign %done1, %16 : i1
    %17 = sv.read_inout %done0 : !hw.inout<i1>
    %18 = sv.read_inout %done1 : !hw.inout<i1>
    %19 = comb.and %17, %18 : i1
    %allDone = sv.wire {hw.verilogName = "allDone"} : !hw.inout<i1>
    sv.assign %allDone, %19 : i1
    %writeValidBuffer = sv.reg sym @writeValidBuffer {hw.verilogName = "writeValidBuffer"} : !hw.inout<i1> 
    %20 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    %21 = comb.and %stDone0_ready, %20 {sv.namehint = "storeCompleted"} : i1
    %22 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    %23 = comb.xor %22, %true : i1
    %24 = comb.or %23, %21 : i1
    %emptyOrComplete_0 = sv.wire name "emptyOrComplete" {hw.verilogName = "emptyOrComplete_0"} : !hw.inout<i1>
    sv.assign %emptyOrComplete_0, %24 : i1
    %writeValidBuffer_1 = sv.reg sym @writeValidBuffer name "writeValidBuffer" {hw.verilogName = "writeValidBuffer_0"} : !hw.inout<i1> 
    %25 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
    %26 = comb.and %stDone1_ready, %25 {sv.namehint = "storeCompleted"} : i1
    %27 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
    %28 = comb.xor %27, %true : i1
    %29 = comb.or %28, %26 : i1
    %emptyOrComplete_2 = sv.wire name "emptyOrComplete" {hw.verilogName = "emptyOrComplete_1"} : !hw.inout<i1>
    sv.assign %emptyOrComplete_2, %29 : i1
    %writeValidBuffer_3 = sv.reg sym @writeValidBuffer name "writeValidBuffer" {hw.verilogName = "writeValidBuffer_1"} : !hw.inout<i1> 
    sv.alwaysff(posedge %clock) {
      %writeValid = sv.logic {hw.verilogName = "writeValid"} : !hw.inout<i1>
      %writeValid_4 = sv.logic name "writeValid" {hw.verilogName = "writeValid_0"} : !hw.inout<i1>
      %writeValid_5 = sv.logic name "writeValid" {hw.verilogName = "writeValid_1"} : !hw.inout<i1>
      %true_6 = hw.constant true
      %49 = comb.and %stAddr0_valid, %stData0_valid : i1
      sv.bpassign %writeValid, %49 : i1
      %50 = comb.and %stAddr1_valid, %stData1_valid : i1
      sv.bpassign %writeValid_4, %50 : i1
      %51 = comb.and %stAddr2_valid, %stData2_valid : i1
      sv.bpassign %writeValid_5, %51 : i1
      %52 = sv.read_inout %writeValid_5 : !hw.inout<i1>
      sv.if %52 {
        %75 = comb.extract %stAddr2 from 0 : (i64) -> i2
        %76 = sv.array_index_inout %_handshake_memory_0[%75] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %76, %stData2 : i64
      }
      %53 = sv.read_inout %writeValid_4 : !hw.inout<i1>
      sv.if %53 {
        %75 = comb.extract %stAddr1 from 0 : (i64) -> i2
        %76 = sv.array_index_inout %_handshake_memory_0[%75] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %76, %stData1 : i64
      }
      %54 = sv.read_inout %writeValid : !hw.inout<i1>
      sv.if %54 {
        %75 = comb.extract %stAddr0 from 0 : (i64) -> i2
        %76 = sv.array_index_inout %_handshake_memory_0[%75] : !hw.inout<uarray<3xi64>>, i2
        sv.passign %76, %stData0 : i64
      }
      %55 = sv.read_inout %allDone : !hw.inout<i1>
      %56 = comb.xor %55, %true_6 : i1
      %57 = sv.read_inout %done0 : !hw.inout<i1>
      %58 = comb.and %57, %56 : i1
      sv.passign %emitted_0, %58 : i1
      %59 = sv.read_inout %allDone : !hw.inout<i1>
      %60 = comb.xor %59, %true_6 : i1
      %61 = sv.read_inout %done1 : !hw.inout<i1>
      %62 = comb.and %61, %60 : i1
      sv.passign %emitted_1, %62 : i1
      %63 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
      %64 = sv.read_inout %writeValid : !hw.inout<i1>
      %65 = sv.read_inout %emptyOrComplete_0 : !hw.inout<i1>
      %66 = comb.mux %65, %64, %63 : i1
      sv.passign %writeValidBuffer, %66 : i1
      %67 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
      %68 = sv.read_inout %writeValid_4 : !hw.inout<i1>
      %69 = sv.read_inout %emptyOrComplete_2 : !hw.inout<i1>
      %70 = comb.mux %69, %68, %67 : i1
      sv.passign %writeValidBuffer_1, %70 : i1
      %71 = sv.read_inout %writeValidBuffer_3 : !hw.inout<i1>
      %72 = sv.read_inout %writeValid_5 : !hw.inout<i1>
      %73 = sv.read_inout %emptyOrComplete : !hw.inout<i1>
      %74 = comb.mux %73, %72, %71 : i1
      sv.passign %writeValidBuffer_3, %74 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %writeValidBuffer, %false : i1
      sv.passign %writeValidBuffer_1, %false : i1
      sv.passign %writeValidBuffer_3, %false : i1
    }
    %30 = sv.read_inout %writeValidBuffer_3 : !hw.inout<i1>
    %31 = comb.and %stDone2_ready, %30 {sv.namehint = "storeCompleted"} : i1
    %32 = sv.read_inout %writeValidBuffer_3 : !hw.inout<i1>
    %33 = comb.xor %32, %true : i1
    %34 = comb.or %33, %31 : i1
    sv.assign %emptyOrComplete, %34 : i1
    %35 = sv.array_index_inout %_handshake_memory_0[%0] : !hw.inout<uarray<3xi64>>, i2
    %36 = sv.read_inout %35 : !hw.inout<i64>
    %37 = sv.read_inout %writeValidBuffer : !hw.inout<i1>
    %38 = sv.read_inout %writeValidBuffer_1 : !hw.inout<i1>
    %39 = sv.read_inout %writeValidBuffer_3 : !hw.inout<i1>
    %40 = sv.read_inout %4 : !hw.inout<i1>
    %41 = sv.read_inout %12 : !hw.inout<i1>
    %42 = sv.read_inout %allDone : !hw.inout<i1>
    %43 = sv.read_inout %emptyOrComplete_0 : !hw.inout<i1>
    %44 = sv.read_inout %emptyOrComplete_0 : !hw.inout<i1>
    %45 = sv.read_inout %emptyOrComplete_2 : !hw.inout<i1>
    %46 = sv.read_inout %emptyOrComplete_2 : !hw.inout<i1>
    %47 = sv.read_inout %emptyOrComplete : !hw.inout<i1>
    %48 = sv.read_inout %emptyOrComplete : !hw.inout<i1>
    hw.output %43, %44, %45, %46, %47, %48, %42, %36, %40, %c0_i0, %37, %c0_i0, %38, %c0_i0, %39, %c0_i0, %41 : i1, i1, i1, i1, i1, i1, i1, i64, i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_join_7ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %in4 : i0, in %in4_valid : i1, in %in5 : i0, in %in5_valid : i1, in %in6 : i0, in %in6_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out in4_ready : i1, out in5_ready : i1, out in6_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in1_valid, %in2_valid : i1
    %1 = comb.and %in0_valid, %0 : i1
    %2 = comb.and %in3_valid, %in4_valid : i1
    %3 = comb.and %in5_valid, %in6_valid : i1
    %4 = comb.and %2, %3 : i1
    %5 = comb.and %1, %4 : i1
    %6 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %6, %5 : i1
    %7 = sv.read_inout %6 : !hw.inout<i1>
    %8 = comb.and %out0_ready, %7 : i1
    %9 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %9, %8 : i1
    %10 = sv.read_inout %6 : !hw.inout<i1>
    %11 = sv.read_inout %9 : !hw.inout<i1>
    %12 = sv.read_inout %9 : !hw.inout<i1>
    %13 = sv.read_inout %9 : !hw.inout<i1>
    %14 = sv.read_inout %9 : !hw.inout<i1>
    %15 = sv.read_inout %9 : !hw.inout<i1>
    %16 = sv.read_inout %9 : !hw.inout<i1>
    %17 = sv.read_inout %9 : !hw.inout<i1>
    hw.output %11, %12, %13, %14, %15, %16, %17, %c0_i0, %10 : i1, i1, i1, i1, i1, i1, i1, i0, i1
  }
  hw.module @handshake_constant_c3_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c3_i64 = hw.constant 3 : i64
    hw.output %out0_ready, %c3_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1) {
    %allDone = sv.wire {hw.verilogName = "allDone"} : !hw.inout<i1>
    %done1 = sv.wire {hw.verilogName = "done1"} : !hw.inout<i1>
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 {hw.verilogName = "emitted_0"} : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %3, %2 : i1
    %4 = sv.read_inout %3 : !hw.inout<i1>
    %5 = comb.and %out0_ready, %4 : i1
    %6 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %7 = comb.or %5, %6 : i1
    %done0 = sv.wire {hw.verilogName = "done0"} : !hw.inout<i1>
    sv.assign %done0, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 {hw.verilogName = "emitted_1"} : !hw.inout<i1> 
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %22 = sv.read_inout %allDone : !hw.inout<i1>
      %23 = comb.xor %22, %true_0 : i1
      %24 = sv.read_inout %done0 : !hw.inout<i1>
      %25 = comb.and %24, %23 : i1
      sv.passign %emitted_0, %25 : i1
      %26 = sv.read_inout %allDone : !hw.inout<i1>
      %27 = comb.xor %26, %true_0 : i1
      %28 = sv.read_inout %done1 : !hw.inout<i1>
      %29 = comb.and %28, %27 : i1
      sv.passign %emitted_1, %29 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
    }
    %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %9 = comb.xor %8, %true : i1
    %10 = comb.and %9, %in0_valid : i1
    %11 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %11, %10 : i1
    %12 = sv.read_inout %11 : !hw.inout<i1>
    %13 = comb.and %out1_ready, %12 : i1
    %14 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %15 = comb.or %13, %14 : i1
    sv.assign %done1, %15 : i1
    %16 = sv.read_inout %done0 : !hw.inout<i1>
    %17 = sv.read_inout %done1 : !hw.inout<i1>
    %18 = comb.and %16, %17 : i1
    sv.assign %allDone, %18 : i1
    %19 = sv.read_inout %3 : !hw.inout<i1>
    %20 = sv.read_inout %11 : !hw.inout<i1>
    %21 = sv.read_inout %allDone : !hw.inout<i1>
    hw.output %21, %in0, %19, %in0, %20 : i1, i64, i1, i64, i1
  }
  hw.module @handshake_constant_c2_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c2_i64 = hw.constant 2 : i64
    hw.output %out0_ready, %c2_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_constant_c1_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c1_i64 = hw.constant 1 : i64
    hw.output %out0_ready, %c1_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1) {
    %allDone = sv.wire {hw.verilogName = "allDone"} : !hw.inout<i1>
    %done2 = sv.wire {hw.verilogName = "done2"} : !hw.inout<i1>
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 {hw.verilogName = "emitted_0"} : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %3, %2 : i1
    %4 = sv.read_inout %3 : !hw.inout<i1>
    %5 = comb.and %out0_ready, %4 : i1
    %6 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %7 = comb.or %5, %6 : i1
    %done0 = sv.wire {hw.verilogName = "done0"} : !hw.inout<i1>
    sv.assign %done0, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 {hw.verilogName = "emitted_1"} : !hw.inout<i1> 
    %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %9 = comb.xor %8, %true : i1
    %10 = comb.and %9, %in0_valid : i1
    %11 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %11, %10 : i1
    %12 = sv.read_inout %11 : !hw.inout<i1>
    %13 = comb.and %out1_ready, %12 : i1
    %14 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %15 = comb.or %13, %14 : i1
    %done1 = sv.wire {hw.verilogName = "done1"} : !hw.inout<i1>
    sv.assign %done1, %15 : i1
    %emitted_2 = sv.reg sym @emitted_2 {hw.verilogName = "emitted_2"} : !hw.inout<i1> 
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %33 = sv.read_inout %allDone : !hw.inout<i1>
      %34 = comb.xor %33, %true_0 : i1
      %35 = sv.read_inout %done0 : !hw.inout<i1>
      %36 = comb.and %35, %34 : i1
      sv.passign %emitted_0, %36 : i1
      %37 = sv.read_inout %allDone : !hw.inout<i1>
      %38 = comb.xor %37, %true_0 : i1
      %39 = sv.read_inout %done1 : !hw.inout<i1>
      %40 = comb.and %39, %38 : i1
      sv.passign %emitted_1, %40 : i1
      %41 = sv.read_inout %allDone : !hw.inout<i1>
      %42 = comb.xor %41, %true_0 : i1
      %43 = sv.read_inout %done2 : !hw.inout<i1>
      %44 = comb.and %43, %42 : i1
      sv.passign %emitted_2, %44 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
    }
    %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %17 = comb.xor %16, %true : i1
    %18 = comb.and %17, %in0_valid : i1
    %19 = sv.wire {hw.verilogName = "_GEN_1"} : !hw.inout<i1>
    sv.assign %19, %18 : i1
    %20 = sv.read_inout %19 : !hw.inout<i1>
    %21 = comb.and %out2_ready, %20 : i1
    %22 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %23 = comb.or %21, %22 : i1
    sv.assign %done2, %23 : i1
    %24 = sv.read_inout %done0 : !hw.inout<i1>
    %25 = sv.read_inout %done1 : !hw.inout<i1>
    %26 = sv.read_inout %done2 : !hw.inout<i1>
    %27 = comb.and %25, %26 : i1
    %28 = comb.and %24, %27 : i1
    sv.assign %allDone, %28 : i1
    %29 = sv.read_inout %3 : !hw.inout<i1>
    %30 = sv.read_inout %11 : !hw.inout<i1>
    %31 = sv.read_inout %19 : !hw.inout<i1>
    %32 = sv.read_inout %allDone : !hw.inout<i1>
    hw.output %32, %in0, %29, %in0, %30, %in0, %31 : i1, i64, i1, i64, i1, i64, i1
  }
  hw.module @handshake_constant_c0_out_ui64(in %ctrl : i0, in %ctrl_valid : i1, in %out0_ready : i1, out ctrl_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c0_i64 = hw.constant 0 : i64
    hw.output %out0_ready, %c0_i64, %ctrl_valid : i1, i64, i1
  }
  hw.module @handshake_store_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataIn : i64, in %dataIn_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataToMem_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataIn_ready : i1, out ctrl_ready : i1, out dataToMem : i64, out dataToMem_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
    %0 = comb.and %addrIn0_valid, %ctrl_valid : i1
    %1 = comb.and %dataIn_valid, %0 : i1
    %2 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %2, %1 : i1
    %3 = sv.read_inout %2 : !hw.inout<i1>
    %4 = comb.and %addrOut0_ready, %3 : i1
    %5 = comb.and %dataToMem_ready, %4 : i1
    %6 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %6, %5 : i1
    %7 = sv.read_inout %2 : !hw.inout<i1>
    %8 = sv.read_inout %2 : !hw.inout<i1>
    %9 = sv.read_inout %6 : !hw.inout<i1>
    %10 = sv.read_inout %6 : !hw.inout<i1>
    %11 = sv.read_inout %6 : !hw.inout<i1>
    hw.output %9, %10, %11, %dataIn, %8, %addrIn0, %7 : i1, i1, i1, i64, i1, i64, i1
  }
  hw.module @handshake_join_2ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %1, %0 : i1
    %2 = sv.read_inout %1 : !hw.inout<i1>
    %3 = comb.and %out0_ready, %2 : i1
    %4 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %4, %3 : i1
    %5 = sv.read_inout %1 : !hw.inout<i1>
    %6 = sv.read_inout %4 : !hw.inout<i1>
    %7 = sv.read_inout %4 : !hw.inout<i1>
    hw.output %6, %7, %c0_i0, %5 : i1, i1, i0, i1
  }
  hw.module @handshake_join_3ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in1_valid, %in2_valid : i1
    %1 = comb.and %in0_valid, %0 : i1
    %2 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %2, %1 : i1
    %3 = sv.read_inout %2 : !hw.inout<i1>
    %4 = comb.and %out0_ready, %3 : i1
    %5 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %5, %4 : i1
    %6 = sv.read_inout %2 : !hw.inout<i1>
    %7 = sv.read_inout %5 : !hw.inout<i1>
    %8 = sv.read_inout %5 : !hw.inout<i1>
    %9 = sv.read_inout %5 : !hw.inout<i1>
    hw.output %7, %8, %9, %c0_i0, %6 : i1, i1, i1, i0, i1
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
    %ready0_reg = sv.reg sym @ready0_reg {hw.verilogName = "ready0_reg"} : !hw.inout<i1> 
    %true = hw.constant true
    %valid0_reg = sv.reg sym @valid0_reg {hw.verilogName = "valid0_reg"} : !hw.inout<i1> 
    %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %3 = comb.xor %2, %true : i1
    %4 = comb.or %1, %3 : i1
    %5 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %5, %4 : i1
    %data0_reg = sv.reg sym @data0_reg {hw.verilogName = "data0_reg"} : !hw.inout<i1> 
    %6 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %7 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %8 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %9 = comb.mux %7, %8, %6 : i1
    %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg {hw.verilogName = "ctrl_data0_reg"} : !hw.inout<i1> 
    sv.alwaysff(posedge %clock) {
      %15 = sv.logic {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
      %16 = sv.logic {hw.verilogName = "_GEN_1"} : !hw.inout<i1>
      %true_0 = hw.constant true
      %17 = comb.xor %out0_ready, %true_0 : i1
      %true_1 = hw.constant true
      %18 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %19 = comb.xor %18, %true_1 : i1
      %20 = comb.and %17, %19 : i1
      sv.bpassign %15, %20 : i1
      %21 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %22 = comb.and %out0_ready, %21 : i1
      sv.bpassign %16, %22 : i1
      %23 = sv.read_inout %valid0_reg : !hw.inout<i1>
      %24 = sv.read_inout %5 : !hw.inout<i1>
      %25 = comb.mux %24, %in0_valid, %23 : i1
      sv.passign %valid0_reg, %25 : i1
      %26 = sv.read_inout %5 : !hw.inout<i1>
      %27 = sv.read_inout %data0_reg : !hw.inout<i1>
      %28 = comb.mux %26, %in0, %27 : i1
      sv.passign %data0_reg, %28 : i1
      %29 = sv.read_inout %16 : !hw.inout<i1>
      %30 = comb.xor %29, %true_0 : i1
      %31 = sv.read_inout %valid0_reg : !hw.inout<i1>
      %32 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %33 = sv.read_inout %15 : !hw.inout<i1>
      %34 = comb.mux %33, %31, %32 : i1
      %35 = comb.and %30, %34 : i1
      sv.passign %ready0_reg, %35 : i1
      %36 = sv.read_inout %16 : !hw.inout<i1>
      %37 = comb.xor %36, %true_0 : i1
      %38 = sv.read_inout %data0_reg : !hw.inout<i1>
      %39 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
      %40 = sv.read_inout %15 : !hw.inout<i1>
      %41 = comb.mux %40, %38, %39 : i1
      %42 = comb.and %37, %41 : i1
      sv.passign %ctrl_data0_reg, %42 : i1
    }(syncreset : posedge %reset) {
      %true_0 = hw.constant true
      %false = hw.constant false
      sv.passign %valid0_reg, %true_0 : i1
      sv.passign %data0_reg, %false : i1
      sv.passign %ready0_reg, %false : i1
      sv.passign %ctrl_data0_reg, %false : i1
    }
    %10 = sv.read_inout %data0_reg : !hw.inout<i1>
    %11 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %12 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
    %13 = comb.mux %11, %12, %10 : i1
    %14 = sv.read_inout %5 : !hw.inout<i1>
    hw.output %14, %13, %9 : i1, i1, i1
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1) {
    %allDone = sv.wire {hw.verilogName = "allDone"} : !hw.inout<i1>
    %done3 = sv.wire {hw.verilogName = "done3"} : !hw.inout<i1>
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 {hw.verilogName = "emitted_0"} : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %3, %2 : i1
    %4 = sv.read_inout %3 : !hw.inout<i1>
    %5 = comb.and %out0_ready, %4 : i1
    %6 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %7 = comb.or %5, %6 : i1
    %done0 = sv.wire {hw.verilogName = "done0"} : !hw.inout<i1>
    sv.assign %done0, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 {hw.verilogName = "emitted_1"} : !hw.inout<i1> 
    %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %9 = comb.xor %8, %true : i1
    %10 = comb.and %9, %in0_valid : i1
    %11 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %11, %10 : i1
    %12 = sv.read_inout %11 : !hw.inout<i1>
    %13 = comb.and %out1_ready, %12 : i1
    %14 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %15 = comb.or %13, %14 : i1
    %done1 = sv.wire {hw.verilogName = "done1"} : !hw.inout<i1>
    sv.assign %done1, %15 : i1
    %emitted_2 = sv.reg sym @emitted_2 {hw.verilogName = "emitted_2"} : !hw.inout<i1> 
    %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %17 = comb.xor %16, %true : i1
    %18 = comb.and %17, %in0_valid : i1
    %19 = sv.wire {hw.verilogName = "_GEN_1"} : !hw.inout<i1>
    sv.assign %19, %18 : i1
    %20 = sv.read_inout %19 : !hw.inout<i1>
    %21 = comb.and %out2_ready, %20 : i1
    %22 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %23 = comb.or %21, %22 : i1
    %done2 = sv.wire {hw.verilogName = "done2"} : !hw.inout<i1>
    sv.assign %done2, %23 : i1
    %emitted_3 = sv.reg sym @emitted_3 {hw.verilogName = "emitted_3"} : !hw.inout<i1> 
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %44 = sv.read_inout %allDone : !hw.inout<i1>
      %45 = comb.xor %44, %true_0 : i1
      %46 = sv.read_inout %done0 : !hw.inout<i1>
      %47 = comb.and %46, %45 : i1
      sv.passign %emitted_0, %47 : i1
      %48 = sv.read_inout %allDone : !hw.inout<i1>
      %49 = comb.xor %48, %true_0 : i1
      %50 = sv.read_inout %done1 : !hw.inout<i1>
      %51 = comb.and %50, %49 : i1
      sv.passign %emitted_1, %51 : i1
      %52 = sv.read_inout %allDone : !hw.inout<i1>
      %53 = comb.xor %52, %true_0 : i1
      %54 = sv.read_inout %done2 : !hw.inout<i1>
      %55 = comb.and %54, %53 : i1
      sv.passign %emitted_2, %55 : i1
      %56 = sv.read_inout %allDone : !hw.inout<i1>
      %57 = comb.xor %56, %true_0 : i1
      %58 = sv.read_inout %done3 : !hw.inout<i1>
      %59 = comb.and %58, %57 : i1
      sv.passign %emitted_3, %59 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
      sv.passign %emitted_3, %false : i1
    }
    %24 = sv.read_inout %emitted_3 : !hw.inout<i1>
    %25 = comb.xor %24, %true : i1
    %26 = comb.and %25, %in0_valid : i1
    %27 = sv.wire {hw.verilogName = "_GEN_2"} : !hw.inout<i1>
    sv.assign %27, %26 : i1
    %28 = sv.read_inout %27 : !hw.inout<i1>
    %29 = comb.and %out3_ready, %28 : i1
    %30 = sv.read_inout %emitted_3 : !hw.inout<i1>
    %31 = comb.or %29, %30 : i1
    sv.assign %done3, %31 : i1
    %32 = sv.read_inout %done0 : !hw.inout<i1>
    %33 = sv.read_inout %done1 : !hw.inout<i1>
    %34 = sv.read_inout %done2 : !hw.inout<i1>
    %35 = sv.read_inout %done3 : !hw.inout<i1>
    %36 = comb.and %32, %33 : i1
    %37 = comb.and %34, %35 : i1
    %38 = comb.and %36, %37 : i1
    sv.assign %allDone, %38 : i1
    %39 = sv.read_inout %3 : !hw.inout<i1>
    %40 = sv.read_inout %11 : !hw.inout<i1>
    %41 = sv.read_inout %19 : !hw.inout<i1>
    %42 = sv.read_inout %27 : !hw.inout<i1>
    %43 = sv.read_inout %allDone : !hw.inout<i1>
    hw.output %43, %in0, %39, %in0, %40, %in0, %41, %in0, %42 : i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module @handshake_buffer_in_ui1_out_ui1_2slots_seq(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1) {
    %ready1_reg = sv.reg sym @ready1_reg {hw.verilogName = "ready1_reg"} : !hw.inout<i1> 
    %ready0_reg = sv.reg sym @ready0_reg {hw.verilogName = "ready0_reg"} : !hw.inout<i1> 
    %true = hw.constant true
    %valid0_reg = sv.reg sym @valid0_reg {hw.verilogName = "valid0_reg"} : !hw.inout<i1> 
    %0 = sv.read_inout %valid0_reg : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = sv.read_inout %ready0_reg : !hw.inout<i1>
    %3 = comb.xor %2, %true : i1
    %4 = comb.or %1, %3 : i1
    %5 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %5, %4 : i1
    %data0_reg = sv.reg sym @data0_reg {hw.verilogName = "data0_reg"} : !hw.inout<i1> 
    %ctrl_data0_reg = sv.reg sym @ctrl_data0_reg {hw.verilogName = "ctrl_data0_reg"} : !hw.inout<i1> 
    %valid1_reg = sv.reg sym @valid1_reg {hw.verilogName = "valid1_reg"} : !hw.inout<i1> 
    %6 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %7 = comb.xor %6, %true : i1
    %8 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %9 = comb.xor %8, %true : i1
    %10 = comb.or %7, %9 : i1
    %11 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %11, %10 : i1
    %data1_reg = sv.reg sym @data1_reg {hw.verilogName = "data1_reg"} : !hw.inout<i1> 
    %12 = sv.read_inout %valid1_reg : !hw.inout<i1>
    %13 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %14 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %15 = comb.mux %13, %14, %12 : i1
    %ctrl_data1_reg = sv.reg sym @ctrl_data1_reg {hw.verilogName = "ctrl_data1_reg"} : !hw.inout<i1> 
    sv.alwaysff(posedge %clock) {
      %21 = sv.logic {hw.verilogName = "_GEN_1"} : !hw.inout<i1>
      %22 = sv.logic {hw.verilogName = "_GEN_2"} : !hw.inout<i1>
      %23 = sv.logic {hw.verilogName = "_GEN_3"} : !hw.inout<i1>
      %24 = sv.logic {hw.verilogName = "_GEN_4"} : !hw.inout<i1>
      %true_0 = hw.constant true
      %25 = sv.read_inout %11 : !hw.inout<i1>
      %26 = comb.xor %25, %true_0 : i1
      %true_1 = hw.constant true
      %27 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %28 = comb.xor %27, %true_1 : i1
      %29 = comb.and %26, %28 : i1
      sv.bpassign %21, %29 : i1
      %30 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %31 = sv.read_inout %11 : !hw.inout<i1>
      %32 = comb.and %31, %30 : i1
      sv.bpassign %22, %32 : i1
      %33 = comb.xor %out0_ready, %true_0 : i1
      %true_2 = hw.constant true
      %34 = sv.read_inout %ready1_reg : !hw.inout<i1>
      %35 = comb.xor %34, %true_2 : i1
      %36 = comb.and %33, %35 : i1
      sv.bpassign %23, %36 : i1
      %37 = sv.read_inout %ready1_reg : !hw.inout<i1>
      %38 = comb.and %out0_ready, %37 : i1
      sv.bpassign %24, %38 : i1
      %39 = sv.read_inout %valid0_reg : !hw.inout<i1>
      %40 = sv.read_inout %5 : !hw.inout<i1>
      %41 = comb.mux %40, %in0_valid, %39 : i1
      sv.passign %valid0_reg, %41 : i1
      %42 = sv.read_inout %5 : !hw.inout<i1>
      %43 = sv.read_inout %data0_reg : !hw.inout<i1>
      %44 = comb.mux %42, %in0, %43 : i1
      sv.passign %data0_reg, %44 : i1
      %45 = sv.read_inout %22 : !hw.inout<i1>
      %46 = comb.xor %45, %true_0 : i1
      %47 = sv.read_inout %valid0_reg : !hw.inout<i1>
      %48 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %49 = sv.read_inout %21 : !hw.inout<i1>
      %50 = comb.mux %49, %47, %48 : i1
      %51 = comb.and %46, %50 : i1
      sv.passign %ready0_reg, %51 : i1
      %52 = sv.read_inout %22 : !hw.inout<i1>
      %53 = comb.xor %52, %true_0 : i1
      %54 = sv.read_inout %data0_reg : !hw.inout<i1>
      %55 = sv.read_inout %21 : !hw.inout<i1>
      %56 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
      %57 = comb.mux %55, %54, %56 : i1
      %58 = comb.and %53, %57 : i1
      sv.passign %ctrl_data0_reg, %58 : i1
      %59 = sv.read_inout %valid0_reg : !hw.inout<i1>
      %60 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %61 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %62 = comb.mux %61, %60, %59 : i1
      %63 = sv.read_inout %valid1_reg : !hw.inout<i1>
      %64 = sv.read_inout %11 : !hw.inout<i1>
      %65 = comb.mux %64, %62, %63 : i1
      sv.passign %valid1_reg, %65 : i1
      %66 = sv.read_inout %data0_reg : !hw.inout<i1>
      %67 = sv.read_inout %ctrl_data0_reg : !hw.inout<i1>
      %68 = sv.read_inout %ready0_reg : !hw.inout<i1>
      %69 = comb.mux %68, %67, %66 : i1
      %70 = sv.read_inout %11 : !hw.inout<i1>
      %71 = sv.read_inout %data1_reg : !hw.inout<i1>
      %72 = comb.mux %70, %69, %71 : i1
      sv.passign %data1_reg, %72 : i1
      %73 = sv.read_inout %24 : !hw.inout<i1>
      %74 = comb.xor %73, %true_0 : i1
      %75 = sv.read_inout %valid1_reg : !hw.inout<i1>
      %76 = sv.read_inout %ready1_reg : !hw.inout<i1>
      %77 = sv.read_inout %23 : !hw.inout<i1>
      %78 = comb.mux %77, %75, %76 : i1
      %79 = comb.and %74, %78 : i1
      sv.passign %ready1_reg, %79 : i1
      %80 = sv.read_inout %24 : !hw.inout<i1>
      %81 = comb.xor %80, %true_0 : i1
      %82 = sv.read_inout %data1_reg : !hw.inout<i1>
      %83 = sv.read_inout %ctrl_data1_reg : !hw.inout<i1>
      %84 = sv.read_inout %23 : !hw.inout<i1>
      %85 = comb.mux %84, %82, %83 : i1
      %86 = comb.and %81, %85 : i1
      sv.passign %ctrl_data1_reg, %86 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %valid0_reg, %false : i1
      sv.passign %data0_reg, %false : i1
      sv.passign %ready0_reg, %false : i1
      sv.passign %ctrl_data0_reg, %false : i1
      sv.passign %valid1_reg, %false : i1
      sv.passign %data1_reg, %false : i1
      sv.passign %ready1_reg, %false : i1
      sv.passign %ctrl_data1_reg, %false : i1
    }
    %16 = sv.read_inout %data1_reg : !hw.inout<i1>
    %17 = sv.read_inout %ready1_reg : !hw.inout<i1>
    %18 = sv.read_inout %ctrl_data1_reg : !hw.inout<i1>
    %19 = comb.mux %17, %18, %16 : i1
    %20 = sv.read_inout %5 : !hw.inout<i1>
    hw.output %20, %19, %15 : i1, i1, i1
  }
  hw.module @handshake_mux_in_ui1_3ins_1outs_ctrl(in %select : i1, in %select_valid : i1, in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %0 = comb.concat %false, %select : i1, i1
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i2>
    sv.assign %2, %1 : i2
    %3 = comb.mux %select, %in1_valid, %in0_valid : i1
    %4 = comb.and %3, %select_valid : i1
    %5 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %5, %4 : i1
    %6 = sv.read_inout %5 : !hw.inout<i1>
    %7 = comb.and %6, %out0_ready : i1
    %8 = sv.wire {hw.verilogName = "_GEN_1"} : !hw.inout<i1>
    sv.assign %8, %7 : i1
    %9 = sv.read_inout %2 : !hw.inout<i2>
    %10 = comb.extract %9 from 0 : (i2) -> i1
    %11 = sv.read_inout %8 : !hw.inout<i1>
    %12 = comb.and %10, %11 : i1
    %13 = sv.read_inout %2 : !hw.inout<i2>
    %14 = comb.extract %13 from 1 : (i2) -> i1
    %15 = sv.read_inout %8 : !hw.inout<i1>
    %16 = comb.and %14, %15 : i1
    %c0_i0 = hw.constant 0 : i0
    %17 = sv.read_inout %5 : !hw.inout<i1>
    %18 = sv.read_inout %8 : !hw.inout<i1>
    hw.output %18, %12, %16, %c0_i0, %17 : i1, i1, i1, i0, i1
  }
  hw.module @handshake_mux_in_ui1_ui64_ui64_out_ui64(in %select : i1, in %select_valid : i1, in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out select_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %0 = comb.concat %false, %select : i1, i1
    %1 = comb.shl %c1_i2, %0 : i2
    %2 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i2>
    sv.assign %2, %1 : i2
    %3 = comb.mux %select, %in1_valid, %in0_valid : i1
    %4 = comb.and %3, %select_valid : i1
    %5 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %5, %4 : i1
    %6 = sv.read_inout %5 : !hw.inout<i1>
    %7 = comb.and %6, %out0_ready : i1
    %8 = sv.wire {hw.verilogName = "_GEN_1"} : !hw.inout<i1>
    sv.assign %8, %7 : i1
    %9 = sv.read_inout %2 : !hw.inout<i2>
    %10 = comb.extract %9 from 0 : (i2) -> i1
    %11 = sv.read_inout %8 : !hw.inout<i1>
    %12 = comb.and %10, %11 : i1
    %13 = sv.read_inout %2 : !hw.inout<i2>
    %14 = comb.extract %13 from 1 : (i2) -> i1
    %15 = sv.read_inout %8 : !hw.inout<i1>
    %16 = comb.and %14, %15 : i1
    %17 = comb.mux %select, %in1, %in0 : i64
    %18 = sv.read_inout %5 : !hw.inout<i1>
    %19 = sv.read_inout %8 : !hw.inout<i1>
    hw.output %19, %12, %16, %17, %18 : i1, i1, i1, i64, i1
  }
  hw.module @arith_cmpi_in_ui64_ui64_out_ui1_slt(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i1, out out0_valid : i1) {
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %1, %0 : i1
    %2 = sv.read_inout %1 : !hw.inout<i1>
    %3 = comb.and %out0_ready, %2 : i1
    %4 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %4, %3 : i1
    %5 = comb.icmp slt %in0, %in1 : i64
    %6 = sv.read_inout %1 : !hw.inout<i1>
    %7 = sv.read_inout %4 : !hw.inout<i1>
    %8 = sv.read_inout %4 : !hw.inout<i1>
    hw.output %7, %8, %5, %6 : i1, i1, i1, i1
  }
  hw.module @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in %in0 : i1, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, in %out4_ready : i1, out in0_ready : i1, out out0 : i1, out out0_valid : i1, out out1 : i1, out out1_valid : i1, out out2 : i1, out out2_valid : i1, out out3 : i1, out out3_valid : i1, out out4 : i1, out out4_valid : i1) {
    %allDone = sv.wire {hw.verilogName = "allDone"} : !hw.inout<i1>
    %done4 = sv.wire {hw.verilogName = "done4"} : !hw.inout<i1>
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 {hw.verilogName = "emitted_0"} : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %3, %2 : i1
    %4 = sv.read_inout %3 : !hw.inout<i1>
    %5 = comb.and %out0_ready, %4 : i1
    %6 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %7 = comb.or %5, %6 : i1
    %done0 = sv.wire {hw.verilogName = "done0"} : !hw.inout<i1>
    sv.assign %done0, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 {hw.verilogName = "emitted_1"} : !hw.inout<i1> 
    %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %9 = comb.xor %8, %true : i1
    %10 = comb.and %9, %in0_valid : i1
    %11 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %11, %10 : i1
    %12 = sv.read_inout %11 : !hw.inout<i1>
    %13 = comb.and %out1_ready, %12 : i1
    %14 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %15 = comb.or %13, %14 : i1
    %done1 = sv.wire {hw.verilogName = "done1"} : !hw.inout<i1>
    sv.assign %done1, %15 : i1
    %emitted_2 = sv.reg sym @emitted_2 {hw.verilogName = "emitted_2"} : !hw.inout<i1> 
    %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %17 = comb.xor %16, %true : i1
    %18 = comb.and %17, %in0_valid : i1
    %19 = sv.wire {hw.verilogName = "_GEN_1"} : !hw.inout<i1>
    sv.assign %19, %18 : i1
    %20 = sv.read_inout %19 : !hw.inout<i1>
    %21 = comb.and %out2_ready, %20 : i1
    %22 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %23 = comb.or %21, %22 : i1
    %done2 = sv.wire {hw.verilogName = "done2"} : !hw.inout<i1>
    sv.assign %done2, %23 : i1
    %emitted_3 = sv.reg sym @emitted_3 {hw.verilogName = "emitted_3"} : !hw.inout<i1> 
    %24 = sv.read_inout %emitted_3 : !hw.inout<i1>
    %25 = comb.xor %24, %true : i1
    %26 = comb.and %25, %in0_valid : i1
    %27 = sv.wire {hw.verilogName = "_GEN_2"} : !hw.inout<i1>
    sv.assign %27, %26 : i1
    %28 = sv.read_inout %27 : !hw.inout<i1>
    %29 = comb.and %out3_ready, %28 : i1
    %30 = sv.read_inout %emitted_3 : !hw.inout<i1>
    %31 = comb.or %29, %30 : i1
    %done3 = sv.wire {hw.verilogName = "done3"} : !hw.inout<i1>
    sv.assign %done3, %31 : i1
    %emitted_4 = sv.reg sym @emitted_4 {hw.verilogName = "emitted_4"} : !hw.inout<i1> 
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %55 = sv.read_inout %allDone : !hw.inout<i1>
      %56 = comb.xor %55, %true_0 : i1
      %57 = sv.read_inout %done0 : !hw.inout<i1>
      %58 = comb.and %57, %56 : i1
      sv.passign %emitted_0, %58 : i1
      %59 = sv.read_inout %allDone : !hw.inout<i1>
      %60 = comb.xor %59, %true_0 : i1
      %61 = sv.read_inout %done1 : !hw.inout<i1>
      %62 = comb.and %61, %60 : i1
      sv.passign %emitted_1, %62 : i1
      %63 = sv.read_inout %allDone : !hw.inout<i1>
      %64 = comb.xor %63, %true_0 : i1
      %65 = sv.read_inout %done2 : !hw.inout<i1>
      %66 = comb.and %65, %64 : i1
      sv.passign %emitted_2, %66 : i1
      %67 = sv.read_inout %allDone : !hw.inout<i1>
      %68 = comb.xor %67, %true_0 : i1
      %69 = sv.read_inout %done3 : !hw.inout<i1>
      %70 = comb.and %69, %68 : i1
      sv.passign %emitted_3, %70 : i1
      %71 = sv.read_inout %allDone : !hw.inout<i1>
      %72 = comb.xor %71, %true_0 : i1
      %73 = sv.read_inout %done4 : !hw.inout<i1>
      %74 = comb.and %73, %72 : i1
      sv.passign %emitted_4, %74 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
      sv.passign %emitted_3, %false : i1
      sv.passign %emitted_4, %false : i1
    }
    %32 = sv.read_inout %emitted_4 : !hw.inout<i1>
    %33 = comb.xor %32, %true : i1
    %34 = comb.and %33, %in0_valid : i1
    %35 = sv.wire {hw.verilogName = "_GEN_3"} : !hw.inout<i1>
    sv.assign %35, %34 : i1
    %36 = sv.read_inout %35 : !hw.inout<i1>
    %37 = comb.and %out4_ready, %36 : i1
    %38 = sv.read_inout %emitted_4 : !hw.inout<i1>
    %39 = comb.or %37, %38 : i1
    sv.assign %done4, %39 : i1
    %40 = sv.read_inout %done0 : !hw.inout<i1>
    %41 = sv.read_inout %done1 : !hw.inout<i1>
    %42 = sv.read_inout %done2 : !hw.inout<i1>
    %43 = sv.read_inout %done3 : !hw.inout<i1>
    %44 = sv.read_inout %done4 : !hw.inout<i1>
    %45 = comb.and %40, %41 : i1
    %46 = comb.and %43, %44 : i1
    %47 = comb.and %42, %46 : i1
    %48 = comb.and %45, %47 : i1
    sv.assign %allDone, %48 : i1
    %49 = sv.read_inout %3 : !hw.inout<i1>
    %50 = sv.read_inout %11 : !hw.inout<i1>
    %51 = sv.read_inout %19 : !hw.inout<i1>
    %52 = sv.read_inout %27 : !hw.inout<i1>
    %53 = sv.read_inout %35 : !hw.inout<i1>
    %54 = sv.read_inout %allDone : !hw.inout<i1>
    hw.output %54, %in0, %49, %in0, %50, %in0, %51, %in0, %52, %in0, %53 : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(in %cond : i1, in %cond_valid : i1, in %data : i64, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i64, out outTrue_valid : i1, out outFalse : i64, out outFalse_valid : i1) {
    %true = hw.constant true
    %0 = comb.and %cond_valid, %data_valid : i1
    %1 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %1, %0 : i1
    %2 = sv.read_inout %1 : !hw.inout<i1>
    %3 = comb.and %cond, %2 : i1
    %4 = comb.xor %cond, %true : i1
    %5 = sv.read_inout %1 : !hw.inout<i1>
    %6 = comb.and %4, %5 : i1
    %7 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
    %8 = sv.read_inout %1 : !hw.inout<i1>
    %9 = comb.and %7, %8 : i1
    %10 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %10, %9 : i1
    %11 = sv.read_inout %10 : !hw.inout<i1>
    %12 = sv.read_inout %10 : !hw.inout<i1>
    hw.output %11, %12, %data, %3, %data, %6 : i1, i1, i64, i1, i64, i1
  }
  hw.module @handshake_sink_in_ui64(in %in0 : i64, in %in0_valid : i1, out in0_ready : i1) {
    %true = hw.constant true
    hw.output %true : i1
  }
  hw.module @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in %in0 : i64, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i64, out out0_valid : i1, out out1 : i64, out out1_valid : i1, out out2 : i64, out out2_valid : i1, out out3 : i64, out out3_valid : i1) {
    %allDone = sv.wire {hw.verilogName = "allDone"} : !hw.inout<i1>
    %done3 = sv.wire {hw.verilogName = "done3"} : !hw.inout<i1>
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 {hw.verilogName = "emitted_0"} : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %3, %2 : i1
    %4 = sv.read_inout %3 : !hw.inout<i1>
    %5 = comb.and %out0_ready, %4 : i1
    %6 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %7 = comb.or %5, %6 : i1
    %done0 = sv.wire {hw.verilogName = "done0"} : !hw.inout<i1>
    sv.assign %done0, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 {hw.verilogName = "emitted_1"} : !hw.inout<i1> 
    %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %9 = comb.xor %8, %true : i1
    %10 = comb.and %9, %in0_valid : i1
    %11 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %11, %10 : i1
    %12 = sv.read_inout %11 : !hw.inout<i1>
    %13 = comb.and %out1_ready, %12 : i1
    %14 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %15 = comb.or %13, %14 : i1
    %done1 = sv.wire {hw.verilogName = "done1"} : !hw.inout<i1>
    sv.assign %done1, %15 : i1
    %emitted_2 = sv.reg sym @emitted_2 {hw.verilogName = "emitted_2"} : !hw.inout<i1> 
    %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %17 = comb.xor %16, %true : i1
    %18 = comb.and %17, %in0_valid : i1
    %19 = sv.wire {hw.verilogName = "_GEN_1"} : !hw.inout<i1>
    sv.assign %19, %18 : i1
    %20 = sv.read_inout %19 : !hw.inout<i1>
    %21 = comb.and %out2_ready, %20 : i1
    %22 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %23 = comb.or %21, %22 : i1
    %done2 = sv.wire {hw.verilogName = "done2"} : !hw.inout<i1>
    sv.assign %done2, %23 : i1
    %emitted_3 = sv.reg sym @emitted_3 {hw.verilogName = "emitted_3"} : !hw.inout<i1> 
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %44 = sv.read_inout %allDone : !hw.inout<i1>
      %45 = comb.xor %44, %true_0 : i1
      %46 = sv.read_inout %done0 : !hw.inout<i1>
      %47 = comb.and %46, %45 : i1
      sv.passign %emitted_0, %47 : i1
      %48 = sv.read_inout %allDone : !hw.inout<i1>
      %49 = comb.xor %48, %true_0 : i1
      %50 = sv.read_inout %done1 : !hw.inout<i1>
      %51 = comb.and %50, %49 : i1
      sv.passign %emitted_1, %51 : i1
      %52 = sv.read_inout %allDone : !hw.inout<i1>
      %53 = comb.xor %52, %true_0 : i1
      %54 = sv.read_inout %done2 : !hw.inout<i1>
      %55 = comb.and %54, %53 : i1
      sv.passign %emitted_2, %55 : i1
      %56 = sv.read_inout %allDone : !hw.inout<i1>
      %57 = comb.xor %56, %true_0 : i1
      %58 = sv.read_inout %done3 : !hw.inout<i1>
      %59 = comb.and %58, %57 : i1
      sv.passign %emitted_3, %59 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
      sv.passign %emitted_3, %false : i1
    }
    %24 = sv.read_inout %emitted_3 : !hw.inout<i1>
    %25 = comb.xor %24, %true : i1
    %26 = comb.and %25, %in0_valid : i1
    %27 = sv.wire {hw.verilogName = "_GEN_2"} : !hw.inout<i1>
    sv.assign %27, %26 : i1
    %28 = sv.read_inout %27 : !hw.inout<i1>
    %29 = comb.and %out3_ready, %28 : i1
    %30 = sv.read_inout %emitted_3 : !hw.inout<i1>
    %31 = comb.or %29, %30 : i1
    sv.assign %done3, %31 : i1
    %32 = sv.read_inout %done0 : !hw.inout<i1>
    %33 = sv.read_inout %done1 : !hw.inout<i1>
    %34 = sv.read_inout %done2 : !hw.inout<i1>
    %35 = sv.read_inout %done3 : !hw.inout<i1>
    %36 = comb.and %32, %33 : i1
    %37 = comb.and %34, %35 : i1
    %38 = comb.and %36, %37 : i1
    sv.assign %allDone, %38 : i1
    %39 = sv.read_inout %3 : !hw.inout<i1>
    %40 = sv.read_inout %11 : !hw.inout<i1>
    %41 = sv.read_inout %19 : !hw.inout<i1>
    %42 = sv.read_inout %27 : !hw.inout<i1>
    %43 = sv.read_inout %allDone : !hw.inout<i1>
    hw.output %43, %in0, %39, %in0, %40, %in0, %41, %in0, %42 : i1, i64, i1, i64, i1, i64, i1, i64, i1
  }
  hw.module @handshake_cond_br_in_ui1_2ins_2outs_ctrl(in %cond : i1, in %cond_valid : i1, in %data : i0, in %data_valid : i1, in %outTrue_ready : i1, in %outFalse_ready : i1, out cond_ready : i1, out data_ready : i1, out outTrue : i0, out outTrue_valid : i1, out outFalse : i0, out outFalse_valid : i1) {
    %true = hw.constant true
    %0 = comb.and %cond_valid, %data_valid : i1
    %1 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %1, %0 : i1
    %2 = sv.read_inout %1 : !hw.inout<i1>
    %3 = comb.and %cond, %2 : i1
    %4 = comb.xor %cond, %true : i1
    %5 = sv.read_inout %1 : !hw.inout<i1>
    %6 = comb.and %4, %5 : i1
    %7 = comb.mux %cond, %outTrue_ready, %outFalse_ready : i1
    %8 = sv.read_inout %1 : !hw.inout<i1>
    %9 = comb.and %7, %8 : i1
    %10 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %10, %9 : i1
    %11 = sv.read_inout %10 : !hw.inout<i1>
    %12 = sv.read_inout %10 : !hw.inout<i1>
    hw.output %11, %12, %data, %3, %data, %6 : i1, i1, i0, i1, i0, i1
  }
  hw.module @handshake_fork_1ins_4outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, in %out1_ready : i1, in %out2_ready : i1, in %out3_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1, out out1 : i0, out out1_valid : i1, out out2 : i0, out out2_valid : i1, out out3 : i0, out out3_valid : i1) {
    %allDone = sv.wire {hw.verilogName = "allDone"} : !hw.inout<i1>
    %done3 = sv.wire {hw.verilogName = "done3"} : !hw.inout<i1>
    %true = hw.constant true
    %emitted_0 = sv.reg sym @emitted_0 {hw.verilogName = "emitted_0"} : !hw.inout<i1> 
    %0 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %1 = comb.xor %0, %true : i1
    %2 = comb.and %1, %in0_valid : i1
    %3 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %3, %2 : i1
    %4 = sv.read_inout %3 : !hw.inout<i1>
    %5 = comb.and %out0_ready, %4 : i1
    %6 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %7 = comb.or %5, %6 : i1
    %done0 = sv.wire {hw.verilogName = "done0"} : !hw.inout<i1>
    sv.assign %done0, %7 : i1
    %emitted_1 = sv.reg sym @emitted_1 {hw.verilogName = "emitted_1"} : !hw.inout<i1> 
    %8 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %9 = comb.xor %8, %true : i1
    %10 = comb.and %9, %in0_valid : i1
    %11 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %11, %10 : i1
    %12 = sv.read_inout %11 : !hw.inout<i1>
    %13 = comb.and %out1_ready, %12 : i1
    %14 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %15 = comb.or %13, %14 : i1
    %done1 = sv.wire {hw.verilogName = "done1"} : !hw.inout<i1>
    sv.assign %done1, %15 : i1
    %emitted_2 = sv.reg sym @emitted_2 {hw.verilogName = "emitted_2"} : !hw.inout<i1> 
    %16 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %17 = comb.xor %16, %true : i1
    %18 = comb.and %17, %in0_valid : i1
    %19 = sv.wire {hw.verilogName = "_GEN_1"} : !hw.inout<i1>
    sv.assign %19, %18 : i1
    %20 = sv.read_inout %19 : !hw.inout<i1>
    %21 = comb.and %out2_ready, %20 : i1
    %22 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %23 = comb.or %21, %22 : i1
    %done2 = sv.wire {hw.verilogName = "done2"} : !hw.inout<i1>
    sv.assign %done2, %23 : i1
    %emitted_3 = sv.reg sym @emitted_3 {hw.verilogName = "emitted_3"} : !hw.inout<i1> 
    sv.alwaysff(posedge %clock) {
      %true_0 = hw.constant true
      %44 = sv.read_inout %allDone : !hw.inout<i1>
      %45 = comb.xor %44, %true_0 : i1
      %46 = sv.read_inout %done0 : !hw.inout<i1>
      %47 = comb.and %46, %45 : i1
      sv.passign %emitted_0, %47 : i1
      %48 = sv.read_inout %allDone : !hw.inout<i1>
      %49 = comb.xor %48, %true_0 : i1
      %50 = sv.read_inout %done1 : !hw.inout<i1>
      %51 = comb.and %50, %49 : i1
      sv.passign %emitted_1, %51 : i1
      %52 = sv.read_inout %allDone : !hw.inout<i1>
      %53 = comb.xor %52, %true_0 : i1
      %54 = sv.read_inout %done2 : !hw.inout<i1>
      %55 = comb.and %54, %53 : i1
      sv.passign %emitted_2, %55 : i1
      %56 = sv.read_inout %allDone : !hw.inout<i1>
      %57 = comb.xor %56, %true_0 : i1
      %58 = sv.read_inout %done3 : !hw.inout<i1>
      %59 = comb.and %58, %57 : i1
      sv.passign %emitted_3, %59 : i1
    }(syncreset : posedge %reset) {
      %false = hw.constant false
      sv.passign %emitted_0, %false : i1
      sv.passign %emitted_1, %false : i1
      sv.passign %emitted_2, %false : i1
      sv.passign %emitted_3, %false : i1
    }
    %24 = sv.read_inout %emitted_3 : !hw.inout<i1>
    %25 = comb.xor %24, %true : i1
    %26 = comb.and %25, %in0_valid : i1
    %27 = sv.wire {hw.verilogName = "_GEN_2"} : !hw.inout<i1>
    sv.assign %27, %26 : i1
    %28 = sv.read_inout %27 : !hw.inout<i1>
    %29 = comb.and %out3_ready, %28 : i1
    %30 = sv.read_inout %emitted_3 : !hw.inout<i1>
    %31 = comb.or %29, %30 : i1
    sv.assign %done3, %31 : i1
    %32 = sv.read_inout %done0 : !hw.inout<i1>
    %33 = sv.read_inout %done1 : !hw.inout<i1>
    %34 = sv.read_inout %done2 : !hw.inout<i1>
    %35 = sv.read_inout %done3 : !hw.inout<i1>
    %36 = comb.and %32, %33 : i1
    %37 = comb.and %34, %35 : i1
    %38 = comb.and %36, %37 : i1
    sv.assign %allDone, %38 : i1
    %39 = sv.read_inout %3 : !hw.inout<i1>
    %40 = sv.read_inout %11 : !hw.inout<i1>
    %41 = sv.read_inout %19 : !hw.inout<i1>
    %42 = sv.read_inout %27 : !hw.inout<i1>
    %43 = sv.read_inout %allDone : !hw.inout<i1>
    hw.output %43, %in0, %39, %in0, %40, %in0, %41, %in0, %42 : i1, i0, i1, i0, i1, i0, i1, i0, i1
  }
  hw.module @handshake_join_4ins_1outs_ctrl(in %in0 : i0, in %in0_valid : i1, in %in1 : i0, in %in1_valid : i1, in %in2 : i0, in %in2_valid : i1, in %in3 : i0, in %in3_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out in2_ready : i1, out in3_ready : i1, out out0 : i0, out out0_valid : i1) {
    %c0_i0 = hw.constant 0 : i0
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = comb.and %in2_valid, %in3_valid : i1
    %2 = comb.and %0, %1 : i1
    %3 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %3, %2 : i1
    %4 = sv.read_inout %3 : !hw.inout<i1>
    %5 = comb.and %out0_ready, %4 : i1
    %6 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %6, %5 : i1
    %7 = sv.read_inout %3 : !hw.inout<i1>
    %8 = sv.read_inout %6 : !hw.inout<i1>
    %9 = sv.read_inout %6 : !hw.inout<i1>
    %10 = sv.read_inout %6 : !hw.inout<i1>
    %11 = sv.read_inout %6 : !hw.inout<i1>
    hw.output %8, %9, %10, %11, %c0_i0, %7 : i1, i1, i1, i1, i0, i1
  }
  hw.module @handshake_load_in_ui64_ui64_out_ui64_ui64(in %addrIn0 : i64, in %addrIn0_valid : i1, in %dataFromMem : i64, in %dataFromMem_valid : i1, in %ctrl : i0, in %ctrl_valid : i1, in %dataOut_ready : i1, in %addrOut0_ready : i1, out addrIn0_ready : i1, out dataFromMem_ready : i1, out ctrl_ready : i1, out dataOut : i64, out dataOut_valid : i1, out addrOut0 : i64, out addrOut0_valid : i1) {
    %0 = comb.and %addrIn0_valid, %ctrl_valid : i1
    %1 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %1, %0 : i1
    %2 = sv.read_inout %1 : !hw.inout<i1>
    %3 = comb.and %addrOut0_ready, %2 : i1
    %4 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %4, %3 : i1
    %5 = sv.read_inout %1 : !hw.inout<i1>
    %6 = sv.read_inout %4 : !hw.inout<i1>
    %7 = sv.read_inout %4 : !hw.inout<i1>
    hw.output %6, %dataOut_ready, %7, %dataFromMem, %dataFromMem_valid, %addrIn0, %5 : i1, i1, i1, i64, i1, i64, i1
  }
  hw.module @arith_addi_in_ui64_ui64_out_ui64(in %in0 : i64, in %in0_valid : i1, in %in1 : i64, in %in1_valid : i1, in %out0_ready : i1, out in0_ready : i1, out in1_ready : i1, out out0 : i64, out out0_valid : i1) {
    %0 = comb.and %in0_valid, %in1_valid : i1
    %1 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %1, %0 : i1
    %2 = sv.read_inout %1 : !hw.inout<i1>
    %3 = comb.and %out0_ready, %2 : i1
    %4 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %4, %3 : i1
    %5 = comb.add %in0, %in1 : i64
    %6 = sv.read_inout %1 : !hw.inout<i1>
    %7 = sv.read_inout %4 : !hw.inout<i1>
    %8 = sv.read_inout %4 : !hw.inout<i1>
    hw.output %7, %8, %5, %6 : i1, i1, i64, i1
  }
  hw.module @main(in %in0 : i0, in %in0_valid : i1, in %clock : i1, in %reset : i1, in %out0_ready : i1, out in0_ready : i1, out out0 : i0, out out0_valid : i1) {
    %_handshake_buffer115_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer115_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer115_out0 = sv.wire {hw.verilogName = "_handshake_buffer115_out0"} : !hw.inout<i64>
    %_handshake_buffer115_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer115_out0_valid"} : !hw.inout<i1>
    %_arith_addi1_in0_ready = sv.wire {hw.verilogName = "_arith_addi1_in0_ready"} : !hw.inout<i1>
    %_arith_addi1_in1_ready = sv.wire {hw.verilogName = "_arith_addi1_in1_ready"} : !hw.inout<i1>
    %_arith_addi1_out0 = sv.wire {hw.verilogName = "_arith_addi1_out0"} : !hw.inout<i64>
    %_arith_addi1_out0_valid = sv.wire {hw.verilogName = "_arith_addi1_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer114_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer114_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer114_out0 = sv.wire {hw.verilogName = "_handshake_buffer114_out0"} : !hw.inout<i64>
    %_handshake_buffer114_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer114_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer113_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer113_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer113_out0 = sv.wire {hw.verilogName = "_handshake_buffer113_out0"} : !hw.inout<i64>
    %_handshake_buffer113_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer113_out0_valid"} : !hw.inout<i1>
    %_handshake_store6_addrIn0_ready = sv.wire {hw.verilogName = "_handshake_store6_addrIn0_ready"} : !hw.inout<i1>
    %_handshake_store6_dataIn_ready = sv.wire {hw.verilogName = "_handshake_store6_dataIn_ready"} : !hw.inout<i1>
    %_handshake_store6_ctrl_ready = sv.wire {hw.verilogName = "_handshake_store6_ctrl_ready"} : !hw.inout<i1>
    %_handshake_store6_dataToMem = sv.wire {hw.verilogName = "_handshake_store6_dataToMem"} : !hw.inout<i64>
    %_handshake_store6_dataToMem_valid = sv.wire {hw.verilogName = "_handshake_store6_dataToMem_valid"} : !hw.inout<i1>
    %_handshake_store6_addrOut0 = sv.wire {hw.verilogName = "_handshake_store6_addrOut0"} : !hw.inout<i64>
    %_handshake_store6_addrOut0_valid = sv.wire {hw.verilogName = "_handshake_store6_addrOut0_valid"} : !hw.inout<i1>
    %_handshake_buffer112_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer112_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer112_out0 = sv.wire {hw.verilogName = "_handshake_buffer112_out0"} : !hw.inout<i64>
    %_handshake_buffer112_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer112_out0_valid"} : !hw.inout<i1>
    %_arith_addi0_in0_ready = sv.wire {hw.verilogName = "_arith_addi0_in0_ready"} : !hw.inout<i1>
    %_arith_addi0_in1_ready = sv.wire {hw.verilogName = "_arith_addi0_in1_ready"} : !hw.inout<i1>
    %_arith_addi0_out0 = sv.wire {hw.verilogName = "_arith_addi0_out0"} : !hw.inout<i64>
    %_arith_addi0_out0_valid = sv.wire {hw.verilogName = "_arith_addi0_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer111_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer111_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer111_out0 = sv.wire {hw.verilogName = "_handshake_buffer111_out0"} : !hw.inout<i64>
    %_handshake_buffer111_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer111_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer110_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer110_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer110_out0 = sv.wire {hw.verilogName = "_handshake_buffer110_out0"} : !hw.inout<i64>
    %_handshake_buffer110_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer110_out0_valid"} : !hw.inout<i1>
    %_handshake_load1_addrIn0_ready = sv.wire {hw.verilogName = "_handshake_load1_addrIn0_ready"} : !hw.inout<i1>
    %_handshake_load1_dataFromMem_ready = sv.wire {hw.verilogName = "_handshake_load1_dataFromMem_ready"} : !hw.inout<i1>
    %_handshake_load1_ctrl_ready = sv.wire {hw.verilogName = "_handshake_load1_ctrl_ready"} : !hw.inout<i1>
    %_handshake_load1_dataOut = sv.wire {hw.verilogName = "_handshake_load1_dataOut"} : !hw.inout<i64>
    %_handshake_load1_dataOut_valid = sv.wire {hw.verilogName = "_handshake_load1_dataOut_valid"} : !hw.inout<i1>
    %_handshake_load1_addrOut0 = sv.wire {hw.verilogName = "_handshake_load1_addrOut0"} : !hw.inout<i64>
    %_handshake_load1_addrOut0_valid = sv.wire {hw.verilogName = "_handshake_load1_addrOut0_valid"} : !hw.inout<i1>
    %_handshake_buffer109_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer109_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer109_out0 = sv.wire {hw.verilogName = "_handshake_buffer109_out0"} : !hw.inout<i64>
    %_handshake_buffer109_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer109_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer108_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer108_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer108_out0 = sv.wire {hw.verilogName = "_handshake_buffer108_out0"} : !hw.inout<i64>
    %_handshake_buffer108_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer108_out0_valid"} : !hw.inout<i1>
    %_handshake_load0_addrIn0_ready = sv.wire {hw.verilogName = "_handshake_load0_addrIn0_ready"} : !hw.inout<i1>
    %_handshake_load0_dataFromMem_ready = sv.wire {hw.verilogName = "_handshake_load0_dataFromMem_ready"} : !hw.inout<i1>
    %_handshake_load0_ctrl_ready = sv.wire {hw.verilogName = "_handshake_load0_ctrl_ready"} : !hw.inout<i1>
    %_handshake_load0_dataOut = sv.wire {hw.verilogName = "_handshake_load0_dataOut"} : !hw.inout<i64>
    %_handshake_load0_dataOut_valid = sv.wire {hw.verilogName = "_handshake_load0_dataOut_valid"} : !hw.inout<i1>
    %_handshake_load0_addrOut0 = sv.wire {hw.verilogName = "_handshake_load0_addrOut0"} : !hw.inout<i64>
    %_handshake_load0_addrOut0_valid = sv.wire {hw.verilogName = "_handshake_load0_addrOut0_valid"} : !hw.inout<i1>
    %_handshake_buffer107_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer107_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer107_out0 = sv.wire {hw.verilogName = "_handshake_buffer107_out0"} : !hw.inout<i0>
    %_handshake_buffer107_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer107_out0_valid"} : !hw.inout<i1>
    %_handshake_join5_in0_ready = sv.wire {hw.verilogName = "_handshake_join5_in0_ready"} : !hw.inout<i1>
    %_handshake_join5_in1_ready = sv.wire {hw.verilogName = "_handshake_join5_in1_ready"} : !hw.inout<i1>
    %_handshake_join5_in2_ready = sv.wire {hw.verilogName = "_handshake_join5_in2_ready"} : !hw.inout<i1>
    %_handshake_join5_in3_ready = sv.wire {hw.verilogName = "_handshake_join5_in3_ready"} : !hw.inout<i1>
    %_handshake_join5_out0 = sv.wire {hw.verilogName = "_handshake_join5_out0"} : !hw.inout<i0>
    %_handshake_join5_out0_valid = sv.wire {hw.verilogName = "_handshake_join5_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer106_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer106_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer106_out0 = sv.wire {hw.verilogName = "_handshake_buffer106_out0"} : !hw.inout<i0>
    %_handshake_buffer106_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer106_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer105_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer105_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer105_out0 = sv.wire {hw.verilogName = "_handshake_buffer105_out0"} : !hw.inout<i0>
    %_handshake_buffer105_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer105_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer104_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer104_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer104_out0 = sv.wire {hw.verilogName = "_handshake_buffer104_out0"} : !hw.inout<i0>
    %_handshake_buffer104_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer104_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer103_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer103_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer103_out0 = sv.wire {hw.verilogName = "_handshake_buffer103_out0"} : !hw.inout<i0>
    %_handshake_buffer103_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer103_out0_valid"} : !hw.inout<i1>
    %_handshake_fork17_in0_ready = sv.wire {hw.verilogName = "_handshake_fork17_in0_ready"} : !hw.inout<i1>
    %_handshake_fork17_out0 = sv.wire {hw.verilogName = "_handshake_fork17_out0"} : !hw.inout<i0>
    %_handshake_fork17_out0_valid = sv.wire {hw.verilogName = "_handshake_fork17_out0_valid"} : !hw.inout<i1>
    %_handshake_fork17_out1 = sv.wire {hw.verilogName = "_handshake_fork17_out1"} : !hw.inout<i0>
    %_handshake_fork17_out1_valid = sv.wire {hw.verilogName = "_handshake_fork17_out1_valid"} : !hw.inout<i1>
    %_handshake_fork17_out2 = sv.wire {hw.verilogName = "_handshake_fork17_out2"} : !hw.inout<i0>
    %_handshake_fork17_out2_valid = sv.wire {hw.verilogName = "_handshake_fork17_out2_valid"} : !hw.inout<i1>
    %_handshake_fork17_out3 = sv.wire {hw.verilogName = "_handshake_fork17_out3"} : !hw.inout<i0>
    %_handshake_fork17_out3_valid = sv.wire {hw.verilogName = "_handshake_fork17_out3_valid"} : !hw.inout<i1>
    %_handshake_buffer102_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer102_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer102_out0 = sv.wire {hw.verilogName = "_handshake_buffer102_out0"} : !hw.inout<i0>
    %_handshake_buffer102_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer102_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer101_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer101_in0_ready"} : !hw.inout<i1>
    %_handshake_cond_br3_cond_ready = sv.wire {hw.verilogName = "_handshake_cond_br3_cond_ready"} : !hw.inout<i1>
    %_handshake_cond_br3_data_ready = sv.wire {hw.verilogName = "_handshake_cond_br3_data_ready"} : !hw.inout<i1>
    %_handshake_cond_br3_outTrue = sv.wire {hw.verilogName = "_handshake_cond_br3_outTrue"} : !hw.inout<i0>
    %_handshake_cond_br3_outTrue_valid = sv.wire {hw.verilogName = "_handshake_cond_br3_outTrue_valid"} : !hw.inout<i1>
    %_handshake_cond_br3_outFalse = sv.wire {hw.verilogName = "_handshake_cond_br3_outFalse"} : !hw.inout<i0>
    %_handshake_cond_br3_outFalse_valid = sv.wire {hw.verilogName = "_handshake_cond_br3_outFalse_valid"} : !hw.inout<i1>
    %_handshake_buffer100_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer100_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer100_out0 = sv.wire {hw.verilogName = "_handshake_buffer100_out0"} : !hw.inout<i64>
    %_handshake_buffer100_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer100_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer99_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer99_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer99_out0 = sv.wire {hw.verilogName = "_handshake_buffer99_out0"} : !hw.inout<i64>
    %_handshake_buffer99_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer99_out0_valid"} : !hw.inout<i1>
    %_handshake_fork16_in0_ready = sv.wire {hw.verilogName = "_handshake_fork16_in0_ready"} : !hw.inout<i1>
    %_handshake_fork16_out0 = sv.wire {hw.verilogName = "_handshake_fork16_out0"} : !hw.inout<i64>
    %_handshake_fork16_out0_valid = sv.wire {hw.verilogName = "_handshake_fork16_out0_valid"} : !hw.inout<i1>
    %_handshake_fork16_out1 = sv.wire {hw.verilogName = "_handshake_fork16_out1"} : !hw.inout<i64>
    %_handshake_fork16_out1_valid = sv.wire {hw.verilogName = "_handshake_fork16_out1_valid"} : !hw.inout<i1>
    %_handshake_sink2_in0_ready = sv.wire {hw.verilogName = "_handshake_sink2_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer98_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer98_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer98_out0 = sv.wire {hw.verilogName = "_handshake_buffer98_out0"} : !hw.inout<i64>
    %_handshake_buffer98_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer98_out0_valid"} : !hw.inout<i1>
    %_handshake_cond_br2_cond_ready = sv.wire {hw.verilogName = "_handshake_cond_br2_cond_ready"} : !hw.inout<i1>
    %_handshake_cond_br2_data_ready = sv.wire {hw.verilogName = "_handshake_cond_br2_data_ready"} : !hw.inout<i1>
    %_handshake_cond_br2_outTrue = sv.wire {hw.verilogName = "_handshake_cond_br2_outTrue"} : !hw.inout<i64>
    %_handshake_cond_br2_outTrue_valid = sv.wire {hw.verilogName = "_handshake_cond_br2_outTrue_valid"} : !hw.inout<i1>
    %_handshake_cond_br2_outFalse = sv.wire {hw.verilogName = "_handshake_cond_br2_outFalse"} : !hw.inout<i64>
    %_handshake_cond_br2_outFalse_valid = sv.wire {hw.verilogName = "_handshake_cond_br2_outFalse_valid"} : !hw.inout<i1>
    %_handshake_sink1_in0_ready = sv.wire {hw.verilogName = "_handshake_sink1_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer97_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer97_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer97_out0 = sv.wire {hw.verilogName = "_handshake_buffer97_out0"} : !hw.inout<i64>
    %_handshake_buffer97_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer97_out0_valid"} : !hw.inout<i1>
    %_handshake_cond_br1_cond_ready = sv.wire {hw.verilogName = "_handshake_cond_br1_cond_ready"} : !hw.inout<i1>
    %_handshake_cond_br1_data_ready = sv.wire {hw.verilogName = "_handshake_cond_br1_data_ready"} : !hw.inout<i1>
    %_handshake_cond_br1_outTrue = sv.wire {hw.verilogName = "_handshake_cond_br1_outTrue"} : !hw.inout<i64>
    %_handshake_cond_br1_outTrue_valid = sv.wire {hw.verilogName = "_handshake_cond_br1_outTrue_valid"} : !hw.inout<i1>
    %_handshake_cond_br1_outFalse = sv.wire {hw.verilogName = "_handshake_cond_br1_outFalse"} : !hw.inout<i64>
    %_handshake_cond_br1_outFalse_valid = sv.wire {hw.verilogName = "_handshake_cond_br1_outFalse_valid"} : !hw.inout<i1>
    %_handshake_buffer96_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer96_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer96_out0 = sv.wire {hw.verilogName = "_handshake_buffer96_out0"} : !hw.inout<i64>
    %_handshake_buffer96_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer96_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer95_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer95_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer95_out0 = sv.wire {hw.verilogName = "_handshake_buffer95_out0"} : !hw.inout<i64>
    %_handshake_buffer95_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer95_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer94_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer94_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer94_out0 = sv.wire {hw.verilogName = "_handshake_buffer94_out0"} : !hw.inout<i64>
    %_handshake_buffer94_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer94_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer93_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer93_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer93_out0 = sv.wire {hw.verilogName = "_handshake_buffer93_out0"} : !hw.inout<i64>
    %_handshake_buffer93_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer93_out0_valid"} : !hw.inout<i1>
    %_handshake_fork15_in0_ready = sv.wire {hw.verilogName = "_handshake_fork15_in0_ready"} : !hw.inout<i1>
    %_handshake_fork15_out0 = sv.wire {hw.verilogName = "_handshake_fork15_out0"} : !hw.inout<i64>
    %_handshake_fork15_out0_valid = sv.wire {hw.verilogName = "_handshake_fork15_out0_valid"} : !hw.inout<i1>
    %_handshake_fork15_out1 = sv.wire {hw.verilogName = "_handshake_fork15_out1"} : !hw.inout<i64>
    %_handshake_fork15_out1_valid = sv.wire {hw.verilogName = "_handshake_fork15_out1_valid"} : !hw.inout<i1>
    %_handshake_fork15_out2 = sv.wire {hw.verilogName = "_handshake_fork15_out2"} : !hw.inout<i64>
    %_handshake_fork15_out2_valid = sv.wire {hw.verilogName = "_handshake_fork15_out2_valid"} : !hw.inout<i1>
    %_handshake_fork15_out3 = sv.wire {hw.verilogName = "_handshake_fork15_out3"} : !hw.inout<i64>
    %_handshake_fork15_out3_valid = sv.wire {hw.verilogName = "_handshake_fork15_out3_valid"} : !hw.inout<i1>
    %_handshake_sink0_in0_ready = sv.wire {hw.verilogName = "_handshake_sink0_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer92_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer92_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer92_out0 = sv.wire {hw.verilogName = "_handshake_buffer92_out0"} : !hw.inout<i64>
    %_handshake_buffer92_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer92_out0_valid"} : !hw.inout<i1>
    %_handshake_cond_br0_cond_ready = sv.wire {hw.verilogName = "_handshake_cond_br0_cond_ready"} : !hw.inout<i1>
    %_handshake_cond_br0_data_ready = sv.wire {hw.verilogName = "_handshake_cond_br0_data_ready"} : !hw.inout<i1>
    %_handshake_cond_br0_outTrue = sv.wire {hw.verilogName = "_handshake_cond_br0_outTrue"} : !hw.inout<i64>
    %_handshake_cond_br0_outTrue_valid = sv.wire {hw.verilogName = "_handshake_cond_br0_outTrue_valid"} : !hw.inout<i1>
    %_handshake_cond_br0_outFalse = sv.wire {hw.verilogName = "_handshake_cond_br0_outFalse"} : !hw.inout<i64>
    %_handshake_cond_br0_outFalse_valid = sv.wire {hw.verilogName = "_handshake_cond_br0_outFalse_valid"} : !hw.inout<i1>
    %_handshake_buffer91_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer91_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer91_out0 = sv.wire {hw.verilogName = "_handshake_buffer91_out0"} : !hw.inout<i1>
    %_handshake_buffer91_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer91_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer90_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer90_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer90_out0 = sv.wire {hw.verilogName = "_handshake_buffer90_out0"} : !hw.inout<i1>
    %_handshake_buffer90_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer90_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer89_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer89_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer89_out0 = sv.wire {hw.verilogName = "_handshake_buffer89_out0"} : !hw.inout<i1>
    %_handshake_buffer89_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer89_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer88_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer88_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer88_out0 = sv.wire {hw.verilogName = "_handshake_buffer88_out0"} : !hw.inout<i1>
    %_handshake_buffer88_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer88_out0_valid"} : !hw.inout<i1>
    %_handshake_fork14_in0_ready = sv.wire {hw.verilogName = "_handshake_fork14_in0_ready"} : !hw.inout<i1>
    %_handshake_fork14_out0 = sv.wire {hw.verilogName = "_handshake_fork14_out0"} : !hw.inout<i1>
    %_handshake_fork14_out0_valid = sv.wire {hw.verilogName = "_handshake_fork14_out0_valid"} : !hw.inout<i1>
    %_handshake_fork14_out1 = sv.wire {hw.verilogName = "_handshake_fork14_out1"} : !hw.inout<i1>
    %_handshake_fork14_out1_valid = sv.wire {hw.verilogName = "_handshake_fork14_out1_valid"} : !hw.inout<i1>
    %_handshake_fork14_out2 = sv.wire {hw.verilogName = "_handshake_fork14_out2"} : !hw.inout<i1>
    %_handshake_fork14_out2_valid = sv.wire {hw.verilogName = "_handshake_fork14_out2_valid"} : !hw.inout<i1>
    %_handshake_fork14_out3 = sv.wire {hw.verilogName = "_handshake_fork14_out3"} : !hw.inout<i1>
    %_handshake_fork14_out3_valid = sv.wire {hw.verilogName = "_handshake_fork14_out3_valid"} : !hw.inout<i1>
    %_handshake_fork14_out4 = sv.wire {hw.verilogName = "_handshake_fork14_out4"} : !hw.inout<i1>
    %_handshake_fork14_out4_valid = sv.wire {hw.verilogName = "_handshake_fork14_out4_valid"} : !hw.inout<i1>
    %_handshake_buffer87_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer87_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer87_out0 = sv.wire {hw.verilogName = "_handshake_buffer87_out0"} : !hw.inout<i1>
    %_handshake_buffer87_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer87_out0_valid"} : !hw.inout<i1>
    %_arith_cmpi0_in0_ready = sv.wire {hw.verilogName = "_arith_cmpi0_in0_ready"} : !hw.inout<i1>
    %_arith_cmpi0_in1_ready = sv.wire {hw.verilogName = "_arith_cmpi0_in1_ready"} : !hw.inout<i1>
    %_arith_cmpi0_out0 = sv.wire {hw.verilogName = "_arith_cmpi0_out0"} : !hw.inout<i1>
    %_arith_cmpi0_out0_valid = sv.wire {hw.verilogName = "_arith_cmpi0_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer86_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer86_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer86_out0 = sv.wire {hw.verilogName = "_handshake_buffer86_out0"} : !hw.inout<i64>
    %_handshake_buffer86_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer86_out0_valid"} : !hw.inout<i1>
    %_handshake_mux3_select_ready = sv.wire {hw.verilogName = "_handshake_mux3_select_ready"} : !hw.inout<i1>
    %_handshake_mux3_in0_ready = sv.wire {hw.verilogName = "_handshake_mux3_in0_ready"} : !hw.inout<i1>
    %_handshake_mux3_in1_ready = sv.wire {hw.verilogName = "_handshake_mux3_in1_ready"} : !hw.inout<i1>
    %_handshake_mux3_out0 = sv.wire {hw.verilogName = "_handshake_mux3_out0"} : !hw.inout<i64>
    %_handshake_mux3_out0_valid = sv.wire {hw.verilogName = "_handshake_mux3_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer85_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer85_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer85_out0 = sv.wire {hw.verilogName = "_handshake_buffer85_out0"} : !hw.inout<i64>
    %_handshake_buffer85_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer85_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer84_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer84_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer84_out0 = sv.wire {hw.verilogName = "_handshake_buffer84_out0"} : !hw.inout<i64>
    %_handshake_buffer84_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer84_out0_valid"} : !hw.inout<i1>
    %_handshake_fork13_in0_ready = sv.wire {hw.verilogName = "_handshake_fork13_in0_ready"} : !hw.inout<i1>
    %_handshake_fork13_out0 = sv.wire {hw.verilogName = "_handshake_fork13_out0"} : !hw.inout<i64>
    %_handshake_fork13_out0_valid = sv.wire {hw.verilogName = "_handshake_fork13_out0_valid"} : !hw.inout<i1>
    %_handshake_fork13_out1 = sv.wire {hw.verilogName = "_handshake_fork13_out1"} : !hw.inout<i64>
    %_handshake_fork13_out1_valid = sv.wire {hw.verilogName = "_handshake_fork13_out1_valid"} : !hw.inout<i1>
    %_handshake_buffer83_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer83_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer83_out0 = sv.wire {hw.verilogName = "_handshake_buffer83_out0"} : !hw.inout<i64>
    %_handshake_buffer83_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer83_out0_valid"} : !hw.inout<i1>
    %_handshake_mux2_select_ready = sv.wire {hw.verilogName = "_handshake_mux2_select_ready"} : !hw.inout<i1>
    %_handshake_mux2_in0_ready = sv.wire {hw.verilogName = "_handshake_mux2_in0_ready"} : !hw.inout<i1>
    %_handshake_mux2_in1_ready = sv.wire {hw.verilogName = "_handshake_mux2_in1_ready"} : !hw.inout<i1>
    %_handshake_mux2_out0 = sv.wire {hw.verilogName = "_handshake_mux2_out0"} : !hw.inout<i64>
    %_handshake_mux2_out0_valid = sv.wire {hw.verilogName = "_handshake_mux2_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer82_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer82_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer82_out0 = sv.wire {hw.verilogName = "_handshake_buffer82_out0"} : !hw.inout<i64>
    %_handshake_buffer82_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer82_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer81_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer81_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer81_out0 = sv.wire {hw.verilogName = "_handshake_buffer81_out0"} : !hw.inout<i64>
    %_handshake_buffer81_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer81_out0_valid"} : !hw.inout<i1>
    %_handshake_fork12_in0_ready = sv.wire {hw.verilogName = "_handshake_fork12_in0_ready"} : !hw.inout<i1>
    %_handshake_fork12_out0 = sv.wire {hw.verilogName = "_handshake_fork12_out0"} : !hw.inout<i64>
    %_handshake_fork12_out0_valid = sv.wire {hw.verilogName = "_handshake_fork12_out0_valid"} : !hw.inout<i1>
    %_handshake_fork12_out1 = sv.wire {hw.verilogName = "_handshake_fork12_out1"} : !hw.inout<i64>
    %_handshake_fork12_out1_valid = sv.wire {hw.verilogName = "_handshake_fork12_out1_valid"} : !hw.inout<i1>
    %_handshake_buffer80_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer80_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer80_out0 = sv.wire {hw.verilogName = "_handshake_buffer80_out0"} : !hw.inout<i64>
    %_handshake_buffer80_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer80_out0_valid"} : !hw.inout<i1>
    %_handshake_mux1_select_ready = sv.wire {hw.verilogName = "_handshake_mux1_select_ready"} : !hw.inout<i1>
    %_handshake_mux1_in0_ready = sv.wire {hw.verilogName = "_handshake_mux1_in0_ready"} : !hw.inout<i1>
    %_handshake_mux1_in1_ready = sv.wire {hw.verilogName = "_handshake_mux1_in1_ready"} : !hw.inout<i1>
    %_handshake_mux1_out0 = sv.wire {hw.verilogName = "_handshake_mux1_out0"} : !hw.inout<i64>
    %_handshake_mux1_out0_valid = sv.wire {hw.verilogName = "_handshake_mux1_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer79_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer79_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer79_out0 = sv.wire {hw.verilogName = "_handshake_buffer79_out0"} : !hw.inout<i0>
    %_handshake_buffer79_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer79_out0_valid"} : !hw.inout<i1>
    %_handshake_mux0_select_ready = sv.wire {hw.verilogName = "_handshake_mux0_select_ready"} : !hw.inout<i1>
    %_handshake_mux0_in0_ready = sv.wire {hw.verilogName = "_handshake_mux0_in0_ready"} : !hw.inout<i1>
    %_handshake_mux0_in1_ready = sv.wire {hw.verilogName = "_handshake_mux0_in1_ready"} : !hw.inout<i1>
    %_handshake_mux0_out0 = sv.wire {hw.verilogName = "_handshake_mux0_out0"} : !hw.inout<i0>
    %_handshake_mux0_out0_valid = sv.wire {hw.verilogName = "_handshake_mux0_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer78_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer78_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer78_out0 = sv.wire {hw.verilogName = "_handshake_buffer78_out0"} : !hw.inout<i1>
    %_handshake_buffer78_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer78_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer77_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer77_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer77_out0 = sv.wire {hw.verilogName = "_handshake_buffer77_out0"} : !hw.inout<i1>
    %_handshake_buffer77_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer77_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer76_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer76_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer76_out0 = sv.wire {hw.verilogName = "_handshake_buffer76_out0"} : !hw.inout<i1>
    %_handshake_buffer76_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer76_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer75_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer75_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer75_out0 = sv.wire {hw.verilogName = "_handshake_buffer75_out0"} : !hw.inout<i1>
    %_handshake_buffer75_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer75_out0_valid"} : !hw.inout<i1>
    %_handshake_fork11_in0_ready = sv.wire {hw.verilogName = "_handshake_fork11_in0_ready"} : !hw.inout<i1>
    %_handshake_fork11_out0 = sv.wire {hw.verilogName = "_handshake_fork11_out0"} : !hw.inout<i1>
    %_handshake_fork11_out0_valid = sv.wire {hw.verilogName = "_handshake_fork11_out0_valid"} : !hw.inout<i1>
    %_handshake_fork11_out1 = sv.wire {hw.verilogName = "_handshake_fork11_out1"} : !hw.inout<i1>
    %_handshake_fork11_out1_valid = sv.wire {hw.verilogName = "_handshake_fork11_out1_valid"} : !hw.inout<i1>
    %_handshake_fork11_out2 = sv.wire {hw.verilogName = "_handshake_fork11_out2"} : !hw.inout<i1>
    %_handshake_fork11_out2_valid = sv.wire {hw.verilogName = "_handshake_fork11_out2_valid"} : !hw.inout<i1>
    %_handshake_fork11_out3 = sv.wire {hw.verilogName = "_handshake_fork11_out3"} : !hw.inout<i1>
    %_handshake_fork11_out3_valid = sv.wire {hw.verilogName = "_handshake_fork11_out3_valid"} : !hw.inout<i1>
    %_handshake_buffer74_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer74_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer74_out0 = sv.wire {hw.verilogName = "_handshake_buffer74_out0"} : !hw.inout<i1>
    %_handshake_buffer74_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer74_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer73_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer73_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer73_out0 = sv.wire {hw.verilogName = "_handshake_buffer73_out0"} : !hw.inout<i64>
    %_handshake_buffer73_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer73_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer72_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer72_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer72_out0 = sv.wire {hw.verilogName = "_handshake_buffer72_out0"} : !hw.inout<i64>
    %_handshake_buffer72_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer72_out0_valid"} : !hw.inout<i1>
    %_handshake_store5_addrIn0_ready = sv.wire {hw.verilogName = "_handshake_store5_addrIn0_ready"} : !hw.inout<i1>
    %_handshake_store5_dataIn_ready = sv.wire {hw.verilogName = "_handshake_store5_dataIn_ready"} : !hw.inout<i1>
    %_handshake_store5_ctrl_ready = sv.wire {hw.verilogName = "_handshake_store5_ctrl_ready"} : !hw.inout<i1>
    %_handshake_store5_dataToMem = sv.wire {hw.verilogName = "_handshake_store5_dataToMem"} : !hw.inout<i64>
    %_handshake_store5_dataToMem_valid = sv.wire {hw.verilogName = "_handshake_store5_dataToMem_valid"} : !hw.inout<i1>
    %_handshake_store5_addrOut0 = sv.wire {hw.verilogName = "_handshake_store5_addrOut0"} : !hw.inout<i64>
    %_handshake_store5_addrOut0_valid = sv.wire {hw.verilogName = "_handshake_store5_addrOut0_valid"} : !hw.inout<i1>
    %_handshake_buffer71_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer71_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer71_out0 = sv.wire {hw.verilogName = "_handshake_buffer71_out0"} : !hw.inout<i0>
    %_handshake_buffer71_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer71_out0_valid"} : !hw.inout<i1>
    %_handshake_join4_in0_ready = sv.wire {hw.verilogName = "_handshake_join4_in0_ready"} : !hw.inout<i1>
    %_handshake_join4_in1_ready = sv.wire {hw.verilogName = "_handshake_join4_in1_ready"} : !hw.inout<i1>
    %_handshake_join4_in2_ready = sv.wire {hw.verilogName = "_handshake_join4_in2_ready"} : !hw.inout<i1>
    %_handshake_join4_out0 = sv.wire {hw.verilogName = "_handshake_join4_out0"} : !hw.inout<i0>
    %_handshake_join4_out0_valid = sv.wire {hw.verilogName = "_handshake_join4_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer70_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer70_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer70_out0 = sv.wire {hw.verilogName = "_handshake_buffer70_out0"} : !hw.inout<i64>
    %_handshake_buffer70_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer70_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer69_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer69_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer69_out0 = sv.wire {hw.verilogName = "_handshake_buffer69_out0"} : !hw.inout<i64>
    %_handshake_buffer69_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer69_out0_valid"} : !hw.inout<i1>
    %_handshake_store4_addrIn0_ready = sv.wire {hw.verilogName = "_handshake_store4_addrIn0_ready"} : !hw.inout<i1>
    %_handshake_store4_dataIn_ready = sv.wire {hw.verilogName = "_handshake_store4_dataIn_ready"} : !hw.inout<i1>
    %_handshake_store4_ctrl_ready = sv.wire {hw.verilogName = "_handshake_store4_ctrl_ready"} : !hw.inout<i1>
    %_handshake_store4_dataToMem = sv.wire {hw.verilogName = "_handshake_store4_dataToMem"} : !hw.inout<i64>
    %_handshake_store4_dataToMem_valid = sv.wire {hw.verilogName = "_handshake_store4_dataToMem_valid"} : !hw.inout<i1>
    %_handshake_store4_addrOut0 = sv.wire {hw.verilogName = "_handshake_store4_addrOut0"} : !hw.inout<i64>
    %_handshake_store4_addrOut0_valid = sv.wire {hw.verilogName = "_handshake_store4_addrOut0_valid"} : !hw.inout<i1>
    %_handshake_buffer68_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer68_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer68_out0 = sv.wire {hw.verilogName = "_handshake_buffer68_out0"} : !hw.inout<i0>
    %_handshake_buffer68_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer68_out0_valid"} : !hw.inout<i1>
    %_handshake_join3_in0_ready = sv.wire {hw.verilogName = "_handshake_join3_in0_ready"} : !hw.inout<i1>
    %_handshake_join3_in1_ready = sv.wire {hw.verilogName = "_handshake_join3_in1_ready"} : !hw.inout<i1>
    %_handshake_join3_out0 = sv.wire {hw.verilogName = "_handshake_join3_out0"} : !hw.inout<i0>
    %_handshake_join3_out0_valid = sv.wire {hw.verilogName = "_handshake_join3_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer67_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer67_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer67_out0 = sv.wire {hw.verilogName = "_handshake_buffer67_out0"} : !hw.inout<i64>
    %_handshake_buffer67_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer67_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer66_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer66_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer66_out0 = sv.wire {hw.verilogName = "_handshake_buffer66_out0"} : !hw.inout<i64>
    %_handshake_buffer66_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer66_out0_valid"} : !hw.inout<i1>
    %_handshake_store3_addrIn0_ready = sv.wire {hw.verilogName = "_handshake_store3_addrIn0_ready"} : !hw.inout<i1>
    %_handshake_store3_dataIn_ready = sv.wire {hw.verilogName = "_handshake_store3_dataIn_ready"} : !hw.inout<i1>
    %_handshake_store3_ctrl_ready = sv.wire {hw.verilogName = "_handshake_store3_ctrl_ready"} : !hw.inout<i1>
    %_handshake_store3_dataToMem = sv.wire {hw.verilogName = "_handshake_store3_dataToMem"} : !hw.inout<i64>
    %_handshake_store3_dataToMem_valid = sv.wire {hw.verilogName = "_handshake_store3_dataToMem_valid"} : !hw.inout<i1>
    %_handshake_store3_addrOut0 = sv.wire {hw.verilogName = "_handshake_store3_addrOut0"} : !hw.inout<i64>
    %_handshake_store3_addrOut0_valid = sv.wire {hw.verilogName = "_handshake_store3_addrOut0_valid"} : !hw.inout<i1>
    %_handshake_buffer65_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer65_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer65_out0 = sv.wire {hw.verilogName = "_handshake_buffer65_out0"} : !hw.inout<i64>
    %_handshake_buffer65_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer65_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer64_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer64_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer64_out0 = sv.wire {hw.verilogName = "_handshake_buffer64_out0"} : !hw.inout<i64>
    %_handshake_buffer64_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer64_out0_valid"} : !hw.inout<i1>
    %_handshake_store2_addrIn0_ready = sv.wire {hw.verilogName = "_handshake_store2_addrIn0_ready"} : !hw.inout<i1>
    %_handshake_store2_dataIn_ready = sv.wire {hw.verilogName = "_handshake_store2_dataIn_ready"} : !hw.inout<i1>
    %_handshake_store2_ctrl_ready = sv.wire {hw.verilogName = "_handshake_store2_ctrl_ready"} : !hw.inout<i1>
    %_handshake_store2_dataToMem = sv.wire {hw.verilogName = "_handshake_store2_dataToMem"} : !hw.inout<i64>
    %_handshake_store2_dataToMem_valid = sv.wire {hw.verilogName = "_handshake_store2_dataToMem_valid"} : !hw.inout<i1>
    %_handshake_store2_addrOut0 = sv.wire {hw.verilogName = "_handshake_store2_addrOut0"} : !hw.inout<i64>
    %_handshake_store2_addrOut0_valid = sv.wire {hw.verilogName = "_handshake_store2_addrOut0_valid"} : !hw.inout<i1>
    %_handshake_buffer63_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer63_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer63_out0 = sv.wire {hw.verilogName = "_handshake_buffer63_out0"} : !hw.inout<i0>
    %_handshake_buffer63_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer63_out0_valid"} : !hw.inout<i1>
    %_handshake_join2_in0_ready = sv.wire {hw.verilogName = "_handshake_join2_in0_ready"} : !hw.inout<i1>
    %_handshake_join2_in1_ready = sv.wire {hw.verilogName = "_handshake_join2_in1_ready"} : !hw.inout<i1>
    %_handshake_join2_in2_ready = sv.wire {hw.verilogName = "_handshake_join2_in2_ready"} : !hw.inout<i1>
    %_handshake_join2_out0 = sv.wire {hw.verilogName = "_handshake_join2_out0"} : !hw.inout<i0>
    %_handshake_join2_out0_valid = sv.wire {hw.verilogName = "_handshake_join2_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer62_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer62_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer62_out0 = sv.wire {hw.verilogName = "_handshake_buffer62_out0"} : !hw.inout<i64>
    %_handshake_buffer62_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer62_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer61_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer61_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer61_out0 = sv.wire {hw.verilogName = "_handshake_buffer61_out0"} : !hw.inout<i64>
    %_handshake_buffer61_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer61_out0_valid"} : !hw.inout<i1>
    %_handshake_store1_addrIn0_ready = sv.wire {hw.verilogName = "_handshake_store1_addrIn0_ready"} : !hw.inout<i1>
    %_handshake_store1_dataIn_ready = sv.wire {hw.verilogName = "_handshake_store1_dataIn_ready"} : !hw.inout<i1>
    %_handshake_store1_ctrl_ready = sv.wire {hw.verilogName = "_handshake_store1_ctrl_ready"} : !hw.inout<i1>
    %_handshake_store1_dataToMem = sv.wire {hw.verilogName = "_handshake_store1_dataToMem"} : !hw.inout<i64>
    %_handshake_store1_dataToMem_valid = sv.wire {hw.verilogName = "_handshake_store1_dataToMem_valid"} : !hw.inout<i1>
    %_handshake_store1_addrOut0 = sv.wire {hw.verilogName = "_handshake_store1_addrOut0"} : !hw.inout<i64>
    %_handshake_store1_addrOut0_valid = sv.wire {hw.verilogName = "_handshake_store1_addrOut0_valid"} : !hw.inout<i1>
    %_handshake_buffer60_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer60_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer60_out0 = sv.wire {hw.verilogName = "_handshake_buffer60_out0"} : !hw.inout<i0>
    %_handshake_buffer60_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer60_out0_valid"} : !hw.inout<i1>
    %_handshake_join1_in0_ready = sv.wire {hw.verilogName = "_handshake_join1_in0_ready"} : !hw.inout<i1>
    %_handshake_join1_in1_ready = sv.wire {hw.verilogName = "_handshake_join1_in1_ready"} : !hw.inout<i1>
    %_handshake_join1_out0 = sv.wire {hw.verilogName = "_handshake_join1_out0"} : !hw.inout<i0>
    %_handshake_join1_out0_valid = sv.wire {hw.verilogName = "_handshake_join1_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer59_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer59_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer59_out0 = sv.wire {hw.verilogName = "_handshake_buffer59_out0"} : !hw.inout<i64>
    %_handshake_buffer59_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer59_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer58_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer58_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer58_out0 = sv.wire {hw.verilogName = "_handshake_buffer58_out0"} : !hw.inout<i64>
    %_handshake_buffer58_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer58_out0_valid"} : !hw.inout<i1>
    %_handshake_store0_addrIn0_ready = sv.wire {hw.verilogName = "_handshake_store0_addrIn0_ready"} : !hw.inout<i1>
    %_handshake_store0_dataIn_ready = sv.wire {hw.verilogName = "_handshake_store0_dataIn_ready"} : !hw.inout<i1>
    %_handshake_store0_ctrl_ready = sv.wire {hw.verilogName = "_handshake_store0_ctrl_ready"} : !hw.inout<i1>
    %_handshake_store0_dataToMem = sv.wire {hw.verilogName = "_handshake_store0_dataToMem"} : !hw.inout<i64>
    %_handshake_store0_dataToMem_valid = sv.wire {hw.verilogName = "_handshake_store0_dataToMem_valid"} : !hw.inout<i1>
    %_handshake_store0_addrOut0 = sv.wire {hw.verilogName = "_handshake_store0_addrOut0"} : !hw.inout<i64>
    %_handshake_store0_addrOut0_valid = sv.wire {hw.verilogName = "_handshake_store0_addrOut0_valid"} : !hw.inout<i1>
    %_handshake_buffer57_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer57_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer57_out0 = sv.wire {hw.verilogName = "_handshake_buffer57_out0"} : !hw.inout<i64>
    %_handshake_buffer57_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer57_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer56_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer56_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer56_out0 = sv.wire {hw.verilogName = "_handshake_buffer56_out0"} : !hw.inout<i64>
    %_handshake_buffer56_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer56_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer55_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer55_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer55_out0 = sv.wire {hw.verilogName = "_handshake_buffer55_out0"} : !hw.inout<i64>
    %_handshake_buffer55_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer55_out0_valid"} : !hw.inout<i1>
    %_handshake_fork10_in0_ready = sv.wire {hw.verilogName = "_handshake_fork10_in0_ready"} : !hw.inout<i1>
    %_handshake_fork10_out0 = sv.wire {hw.verilogName = "_handshake_fork10_out0"} : !hw.inout<i64>
    %_handshake_fork10_out0_valid = sv.wire {hw.verilogName = "_handshake_fork10_out0_valid"} : !hw.inout<i1>
    %_handshake_fork10_out1 = sv.wire {hw.verilogName = "_handshake_fork10_out1"} : !hw.inout<i64>
    %_handshake_fork10_out1_valid = sv.wire {hw.verilogName = "_handshake_fork10_out1_valid"} : !hw.inout<i1>
    %_handshake_fork10_out2 = sv.wire {hw.verilogName = "_handshake_fork10_out2"} : !hw.inout<i64>
    %_handshake_fork10_out2_valid = sv.wire {hw.verilogName = "_handshake_fork10_out2_valid"} : !hw.inout<i1>
    %_handshake_buffer54_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer54_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer54_out0 = sv.wire {hw.verilogName = "_handshake_buffer54_out0"} : !hw.inout<i64>
    %_handshake_buffer54_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer54_out0_valid"} : !hw.inout<i1>
    %_handshake_constant6_ctrl_ready = sv.wire {hw.verilogName = "_handshake_constant6_ctrl_ready"} : !hw.inout<i1>
    %_handshake_constant6_out0 = sv.wire {hw.verilogName = "_handshake_constant6_out0"} : !hw.inout<i64>
    %_handshake_constant6_out0_valid = sv.wire {hw.verilogName = "_handshake_constant6_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer53_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer53_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer53_out0 = sv.wire {hw.verilogName = "_handshake_buffer53_out0"} : !hw.inout<i64>
    %_handshake_buffer53_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer53_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer52_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer52_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer52_out0 = sv.wire {hw.verilogName = "_handshake_buffer52_out0"} : !hw.inout<i64>
    %_handshake_buffer52_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer52_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer51_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer51_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer51_out0 = sv.wire {hw.verilogName = "_handshake_buffer51_out0"} : !hw.inout<i64>
    %_handshake_buffer51_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer51_out0_valid"} : !hw.inout<i1>
    %_handshake_fork9_in0_ready = sv.wire {hw.verilogName = "_handshake_fork9_in0_ready"} : !hw.inout<i1>
    %_handshake_fork9_out0 = sv.wire {hw.verilogName = "_handshake_fork9_out0"} : !hw.inout<i64>
    %_handshake_fork9_out0_valid = sv.wire {hw.verilogName = "_handshake_fork9_out0_valid"} : !hw.inout<i1>
    %_handshake_fork9_out1 = sv.wire {hw.verilogName = "_handshake_fork9_out1"} : !hw.inout<i64>
    %_handshake_fork9_out1_valid = sv.wire {hw.verilogName = "_handshake_fork9_out1_valid"} : !hw.inout<i1>
    %_handshake_fork9_out2 = sv.wire {hw.verilogName = "_handshake_fork9_out2"} : !hw.inout<i64>
    %_handshake_fork9_out2_valid = sv.wire {hw.verilogName = "_handshake_fork9_out2_valid"} : !hw.inout<i1>
    %_handshake_buffer50_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer50_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer50_out0 = sv.wire {hw.verilogName = "_handshake_buffer50_out0"} : !hw.inout<i64>
    %_handshake_buffer50_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer50_out0_valid"} : !hw.inout<i1>
    %_handshake_constant5_ctrl_ready = sv.wire {hw.verilogName = "_handshake_constant5_ctrl_ready"} : !hw.inout<i1>
    %_handshake_constant5_out0 = sv.wire {hw.verilogName = "_handshake_constant5_out0"} : !hw.inout<i64>
    %_handshake_constant5_out0_valid = sv.wire {hw.verilogName = "_handshake_constant5_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer49_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer49_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer49_out0 = sv.wire {hw.verilogName = "_handshake_buffer49_out0"} : !hw.inout<i64>
    %_handshake_buffer49_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer49_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer48_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer48_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer48_out0 = sv.wire {hw.verilogName = "_handshake_buffer48_out0"} : !hw.inout<i64>
    %_handshake_buffer48_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer48_out0_valid"} : !hw.inout<i1>
    %_handshake_fork8_in0_ready = sv.wire {hw.verilogName = "_handshake_fork8_in0_ready"} : !hw.inout<i1>
    %_handshake_fork8_out0 = sv.wire {hw.verilogName = "_handshake_fork8_out0"} : !hw.inout<i64>
    %_handshake_fork8_out0_valid = sv.wire {hw.verilogName = "_handshake_fork8_out0_valid"} : !hw.inout<i1>
    %_handshake_fork8_out1 = sv.wire {hw.verilogName = "_handshake_fork8_out1"} : !hw.inout<i64>
    %_handshake_fork8_out1_valid = sv.wire {hw.verilogName = "_handshake_fork8_out1_valid"} : !hw.inout<i1>
    %_handshake_buffer47_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer47_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer47_out0 = sv.wire {hw.verilogName = "_handshake_buffer47_out0"} : !hw.inout<i64>
    %_handshake_buffer47_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer47_out0_valid"} : !hw.inout<i1>
    %_handshake_constant4_ctrl_ready = sv.wire {hw.verilogName = "_handshake_constant4_ctrl_ready"} : !hw.inout<i1>
    %_handshake_constant4_out0 = sv.wire {hw.verilogName = "_handshake_constant4_out0"} : !hw.inout<i64>
    %_handshake_constant4_out0_valid = sv.wire {hw.verilogName = "_handshake_constant4_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer46_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer46_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer46_out0 = sv.wire {hw.verilogName = "_handshake_buffer46_out0"} : !hw.inout<i64>
    %_handshake_buffer46_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer46_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer45_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer45_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer45_out0 = sv.wire {hw.verilogName = "_handshake_buffer45_out0"} : !hw.inout<i64>
    %_handshake_buffer45_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer45_out0_valid"} : !hw.inout<i1>
    %_handshake_fork7_in0_ready = sv.wire {hw.verilogName = "_handshake_fork7_in0_ready"} : !hw.inout<i1>
    %_handshake_fork7_out0 = sv.wire {hw.verilogName = "_handshake_fork7_out0"} : !hw.inout<i64>
    %_handshake_fork7_out0_valid = sv.wire {hw.verilogName = "_handshake_fork7_out0_valid"} : !hw.inout<i1>
    %_handshake_fork7_out1 = sv.wire {hw.verilogName = "_handshake_fork7_out1"} : !hw.inout<i64>
    %_handshake_fork7_out1_valid = sv.wire {hw.verilogName = "_handshake_fork7_out1_valid"} : !hw.inout<i1>
    %_handshake_buffer44_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer44_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer44_out0 = sv.wire {hw.verilogName = "_handshake_buffer44_out0"} : !hw.inout<i64>
    %_handshake_buffer44_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer44_out0_valid"} : !hw.inout<i1>
    %_handshake_constant3_ctrl_ready = sv.wire {hw.verilogName = "_handshake_constant3_ctrl_ready"} : !hw.inout<i1>
    %_handshake_constant3_out0 = sv.wire {hw.verilogName = "_handshake_constant3_out0"} : !hw.inout<i64>
    %_handshake_constant3_out0_valid = sv.wire {hw.verilogName = "_handshake_constant3_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer43_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer43_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer43_out0 = sv.wire {hw.verilogName = "_handshake_buffer43_out0"} : !hw.inout<i64>
    %_handshake_buffer43_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer43_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer42_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer42_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer42_out0 = sv.wire {hw.verilogName = "_handshake_buffer42_out0"} : !hw.inout<i64>
    %_handshake_buffer42_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer42_out0_valid"} : !hw.inout<i1>
    %_handshake_fork6_in0_ready = sv.wire {hw.verilogName = "_handshake_fork6_in0_ready"} : !hw.inout<i1>
    %_handshake_fork6_out0 = sv.wire {hw.verilogName = "_handshake_fork6_out0"} : !hw.inout<i64>
    %_handshake_fork6_out0_valid = sv.wire {hw.verilogName = "_handshake_fork6_out0_valid"} : !hw.inout<i1>
    %_handshake_fork6_out1 = sv.wire {hw.verilogName = "_handshake_fork6_out1"} : !hw.inout<i64>
    %_handshake_fork6_out1_valid = sv.wire {hw.verilogName = "_handshake_fork6_out1_valid"} : !hw.inout<i1>
    %_handshake_buffer41_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer41_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer41_out0 = sv.wire {hw.verilogName = "_handshake_buffer41_out0"} : !hw.inout<i64>
    %_handshake_buffer41_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer41_out0_valid"} : !hw.inout<i1>
    %_handshake_constant2_ctrl_ready = sv.wire {hw.verilogName = "_handshake_constant2_ctrl_ready"} : !hw.inout<i1>
    %_handshake_constant2_out0 = sv.wire {hw.verilogName = "_handshake_constant2_out0"} : !hw.inout<i64>
    %_handshake_constant2_out0_valid = sv.wire {hw.verilogName = "_handshake_constant2_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer40_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer40_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer40_out0 = sv.wire {hw.verilogName = "_handshake_buffer40_out0"} : !hw.inout<i64>
    %_handshake_buffer40_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer40_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer39_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer39_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer39_out0 = sv.wire {hw.verilogName = "_handshake_buffer39_out0"} : !hw.inout<i64>
    %_handshake_buffer39_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer39_out0_valid"} : !hw.inout<i1>
    %_handshake_fork5_in0_ready = sv.wire {hw.verilogName = "_handshake_fork5_in0_ready"} : !hw.inout<i1>
    %_handshake_fork5_out0 = sv.wire {hw.verilogName = "_handshake_fork5_out0"} : !hw.inout<i64>
    %_handshake_fork5_out0_valid = sv.wire {hw.verilogName = "_handshake_fork5_out0_valid"} : !hw.inout<i1>
    %_handshake_fork5_out1 = sv.wire {hw.verilogName = "_handshake_fork5_out1"} : !hw.inout<i64>
    %_handshake_fork5_out1_valid = sv.wire {hw.verilogName = "_handshake_fork5_out1_valid"} : !hw.inout<i1>
    %_handshake_buffer38_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer38_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer38_out0 = sv.wire {hw.verilogName = "_handshake_buffer38_out0"} : !hw.inout<i64>
    %_handshake_buffer38_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer38_out0_valid"} : !hw.inout<i1>
    %_handshake_constant1_ctrl_ready = sv.wire {hw.verilogName = "_handshake_constant1_ctrl_ready"} : !hw.inout<i1>
    %_handshake_constant1_out0 = sv.wire {hw.verilogName = "_handshake_constant1_out0"} : !hw.inout<i64>
    %_handshake_constant1_out0_valid = sv.wire {hw.verilogName = "_handshake_constant1_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer37_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer37_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer37_out0 = sv.wire {hw.verilogName = "_handshake_buffer37_out0"} : !hw.inout<i64>
    %_handshake_buffer37_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer37_out0_valid"} : !hw.inout<i1>
    %_handshake_constant0_ctrl_ready = sv.wire {hw.verilogName = "_handshake_constant0_ctrl_ready"} : !hw.inout<i1>
    %_handshake_constant0_out0 = sv.wire {hw.verilogName = "_handshake_constant0_out0"} : !hw.inout<i64>
    %_handshake_constant0_out0_valid = sv.wire {hw.verilogName = "_handshake_constant0_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer36_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer36_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer36_out0 = sv.wire {hw.verilogName = "_handshake_buffer36_out0"} : !hw.inout<i0>
    %_handshake_buffer36_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer36_out0_valid"} : !hw.inout<i1>
    %_handshake_join0_in0_ready = sv.wire {hw.verilogName = "_handshake_join0_in0_ready"} : !hw.inout<i1>
    %_handshake_join0_in1_ready = sv.wire {hw.verilogName = "_handshake_join0_in1_ready"} : !hw.inout<i1>
    %_handshake_join0_in2_ready = sv.wire {hw.verilogName = "_handshake_join0_in2_ready"} : !hw.inout<i1>
    %_handshake_join0_in3_ready = sv.wire {hw.verilogName = "_handshake_join0_in3_ready"} : !hw.inout<i1>
    %_handshake_join0_in4_ready = sv.wire {hw.verilogName = "_handshake_join0_in4_ready"} : !hw.inout<i1>
    %_handshake_join0_in5_ready = sv.wire {hw.verilogName = "_handshake_join0_in5_ready"} : !hw.inout<i1>
    %_handshake_join0_in6_ready = sv.wire {hw.verilogName = "_handshake_join0_in6_ready"} : !hw.inout<i1>
    %_handshake_join0_out0 = sv.wire {hw.verilogName = "_handshake_join0_out0"} : !hw.inout<i0>
    %_handshake_join0_out0_valid = sv.wire {hw.verilogName = "_handshake_join0_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer35_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer35_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer35_out0 = sv.wire {hw.verilogName = "_handshake_buffer35_out0"} : !hw.inout<i0>
    %_handshake_buffer35_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer35_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer34_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer34_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer34_out0 = sv.wire {hw.verilogName = "_handshake_buffer34_out0"} : !hw.inout<i0>
    %_handshake_buffer34_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer34_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer33_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer33_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer33_out0 = sv.wire {hw.verilogName = "_handshake_buffer33_out0"} : !hw.inout<i0>
    %_handshake_buffer33_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer33_out0_valid"} : !hw.inout<i1>
    %_handshake_fork4_in0_ready = sv.wire {hw.verilogName = "_handshake_fork4_in0_ready"} : !hw.inout<i1>
    %_handshake_fork4_out0 = sv.wire {hw.verilogName = "_handshake_fork4_out0"} : !hw.inout<i0>
    %_handshake_fork4_out0_valid = sv.wire {hw.verilogName = "_handshake_fork4_out0_valid"} : !hw.inout<i1>
    %_handshake_fork4_out1 = sv.wire {hw.verilogName = "_handshake_fork4_out1"} : !hw.inout<i0>
    %_handshake_fork4_out1_valid = sv.wire {hw.verilogName = "_handshake_fork4_out1_valid"} : !hw.inout<i1>
    %_handshake_fork4_out2 = sv.wire {hw.verilogName = "_handshake_fork4_out2"} : !hw.inout<i0>
    %_handshake_fork4_out2_valid = sv.wire {hw.verilogName = "_handshake_fork4_out2_valid"} : !hw.inout<i1>
    %_handshake_buffer32_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer32_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer32_out0 = sv.wire {hw.verilogName = "_handshake_buffer32_out0"} : !hw.inout<i0>
    %_handshake_buffer32_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer32_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer31_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer31_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer31_out0 = sv.wire {hw.verilogName = "_handshake_buffer31_out0"} : !hw.inout<i0>
    %_handshake_buffer31_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer31_out0_valid"} : !hw.inout<i1>
    %_handshake_fork3_in0_ready = sv.wire {hw.verilogName = "_handshake_fork3_in0_ready"} : !hw.inout<i1>
    %_handshake_fork3_out0 = sv.wire {hw.verilogName = "_handshake_fork3_out0"} : !hw.inout<i0>
    %_handshake_fork3_out0_valid = sv.wire {hw.verilogName = "_handshake_fork3_out0_valid"} : !hw.inout<i1>
    %_handshake_fork3_out1 = sv.wire {hw.verilogName = "_handshake_fork3_out1"} : !hw.inout<i0>
    %_handshake_fork3_out1_valid = sv.wire {hw.verilogName = "_handshake_fork3_out1_valid"} : !hw.inout<i1>
    %_handshake_buffer30_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer30_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer30_out0 = sv.wire {hw.verilogName = "_handshake_buffer30_out0"} : !hw.inout<i64>
    %_handshake_buffer30_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer30_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer29_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer29_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer29_out0 = sv.wire {hw.verilogName = "_handshake_buffer29_out0"} : !hw.inout<i0>
    %_handshake_buffer29_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer29_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer28_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer28_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer28_out0 = sv.wire {hw.verilogName = "_handshake_buffer28_out0"} : !hw.inout<i0>
    %_handshake_buffer28_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer28_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer27_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer27_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer27_out0 = sv.wire {hw.verilogName = "_handshake_buffer27_out0"} : !hw.inout<i0>
    %_handshake_buffer27_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer27_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer26_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer26_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer26_out0 = sv.wire {hw.verilogName = "_handshake_buffer26_out0"} : !hw.inout<i0>
    %_handshake_buffer26_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer26_out0_valid"} : !hw.inout<i1>
    %_handshake_memory2_stData0_ready = sv.wire {hw.verilogName = "_handshake_memory2_stData0_ready"} : !hw.inout<i1>
    %_handshake_memory2_stAddr0_ready = sv.wire {hw.verilogName = "_handshake_memory2_stAddr0_ready"} : !hw.inout<i1>
    %_handshake_memory2_stData1_ready = sv.wire {hw.verilogName = "_handshake_memory2_stData1_ready"} : !hw.inout<i1>
    %_handshake_memory2_stAddr1_ready = sv.wire {hw.verilogName = "_handshake_memory2_stAddr1_ready"} : !hw.inout<i1>
    %_handshake_memory2_stData2_ready = sv.wire {hw.verilogName = "_handshake_memory2_stData2_ready"} : !hw.inout<i1>
    %_handshake_memory2_stAddr2_ready = sv.wire {hw.verilogName = "_handshake_memory2_stAddr2_ready"} : !hw.inout<i1>
    %_handshake_memory2_ldAddr0_ready = sv.wire {hw.verilogName = "_handshake_memory2_ldAddr0_ready"} : !hw.inout<i1>
    %_handshake_memory2_ldData0 = sv.wire {hw.verilogName = "_handshake_memory2_ldData0"} : !hw.inout<i64>
    %_handshake_memory2_ldData0_valid = sv.wire {hw.verilogName = "_handshake_memory2_ldData0_valid"} : !hw.inout<i1>
    %_handshake_memory2_stDone0 = sv.wire {hw.verilogName = "_handshake_memory2_stDone0"} : !hw.inout<i0>
    %_handshake_memory2_stDone0_valid = sv.wire {hw.verilogName = "_handshake_memory2_stDone0_valid"} : !hw.inout<i1>
    %_handshake_memory2_stDone1 = sv.wire {hw.verilogName = "_handshake_memory2_stDone1"} : !hw.inout<i0>
    %_handshake_memory2_stDone1_valid = sv.wire {hw.verilogName = "_handshake_memory2_stDone1_valid"} : !hw.inout<i1>
    %_handshake_memory2_stDone2 = sv.wire {hw.verilogName = "_handshake_memory2_stDone2"} : !hw.inout<i0>
    %_handshake_memory2_stDone2_valid = sv.wire {hw.verilogName = "_handshake_memory2_stDone2_valid"} : !hw.inout<i1>
    %_handshake_memory2_ldDone0 = sv.wire {hw.verilogName = "_handshake_memory2_ldDone0"} : !hw.inout<i0>
    %_handshake_memory2_ldDone0_valid = sv.wire {hw.verilogName = "_handshake_memory2_ldDone0_valid"} : !hw.inout<i1>
    %_handshake_buffer25_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer25_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer25_out0 = sv.wire {hw.verilogName = "_handshake_buffer25_out0"} : !hw.inout<i0>
    %_handshake_buffer25_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer25_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer24_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer24_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer24_out0 = sv.wire {hw.verilogName = "_handshake_buffer24_out0"} : !hw.inout<i0>
    %_handshake_buffer24_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer24_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer23_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer23_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer23_out0 = sv.wire {hw.verilogName = "_handshake_buffer23_out0"} : !hw.inout<i0>
    %_handshake_buffer23_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer23_out0_valid"} : !hw.inout<i1>
    %_handshake_fork2_in0_ready = sv.wire {hw.verilogName = "_handshake_fork2_in0_ready"} : !hw.inout<i1>
    %_handshake_fork2_out0 = sv.wire {hw.verilogName = "_handshake_fork2_out0"} : !hw.inout<i0>
    %_handshake_fork2_out0_valid = sv.wire {hw.verilogName = "_handshake_fork2_out0_valid"} : !hw.inout<i1>
    %_handshake_fork2_out1 = sv.wire {hw.verilogName = "_handshake_fork2_out1"} : !hw.inout<i0>
    %_handshake_fork2_out1_valid = sv.wire {hw.verilogName = "_handshake_fork2_out1_valid"} : !hw.inout<i1>
    %_handshake_fork2_out2 = sv.wire {hw.verilogName = "_handshake_fork2_out2"} : !hw.inout<i0>
    %_handshake_fork2_out2_valid = sv.wire {hw.verilogName = "_handshake_fork2_out2_valid"} : !hw.inout<i1>
    %_handshake_buffer22_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer22_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer22_out0 = sv.wire {hw.verilogName = "_handshake_buffer22_out0"} : !hw.inout<i0>
    %_handshake_buffer22_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer22_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer21_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer21_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer21_out0 = sv.wire {hw.verilogName = "_handshake_buffer21_out0"} : !hw.inout<i0>
    %_handshake_buffer21_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer21_out0_valid"} : !hw.inout<i1>
    %_handshake_fork1_in0_ready = sv.wire {hw.verilogName = "_handshake_fork1_in0_ready"} : !hw.inout<i1>
    %_handshake_fork1_out0 = sv.wire {hw.verilogName = "_handshake_fork1_out0"} : !hw.inout<i0>
    %_handshake_fork1_out0_valid = sv.wire {hw.verilogName = "_handshake_fork1_out0_valid"} : !hw.inout<i1>
    %_handshake_fork1_out1 = sv.wire {hw.verilogName = "_handshake_fork1_out1"} : !hw.inout<i0>
    %_handshake_fork1_out1_valid = sv.wire {hw.verilogName = "_handshake_fork1_out1_valid"} : !hw.inout<i1>
    %_handshake_buffer20_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer20_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer20_out0 = sv.wire {hw.verilogName = "_handshake_buffer20_out0"} : !hw.inout<i64>
    %_handshake_buffer20_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer20_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer19_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer19_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer19_out0 = sv.wire {hw.verilogName = "_handshake_buffer19_out0"} : !hw.inout<i0>
    %_handshake_buffer19_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer19_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer18_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer18_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer18_out0 = sv.wire {hw.verilogName = "_handshake_buffer18_out0"} : !hw.inout<i0>
    %_handshake_buffer18_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer18_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer17_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer17_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer17_out0 = sv.wire {hw.verilogName = "_handshake_buffer17_out0"} : !hw.inout<i0>
    %_handshake_buffer17_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer17_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer16_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer16_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer16_out0 = sv.wire {hw.verilogName = "_handshake_buffer16_out0"} : !hw.inout<i0>
    %_handshake_buffer16_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer16_out0_valid"} : !hw.inout<i1>
    %_handshake_memory1_stData0_ready = sv.wire {hw.verilogName = "_handshake_memory1_stData0_ready"} : !hw.inout<i1>
    %_handshake_memory1_stAddr0_ready = sv.wire {hw.verilogName = "_handshake_memory1_stAddr0_ready"} : !hw.inout<i1>
    %_handshake_memory1_stData1_ready = sv.wire {hw.verilogName = "_handshake_memory1_stData1_ready"} : !hw.inout<i1>
    %_handshake_memory1_stAddr1_ready = sv.wire {hw.verilogName = "_handshake_memory1_stAddr1_ready"} : !hw.inout<i1>
    %_handshake_memory1_stData2_ready = sv.wire {hw.verilogName = "_handshake_memory1_stData2_ready"} : !hw.inout<i1>
    %_handshake_memory1_stAddr2_ready = sv.wire {hw.verilogName = "_handshake_memory1_stAddr2_ready"} : !hw.inout<i1>
    %_handshake_memory1_ldAddr0_ready = sv.wire {hw.verilogName = "_handshake_memory1_ldAddr0_ready"} : !hw.inout<i1>
    %_handshake_memory1_ldData0 = sv.wire {hw.verilogName = "_handshake_memory1_ldData0"} : !hw.inout<i64>
    %_handshake_memory1_ldData0_valid = sv.wire {hw.verilogName = "_handshake_memory1_ldData0_valid"} : !hw.inout<i1>
    %_handshake_memory1_stDone0 = sv.wire {hw.verilogName = "_handshake_memory1_stDone0"} : !hw.inout<i0>
    %_handshake_memory1_stDone0_valid = sv.wire {hw.verilogName = "_handshake_memory1_stDone0_valid"} : !hw.inout<i1>
    %_handshake_memory1_stDone1 = sv.wire {hw.verilogName = "_handshake_memory1_stDone1"} : !hw.inout<i0>
    %_handshake_memory1_stDone1_valid = sv.wire {hw.verilogName = "_handshake_memory1_stDone1_valid"} : !hw.inout<i1>
    %_handshake_memory1_stDone2 = sv.wire {hw.verilogName = "_handshake_memory1_stDone2"} : !hw.inout<i0>
    %_handshake_memory1_stDone2_valid = sv.wire {hw.verilogName = "_handshake_memory1_stDone2_valid"} : !hw.inout<i1>
    %_handshake_memory1_ldDone0 = sv.wire {hw.verilogName = "_handshake_memory1_ldDone0"} : !hw.inout<i0>
    %_handshake_memory1_ldDone0_valid = sv.wire {hw.verilogName = "_handshake_memory1_ldDone0_valid"} : !hw.inout<i1>
    %_handshake_buffer15_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer15_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer15_out0 = sv.wire {hw.verilogName = "_handshake_buffer15_out0"} : !hw.inout<i0>
    %_handshake_buffer15_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer15_out0_valid"} : !hw.inout<i1>
    %_handshake_memory0_stData0_ready = sv.wire {hw.verilogName = "_handshake_memory0_stData0_ready"} : !hw.inout<i1>
    %_handshake_memory0_stAddr0_ready = sv.wire {hw.verilogName = "_handshake_memory0_stAddr0_ready"} : !hw.inout<i1>
    %_handshake_memory0_stDone0 = sv.wire {hw.verilogName = "_handshake_memory0_stDone0"} : !hw.inout<i0>
    %_handshake_memory0_stDone0_valid = sv.wire {hw.verilogName = "_handshake_memory0_stDone0_valid"} : !hw.inout<i1>
    %_handshake_buffer14_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer14_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer14_out0 = sv.wire {hw.verilogName = "_handshake_buffer14_out0"} : !hw.inout<i0>
    %_handshake_buffer14_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer14_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer13_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer13_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer13_out0 = sv.wire {hw.verilogName = "_handshake_buffer13_out0"} : !hw.inout<i0>
    %_handshake_buffer13_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer13_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer12_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer12_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer12_out0 = sv.wire {hw.verilogName = "_handshake_buffer12_out0"} : !hw.inout<i0>
    %_handshake_buffer12_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer12_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer11_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer11_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer11_out0 = sv.wire {hw.verilogName = "_handshake_buffer11_out0"} : !hw.inout<i0>
    %_handshake_buffer11_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer11_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer10_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer10_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer10_out0 = sv.wire {hw.verilogName = "_handshake_buffer10_out0"} : !hw.inout<i0>
    %_handshake_buffer10_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer10_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer9_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer9_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer9_out0 = sv.wire {hw.verilogName = "_handshake_buffer9_out0"} : !hw.inout<i0>
    %_handshake_buffer9_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer9_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer8_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer8_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer8_out0 = sv.wire {hw.verilogName = "_handshake_buffer8_out0"} : !hw.inout<i0>
    %_handshake_buffer8_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer8_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer7_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer7_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer7_out0 = sv.wire {hw.verilogName = "_handshake_buffer7_out0"} : !hw.inout<i0>
    %_handshake_buffer7_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer7_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer6_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer6_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer6_out0 = sv.wire {hw.verilogName = "_handshake_buffer6_out0"} : !hw.inout<i0>
    %_handshake_buffer6_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer6_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer5_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer5_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer5_out0 = sv.wire {hw.verilogName = "_handshake_buffer5_out0"} : !hw.inout<i0>
    %_handshake_buffer5_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer5_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer4_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer4_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer4_out0 = sv.wire {hw.verilogName = "_handshake_buffer4_out0"} : !hw.inout<i0>
    %_handshake_buffer4_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer4_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer3_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer3_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer3_out0 = sv.wire {hw.verilogName = "_handshake_buffer3_out0"} : !hw.inout<i0>
    %_handshake_buffer3_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer3_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer2_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer2_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer2_out0 = sv.wire {hw.verilogName = "_handshake_buffer2_out0"} : !hw.inout<i0>
    %_handshake_buffer2_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer2_out0_valid"} : !hw.inout<i1>
    %_handshake_buffer1_in0_ready = sv.wire {hw.verilogName = "_handshake_buffer1_in0_ready"} : !hw.inout<i1>
    %_handshake_buffer1_out0 = sv.wire {hw.verilogName = "_handshake_buffer1_out0"} : !hw.inout<i0>
    %_handshake_buffer1_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer1_out0_valid"} : !hw.inout<i1>
    %_handshake_fork0_in0_ready = sv.wire {hw.verilogName = "_handshake_fork0_in0_ready"} : !hw.inout<i1>
    %_handshake_fork0_out0 = sv.wire {hw.verilogName = "_handshake_fork0_out0"} : !hw.inout<i0>
    %_handshake_fork0_out0_valid = sv.wire {hw.verilogName = "_handshake_fork0_out0_valid"} : !hw.inout<i1>
    %_handshake_fork0_out1 = sv.wire {hw.verilogName = "_handshake_fork0_out1"} : !hw.inout<i0>
    %_handshake_fork0_out1_valid = sv.wire {hw.verilogName = "_handshake_fork0_out1_valid"} : !hw.inout<i1>
    %_handshake_fork0_out2 = sv.wire {hw.verilogName = "_handshake_fork0_out2"} : !hw.inout<i0>
    %_handshake_fork0_out2_valid = sv.wire {hw.verilogName = "_handshake_fork0_out2_valid"} : !hw.inout<i1>
    %_handshake_fork0_out3 = sv.wire {hw.verilogName = "_handshake_fork0_out3"} : !hw.inout<i0>
    %_handshake_fork0_out3_valid = sv.wire {hw.verilogName = "_handshake_fork0_out3_valid"} : !hw.inout<i1>
    %_handshake_fork0_out4 = sv.wire {hw.verilogName = "_handshake_fork0_out4"} : !hw.inout<i0>
    %_handshake_fork0_out4_valid = sv.wire {hw.verilogName = "_handshake_fork0_out4_valid"} : !hw.inout<i1>
    %_handshake_fork0_out5 = sv.wire {hw.verilogName = "_handshake_fork0_out5"} : !hw.inout<i0>
    %_handshake_fork0_out5_valid = sv.wire {hw.verilogName = "_handshake_fork0_out5_valid"} : !hw.inout<i1>
    %_handshake_fork0_out6 = sv.wire {hw.verilogName = "_handshake_fork0_out6"} : !hw.inout<i0>
    %_handshake_fork0_out6_valid = sv.wire {hw.verilogName = "_handshake_fork0_out6_valid"} : !hw.inout<i1>
    %_handshake_fork0_out7 = sv.wire {hw.verilogName = "_handshake_fork0_out7"} : !hw.inout<i0>
    %_handshake_fork0_out7_valid = sv.wire {hw.verilogName = "_handshake_fork0_out7_valid"} : !hw.inout<i1>
    %_handshake_fork0_out8 = sv.wire {hw.verilogName = "_handshake_fork0_out8"} : !hw.inout<i0>
    %_handshake_fork0_out8_valid = sv.wire {hw.verilogName = "_handshake_fork0_out8_valid"} : !hw.inout<i1>
    %_handshake_fork0_out9 = sv.wire {hw.verilogName = "_handshake_fork0_out9"} : !hw.inout<i0>
    %_handshake_fork0_out9_valid = sv.wire {hw.verilogName = "_handshake_fork0_out9_valid"} : !hw.inout<i1>
    %_handshake_fork0_out10 = sv.wire {hw.verilogName = "_handshake_fork0_out10"} : !hw.inout<i0>
    %_handshake_fork0_out10_valid = sv.wire {hw.verilogName = "_handshake_fork0_out10_valid"} : !hw.inout<i1>
    %_handshake_fork0_out11 = sv.wire {hw.verilogName = "_handshake_fork0_out11"} : !hw.inout<i0>
    %_handshake_fork0_out11_valid = sv.wire {hw.verilogName = "_handshake_fork0_out11_valid"} : !hw.inout<i1>
    %_handshake_fork0_out12 = sv.wire {hw.verilogName = "_handshake_fork0_out12"} : !hw.inout<i0>
    %_handshake_fork0_out12_valid = sv.wire {hw.verilogName = "_handshake_fork0_out12_valid"} : !hw.inout<i1>
    %_handshake_fork0_out13 = sv.wire {hw.verilogName = "_handshake_fork0_out13"} : !hw.inout<i0>
    %_handshake_fork0_out13_valid = sv.wire {hw.verilogName = "_handshake_fork0_out13_valid"} : !hw.inout<i1>
    %_handshake_buffer0_out0 = sv.wire {hw.verilogName = "_handshake_buffer0_out0"} : !hw.inout<i0>
    %_handshake_buffer0_out0_valid = sv.wire {hw.verilogName = "_handshake_buffer0_out0_valid"} : !hw.inout<i1>
    %0 = sv.read_inout %_handshake_fork0_in0_ready : !hw.inout<i1>
    %handshake_buffer0.in0_ready, %handshake_buffer0.out0, %handshake_buffer0.out0_valid = hw.instance "handshake_buffer0" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %in0: i0, in0_valid: %in0_valid: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %0: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer0"}
    sv.assign %_handshake_buffer0_out0_valid, %handshake_buffer0.out0_valid : i1
    sv.assign %_handshake_buffer0_out0, %handshake_buffer0.out0 : i0
    %1 = sv.read_inout %_handshake_buffer0_out0 : !hw.inout<i0>
    %2 = sv.read_inout %_handshake_buffer0_out0_valid : !hw.inout<i1>
    %3 = sv.read_inout %_handshake_buffer1_in0_ready : !hw.inout<i1>
    %4 = sv.read_inout %_handshake_buffer2_in0_ready : !hw.inout<i1>
    %5 = sv.read_inout %_handshake_buffer3_in0_ready : !hw.inout<i1>
    %6 = sv.read_inout %_handshake_buffer4_in0_ready : !hw.inout<i1>
    %7 = sv.read_inout %_handshake_buffer5_in0_ready : !hw.inout<i1>
    %8 = sv.read_inout %_handshake_buffer6_in0_ready : !hw.inout<i1>
    %9 = sv.read_inout %_handshake_buffer7_in0_ready : !hw.inout<i1>
    %10 = sv.read_inout %_handshake_buffer8_in0_ready : !hw.inout<i1>
    %11 = sv.read_inout %_handshake_buffer9_in0_ready : !hw.inout<i1>
    %12 = sv.read_inout %_handshake_buffer10_in0_ready : !hw.inout<i1>
    %13 = sv.read_inout %_handshake_buffer11_in0_ready : !hw.inout<i1>
    %14 = sv.read_inout %_handshake_buffer12_in0_ready : !hw.inout<i1>
    %15 = sv.read_inout %_handshake_buffer13_in0_ready : !hw.inout<i1>
    %16 = sv.read_inout %_handshake_buffer14_in0_ready : !hw.inout<i1>
    %handshake_fork0.in0_ready, %handshake_fork0.out0, %handshake_fork0.out0_valid, %handshake_fork0.out1, %handshake_fork0.out1_valid, %handshake_fork0.out2, %handshake_fork0.out2_valid, %handshake_fork0.out3, %handshake_fork0.out3_valid, %handshake_fork0.out4, %handshake_fork0.out4_valid, %handshake_fork0.out5, %handshake_fork0.out5_valid, %handshake_fork0.out6, %handshake_fork0.out6_valid, %handshake_fork0.out7, %handshake_fork0.out7_valid, %handshake_fork0.out8, %handshake_fork0.out8_valid, %handshake_fork0.out9, %handshake_fork0.out9_valid, %handshake_fork0.out10, %handshake_fork0.out10_valid, %handshake_fork0.out11, %handshake_fork0.out11_valid, %handshake_fork0.out12, %handshake_fork0.out12_valid, %handshake_fork0.out13, %handshake_fork0.out13_valid = hw.instance "handshake_fork0" @handshake_fork_1ins_14outs_ctrl(in0: %1: i0, in0_valid: %2: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %16: i1, out1_ready: %15: i1, out2_ready: %14: i1, out3_ready: %13: i1, out4_ready: %12: i1, out5_ready: %11: i1, out6_ready: %10: i1, out7_ready: %9: i1, out8_ready: %8: i1, out9_ready: %7: i1, out10_ready: %6: i1, out11_ready: %5: i1, out12_ready: %4: i1, out13_ready: %3: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1, out4: i0, out4_valid: i1, out5: i0, out5_valid: i1, out6: i0, out6_valid: i1, out7: i0, out7_valid: i1, out8: i0, out8_valid: i1, out9: i0, out9_valid: i1, out10: i0, out10_valid: i1, out11: i0, out11_valid: i1, out12: i0, out12_valid: i1, out13: i0, out13_valid: i1) {hw.verilogName = "handshake_fork0"}
    sv.assign %_handshake_fork0_out13_valid, %handshake_fork0.out13_valid : i1
    sv.assign %_handshake_fork0_out13, %handshake_fork0.out13 : i0
    sv.assign %_handshake_fork0_out12_valid, %handshake_fork0.out12_valid : i1
    sv.assign %_handshake_fork0_out12, %handshake_fork0.out12 : i0
    sv.assign %_handshake_fork0_out11_valid, %handshake_fork0.out11_valid : i1
    sv.assign %_handshake_fork0_out11, %handshake_fork0.out11 : i0
    sv.assign %_handshake_fork0_out10_valid, %handshake_fork0.out10_valid : i1
    sv.assign %_handshake_fork0_out10, %handshake_fork0.out10 : i0
    sv.assign %_handshake_fork0_out9_valid, %handshake_fork0.out9_valid : i1
    sv.assign %_handshake_fork0_out9, %handshake_fork0.out9 : i0
    sv.assign %_handshake_fork0_out8_valid, %handshake_fork0.out8_valid : i1
    sv.assign %_handshake_fork0_out8, %handshake_fork0.out8 : i0
    sv.assign %_handshake_fork0_out7_valid, %handshake_fork0.out7_valid : i1
    sv.assign %_handshake_fork0_out7, %handshake_fork0.out7 : i0
    sv.assign %_handshake_fork0_out6_valid, %handshake_fork0.out6_valid : i1
    sv.assign %_handshake_fork0_out6, %handshake_fork0.out6 : i0
    sv.assign %_handshake_fork0_out5_valid, %handshake_fork0.out5_valid : i1
    sv.assign %_handshake_fork0_out5, %handshake_fork0.out5 : i0
    sv.assign %_handshake_fork0_out4_valid, %handshake_fork0.out4_valid : i1
    sv.assign %_handshake_fork0_out4, %handshake_fork0.out4 : i0
    sv.assign %_handshake_fork0_out3_valid, %handshake_fork0.out3_valid : i1
    sv.assign %_handshake_fork0_out3, %handshake_fork0.out3 : i0
    sv.assign %_handshake_fork0_out2_valid, %handshake_fork0.out2_valid : i1
    sv.assign %_handshake_fork0_out2, %handshake_fork0.out2 : i0
    sv.assign %_handshake_fork0_out1_valid, %handshake_fork0.out1_valid : i1
    sv.assign %_handshake_fork0_out1, %handshake_fork0.out1 : i0
    sv.assign %_handshake_fork0_out0_valid, %handshake_fork0.out0_valid : i1
    sv.assign %_handshake_fork0_out0, %handshake_fork0.out0 : i0
    sv.assign %_handshake_fork0_in0_ready, %handshake_fork0.in0_ready : i1
    %17 = sv.read_inout %_handshake_fork0_out13 : !hw.inout<i0>
    %18 = sv.read_inout %_handshake_fork0_out13_valid : !hw.inout<i1>
    %19 = sv.read_inout %_handshake_join4_in0_ready : !hw.inout<i1>
    %handshake_buffer1.in0_ready, %handshake_buffer1.out0, %handshake_buffer1.out0_valid = hw.instance "handshake_buffer1" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %17: i0, in0_valid: %18: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %19: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer1"}
    sv.assign %_handshake_buffer1_out0_valid, %handshake_buffer1.out0_valid : i1
    sv.assign %_handshake_buffer1_out0, %handshake_buffer1.out0 : i0
    sv.assign %_handshake_buffer1_in0_ready, %handshake_buffer1.in0_ready : i1
    %20 = sv.read_inout %_handshake_fork0_out12 : !hw.inout<i0>
    %21 = sv.read_inout %_handshake_fork0_out12_valid : !hw.inout<i1>
    %22 = sv.read_inout %_handshake_join3_in0_ready : !hw.inout<i1>
    %handshake_buffer2.in0_ready, %handshake_buffer2.out0, %handshake_buffer2.out0_valid = hw.instance "handshake_buffer2" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %20: i0, in0_valid: %21: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %22: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer2"}
    sv.assign %_handshake_buffer2_out0_valid, %handshake_buffer2.out0_valid : i1
    sv.assign %_handshake_buffer2_out0, %handshake_buffer2.out0 : i0
    sv.assign %_handshake_buffer2_in0_ready, %handshake_buffer2.in0_ready : i1
    %23 = sv.read_inout %_handshake_fork0_out11 : !hw.inout<i0>
    %24 = sv.read_inout %_handshake_fork0_out11_valid : !hw.inout<i1>
    %25 = sv.read_inout %_handshake_store3_ctrl_ready : !hw.inout<i1>
    %handshake_buffer3.in0_ready, %handshake_buffer3.out0, %handshake_buffer3.out0_valid = hw.instance "handshake_buffer3" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %23: i0, in0_valid: %24: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %25: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer3"}
    sv.assign %_handshake_buffer3_out0_valid, %handshake_buffer3.out0_valid : i1
    sv.assign %_handshake_buffer3_out0, %handshake_buffer3.out0 : i0
    sv.assign %_handshake_buffer3_in0_ready, %handshake_buffer3.in0_ready : i1
    %26 = sv.read_inout %_handshake_fork0_out10 : !hw.inout<i0>
    %27 = sv.read_inout %_handshake_fork0_out10_valid : !hw.inout<i1>
    %28 = sv.read_inout %_handshake_join0_in0_ready : !hw.inout<i1>
    %handshake_buffer4.in0_ready, %handshake_buffer4.out0, %handshake_buffer4.out0_valid = hw.instance "handshake_buffer4" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %26: i0, in0_valid: %27: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %28: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer4"}
    sv.assign %_handshake_buffer4_out0_valid, %handshake_buffer4.out0_valid : i1
    sv.assign %_handshake_buffer4_out0, %handshake_buffer4.out0 : i0
    sv.assign %_handshake_buffer4_in0_ready, %handshake_buffer4.in0_ready : i1
    %29 = sv.read_inout %_handshake_fork0_out9 : !hw.inout<i0>
    %30 = sv.read_inout %_handshake_fork0_out9_valid : !hw.inout<i1>
    %31 = sv.read_inout %_handshake_join2_in0_ready : !hw.inout<i1>
    %handshake_buffer5.in0_ready, %handshake_buffer5.out0, %handshake_buffer5.out0_valid = hw.instance "handshake_buffer5" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %29: i0, in0_valid: %30: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %31: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer5"}
    sv.assign %_handshake_buffer5_out0_valid, %handshake_buffer5.out0_valid : i1
    sv.assign %_handshake_buffer5_out0, %handshake_buffer5.out0 : i0
    sv.assign %_handshake_buffer5_in0_ready, %handshake_buffer5.in0_ready : i1
    %32 = sv.read_inout %_handshake_fork0_out8 : !hw.inout<i0>
    %33 = sv.read_inout %_handshake_fork0_out8_valid : !hw.inout<i1>
    %34 = sv.read_inout %_handshake_join1_in0_ready : !hw.inout<i1>
    %handshake_buffer6.in0_ready, %handshake_buffer6.out0, %handshake_buffer6.out0_valid = hw.instance "handshake_buffer6" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %32: i0, in0_valid: %33: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %34: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer6"}
    sv.assign %_handshake_buffer6_out0_valid, %handshake_buffer6.out0_valid : i1
    sv.assign %_handshake_buffer6_out0, %handshake_buffer6.out0 : i0
    sv.assign %_handshake_buffer6_in0_ready, %handshake_buffer6.in0_ready : i1
    %35 = sv.read_inout %_handshake_fork0_out7 : !hw.inout<i0>
    %36 = sv.read_inout %_handshake_fork0_out7_valid : !hw.inout<i1>
    %37 = sv.read_inout %_handshake_store0_ctrl_ready : !hw.inout<i1>
    %handshake_buffer7.in0_ready, %handshake_buffer7.out0, %handshake_buffer7.out0_valid = hw.instance "handshake_buffer7" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %35: i0, in0_valid: %36: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %37: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer7"}
    sv.assign %_handshake_buffer7_out0_valid, %handshake_buffer7.out0_valid : i1
    sv.assign %_handshake_buffer7_out0, %handshake_buffer7.out0 : i0
    sv.assign %_handshake_buffer7_in0_ready, %handshake_buffer7.in0_ready : i1
    %38 = sv.read_inout %_handshake_fork0_out6 : !hw.inout<i0>
    %39 = sv.read_inout %_handshake_fork0_out6_valid : !hw.inout<i1>
    %40 = sv.read_inout %_handshake_constant6_ctrl_ready : !hw.inout<i1>
    %handshake_buffer8.in0_ready, %handshake_buffer8.out0, %handshake_buffer8.out0_valid = hw.instance "handshake_buffer8" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %38: i0, in0_valid: %39: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %40: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer8"}
    sv.assign %_handshake_buffer8_out0_valid, %handshake_buffer8.out0_valid : i1
    sv.assign %_handshake_buffer8_out0, %handshake_buffer8.out0 : i0
    sv.assign %_handshake_buffer8_in0_ready, %handshake_buffer8.in0_ready : i1
    %41 = sv.read_inout %_handshake_fork0_out5 : !hw.inout<i0>
    %42 = sv.read_inout %_handshake_fork0_out5_valid : !hw.inout<i1>
    %43 = sv.read_inout %_handshake_constant5_ctrl_ready : !hw.inout<i1>
    %handshake_buffer9.in0_ready, %handshake_buffer9.out0, %handshake_buffer9.out0_valid = hw.instance "handshake_buffer9" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %41: i0, in0_valid: %42: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %43: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer9"}
    sv.assign %_handshake_buffer9_out0_valid, %handshake_buffer9.out0_valid : i1
    sv.assign %_handshake_buffer9_out0, %handshake_buffer9.out0 : i0
    sv.assign %_handshake_buffer9_in0_ready, %handshake_buffer9.in0_ready : i1
    %44 = sv.read_inout %_handshake_fork0_out4 : !hw.inout<i0>
    %45 = sv.read_inout %_handshake_fork0_out4_valid : !hw.inout<i1>
    %46 = sv.read_inout %_handshake_constant4_ctrl_ready : !hw.inout<i1>
    %handshake_buffer10.in0_ready, %handshake_buffer10.out0, %handshake_buffer10.out0_valid = hw.instance "handshake_buffer10" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %44: i0, in0_valid: %45: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %46: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer10"}
    sv.assign %_handshake_buffer10_out0_valid, %handshake_buffer10.out0_valid : i1
    sv.assign %_handshake_buffer10_out0, %handshake_buffer10.out0 : i0
    sv.assign %_handshake_buffer10_in0_ready, %handshake_buffer10.in0_ready : i1
    %47 = sv.read_inout %_handshake_fork0_out3 : !hw.inout<i0>
    %48 = sv.read_inout %_handshake_fork0_out3_valid : !hw.inout<i1>
    %49 = sv.read_inout %_handshake_constant3_ctrl_ready : !hw.inout<i1>
    %handshake_buffer11.in0_ready, %handshake_buffer11.out0, %handshake_buffer11.out0_valid = hw.instance "handshake_buffer11" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %47: i0, in0_valid: %48: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %49: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer11"}
    sv.assign %_handshake_buffer11_out0_valid, %handshake_buffer11.out0_valid : i1
    sv.assign %_handshake_buffer11_out0, %handshake_buffer11.out0 : i0
    sv.assign %_handshake_buffer11_in0_ready, %handshake_buffer11.in0_ready : i1
    %50 = sv.read_inout %_handshake_fork0_out2 : !hw.inout<i0>
    %51 = sv.read_inout %_handshake_fork0_out2_valid : !hw.inout<i1>
    %52 = sv.read_inout %_handshake_constant2_ctrl_ready : !hw.inout<i1>
    %handshake_buffer12.in0_ready, %handshake_buffer12.out0, %handshake_buffer12.out0_valid = hw.instance "handshake_buffer12" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %50: i0, in0_valid: %51: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %52: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer12"}
    sv.assign %_handshake_buffer12_out0_valid, %handshake_buffer12.out0_valid : i1
    sv.assign %_handshake_buffer12_out0, %handshake_buffer12.out0 : i0
    sv.assign %_handshake_buffer12_in0_ready, %handshake_buffer12.in0_ready : i1
    %53 = sv.read_inout %_handshake_fork0_out1 : !hw.inout<i0>
    %54 = sv.read_inout %_handshake_fork0_out1_valid : !hw.inout<i1>
    %55 = sv.read_inout %_handshake_constant1_ctrl_ready : !hw.inout<i1>
    %handshake_buffer13.in0_ready, %handshake_buffer13.out0, %handshake_buffer13.out0_valid = hw.instance "handshake_buffer13" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %53: i0, in0_valid: %54: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %55: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer13"}
    sv.assign %_handshake_buffer13_out0_valid, %handshake_buffer13.out0_valid : i1
    sv.assign %_handshake_buffer13_out0, %handshake_buffer13.out0 : i0
    sv.assign %_handshake_buffer13_in0_ready, %handshake_buffer13.in0_ready : i1
    %56 = sv.read_inout %_handshake_fork0_out0 : !hw.inout<i0>
    %57 = sv.read_inout %_handshake_fork0_out0_valid : !hw.inout<i1>
    %58 = sv.read_inout %_handshake_constant0_ctrl_ready : !hw.inout<i1>
    %handshake_buffer14.in0_ready, %handshake_buffer14.out0, %handshake_buffer14.out0_valid = hw.instance "handshake_buffer14" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %56: i0, in0_valid: %57: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %58: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer14"}
    sv.assign %_handshake_buffer14_out0_valid, %handshake_buffer14.out0_valid : i1
    sv.assign %_handshake_buffer14_out0, %handshake_buffer14.out0 : i0
    sv.assign %_handshake_buffer14_in0_ready, %handshake_buffer14.in0_ready : i1
    %59 = sv.read_inout %_handshake_buffer15_in0_ready : !hw.inout<i1>
    %60 = sv.read_inout %_handshake_buffer113_out0 : !hw.inout<i64>
    %61 = sv.read_inout %_handshake_buffer113_out0_valid : !hw.inout<i1>
    %62 = sv.read_inout %_handshake_buffer114_out0 : !hw.inout<i64>
    %63 = sv.read_inout %_handshake_buffer114_out0_valid : !hw.inout<i1>
    %handshake_memory0.stData0_ready, %handshake_memory0.stAddr0_ready, %handshake_memory0.stDone0, %handshake_memory0.stDone0_valid = hw.instance "handshake_memory0" @handshake_memory_out_ui64_id2(stData0: %62: i64, stData0_valid: %63: i1, stAddr0: %60: i64, stAddr0_valid: %61: i1, clock: %clock: i1, reset: %reset: i1, stDone0_ready: %59: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stDone0: i0, stDone0_valid: i1) {hw.verilogName = "handshake_memory0"}
    sv.assign %_handshake_memory0_stDone0_valid, %handshake_memory0.stDone0_valid : i1
    sv.assign %_handshake_memory0_stDone0, %handshake_memory0.stDone0 : i0
    sv.assign %_handshake_memory0_stAddr0_ready, %handshake_memory0.stAddr0_ready : i1
    sv.assign %_handshake_memory0_stData0_ready, %handshake_memory0.stData0_ready : i1
    %64 = sv.read_inout %_handshake_memory0_stDone0 : !hw.inout<i0>
    %65 = sv.read_inout %_handshake_memory0_stDone0_valid : !hw.inout<i1>
    %66 = sv.read_inout %_handshake_join5_in3_ready : !hw.inout<i1>
    %handshake_buffer15.in0_ready, %handshake_buffer15.out0, %handshake_buffer15.out0_valid = hw.instance "handshake_buffer15" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %64: i0, in0_valid: %65: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %66: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer15"}
    sv.assign %_handshake_buffer15_out0_valid, %handshake_buffer15.out0_valid : i1
    sv.assign %_handshake_buffer15_out0, %handshake_buffer15.out0 : i0
    sv.assign %_handshake_buffer15_in0_ready, %handshake_buffer15.in0_ready : i1
    %67 = sv.read_inout %_handshake_buffer16_in0_ready : !hw.inout<i1>
    %68 = sv.read_inout %_handshake_buffer17_in0_ready : !hw.inout<i1>
    %69 = sv.read_inout %_handshake_buffer18_in0_ready : !hw.inout<i1>
    %70 = sv.read_inout %_handshake_buffer19_in0_ready : !hw.inout<i1>
    %71 = sv.read_inout %_handshake_buffer20_in0_ready : !hw.inout<i1>
    %72 = sv.read_inout %_handshake_buffer66_out0 : !hw.inout<i64>
    %73 = sv.read_inout %_handshake_buffer66_out0_valid : !hw.inout<i1>
    %74 = sv.read_inout %_handshake_buffer67_out0 : !hw.inout<i64>
    %75 = sv.read_inout %_handshake_buffer67_out0_valid : !hw.inout<i1>
    %76 = sv.read_inout %_handshake_buffer69_out0 : !hw.inout<i64>
    %77 = sv.read_inout %_handshake_buffer69_out0_valid : !hw.inout<i1>
    %78 = sv.read_inout %_handshake_buffer70_out0 : !hw.inout<i64>
    %79 = sv.read_inout %_handshake_buffer70_out0_valid : !hw.inout<i1>
    %80 = sv.read_inout %_handshake_buffer72_out0 : !hw.inout<i64>
    %81 = sv.read_inout %_handshake_buffer72_out0_valid : !hw.inout<i1>
    %82 = sv.read_inout %_handshake_buffer73_out0 : !hw.inout<i64>
    %83 = sv.read_inout %_handshake_buffer73_out0_valid : !hw.inout<i1>
    %84 = sv.read_inout %_handshake_buffer110_out0 : !hw.inout<i64>
    %85 = sv.read_inout %_handshake_buffer110_out0_valid : !hw.inout<i1>
    %handshake_memory1.stData0_ready, %handshake_memory1.stAddr0_ready, %handshake_memory1.stData1_ready, %handshake_memory1.stAddr1_ready, %handshake_memory1.stData2_ready, %handshake_memory1.stAddr2_ready, %handshake_memory1.ldAddr0_ready, %handshake_memory1.ldData0, %handshake_memory1.ldData0_valid, %handshake_memory1.stDone0, %handshake_memory1.stDone0_valid, %handshake_memory1.stDone1, %handshake_memory1.stDone1_valid, %handshake_memory1.stDone2, %handshake_memory1.stDone2_valid, %handshake_memory1.ldDone0, %handshake_memory1.ldDone0_valid = hw.instance "handshake_memory1" @handshake_memory_out_ui64_id1(stData0: %74: i64, stData0_valid: %75: i1, stAddr0: %72: i64, stAddr0_valid: %73: i1, stData1: %78: i64, stData1_valid: %79: i1, stAddr1: %76: i64, stAddr1_valid: %77: i1, stData2: %82: i64, stData2_valid: %83: i1, stAddr2: %80: i64, stAddr2_valid: %81: i1, ldAddr0: %84: i64, ldAddr0_valid: %85: i1, clock: %clock: i1, reset: %reset: i1, ldData0_ready: %71: i1, stDone0_ready: %70: i1, stDone1_ready: %69: i1, stDone2_ready: %68: i1, ldDone0_ready: %67: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1) {hw.verilogName = "handshake_memory1"}
    sv.assign %_handshake_memory1_ldDone0_valid, %handshake_memory1.ldDone0_valid : i1
    sv.assign %_handshake_memory1_ldDone0, %handshake_memory1.ldDone0 : i0
    sv.assign %_handshake_memory1_stDone2_valid, %handshake_memory1.stDone2_valid : i1
    sv.assign %_handshake_memory1_stDone2, %handshake_memory1.stDone2 : i0
    sv.assign %_handshake_memory1_stDone1_valid, %handshake_memory1.stDone1_valid : i1
    sv.assign %_handshake_memory1_stDone1, %handshake_memory1.stDone1 : i0
    sv.assign %_handshake_memory1_stDone0_valid, %handshake_memory1.stDone0_valid : i1
    sv.assign %_handshake_memory1_stDone0, %handshake_memory1.stDone0 : i0
    sv.assign %_handshake_memory1_ldData0_valid, %handshake_memory1.ldData0_valid : i1
    sv.assign %_handshake_memory1_ldData0, %handshake_memory1.ldData0 : i64
    sv.assign %_handshake_memory1_ldAddr0_ready, %handshake_memory1.ldAddr0_ready : i1
    sv.assign %_handshake_memory1_stAddr2_ready, %handshake_memory1.stAddr2_ready : i1
    sv.assign %_handshake_memory1_stData2_ready, %handshake_memory1.stData2_ready : i1
    sv.assign %_handshake_memory1_stAddr1_ready, %handshake_memory1.stAddr1_ready : i1
    sv.assign %_handshake_memory1_stData1_ready, %handshake_memory1.stData1_ready : i1
    sv.assign %_handshake_memory1_stAddr0_ready, %handshake_memory1.stAddr0_ready : i1
    sv.assign %_handshake_memory1_stData0_ready, %handshake_memory1.stData0_ready : i1
    %86 = sv.read_inout %_handshake_memory1_ldDone0 : !hw.inout<i0>
    %87 = sv.read_inout %_handshake_memory1_ldDone0_valid : !hw.inout<i1>
    %88 = sv.read_inout %_handshake_join5_in2_ready : !hw.inout<i1>
    %handshake_buffer16.in0_ready, %handshake_buffer16.out0, %handshake_buffer16.out0_valid = hw.instance "handshake_buffer16" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %86: i0, in0_valid: %87: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %88: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer16"}
    sv.assign %_handshake_buffer16_out0_valid, %handshake_buffer16.out0_valid : i1
    sv.assign %_handshake_buffer16_out0, %handshake_buffer16.out0 : i0
    sv.assign %_handshake_buffer16_in0_ready, %handshake_buffer16.in0_ready : i1
    %89 = sv.read_inout %_handshake_memory1_stDone2 : !hw.inout<i0>
    %90 = sv.read_inout %_handshake_memory1_stDone2_valid : !hw.inout<i1>
    %91 = sv.read_inout %_handshake_join0_in6_ready : !hw.inout<i1>
    %handshake_buffer17.in0_ready, %handshake_buffer17.out0, %handshake_buffer17.out0_valid = hw.instance "handshake_buffer17" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %89: i0, in0_valid: %90: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %91: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer17"}
    sv.assign %_handshake_buffer17_out0_valid, %handshake_buffer17.out0_valid : i1
    sv.assign %_handshake_buffer17_out0, %handshake_buffer17.out0 : i0
    sv.assign %_handshake_buffer17_in0_ready, %handshake_buffer17.in0_ready : i1
    %92 = sv.read_inout %_handshake_memory1_stDone1 : !hw.inout<i0>
    %93 = sv.read_inout %_handshake_memory1_stDone1_valid : !hw.inout<i1>
    %94 = sv.read_inout %_handshake_fork1_in0_ready : !hw.inout<i1>
    %handshake_buffer18.in0_ready, %handshake_buffer18.out0, %handshake_buffer18.out0_valid = hw.instance "handshake_buffer18" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %92: i0, in0_valid: %93: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %94: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer18"}
    sv.assign %_handshake_buffer18_out0_valid, %handshake_buffer18.out0_valid : i1
    sv.assign %_handshake_buffer18_out0, %handshake_buffer18.out0 : i0
    sv.assign %_handshake_buffer18_in0_ready, %handshake_buffer18.in0_ready : i1
    %95 = sv.read_inout %_handshake_memory1_stDone0 : !hw.inout<i0>
    %96 = sv.read_inout %_handshake_memory1_stDone0_valid : !hw.inout<i1>
    %97 = sv.read_inout %_handshake_fork2_in0_ready : !hw.inout<i1>
    %handshake_buffer19.in0_ready, %handshake_buffer19.out0, %handshake_buffer19.out0_valid = hw.instance "handshake_buffer19" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %95: i0, in0_valid: %96: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %97: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer19"}
    sv.assign %_handshake_buffer19_out0_valid, %handshake_buffer19.out0_valid : i1
    sv.assign %_handshake_buffer19_out0, %handshake_buffer19.out0 : i0
    sv.assign %_handshake_buffer19_in0_ready, %handshake_buffer19.in0_ready : i1
    %98 = sv.read_inout %_handshake_memory1_ldData0 : !hw.inout<i64>
    %99 = sv.read_inout %_handshake_memory1_ldData0_valid : !hw.inout<i1>
    %100 = sv.read_inout %_handshake_load1_dataFromMem_ready : !hw.inout<i1>
    %handshake_buffer20.in0_ready, %handshake_buffer20.out0, %handshake_buffer20.out0_valid = hw.instance "handshake_buffer20" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %98: i64, in0_valid: %99: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %100: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer20"}
    sv.assign %_handshake_buffer20_out0_valid, %handshake_buffer20.out0_valid : i1
    sv.assign %_handshake_buffer20_out0, %handshake_buffer20.out0 : i64
    sv.assign %_handshake_buffer20_in0_ready, %handshake_buffer20.in0_ready : i1
    %101 = sv.read_inout %_handshake_buffer18_out0 : !hw.inout<i0>
    %102 = sv.read_inout %_handshake_buffer18_out0_valid : !hw.inout<i1>
    %103 = sv.read_inout %_handshake_buffer21_in0_ready : !hw.inout<i1>
    %104 = sv.read_inout %_handshake_buffer22_in0_ready : !hw.inout<i1>
    %handshake_fork1.in0_ready, %handshake_fork1.out0, %handshake_fork1.out0_valid, %handshake_fork1.out1, %handshake_fork1.out1_valid = hw.instance "handshake_fork1" @handshake_fork_1ins_2outs_ctrl(in0: %101: i0, in0_valid: %102: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %104: i1, out1_ready: %103: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1) {hw.verilogName = "handshake_fork1"}
    sv.assign %_handshake_fork1_out1_valid, %handshake_fork1.out1_valid : i1
    sv.assign %_handshake_fork1_out1, %handshake_fork1.out1 : i0
    sv.assign %_handshake_fork1_out0_valid, %handshake_fork1.out0_valid : i1
    sv.assign %_handshake_fork1_out0, %handshake_fork1.out0 : i0
    sv.assign %_handshake_fork1_in0_ready, %handshake_fork1.in0_ready : i1
    %105 = sv.read_inout %_handshake_fork1_out1 : !hw.inout<i0>
    %106 = sv.read_inout %_handshake_fork1_out1_valid : !hw.inout<i1>
    %107 = sv.read_inout %_handshake_join0_in5_ready : !hw.inout<i1>
    %handshake_buffer21.in0_ready, %handshake_buffer21.out0, %handshake_buffer21.out0_valid = hw.instance "handshake_buffer21" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %105: i0, in0_valid: %106: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %107: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer21"}
    sv.assign %_handshake_buffer21_out0_valid, %handshake_buffer21.out0_valid : i1
    sv.assign %_handshake_buffer21_out0, %handshake_buffer21.out0 : i0
    sv.assign %_handshake_buffer21_in0_ready, %handshake_buffer21.in0_ready : i1
    %108 = sv.read_inout %_handshake_fork1_out0 : !hw.inout<i0>
    %109 = sv.read_inout %_handshake_fork1_out0_valid : !hw.inout<i1>
    %110 = sv.read_inout %_handshake_join4_in2_ready : !hw.inout<i1>
    %handshake_buffer22.in0_ready, %handshake_buffer22.out0, %handshake_buffer22.out0_valid = hw.instance "handshake_buffer22" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %108: i0, in0_valid: %109: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %110: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer22"}
    sv.assign %_handshake_buffer22_out0_valid, %handshake_buffer22.out0_valid : i1
    sv.assign %_handshake_buffer22_out0, %handshake_buffer22.out0 : i0
    sv.assign %_handshake_buffer22_in0_ready, %handshake_buffer22.in0_ready : i1
    %111 = sv.read_inout %_handshake_buffer19_out0 : !hw.inout<i0>
    %112 = sv.read_inout %_handshake_buffer19_out0_valid : !hw.inout<i1>
    %113 = sv.read_inout %_handshake_buffer23_in0_ready : !hw.inout<i1>
    %114 = sv.read_inout %_handshake_buffer24_in0_ready : !hw.inout<i1>
    %115 = sv.read_inout %_handshake_buffer25_in0_ready : !hw.inout<i1>
    %handshake_fork2.in0_ready, %handshake_fork2.out0, %handshake_fork2.out0_valid, %handshake_fork2.out1, %handshake_fork2.out1_valid, %handshake_fork2.out2, %handshake_fork2.out2_valid = hw.instance "handshake_fork2" @handshake_fork_1ins_3outs_ctrl(in0: %111: i0, in0_valid: %112: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %115: i1, out1_ready: %114: i1, out2_ready: %113: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1) {hw.verilogName = "handshake_fork2"}
    sv.assign %_handshake_fork2_out2_valid, %handshake_fork2.out2_valid : i1
    sv.assign %_handshake_fork2_out2, %handshake_fork2.out2 : i0
    sv.assign %_handshake_fork2_out1_valid, %handshake_fork2.out1_valid : i1
    sv.assign %_handshake_fork2_out1, %handshake_fork2.out1 : i0
    sv.assign %_handshake_fork2_out0_valid, %handshake_fork2.out0_valid : i1
    sv.assign %_handshake_fork2_out0, %handshake_fork2.out0 : i0
    sv.assign %_handshake_fork2_in0_ready, %handshake_fork2.in0_ready : i1
    %116 = sv.read_inout %_handshake_fork2_out2 : !hw.inout<i0>
    %117 = sv.read_inout %_handshake_fork2_out2_valid : !hw.inout<i1>
    %118 = sv.read_inout %_handshake_join0_in4_ready : !hw.inout<i1>
    %handshake_buffer23.in0_ready, %handshake_buffer23.out0, %handshake_buffer23.out0_valid = hw.instance "handshake_buffer23" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %116: i0, in0_valid: %117: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %118: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer23"}
    sv.assign %_handshake_buffer23_out0_valid, %handshake_buffer23.out0_valid : i1
    sv.assign %_handshake_buffer23_out0, %handshake_buffer23.out0 : i0
    sv.assign %_handshake_buffer23_in0_ready, %handshake_buffer23.in0_ready : i1
    %119 = sv.read_inout %_handshake_fork2_out1 : !hw.inout<i0>
    %120 = sv.read_inout %_handshake_fork2_out1_valid : !hw.inout<i1>
    %121 = sv.read_inout %_handshake_join3_in1_ready : !hw.inout<i1>
    %handshake_buffer24.in0_ready, %handshake_buffer24.out0, %handshake_buffer24.out0_valid = hw.instance "handshake_buffer24" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %119: i0, in0_valid: %120: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %121: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer24"}
    sv.assign %_handshake_buffer24_out0_valid, %handshake_buffer24.out0_valid : i1
    sv.assign %_handshake_buffer24_out0, %handshake_buffer24.out0 : i0
    sv.assign %_handshake_buffer24_in0_ready, %handshake_buffer24.in0_ready : i1
    %122 = sv.read_inout %_handshake_fork2_out0 : !hw.inout<i0>
    %123 = sv.read_inout %_handshake_fork2_out0_valid : !hw.inout<i1>
    %124 = sv.read_inout %_handshake_join4_in1_ready : !hw.inout<i1>
    %handshake_buffer25.in0_ready, %handshake_buffer25.out0, %handshake_buffer25.out0_valid = hw.instance "handshake_buffer25" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %122: i0, in0_valid: %123: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %124: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer25"}
    sv.assign %_handshake_buffer25_out0_valid, %handshake_buffer25.out0_valid : i1
    sv.assign %_handshake_buffer25_out0, %handshake_buffer25.out0 : i0
    sv.assign %_handshake_buffer25_in0_ready, %handshake_buffer25.in0_ready : i1
    %125 = sv.read_inout %_handshake_buffer26_in0_ready : !hw.inout<i1>
    %126 = sv.read_inout %_handshake_buffer27_in0_ready : !hw.inout<i1>
    %127 = sv.read_inout %_handshake_buffer28_in0_ready : !hw.inout<i1>
    %128 = sv.read_inout %_handshake_buffer29_in0_ready : !hw.inout<i1>
    %129 = sv.read_inout %_handshake_buffer30_in0_ready : !hw.inout<i1>
    %130 = sv.read_inout %_handshake_buffer58_out0 : !hw.inout<i64>
    %131 = sv.read_inout %_handshake_buffer58_out0_valid : !hw.inout<i1>
    %132 = sv.read_inout %_handshake_buffer59_out0 : !hw.inout<i64>
    %133 = sv.read_inout %_handshake_buffer59_out0_valid : !hw.inout<i1>
    %134 = sv.read_inout %_handshake_buffer61_out0 : !hw.inout<i64>
    %135 = sv.read_inout %_handshake_buffer61_out0_valid : !hw.inout<i1>
    %136 = sv.read_inout %_handshake_buffer62_out0 : !hw.inout<i64>
    %137 = sv.read_inout %_handshake_buffer62_out0_valid : !hw.inout<i1>
    %138 = sv.read_inout %_handshake_buffer64_out0 : !hw.inout<i64>
    %139 = sv.read_inout %_handshake_buffer64_out0_valid : !hw.inout<i1>
    %140 = sv.read_inout %_handshake_buffer65_out0 : !hw.inout<i64>
    %141 = sv.read_inout %_handshake_buffer65_out0_valid : !hw.inout<i1>
    %142 = sv.read_inout %_handshake_buffer108_out0 : !hw.inout<i64>
    %143 = sv.read_inout %_handshake_buffer108_out0_valid : !hw.inout<i1>
    %handshake_memory2.stData0_ready, %handshake_memory2.stAddr0_ready, %handshake_memory2.stData1_ready, %handshake_memory2.stAddr1_ready, %handshake_memory2.stData2_ready, %handshake_memory2.stAddr2_ready, %handshake_memory2.ldAddr0_ready, %handshake_memory2.ldData0, %handshake_memory2.ldData0_valid, %handshake_memory2.stDone0, %handshake_memory2.stDone0_valid, %handshake_memory2.stDone1, %handshake_memory2.stDone1_valid, %handshake_memory2.stDone2, %handshake_memory2.stDone2_valid, %handshake_memory2.ldDone0, %handshake_memory2.ldDone0_valid = hw.instance "handshake_memory2" @handshake_memory_out_ui64_id0(stData0: %132: i64, stData0_valid: %133: i1, stAddr0: %130: i64, stAddr0_valid: %131: i1, stData1: %136: i64, stData1_valid: %137: i1, stAddr1: %134: i64, stAddr1_valid: %135: i1, stData2: %140: i64, stData2_valid: %141: i1, stAddr2: %138: i64, stAddr2_valid: %139: i1, ldAddr0: %142: i64, ldAddr0_valid: %143: i1, clock: %clock: i1, reset: %reset: i1, ldData0_ready: %129: i1, stDone0_ready: %128: i1, stDone1_ready: %127: i1, stDone2_ready: %126: i1, ldDone0_ready: %125: i1) -> (stData0_ready: i1, stAddr0_ready: i1, stData1_ready: i1, stAddr1_ready: i1, stData2_ready: i1, stAddr2_ready: i1, ldAddr0_ready: i1, ldData0: i64, ldData0_valid: i1, stDone0: i0, stDone0_valid: i1, stDone1: i0, stDone1_valid: i1, stDone2: i0, stDone2_valid: i1, ldDone0: i0, ldDone0_valid: i1) {hw.verilogName = "handshake_memory2"}
    sv.assign %_handshake_memory2_ldDone0_valid, %handshake_memory2.ldDone0_valid : i1
    sv.assign %_handshake_memory2_ldDone0, %handshake_memory2.ldDone0 : i0
    sv.assign %_handshake_memory2_stDone2_valid, %handshake_memory2.stDone2_valid : i1
    sv.assign %_handshake_memory2_stDone2, %handshake_memory2.stDone2 : i0
    sv.assign %_handshake_memory2_stDone1_valid, %handshake_memory2.stDone1_valid : i1
    sv.assign %_handshake_memory2_stDone1, %handshake_memory2.stDone1 : i0
    sv.assign %_handshake_memory2_stDone0_valid, %handshake_memory2.stDone0_valid : i1
    sv.assign %_handshake_memory2_stDone0, %handshake_memory2.stDone0 : i0
    sv.assign %_handshake_memory2_ldData0_valid, %handshake_memory2.ldData0_valid : i1
    sv.assign %_handshake_memory2_ldData0, %handshake_memory2.ldData0 : i64
    sv.assign %_handshake_memory2_ldAddr0_ready, %handshake_memory2.ldAddr0_ready : i1
    sv.assign %_handshake_memory2_stAddr2_ready, %handshake_memory2.stAddr2_ready : i1
    sv.assign %_handshake_memory2_stData2_ready, %handshake_memory2.stData2_ready : i1
    sv.assign %_handshake_memory2_stAddr1_ready, %handshake_memory2.stAddr1_ready : i1
    sv.assign %_handshake_memory2_stData1_ready, %handshake_memory2.stData1_ready : i1
    sv.assign %_handshake_memory2_stAddr0_ready, %handshake_memory2.stAddr0_ready : i1
    sv.assign %_handshake_memory2_stData0_ready, %handshake_memory2.stData0_ready : i1
    %144 = sv.read_inout %_handshake_memory2_ldDone0 : !hw.inout<i0>
    %145 = sv.read_inout %_handshake_memory2_ldDone0_valid : !hw.inout<i1>
    %146 = sv.read_inout %_handshake_join5_in1_ready : !hw.inout<i1>
    %handshake_buffer26.in0_ready, %handshake_buffer26.out0, %handshake_buffer26.out0_valid = hw.instance "handshake_buffer26" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %144: i0, in0_valid: %145: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %146: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer26"}
    sv.assign %_handshake_buffer26_out0_valid, %handshake_buffer26.out0_valid : i1
    sv.assign %_handshake_buffer26_out0, %handshake_buffer26.out0 : i0
    sv.assign %_handshake_buffer26_in0_ready, %handshake_buffer26.in0_ready : i1
    %147 = sv.read_inout %_handshake_memory2_stDone2 : !hw.inout<i0>
    %148 = sv.read_inout %_handshake_memory2_stDone2_valid : !hw.inout<i1>
    %149 = sv.read_inout %_handshake_join0_in3_ready : !hw.inout<i1>
    %handshake_buffer27.in0_ready, %handshake_buffer27.out0, %handshake_buffer27.out0_valid = hw.instance "handshake_buffer27" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %147: i0, in0_valid: %148: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %149: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer27"}
    sv.assign %_handshake_buffer27_out0_valid, %handshake_buffer27.out0_valid : i1
    sv.assign %_handshake_buffer27_out0, %handshake_buffer27.out0 : i0
    sv.assign %_handshake_buffer27_in0_ready, %handshake_buffer27.in0_ready : i1
    %150 = sv.read_inout %_handshake_memory2_stDone1 : !hw.inout<i0>
    %151 = sv.read_inout %_handshake_memory2_stDone1_valid : !hw.inout<i1>
    %152 = sv.read_inout %_handshake_fork3_in0_ready : !hw.inout<i1>
    %handshake_buffer28.in0_ready, %handshake_buffer28.out0, %handshake_buffer28.out0_valid = hw.instance "handshake_buffer28" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %150: i0, in0_valid: %151: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %152: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer28"}
    sv.assign %_handshake_buffer28_out0_valid, %handshake_buffer28.out0_valid : i1
    sv.assign %_handshake_buffer28_out0, %handshake_buffer28.out0 : i0
    sv.assign %_handshake_buffer28_in0_ready, %handshake_buffer28.in0_ready : i1
    %153 = sv.read_inout %_handshake_memory2_stDone0 : !hw.inout<i0>
    %154 = sv.read_inout %_handshake_memory2_stDone0_valid : !hw.inout<i1>
    %155 = sv.read_inout %_handshake_fork4_in0_ready : !hw.inout<i1>
    %handshake_buffer29.in0_ready, %handshake_buffer29.out0, %handshake_buffer29.out0_valid = hw.instance "handshake_buffer29" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %153: i0, in0_valid: %154: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %155: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer29"}
    sv.assign %_handshake_buffer29_out0_valid, %handshake_buffer29.out0_valid : i1
    sv.assign %_handshake_buffer29_out0, %handshake_buffer29.out0 : i0
    sv.assign %_handshake_buffer29_in0_ready, %handshake_buffer29.in0_ready : i1
    %156 = sv.read_inout %_handshake_memory2_ldData0 : !hw.inout<i64>
    %157 = sv.read_inout %_handshake_memory2_ldData0_valid : !hw.inout<i1>
    %158 = sv.read_inout %_handshake_load0_dataFromMem_ready : !hw.inout<i1>
    %handshake_buffer30.in0_ready, %handshake_buffer30.out0, %handshake_buffer30.out0_valid = hw.instance "handshake_buffer30" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %156: i64, in0_valid: %157: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %158: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer30"}
    sv.assign %_handshake_buffer30_out0_valid, %handshake_buffer30.out0_valid : i1
    sv.assign %_handshake_buffer30_out0, %handshake_buffer30.out0 : i64
    sv.assign %_handshake_buffer30_in0_ready, %handshake_buffer30.in0_ready : i1
    %159 = sv.read_inout %_handshake_buffer28_out0 : !hw.inout<i0>
    %160 = sv.read_inout %_handshake_buffer28_out0_valid : !hw.inout<i1>
    %161 = sv.read_inout %_handshake_buffer31_in0_ready : !hw.inout<i1>
    %162 = sv.read_inout %_handshake_buffer32_in0_ready : !hw.inout<i1>
    %handshake_fork3.in0_ready, %handshake_fork3.out0, %handshake_fork3.out0_valid, %handshake_fork3.out1, %handshake_fork3.out1_valid = hw.instance "handshake_fork3" @handshake_fork_1ins_2outs_ctrl(in0: %159: i0, in0_valid: %160: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %162: i1, out1_ready: %161: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1) {hw.verilogName = "handshake_fork3"}
    sv.assign %_handshake_fork3_out1_valid, %handshake_fork3.out1_valid : i1
    sv.assign %_handshake_fork3_out1, %handshake_fork3.out1 : i0
    sv.assign %_handshake_fork3_out0_valid, %handshake_fork3.out0_valid : i1
    sv.assign %_handshake_fork3_out0, %handshake_fork3.out0 : i0
    sv.assign %_handshake_fork3_in0_ready, %handshake_fork3.in0_ready : i1
    %163 = sv.read_inout %_handshake_fork3_out1 : !hw.inout<i0>
    %164 = sv.read_inout %_handshake_fork3_out1_valid : !hw.inout<i1>
    %165 = sv.read_inout %_handshake_join2_in2_ready : !hw.inout<i1>
    %handshake_buffer31.in0_ready, %handshake_buffer31.out0, %handshake_buffer31.out0_valid = hw.instance "handshake_buffer31" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %163: i0, in0_valid: %164: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %165: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer31"}
    sv.assign %_handshake_buffer31_out0_valid, %handshake_buffer31.out0_valid : i1
    sv.assign %_handshake_buffer31_out0, %handshake_buffer31.out0 : i0
    sv.assign %_handshake_buffer31_in0_ready, %handshake_buffer31.in0_ready : i1
    %166 = sv.read_inout %_handshake_fork3_out0 : !hw.inout<i0>
    %167 = sv.read_inout %_handshake_fork3_out0_valid : !hw.inout<i1>
    %168 = sv.read_inout %_handshake_join0_in2_ready : !hw.inout<i1>
    %handshake_buffer32.in0_ready, %handshake_buffer32.out0, %handshake_buffer32.out0_valid = hw.instance "handshake_buffer32" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %166: i0, in0_valid: %167: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %168: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer32"}
    sv.assign %_handshake_buffer32_out0_valid, %handshake_buffer32.out0_valid : i1
    sv.assign %_handshake_buffer32_out0, %handshake_buffer32.out0 : i0
    sv.assign %_handshake_buffer32_in0_ready, %handshake_buffer32.in0_ready : i1
    %169 = sv.read_inout %_handshake_buffer29_out0 : !hw.inout<i0>
    %170 = sv.read_inout %_handshake_buffer29_out0_valid : !hw.inout<i1>
    %171 = sv.read_inout %_handshake_buffer33_in0_ready : !hw.inout<i1>
    %172 = sv.read_inout %_handshake_buffer34_in0_ready : !hw.inout<i1>
    %173 = sv.read_inout %_handshake_buffer35_in0_ready : !hw.inout<i1>
    %handshake_fork4.in0_ready, %handshake_fork4.out0, %handshake_fork4.out0_valid, %handshake_fork4.out1, %handshake_fork4.out1_valid, %handshake_fork4.out2, %handshake_fork4.out2_valid = hw.instance "handshake_fork4" @handshake_fork_1ins_3outs_ctrl(in0: %169: i0, in0_valid: %170: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %173: i1, out1_ready: %172: i1, out2_ready: %171: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1) {hw.verilogName = "handshake_fork4"}
    sv.assign %_handshake_fork4_out2_valid, %handshake_fork4.out2_valid : i1
    sv.assign %_handshake_fork4_out2, %handshake_fork4.out2 : i0
    sv.assign %_handshake_fork4_out1_valid, %handshake_fork4.out1_valid : i1
    sv.assign %_handshake_fork4_out1, %handshake_fork4.out1 : i0
    sv.assign %_handshake_fork4_out0_valid, %handshake_fork4.out0_valid : i1
    sv.assign %_handshake_fork4_out0, %handshake_fork4.out0 : i0
    sv.assign %_handshake_fork4_in0_ready, %handshake_fork4.in0_ready : i1
    %174 = sv.read_inout %_handshake_fork4_out2 : !hw.inout<i0>
    %175 = sv.read_inout %_handshake_fork4_out2_valid : !hw.inout<i1>
    %176 = sv.read_inout %_handshake_join1_in1_ready : !hw.inout<i1>
    %handshake_buffer33.in0_ready, %handshake_buffer33.out0, %handshake_buffer33.out0_valid = hw.instance "handshake_buffer33" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %174: i0, in0_valid: %175: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %176: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer33"}
    sv.assign %_handshake_buffer33_out0_valid, %handshake_buffer33.out0_valid : i1
    sv.assign %_handshake_buffer33_out0, %handshake_buffer33.out0 : i0
    sv.assign %_handshake_buffer33_in0_ready, %handshake_buffer33.in0_ready : i1
    %177 = sv.read_inout %_handshake_fork4_out1 : !hw.inout<i0>
    %178 = sv.read_inout %_handshake_fork4_out1_valid : !hw.inout<i1>
    %179 = sv.read_inout %_handshake_join2_in1_ready : !hw.inout<i1>
    %handshake_buffer34.in0_ready, %handshake_buffer34.out0, %handshake_buffer34.out0_valid = hw.instance "handshake_buffer34" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %177: i0, in0_valid: %178: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %179: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer34"}
    sv.assign %_handshake_buffer34_out0_valid, %handshake_buffer34.out0_valid : i1
    sv.assign %_handshake_buffer34_out0, %handshake_buffer34.out0 : i0
    sv.assign %_handshake_buffer34_in0_ready, %handshake_buffer34.in0_ready : i1
    %180 = sv.read_inout %_handshake_fork4_out0 : !hw.inout<i0>
    %181 = sv.read_inout %_handshake_fork4_out0_valid : !hw.inout<i1>
    %182 = sv.read_inout %_handshake_join0_in1_ready : !hw.inout<i1>
    %handshake_buffer35.in0_ready, %handshake_buffer35.out0, %handshake_buffer35.out0_valid = hw.instance "handshake_buffer35" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %180: i0, in0_valid: %181: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %182: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer35"}
    sv.assign %_handshake_buffer35_out0_valid, %handshake_buffer35.out0_valid : i1
    sv.assign %_handshake_buffer35_out0, %handshake_buffer35.out0 : i0
    sv.assign %_handshake_buffer35_in0_ready, %handshake_buffer35.in0_ready : i1
    %183 = sv.read_inout %_handshake_buffer4_out0 : !hw.inout<i0>
    %184 = sv.read_inout %_handshake_buffer4_out0_valid : !hw.inout<i1>
    %185 = sv.read_inout %_handshake_buffer17_out0 : !hw.inout<i0>
    %186 = sv.read_inout %_handshake_buffer17_out0_valid : !hw.inout<i1>
    %187 = sv.read_inout %_handshake_buffer21_out0 : !hw.inout<i0>
    %188 = sv.read_inout %_handshake_buffer21_out0_valid : !hw.inout<i1>
    %189 = sv.read_inout %_handshake_buffer23_out0 : !hw.inout<i0>
    %190 = sv.read_inout %_handshake_buffer23_out0_valid : !hw.inout<i1>
    %191 = sv.read_inout %_handshake_buffer27_out0 : !hw.inout<i0>
    %192 = sv.read_inout %_handshake_buffer27_out0_valid : !hw.inout<i1>
    %193 = sv.read_inout %_handshake_buffer32_out0 : !hw.inout<i0>
    %194 = sv.read_inout %_handshake_buffer32_out0_valid : !hw.inout<i1>
    %195 = sv.read_inout %_handshake_buffer35_out0 : !hw.inout<i0>
    %196 = sv.read_inout %_handshake_buffer35_out0_valid : !hw.inout<i1>
    %197 = sv.read_inout %_handshake_buffer36_in0_ready : !hw.inout<i1>
    %handshake_join0.in0_ready, %handshake_join0.in1_ready, %handshake_join0.in2_ready, %handshake_join0.in3_ready, %handshake_join0.in4_ready, %handshake_join0.in5_ready, %handshake_join0.in6_ready, %handshake_join0.out0, %handshake_join0.out0_valid = hw.instance "handshake_join0" @handshake_join_7ins_1outs_ctrl(in0: %183: i0, in0_valid: %184: i1, in1: %195: i0, in1_valid: %196: i1, in2: %193: i0, in2_valid: %194: i1, in3: %191: i0, in3_valid: %192: i1, in4: %189: i0, in4_valid: %190: i1, in5: %187: i0, in5_valid: %188: i1, in6: %185: i0, in6_valid: %186: i1, out0_ready: %197: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, in4_ready: i1, in5_ready: i1, in6_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_join0"}
    sv.assign %_handshake_join0_out0_valid, %handshake_join0.out0_valid : i1
    sv.assign %_handshake_join0_out0, %handshake_join0.out0 : i0
    sv.assign %_handshake_join0_in6_ready, %handshake_join0.in6_ready : i1
    sv.assign %_handshake_join0_in5_ready, %handshake_join0.in5_ready : i1
    sv.assign %_handshake_join0_in4_ready, %handshake_join0.in4_ready : i1
    sv.assign %_handshake_join0_in3_ready, %handshake_join0.in3_ready : i1
    sv.assign %_handshake_join0_in2_ready, %handshake_join0.in2_ready : i1
    sv.assign %_handshake_join0_in1_ready, %handshake_join0.in1_ready : i1
    sv.assign %_handshake_join0_in0_ready, %handshake_join0.in0_ready : i1
    %198 = sv.read_inout %_handshake_join0_out0 : !hw.inout<i0>
    %199 = sv.read_inout %_handshake_join0_out0_valid : !hw.inout<i1>
    %200 = sv.read_inout %_handshake_mux0_in0_ready : !hw.inout<i1>
    %handshake_buffer36.in0_ready, %handshake_buffer36.out0, %handshake_buffer36.out0_valid = hw.instance "handshake_buffer36" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %198: i0, in0_valid: %199: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %200: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer36"}
    sv.assign %_handshake_buffer36_out0_valid, %handshake_buffer36.out0_valid : i1
    sv.assign %_handshake_buffer36_out0, %handshake_buffer36.out0 : i0
    sv.assign %_handshake_buffer36_in0_ready, %handshake_buffer36.in0_ready : i1
    %201 = sv.read_inout %_handshake_buffer14_out0 : !hw.inout<i0>
    %202 = sv.read_inout %_handshake_buffer14_out0_valid : !hw.inout<i1>
    %203 = sv.read_inout %_handshake_buffer37_in0_ready : !hw.inout<i1>
    %handshake_constant0.ctrl_ready, %handshake_constant0.out0, %handshake_constant0.out0_valid = hw.instance "handshake_constant0" @handshake_constant_c3_out_ui64(ctrl: %201: i0, ctrl_valid: %202: i1, out0_ready: %203: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_constant0"}
    sv.assign %_handshake_constant0_out0_valid, %handshake_constant0.out0_valid : i1
    sv.assign %_handshake_constant0_out0, %handshake_constant0.out0 : i64
    sv.assign %_handshake_constant0_ctrl_ready, %handshake_constant0.ctrl_ready : i1
    %204 = sv.read_inout %_handshake_constant0_out0 : !hw.inout<i64>
    %205 = sv.read_inout %_handshake_constant0_out0_valid : !hw.inout<i1>
    %206 = sv.read_inout %_handshake_mux2_in0_ready : !hw.inout<i1>
    %handshake_buffer37.in0_ready, %handshake_buffer37.out0, %handshake_buffer37.out0_valid = hw.instance "handshake_buffer37" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %204: i64, in0_valid: %205: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %206: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer37"}
    sv.assign %_handshake_buffer37_out0_valid, %handshake_buffer37.out0_valid : i1
    sv.assign %_handshake_buffer37_out0, %handshake_buffer37.out0 : i64
    sv.assign %_handshake_buffer37_in0_ready, %handshake_buffer37.in0_ready : i1
    %207 = sv.read_inout %_handshake_buffer13_out0 : !hw.inout<i0>
    %208 = sv.read_inout %_handshake_buffer13_out0_valid : !hw.inout<i1>
    %209 = sv.read_inout %_handshake_buffer38_in0_ready : !hw.inout<i1>
    %handshake_constant1.ctrl_ready, %handshake_constant1.out0, %handshake_constant1.out0_valid = hw.instance "handshake_constant1" @handshake_constant_c3_out_ui64(ctrl: %207: i0, ctrl_valid: %208: i1, out0_ready: %209: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_constant1"}
    sv.assign %_handshake_constant1_out0_valid, %handshake_constant1.out0_valid : i1
    sv.assign %_handshake_constant1_out0, %handshake_constant1.out0 : i64
    sv.assign %_handshake_constant1_ctrl_ready, %handshake_constant1.ctrl_ready : i1
    %210 = sv.read_inout %_handshake_constant1_out0 : !hw.inout<i64>
    %211 = sv.read_inout %_handshake_constant1_out0_valid : !hw.inout<i1>
    %212 = sv.read_inout %_handshake_fork5_in0_ready : !hw.inout<i1>
    %handshake_buffer38.in0_ready, %handshake_buffer38.out0, %handshake_buffer38.out0_valid = hw.instance "handshake_buffer38" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %210: i64, in0_valid: %211: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %212: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer38"}
    sv.assign %_handshake_buffer38_out0_valid, %handshake_buffer38.out0_valid : i1
    sv.assign %_handshake_buffer38_out0, %handshake_buffer38.out0 : i64
    sv.assign %_handshake_buffer38_in0_ready, %handshake_buffer38.in0_ready : i1
    %213 = sv.read_inout %_handshake_buffer38_out0 : !hw.inout<i64>
    %214 = sv.read_inout %_handshake_buffer38_out0_valid : !hw.inout<i1>
    %215 = sv.read_inout %_handshake_buffer39_in0_ready : !hw.inout<i1>
    %216 = sv.read_inout %_handshake_buffer40_in0_ready : !hw.inout<i1>
    %handshake_fork5.in0_ready, %handshake_fork5.out0, %handshake_fork5.out0_valid, %handshake_fork5.out1, %handshake_fork5.out1_valid = hw.instance "handshake_fork5" @handshake_fork_in_ui64_out_ui64_ui64(in0: %213: i64, in0_valid: %214: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %216: i1, out1_ready: %215: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1) {hw.verilogName = "handshake_fork5"}
    sv.assign %_handshake_fork5_out1_valid, %handshake_fork5.out1_valid : i1
    sv.assign %_handshake_fork5_out1, %handshake_fork5.out1 : i64
    sv.assign %_handshake_fork5_out0_valid, %handshake_fork5.out0_valid : i1
    sv.assign %_handshake_fork5_out0, %handshake_fork5.out0 : i64
    sv.assign %_handshake_fork5_in0_ready, %handshake_fork5.in0_ready : i1
    %217 = sv.read_inout %_handshake_fork5_out1 : !hw.inout<i64>
    %218 = sv.read_inout %_handshake_fork5_out1_valid : !hw.inout<i1>
    %219 = sv.read_inout %_handshake_store2_dataIn_ready : !hw.inout<i1>
    %handshake_buffer39.in0_ready, %handshake_buffer39.out0, %handshake_buffer39.out0_valid = hw.instance "handshake_buffer39" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %217: i64, in0_valid: %218: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %219: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer39"}
    sv.assign %_handshake_buffer39_out0_valid, %handshake_buffer39.out0_valid : i1
    sv.assign %_handshake_buffer39_out0, %handshake_buffer39.out0 : i64
    sv.assign %_handshake_buffer39_in0_ready, %handshake_buffer39.in0_ready : i1
    %220 = sv.read_inout %_handshake_fork5_out0 : !hw.inout<i64>
    %221 = sv.read_inout %_handshake_fork5_out0_valid : !hw.inout<i1>
    %222 = sv.read_inout %_handshake_store5_dataIn_ready : !hw.inout<i1>
    %handshake_buffer40.in0_ready, %handshake_buffer40.out0, %handshake_buffer40.out0_valid = hw.instance "handshake_buffer40" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %220: i64, in0_valid: %221: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %222: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer40"}
    sv.assign %_handshake_buffer40_out0_valid, %handshake_buffer40.out0_valid : i1
    sv.assign %_handshake_buffer40_out0, %handshake_buffer40.out0 : i64
    sv.assign %_handshake_buffer40_in0_ready, %handshake_buffer40.in0_ready : i1
    %223 = sv.read_inout %_handshake_buffer12_out0 : !hw.inout<i0>
    %224 = sv.read_inout %_handshake_buffer12_out0_valid : !hw.inout<i1>
    %225 = sv.read_inout %_handshake_buffer41_in0_ready : !hw.inout<i1>
    %handshake_constant2.ctrl_ready, %handshake_constant2.out0, %handshake_constant2.out0_valid = hw.instance "handshake_constant2" @handshake_constant_c2_out_ui64(ctrl: %223: i0, ctrl_valid: %224: i1, out0_ready: %225: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_constant2"}
    sv.assign %_handshake_constant2_out0_valid, %handshake_constant2.out0_valid : i1
    sv.assign %_handshake_constant2_out0, %handshake_constant2.out0 : i64
    sv.assign %_handshake_constant2_ctrl_ready, %handshake_constant2.ctrl_ready : i1
    %226 = sv.read_inout %_handshake_constant2_out0 : !hw.inout<i64>
    %227 = sv.read_inout %_handshake_constant2_out0_valid : !hw.inout<i1>
    %228 = sv.read_inout %_handshake_fork6_in0_ready : !hw.inout<i1>
    %handshake_buffer41.in0_ready, %handshake_buffer41.out0, %handshake_buffer41.out0_valid = hw.instance "handshake_buffer41" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %226: i64, in0_valid: %227: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %228: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer41"}
    sv.assign %_handshake_buffer41_out0_valid, %handshake_buffer41.out0_valid : i1
    sv.assign %_handshake_buffer41_out0, %handshake_buffer41.out0 : i64
    sv.assign %_handshake_buffer41_in0_ready, %handshake_buffer41.in0_ready : i1
    %229 = sv.read_inout %_handshake_buffer41_out0 : !hw.inout<i64>
    %230 = sv.read_inout %_handshake_buffer41_out0_valid : !hw.inout<i1>
    %231 = sv.read_inout %_handshake_buffer42_in0_ready : !hw.inout<i1>
    %232 = sv.read_inout %_handshake_buffer43_in0_ready : !hw.inout<i1>
    %handshake_fork6.in0_ready, %handshake_fork6.out0, %handshake_fork6.out0_valid, %handshake_fork6.out1, %handshake_fork6.out1_valid = hw.instance "handshake_fork6" @handshake_fork_in_ui64_out_ui64_ui64(in0: %229: i64, in0_valid: %230: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %232: i1, out1_ready: %231: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1) {hw.verilogName = "handshake_fork6"}
    sv.assign %_handshake_fork6_out1_valid, %handshake_fork6.out1_valid : i1
    sv.assign %_handshake_fork6_out1, %handshake_fork6.out1 : i64
    sv.assign %_handshake_fork6_out0_valid, %handshake_fork6.out0_valid : i1
    sv.assign %_handshake_fork6_out0, %handshake_fork6.out0 : i64
    sv.assign %_handshake_fork6_in0_ready, %handshake_fork6.in0_ready : i1
    %233 = sv.read_inout %_handshake_fork6_out1 : !hw.inout<i64>
    %234 = sv.read_inout %_handshake_fork6_out1_valid : !hw.inout<i1>
    %235 = sv.read_inout %_handshake_store1_dataIn_ready : !hw.inout<i1>
    %handshake_buffer42.in0_ready, %handshake_buffer42.out0, %handshake_buffer42.out0_valid = hw.instance "handshake_buffer42" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %233: i64, in0_valid: %234: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %235: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer42"}
    sv.assign %_handshake_buffer42_out0_valid, %handshake_buffer42.out0_valid : i1
    sv.assign %_handshake_buffer42_out0, %handshake_buffer42.out0 : i64
    sv.assign %_handshake_buffer42_in0_ready, %handshake_buffer42.in0_ready : i1
    %236 = sv.read_inout %_handshake_fork6_out0 : !hw.inout<i64>
    %237 = sv.read_inout %_handshake_fork6_out0_valid : !hw.inout<i1>
    %238 = sv.read_inout %_handshake_store4_dataIn_ready : !hw.inout<i1>
    %handshake_buffer43.in0_ready, %handshake_buffer43.out0, %handshake_buffer43.out0_valid = hw.instance "handshake_buffer43" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %236: i64, in0_valid: %237: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %238: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer43"}
    sv.assign %_handshake_buffer43_out0_valid, %handshake_buffer43.out0_valid : i1
    sv.assign %_handshake_buffer43_out0, %handshake_buffer43.out0 : i64
    sv.assign %_handshake_buffer43_in0_ready, %handshake_buffer43.in0_ready : i1
    %239 = sv.read_inout %_handshake_buffer11_out0 : !hw.inout<i0>
    %240 = sv.read_inout %_handshake_buffer11_out0_valid : !hw.inout<i1>
    %241 = sv.read_inout %_handshake_buffer44_in0_ready : !hw.inout<i1>
    %handshake_constant3.ctrl_ready, %handshake_constant3.out0, %handshake_constant3.out0_valid = hw.instance "handshake_constant3" @handshake_constant_c1_out_ui64(ctrl: %239: i0, ctrl_valid: %240: i1, out0_ready: %241: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_constant3"}
    sv.assign %_handshake_constant3_out0_valid, %handshake_constant3.out0_valid : i1
    sv.assign %_handshake_constant3_out0, %handshake_constant3.out0 : i64
    sv.assign %_handshake_constant3_ctrl_ready, %handshake_constant3.ctrl_ready : i1
    %242 = sv.read_inout %_handshake_constant3_out0 : !hw.inout<i64>
    %243 = sv.read_inout %_handshake_constant3_out0_valid : !hw.inout<i1>
    %244 = sv.read_inout %_handshake_fork7_in0_ready : !hw.inout<i1>
    %handshake_buffer44.in0_ready, %handshake_buffer44.out0, %handshake_buffer44.out0_valid = hw.instance "handshake_buffer44" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %242: i64, in0_valid: %243: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %244: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer44"}
    sv.assign %_handshake_buffer44_out0_valid, %handshake_buffer44.out0_valid : i1
    sv.assign %_handshake_buffer44_out0, %handshake_buffer44.out0 : i64
    sv.assign %_handshake_buffer44_in0_ready, %handshake_buffer44.in0_ready : i1
    %245 = sv.read_inout %_handshake_buffer44_out0 : !hw.inout<i64>
    %246 = sv.read_inout %_handshake_buffer44_out0_valid : !hw.inout<i1>
    %247 = sv.read_inout %_handshake_buffer45_in0_ready : !hw.inout<i1>
    %248 = sv.read_inout %_handshake_buffer46_in0_ready : !hw.inout<i1>
    %handshake_fork7.in0_ready, %handshake_fork7.out0, %handshake_fork7.out0_valid, %handshake_fork7.out1, %handshake_fork7.out1_valid = hw.instance "handshake_fork7" @handshake_fork_in_ui64_out_ui64_ui64(in0: %245: i64, in0_valid: %246: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %248: i1, out1_ready: %247: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1) {hw.verilogName = "handshake_fork7"}
    sv.assign %_handshake_fork7_out1_valid, %handshake_fork7.out1_valid : i1
    sv.assign %_handshake_fork7_out1, %handshake_fork7.out1 : i64
    sv.assign %_handshake_fork7_out0_valid, %handshake_fork7.out0_valid : i1
    sv.assign %_handshake_fork7_out0, %handshake_fork7.out0 : i64
    sv.assign %_handshake_fork7_in0_ready, %handshake_fork7.in0_ready : i1
    %249 = sv.read_inout %_handshake_fork7_out1 : !hw.inout<i64>
    %250 = sv.read_inout %_handshake_fork7_out1_valid : !hw.inout<i1>
    %251 = sv.read_inout %_handshake_store0_dataIn_ready : !hw.inout<i1>
    %handshake_buffer45.in0_ready, %handshake_buffer45.out0, %handshake_buffer45.out0_valid = hw.instance "handshake_buffer45" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %249: i64, in0_valid: %250: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %251: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer45"}
    sv.assign %_handshake_buffer45_out0_valid, %handshake_buffer45.out0_valid : i1
    sv.assign %_handshake_buffer45_out0, %handshake_buffer45.out0 : i64
    sv.assign %_handshake_buffer45_in0_ready, %handshake_buffer45.in0_ready : i1
    %252 = sv.read_inout %_handshake_fork7_out0 : !hw.inout<i64>
    %253 = sv.read_inout %_handshake_fork7_out0_valid : !hw.inout<i1>
    %254 = sv.read_inout %_handshake_store3_dataIn_ready : !hw.inout<i1>
    %handshake_buffer46.in0_ready, %handshake_buffer46.out0, %handshake_buffer46.out0_valid = hw.instance "handshake_buffer46" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %252: i64, in0_valid: %253: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %254: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer46"}
    sv.assign %_handshake_buffer46_out0_valid, %handshake_buffer46.out0_valid : i1
    sv.assign %_handshake_buffer46_out0, %handshake_buffer46.out0 : i64
    sv.assign %_handshake_buffer46_in0_ready, %handshake_buffer46.in0_ready : i1
    %255 = sv.read_inout %_handshake_buffer10_out0 : !hw.inout<i0>
    %256 = sv.read_inout %_handshake_buffer10_out0_valid : !hw.inout<i1>
    %257 = sv.read_inout %_handshake_buffer47_in0_ready : !hw.inout<i1>
    %handshake_constant4.ctrl_ready, %handshake_constant4.out0, %handshake_constant4.out0_valid = hw.instance "handshake_constant4" @handshake_constant_c2_out_ui64(ctrl: %255: i0, ctrl_valid: %256: i1, out0_ready: %257: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_constant4"}
    sv.assign %_handshake_constant4_out0_valid, %handshake_constant4.out0_valid : i1
    sv.assign %_handshake_constant4_out0, %handshake_constant4.out0 : i64
    sv.assign %_handshake_constant4_ctrl_ready, %handshake_constant4.ctrl_ready : i1
    %258 = sv.read_inout %_handshake_constant4_out0 : !hw.inout<i64>
    %259 = sv.read_inout %_handshake_constant4_out0_valid : !hw.inout<i1>
    %260 = sv.read_inout %_handshake_fork8_in0_ready : !hw.inout<i1>
    %handshake_buffer47.in0_ready, %handshake_buffer47.out0, %handshake_buffer47.out0_valid = hw.instance "handshake_buffer47" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %258: i64, in0_valid: %259: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %260: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer47"}
    sv.assign %_handshake_buffer47_out0_valid, %handshake_buffer47.out0_valid : i1
    sv.assign %_handshake_buffer47_out0, %handshake_buffer47.out0 : i64
    sv.assign %_handshake_buffer47_in0_ready, %handshake_buffer47.in0_ready : i1
    %261 = sv.read_inout %_handshake_buffer47_out0 : !hw.inout<i64>
    %262 = sv.read_inout %_handshake_buffer47_out0_valid : !hw.inout<i1>
    %263 = sv.read_inout %_handshake_buffer48_in0_ready : !hw.inout<i1>
    %264 = sv.read_inout %_handshake_buffer49_in0_ready : !hw.inout<i1>
    %handshake_fork8.in0_ready, %handshake_fork8.out0, %handshake_fork8.out0_valid, %handshake_fork8.out1, %handshake_fork8.out1_valid = hw.instance "handshake_fork8" @handshake_fork_in_ui64_out_ui64_ui64(in0: %261: i64, in0_valid: %262: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %264: i1, out1_ready: %263: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1) {hw.verilogName = "handshake_fork8"}
    sv.assign %_handshake_fork8_out1_valid, %handshake_fork8.out1_valid : i1
    sv.assign %_handshake_fork8_out1, %handshake_fork8.out1 : i64
    sv.assign %_handshake_fork8_out0_valid, %handshake_fork8.out0_valid : i1
    sv.assign %_handshake_fork8_out0, %handshake_fork8.out0 : i64
    sv.assign %_handshake_fork8_in0_ready, %handshake_fork8.in0_ready : i1
    %265 = sv.read_inout %_handshake_fork8_out1 : !hw.inout<i64>
    %266 = sv.read_inout %_handshake_fork8_out1_valid : !hw.inout<i1>
    %267 = sv.read_inout %_handshake_store2_addrIn0_ready : !hw.inout<i1>
    %handshake_buffer48.in0_ready, %handshake_buffer48.out0, %handshake_buffer48.out0_valid = hw.instance "handshake_buffer48" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %265: i64, in0_valid: %266: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %267: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer48"}
    sv.assign %_handshake_buffer48_out0_valid, %handshake_buffer48.out0_valid : i1
    sv.assign %_handshake_buffer48_out0, %handshake_buffer48.out0 : i64
    sv.assign %_handshake_buffer48_in0_ready, %handshake_buffer48.in0_ready : i1
    %268 = sv.read_inout %_handshake_fork8_out0 : !hw.inout<i64>
    %269 = sv.read_inout %_handshake_fork8_out0_valid : !hw.inout<i1>
    %270 = sv.read_inout %_handshake_store5_addrIn0_ready : !hw.inout<i1>
    %handshake_buffer49.in0_ready, %handshake_buffer49.out0, %handshake_buffer49.out0_valid = hw.instance "handshake_buffer49" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %268: i64, in0_valid: %269: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %270: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer49"}
    sv.assign %_handshake_buffer49_out0_valid, %handshake_buffer49.out0_valid : i1
    sv.assign %_handshake_buffer49_out0, %handshake_buffer49.out0 : i64
    sv.assign %_handshake_buffer49_in0_ready, %handshake_buffer49.in0_ready : i1
    %271 = sv.read_inout %_handshake_buffer9_out0 : !hw.inout<i0>
    %272 = sv.read_inout %_handshake_buffer9_out0_valid : !hw.inout<i1>
    %273 = sv.read_inout %_handshake_buffer50_in0_ready : !hw.inout<i1>
    %handshake_constant5.ctrl_ready, %handshake_constant5.out0, %handshake_constant5.out0_valid = hw.instance "handshake_constant5" @handshake_constant_c1_out_ui64(ctrl: %271: i0, ctrl_valid: %272: i1, out0_ready: %273: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_constant5"}
    sv.assign %_handshake_constant5_out0_valid, %handshake_constant5.out0_valid : i1
    sv.assign %_handshake_constant5_out0, %handshake_constant5.out0 : i64
    sv.assign %_handshake_constant5_ctrl_ready, %handshake_constant5.ctrl_ready : i1
    %274 = sv.read_inout %_handshake_constant5_out0 : !hw.inout<i64>
    %275 = sv.read_inout %_handshake_constant5_out0_valid : !hw.inout<i1>
    %276 = sv.read_inout %_handshake_fork9_in0_ready : !hw.inout<i1>
    %handshake_buffer50.in0_ready, %handshake_buffer50.out0, %handshake_buffer50.out0_valid = hw.instance "handshake_buffer50" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %274: i64, in0_valid: %275: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %276: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer50"}
    sv.assign %_handshake_buffer50_out0_valid, %handshake_buffer50.out0_valid : i1
    sv.assign %_handshake_buffer50_out0, %handshake_buffer50.out0 : i64
    sv.assign %_handshake_buffer50_in0_ready, %handshake_buffer50.in0_ready : i1
    %277 = sv.read_inout %_handshake_buffer50_out0 : !hw.inout<i64>
    %278 = sv.read_inout %_handshake_buffer50_out0_valid : !hw.inout<i1>
    %279 = sv.read_inout %_handshake_buffer51_in0_ready : !hw.inout<i1>
    %280 = sv.read_inout %_handshake_buffer52_in0_ready : !hw.inout<i1>
    %281 = sv.read_inout %_handshake_buffer53_in0_ready : !hw.inout<i1>
    %handshake_fork9.in0_ready, %handshake_fork9.out0, %handshake_fork9.out0_valid, %handshake_fork9.out1, %handshake_fork9.out1_valid, %handshake_fork9.out2, %handshake_fork9.out2_valid = hw.instance "handshake_fork9" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %277: i64, in0_valid: %278: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %281: i1, out1_ready: %280: i1, out2_ready: %279: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1) {hw.verilogName = "handshake_fork9"}
    sv.assign %_handshake_fork9_out2_valid, %handshake_fork9.out2_valid : i1
    sv.assign %_handshake_fork9_out2, %handshake_fork9.out2 : i64
    sv.assign %_handshake_fork9_out1_valid, %handshake_fork9.out1_valid : i1
    sv.assign %_handshake_fork9_out1, %handshake_fork9.out1 : i64
    sv.assign %_handshake_fork9_out0_valid, %handshake_fork9.out0_valid : i1
    sv.assign %_handshake_fork9_out0, %handshake_fork9.out0 : i64
    sv.assign %_handshake_fork9_in0_ready, %handshake_fork9.in0_ready : i1
    %282 = sv.read_inout %_handshake_fork9_out2 : !hw.inout<i64>
    %283 = sv.read_inout %_handshake_fork9_out2_valid : !hw.inout<i1>
    %284 = sv.read_inout %_handshake_store1_addrIn0_ready : !hw.inout<i1>
    %handshake_buffer51.in0_ready, %handshake_buffer51.out0, %handshake_buffer51.out0_valid = hw.instance "handshake_buffer51" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %282: i64, in0_valid: %283: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %284: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer51"}
    sv.assign %_handshake_buffer51_out0_valid, %handshake_buffer51.out0_valid : i1
    sv.assign %_handshake_buffer51_out0, %handshake_buffer51.out0 : i64
    sv.assign %_handshake_buffer51_in0_ready, %handshake_buffer51.in0_ready : i1
    %285 = sv.read_inout %_handshake_fork9_out1 : !hw.inout<i64>
    %286 = sv.read_inout %_handshake_fork9_out1_valid : !hw.inout<i1>
    %287 = sv.read_inout %_handshake_store4_addrIn0_ready : !hw.inout<i1>
    %handshake_buffer52.in0_ready, %handshake_buffer52.out0, %handshake_buffer52.out0_valid = hw.instance "handshake_buffer52" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %285: i64, in0_valid: %286: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %287: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer52"}
    sv.assign %_handshake_buffer52_out0_valid, %handshake_buffer52.out0_valid : i1
    sv.assign %_handshake_buffer52_out0, %handshake_buffer52.out0 : i64
    sv.assign %_handshake_buffer52_in0_ready, %handshake_buffer52.in0_ready : i1
    %288 = sv.read_inout %_handshake_fork9_out0 : !hw.inout<i64>
    %289 = sv.read_inout %_handshake_fork9_out0_valid : !hw.inout<i1>
    %290 = sv.read_inout %_handshake_mux3_in0_ready : !hw.inout<i1>
    %handshake_buffer53.in0_ready, %handshake_buffer53.out0, %handshake_buffer53.out0_valid = hw.instance "handshake_buffer53" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %288: i64, in0_valid: %289: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %290: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer53"}
    sv.assign %_handshake_buffer53_out0_valid, %handshake_buffer53.out0_valid : i1
    sv.assign %_handshake_buffer53_out0, %handshake_buffer53.out0 : i64
    sv.assign %_handshake_buffer53_in0_ready, %handshake_buffer53.in0_ready : i1
    %291 = sv.read_inout %_handshake_buffer8_out0 : !hw.inout<i0>
    %292 = sv.read_inout %_handshake_buffer8_out0_valid : !hw.inout<i1>
    %293 = sv.read_inout %_handshake_buffer54_in0_ready : !hw.inout<i1>
    %handshake_constant6.ctrl_ready, %handshake_constant6.out0, %handshake_constant6.out0_valid = hw.instance "handshake_constant6" @handshake_constant_c0_out_ui64(ctrl: %291: i0, ctrl_valid: %292: i1, out0_ready: %293: i1) -> (ctrl_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_constant6"}
    sv.assign %_handshake_constant6_out0_valid, %handshake_constant6.out0_valid : i1
    sv.assign %_handshake_constant6_out0, %handshake_constant6.out0 : i64
    sv.assign %_handshake_constant6_ctrl_ready, %handshake_constant6.ctrl_ready : i1
    %294 = sv.read_inout %_handshake_constant6_out0 : !hw.inout<i64>
    %295 = sv.read_inout %_handshake_constant6_out0_valid : !hw.inout<i1>
    %296 = sv.read_inout %_handshake_fork10_in0_ready : !hw.inout<i1>
    %handshake_buffer54.in0_ready, %handshake_buffer54.out0, %handshake_buffer54.out0_valid = hw.instance "handshake_buffer54" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %294: i64, in0_valid: %295: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %296: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer54"}
    sv.assign %_handshake_buffer54_out0_valid, %handshake_buffer54.out0_valid : i1
    sv.assign %_handshake_buffer54_out0, %handshake_buffer54.out0 : i64
    sv.assign %_handshake_buffer54_in0_ready, %handshake_buffer54.in0_ready : i1
    %297 = sv.read_inout %_handshake_buffer54_out0 : !hw.inout<i64>
    %298 = sv.read_inout %_handshake_buffer54_out0_valid : !hw.inout<i1>
    %299 = sv.read_inout %_handshake_buffer55_in0_ready : !hw.inout<i1>
    %300 = sv.read_inout %_handshake_buffer56_in0_ready : !hw.inout<i1>
    %301 = sv.read_inout %_handshake_buffer57_in0_ready : !hw.inout<i1>
    %handshake_fork10.in0_ready, %handshake_fork10.out0, %handshake_fork10.out0_valid, %handshake_fork10.out1, %handshake_fork10.out1_valid, %handshake_fork10.out2, %handshake_fork10.out2_valid = hw.instance "handshake_fork10" @handshake_fork_in_ui64_out_ui64_ui64_ui64(in0: %297: i64, in0_valid: %298: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %301: i1, out1_ready: %300: i1, out2_ready: %299: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1) {hw.verilogName = "handshake_fork10"}
    sv.assign %_handshake_fork10_out2_valid, %handshake_fork10.out2_valid : i1
    sv.assign %_handshake_fork10_out2, %handshake_fork10.out2 : i64
    sv.assign %_handshake_fork10_out1_valid, %handshake_fork10.out1_valid : i1
    sv.assign %_handshake_fork10_out1, %handshake_fork10.out1 : i64
    sv.assign %_handshake_fork10_out0_valid, %handshake_fork10.out0_valid : i1
    sv.assign %_handshake_fork10_out0, %handshake_fork10.out0 : i64
    sv.assign %_handshake_fork10_in0_ready, %handshake_fork10.in0_ready : i1
    %302 = sv.read_inout %_handshake_fork10_out2 : !hw.inout<i64>
    %303 = sv.read_inout %_handshake_fork10_out2_valid : !hw.inout<i1>
    %304 = sv.read_inout %_handshake_store0_addrIn0_ready : !hw.inout<i1>
    %handshake_buffer55.in0_ready, %handshake_buffer55.out0, %handshake_buffer55.out0_valid = hw.instance "handshake_buffer55" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %302: i64, in0_valid: %303: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %304: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer55"}
    sv.assign %_handshake_buffer55_out0_valid, %handshake_buffer55.out0_valid : i1
    sv.assign %_handshake_buffer55_out0, %handshake_buffer55.out0 : i64
    sv.assign %_handshake_buffer55_in0_ready, %handshake_buffer55.in0_ready : i1
    %305 = sv.read_inout %_handshake_fork10_out1 : !hw.inout<i64>
    %306 = sv.read_inout %_handshake_fork10_out1_valid : !hw.inout<i1>
    %307 = sv.read_inout %_handshake_store3_addrIn0_ready : !hw.inout<i1>
    %handshake_buffer56.in0_ready, %handshake_buffer56.out0, %handshake_buffer56.out0_valid = hw.instance "handshake_buffer56" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %305: i64, in0_valid: %306: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %307: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer56"}
    sv.assign %_handshake_buffer56_out0_valid, %handshake_buffer56.out0_valid : i1
    sv.assign %_handshake_buffer56_out0, %handshake_buffer56.out0 : i64
    sv.assign %_handshake_buffer56_in0_ready, %handshake_buffer56.in0_ready : i1
    %308 = sv.read_inout %_handshake_fork10_out0 : !hw.inout<i64>
    %309 = sv.read_inout %_handshake_fork10_out0_valid : !hw.inout<i1>
    %310 = sv.read_inout %_handshake_mux1_in0_ready : !hw.inout<i1>
    %handshake_buffer57.in0_ready, %handshake_buffer57.out0, %handshake_buffer57.out0_valid = hw.instance "handshake_buffer57" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %308: i64, in0_valid: %309: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %310: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer57"}
    sv.assign %_handshake_buffer57_out0_valid, %handshake_buffer57.out0_valid : i1
    sv.assign %_handshake_buffer57_out0, %handshake_buffer57.out0 : i64
    sv.assign %_handshake_buffer57_in0_ready, %handshake_buffer57.in0_ready : i1
    %311 = sv.read_inout %_handshake_buffer7_out0 : !hw.inout<i0>
    %312 = sv.read_inout %_handshake_buffer7_out0_valid : !hw.inout<i1>
    %313 = sv.read_inout %_handshake_buffer45_out0 : !hw.inout<i64>
    %314 = sv.read_inout %_handshake_buffer45_out0_valid : !hw.inout<i1>
    %315 = sv.read_inout %_handshake_buffer55_out0 : !hw.inout<i64>
    %316 = sv.read_inout %_handshake_buffer55_out0_valid : !hw.inout<i1>
    %317 = sv.read_inout %_handshake_buffer58_in0_ready : !hw.inout<i1>
    %318 = sv.read_inout %_handshake_buffer59_in0_ready : !hw.inout<i1>
    %handshake_store0.addrIn0_ready, %handshake_store0.dataIn_ready, %handshake_store0.ctrl_ready, %handshake_store0.dataToMem, %handshake_store0.dataToMem_valid, %handshake_store0.addrOut0, %handshake_store0.addrOut0_valid = hw.instance "handshake_store0" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %315: i64, addrIn0_valid: %316: i1, dataIn: %313: i64, dataIn_valid: %314: i1, ctrl: %311: i0, ctrl_valid: %312: i1, dataToMem_ready: %318: i1, addrOut0_ready: %317: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1) {hw.verilogName = "handshake_store0"}
    sv.assign %_handshake_store0_addrOut0_valid, %handshake_store0.addrOut0_valid : i1
    sv.assign %_handshake_store0_addrOut0, %handshake_store0.addrOut0 : i64
    sv.assign %_handshake_store0_dataToMem_valid, %handshake_store0.dataToMem_valid : i1
    sv.assign %_handshake_store0_dataToMem, %handshake_store0.dataToMem : i64
    sv.assign %_handshake_store0_ctrl_ready, %handshake_store0.ctrl_ready : i1
    sv.assign %_handshake_store0_dataIn_ready, %handshake_store0.dataIn_ready : i1
    sv.assign %_handshake_store0_addrIn0_ready, %handshake_store0.addrIn0_ready : i1
    %319 = sv.read_inout %_handshake_memory2_stAddr0_ready : !hw.inout<i1>
    %320 = sv.read_inout %_handshake_store0_addrOut0 : !hw.inout<i64>
    %321 = sv.read_inout %_handshake_store0_addrOut0_valid : !hw.inout<i1>
    %handshake_buffer58.in0_ready, %handshake_buffer58.out0, %handshake_buffer58.out0_valid = hw.instance "handshake_buffer58" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %320: i64, in0_valid: %321: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %319: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer58"}
    sv.assign %_handshake_buffer58_out0_valid, %handshake_buffer58.out0_valid : i1
    sv.assign %_handshake_buffer58_out0, %handshake_buffer58.out0 : i64
    sv.assign %_handshake_buffer58_in0_ready, %handshake_buffer58.in0_ready : i1
    %322 = sv.read_inout %_handshake_memory2_stData0_ready : !hw.inout<i1>
    %323 = sv.read_inout %_handshake_store0_dataToMem : !hw.inout<i64>
    %324 = sv.read_inout %_handshake_store0_dataToMem_valid : !hw.inout<i1>
    %handshake_buffer59.in0_ready, %handshake_buffer59.out0, %handshake_buffer59.out0_valid = hw.instance "handshake_buffer59" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %323: i64, in0_valid: %324: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %322: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer59"}
    sv.assign %_handshake_buffer59_out0_valid, %handshake_buffer59.out0_valid : i1
    sv.assign %_handshake_buffer59_out0, %handshake_buffer59.out0 : i64
    sv.assign %_handshake_buffer59_in0_ready, %handshake_buffer59.in0_ready : i1
    %325 = sv.read_inout %_handshake_buffer6_out0 : !hw.inout<i0>
    %326 = sv.read_inout %_handshake_buffer6_out0_valid : !hw.inout<i1>
    %327 = sv.read_inout %_handshake_buffer33_out0 : !hw.inout<i0>
    %328 = sv.read_inout %_handshake_buffer33_out0_valid : !hw.inout<i1>
    %329 = sv.read_inout %_handshake_buffer60_in0_ready : !hw.inout<i1>
    %handshake_join1.in0_ready, %handshake_join1.in1_ready, %handshake_join1.out0, %handshake_join1.out0_valid = hw.instance "handshake_join1" @handshake_join_2ins_1outs_ctrl(in0: %325: i0, in0_valid: %326: i1, in1: %327: i0, in1_valid: %328: i1, out0_ready: %329: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_join1"}
    sv.assign %_handshake_join1_out0_valid, %handshake_join1.out0_valid : i1
    sv.assign %_handshake_join1_out0, %handshake_join1.out0 : i0
    sv.assign %_handshake_join1_in1_ready, %handshake_join1.in1_ready : i1
    sv.assign %_handshake_join1_in0_ready, %handshake_join1.in0_ready : i1
    %330 = sv.read_inout %_handshake_join1_out0 : !hw.inout<i0>
    %331 = sv.read_inout %_handshake_join1_out0_valid : !hw.inout<i1>
    %332 = sv.read_inout %_handshake_store1_ctrl_ready : !hw.inout<i1>
    %handshake_buffer60.in0_ready, %handshake_buffer60.out0, %handshake_buffer60.out0_valid = hw.instance "handshake_buffer60" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %330: i0, in0_valid: %331: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %332: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer60"}
    sv.assign %_handshake_buffer60_out0_valid, %handshake_buffer60.out0_valid : i1
    sv.assign %_handshake_buffer60_out0, %handshake_buffer60.out0 : i0
    sv.assign %_handshake_buffer60_in0_ready, %handshake_buffer60.in0_ready : i1
    %333 = sv.read_inout %_handshake_buffer42_out0 : !hw.inout<i64>
    %334 = sv.read_inout %_handshake_buffer42_out0_valid : !hw.inout<i1>
    %335 = sv.read_inout %_handshake_buffer51_out0 : !hw.inout<i64>
    %336 = sv.read_inout %_handshake_buffer51_out0_valid : !hw.inout<i1>
    %337 = sv.read_inout %_handshake_buffer60_out0 : !hw.inout<i0>
    %338 = sv.read_inout %_handshake_buffer60_out0_valid : !hw.inout<i1>
    %339 = sv.read_inout %_handshake_buffer61_in0_ready : !hw.inout<i1>
    %340 = sv.read_inout %_handshake_buffer62_in0_ready : !hw.inout<i1>
    %handshake_store1.addrIn0_ready, %handshake_store1.dataIn_ready, %handshake_store1.ctrl_ready, %handshake_store1.dataToMem, %handshake_store1.dataToMem_valid, %handshake_store1.addrOut0, %handshake_store1.addrOut0_valid = hw.instance "handshake_store1" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %335: i64, addrIn0_valid: %336: i1, dataIn: %333: i64, dataIn_valid: %334: i1, ctrl: %337: i0, ctrl_valid: %338: i1, dataToMem_ready: %340: i1, addrOut0_ready: %339: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1) {hw.verilogName = "handshake_store1"}
    sv.assign %_handshake_store1_addrOut0_valid, %handshake_store1.addrOut0_valid : i1
    sv.assign %_handshake_store1_addrOut0, %handshake_store1.addrOut0 : i64
    sv.assign %_handshake_store1_dataToMem_valid, %handshake_store1.dataToMem_valid : i1
    sv.assign %_handshake_store1_dataToMem, %handshake_store1.dataToMem : i64
    sv.assign %_handshake_store1_ctrl_ready, %handshake_store1.ctrl_ready : i1
    sv.assign %_handshake_store1_dataIn_ready, %handshake_store1.dataIn_ready : i1
    sv.assign %_handshake_store1_addrIn0_ready, %handshake_store1.addrIn0_ready : i1
    %341 = sv.read_inout %_handshake_memory2_stAddr1_ready : !hw.inout<i1>
    %342 = sv.read_inout %_handshake_store1_addrOut0 : !hw.inout<i64>
    %343 = sv.read_inout %_handshake_store1_addrOut0_valid : !hw.inout<i1>
    %handshake_buffer61.in0_ready, %handshake_buffer61.out0, %handshake_buffer61.out0_valid = hw.instance "handshake_buffer61" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %342: i64, in0_valid: %343: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %341: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer61"}
    sv.assign %_handshake_buffer61_out0_valid, %handshake_buffer61.out0_valid : i1
    sv.assign %_handshake_buffer61_out0, %handshake_buffer61.out0 : i64
    sv.assign %_handshake_buffer61_in0_ready, %handshake_buffer61.in0_ready : i1
    %344 = sv.read_inout %_handshake_memory2_stData1_ready : !hw.inout<i1>
    %345 = sv.read_inout %_handshake_store1_dataToMem : !hw.inout<i64>
    %346 = sv.read_inout %_handshake_store1_dataToMem_valid : !hw.inout<i1>
    %handshake_buffer62.in0_ready, %handshake_buffer62.out0, %handshake_buffer62.out0_valid = hw.instance "handshake_buffer62" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %345: i64, in0_valid: %346: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %344: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer62"}
    sv.assign %_handshake_buffer62_out0_valid, %handshake_buffer62.out0_valid : i1
    sv.assign %_handshake_buffer62_out0, %handshake_buffer62.out0 : i64
    sv.assign %_handshake_buffer62_in0_ready, %handshake_buffer62.in0_ready : i1
    %347 = sv.read_inout %_handshake_buffer5_out0 : !hw.inout<i0>
    %348 = sv.read_inout %_handshake_buffer5_out0_valid : !hw.inout<i1>
    %349 = sv.read_inout %_handshake_buffer31_out0 : !hw.inout<i0>
    %350 = sv.read_inout %_handshake_buffer31_out0_valid : !hw.inout<i1>
    %351 = sv.read_inout %_handshake_buffer34_out0 : !hw.inout<i0>
    %352 = sv.read_inout %_handshake_buffer34_out0_valid : !hw.inout<i1>
    %353 = sv.read_inout %_handshake_buffer63_in0_ready : !hw.inout<i1>
    %handshake_join2.in0_ready, %handshake_join2.in1_ready, %handshake_join2.in2_ready, %handshake_join2.out0, %handshake_join2.out0_valid = hw.instance "handshake_join2" @handshake_join_3ins_1outs_ctrl(in0: %347: i0, in0_valid: %348: i1, in1: %351: i0, in1_valid: %352: i1, in2: %349: i0, in2_valid: %350: i1, out0_ready: %353: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_join2"}
    sv.assign %_handshake_join2_out0_valid, %handshake_join2.out0_valid : i1
    sv.assign %_handshake_join2_out0, %handshake_join2.out0 : i0
    sv.assign %_handshake_join2_in2_ready, %handshake_join2.in2_ready : i1
    sv.assign %_handshake_join2_in1_ready, %handshake_join2.in1_ready : i1
    sv.assign %_handshake_join2_in0_ready, %handshake_join2.in0_ready : i1
    %354 = sv.read_inout %_handshake_join2_out0 : !hw.inout<i0>
    %355 = sv.read_inout %_handshake_join2_out0_valid : !hw.inout<i1>
    %356 = sv.read_inout %_handshake_store2_ctrl_ready : !hw.inout<i1>
    %handshake_buffer63.in0_ready, %handshake_buffer63.out0, %handshake_buffer63.out0_valid = hw.instance "handshake_buffer63" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %354: i0, in0_valid: %355: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %356: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer63"}
    sv.assign %_handshake_buffer63_out0_valid, %handshake_buffer63.out0_valid : i1
    sv.assign %_handshake_buffer63_out0, %handshake_buffer63.out0 : i0
    sv.assign %_handshake_buffer63_in0_ready, %handshake_buffer63.in0_ready : i1
    %357 = sv.read_inout %_handshake_buffer39_out0 : !hw.inout<i64>
    %358 = sv.read_inout %_handshake_buffer39_out0_valid : !hw.inout<i1>
    %359 = sv.read_inout %_handshake_buffer48_out0 : !hw.inout<i64>
    %360 = sv.read_inout %_handshake_buffer48_out0_valid : !hw.inout<i1>
    %361 = sv.read_inout %_handshake_buffer63_out0 : !hw.inout<i0>
    %362 = sv.read_inout %_handshake_buffer63_out0_valid : !hw.inout<i1>
    %363 = sv.read_inout %_handshake_buffer64_in0_ready : !hw.inout<i1>
    %364 = sv.read_inout %_handshake_buffer65_in0_ready : !hw.inout<i1>
    %handshake_store2.addrIn0_ready, %handshake_store2.dataIn_ready, %handshake_store2.ctrl_ready, %handshake_store2.dataToMem, %handshake_store2.dataToMem_valid, %handshake_store2.addrOut0, %handshake_store2.addrOut0_valid = hw.instance "handshake_store2" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %359: i64, addrIn0_valid: %360: i1, dataIn: %357: i64, dataIn_valid: %358: i1, ctrl: %361: i0, ctrl_valid: %362: i1, dataToMem_ready: %364: i1, addrOut0_ready: %363: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1) {hw.verilogName = "handshake_store2"}
    sv.assign %_handshake_store2_addrOut0_valid, %handshake_store2.addrOut0_valid : i1
    sv.assign %_handshake_store2_addrOut0, %handshake_store2.addrOut0 : i64
    sv.assign %_handshake_store2_dataToMem_valid, %handshake_store2.dataToMem_valid : i1
    sv.assign %_handshake_store2_dataToMem, %handshake_store2.dataToMem : i64
    sv.assign %_handshake_store2_ctrl_ready, %handshake_store2.ctrl_ready : i1
    sv.assign %_handshake_store2_dataIn_ready, %handshake_store2.dataIn_ready : i1
    sv.assign %_handshake_store2_addrIn0_ready, %handshake_store2.addrIn0_ready : i1
    %365 = sv.read_inout %_handshake_memory2_stAddr2_ready : !hw.inout<i1>
    %366 = sv.read_inout %_handshake_store2_addrOut0 : !hw.inout<i64>
    %367 = sv.read_inout %_handshake_store2_addrOut0_valid : !hw.inout<i1>
    %handshake_buffer64.in0_ready, %handshake_buffer64.out0, %handshake_buffer64.out0_valid = hw.instance "handshake_buffer64" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %366: i64, in0_valid: %367: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %365: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer64"}
    sv.assign %_handshake_buffer64_out0_valid, %handshake_buffer64.out0_valid : i1
    sv.assign %_handshake_buffer64_out0, %handshake_buffer64.out0 : i64
    sv.assign %_handshake_buffer64_in0_ready, %handshake_buffer64.in0_ready : i1
    %368 = sv.read_inout %_handshake_memory2_stData2_ready : !hw.inout<i1>
    %369 = sv.read_inout %_handshake_store2_dataToMem : !hw.inout<i64>
    %370 = sv.read_inout %_handshake_store2_dataToMem_valid : !hw.inout<i1>
    %handshake_buffer65.in0_ready, %handshake_buffer65.out0, %handshake_buffer65.out0_valid = hw.instance "handshake_buffer65" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %369: i64, in0_valid: %370: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %368: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer65"}
    sv.assign %_handshake_buffer65_out0_valid, %handshake_buffer65.out0_valid : i1
    sv.assign %_handshake_buffer65_out0, %handshake_buffer65.out0 : i64
    sv.assign %_handshake_buffer65_in0_ready, %handshake_buffer65.in0_ready : i1
    %371 = sv.read_inout %_handshake_buffer3_out0 : !hw.inout<i0>
    %372 = sv.read_inout %_handshake_buffer3_out0_valid : !hw.inout<i1>
    %373 = sv.read_inout %_handshake_buffer46_out0 : !hw.inout<i64>
    %374 = sv.read_inout %_handshake_buffer46_out0_valid : !hw.inout<i1>
    %375 = sv.read_inout %_handshake_buffer56_out0 : !hw.inout<i64>
    %376 = sv.read_inout %_handshake_buffer56_out0_valid : !hw.inout<i1>
    %377 = sv.read_inout %_handshake_buffer66_in0_ready : !hw.inout<i1>
    %378 = sv.read_inout %_handshake_buffer67_in0_ready : !hw.inout<i1>
    %handshake_store3.addrIn0_ready, %handshake_store3.dataIn_ready, %handshake_store3.ctrl_ready, %handshake_store3.dataToMem, %handshake_store3.dataToMem_valid, %handshake_store3.addrOut0, %handshake_store3.addrOut0_valid = hw.instance "handshake_store3" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %375: i64, addrIn0_valid: %376: i1, dataIn: %373: i64, dataIn_valid: %374: i1, ctrl: %371: i0, ctrl_valid: %372: i1, dataToMem_ready: %378: i1, addrOut0_ready: %377: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1) {hw.verilogName = "handshake_store3"}
    sv.assign %_handshake_store3_addrOut0_valid, %handshake_store3.addrOut0_valid : i1
    sv.assign %_handshake_store3_addrOut0, %handshake_store3.addrOut0 : i64
    sv.assign %_handshake_store3_dataToMem_valid, %handshake_store3.dataToMem_valid : i1
    sv.assign %_handshake_store3_dataToMem, %handshake_store3.dataToMem : i64
    sv.assign %_handshake_store3_ctrl_ready, %handshake_store3.ctrl_ready : i1
    sv.assign %_handshake_store3_dataIn_ready, %handshake_store3.dataIn_ready : i1
    sv.assign %_handshake_store3_addrIn0_ready, %handshake_store3.addrIn0_ready : i1
    %379 = sv.read_inout %_handshake_memory1_stAddr0_ready : !hw.inout<i1>
    %380 = sv.read_inout %_handshake_store3_addrOut0 : !hw.inout<i64>
    %381 = sv.read_inout %_handshake_store3_addrOut0_valid : !hw.inout<i1>
    %handshake_buffer66.in0_ready, %handshake_buffer66.out0, %handshake_buffer66.out0_valid = hw.instance "handshake_buffer66" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %380: i64, in0_valid: %381: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %379: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer66"}
    sv.assign %_handshake_buffer66_out0_valid, %handshake_buffer66.out0_valid : i1
    sv.assign %_handshake_buffer66_out0, %handshake_buffer66.out0 : i64
    sv.assign %_handshake_buffer66_in0_ready, %handshake_buffer66.in0_ready : i1
    %382 = sv.read_inout %_handshake_memory1_stData0_ready : !hw.inout<i1>
    %383 = sv.read_inout %_handshake_store3_dataToMem : !hw.inout<i64>
    %384 = sv.read_inout %_handshake_store3_dataToMem_valid : !hw.inout<i1>
    %handshake_buffer67.in0_ready, %handshake_buffer67.out0, %handshake_buffer67.out0_valid = hw.instance "handshake_buffer67" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %383: i64, in0_valid: %384: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %382: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer67"}
    sv.assign %_handshake_buffer67_out0_valid, %handshake_buffer67.out0_valid : i1
    sv.assign %_handshake_buffer67_out0, %handshake_buffer67.out0 : i64
    sv.assign %_handshake_buffer67_in0_ready, %handshake_buffer67.in0_ready : i1
    %385 = sv.read_inout %_handshake_buffer2_out0 : !hw.inout<i0>
    %386 = sv.read_inout %_handshake_buffer2_out0_valid : !hw.inout<i1>
    %387 = sv.read_inout %_handshake_buffer24_out0 : !hw.inout<i0>
    %388 = sv.read_inout %_handshake_buffer24_out0_valid : !hw.inout<i1>
    %389 = sv.read_inout %_handshake_buffer68_in0_ready : !hw.inout<i1>
    %handshake_join3.in0_ready, %handshake_join3.in1_ready, %handshake_join3.out0, %handshake_join3.out0_valid = hw.instance "handshake_join3" @handshake_join_2ins_1outs_ctrl(in0: %385: i0, in0_valid: %386: i1, in1: %387: i0, in1_valid: %388: i1, out0_ready: %389: i1) -> (in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_join3"}
    sv.assign %_handshake_join3_out0_valid, %handshake_join3.out0_valid : i1
    sv.assign %_handshake_join3_out0, %handshake_join3.out0 : i0
    sv.assign %_handshake_join3_in1_ready, %handshake_join3.in1_ready : i1
    sv.assign %_handshake_join3_in0_ready, %handshake_join3.in0_ready : i1
    %390 = sv.read_inout %_handshake_join3_out0 : !hw.inout<i0>
    %391 = sv.read_inout %_handshake_join3_out0_valid : !hw.inout<i1>
    %392 = sv.read_inout %_handshake_store4_ctrl_ready : !hw.inout<i1>
    %handshake_buffer68.in0_ready, %handshake_buffer68.out0, %handshake_buffer68.out0_valid = hw.instance "handshake_buffer68" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %390: i0, in0_valid: %391: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %392: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer68"}
    sv.assign %_handshake_buffer68_out0_valid, %handshake_buffer68.out0_valid : i1
    sv.assign %_handshake_buffer68_out0, %handshake_buffer68.out0 : i0
    sv.assign %_handshake_buffer68_in0_ready, %handshake_buffer68.in0_ready : i1
    %393 = sv.read_inout %_handshake_buffer43_out0 : !hw.inout<i64>
    %394 = sv.read_inout %_handshake_buffer43_out0_valid : !hw.inout<i1>
    %395 = sv.read_inout %_handshake_buffer52_out0 : !hw.inout<i64>
    %396 = sv.read_inout %_handshake_buffer52_out0_valid : !hw.inout<i1>
    %397 = sv.read_inout %_handshake_buffer68_out0 : !hw.inout<i0>
    %398 = sv.read_inout %_handshake_buffer68_out0_valid : !hw.inout<i1>
    %399 = sv.read_inout %_handshake_buffer69_in0_ready : !hw.inout<i1>
    %400 = sv.read_inout %_handshake_buffer70_in0_ready : !hw.inout<i1>
    %handshake_store4.addrIn0_ready, %handshake_store4.dataIn_ready, %handshake_store4.ctrl_ready, %handshake_store4.dataToMem, %handshake_store4.dataToMem_valid, %handshake_store4.addrOut0, %handshake_store4.addrOut0_valid = hw.instance "handshake_store4" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %395: i64, addrIn0_valid: %396: i1, dataIn: %393: i64, dataIn_valid: %394: i1, ctrl: %397: i0, ctrl_valid: %398: i1, dataToMem_ready: %400: i1, addrOut0_ready: %399: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1) {hw.verilogName = "handshake_store4"}
    sv.assign %_handshake_store4_addrOut0_valid, %handshake_store4.addrOut0_valid : i1
    sv.assign %_handshake_store4_addrOut0, %handshake_store4.addrOut0 : i64
    sv.assign %_handshake_store4_dataToMem_valid, %handshake_store4.dataToMem_valid : i1
    sv.assign %_handshake_store4_dataToMem, %handshake_store4.dataToMem : i64
    sv.assign %_handshake_store4_ctrl_ready, %handshake_store4.ctrl_ready : i1
    sv.assign %_handshake_store4_dataIn_ready, %handshake_store4.dataIn_ready : i1
    sv.assign %_handshake_store4_addrIn0_ready, %handshake_store4.addrIn0_ready : i1
    %401 = sv.read_inout %_handshake_memory1_stAddr1_ready : !hw.inout<i1>
    %402 = sv.read_inout %_handshake_store4_addrOut0 : !hw.inout<i64>
    %403 = sv.read_inout %_handshake_store4_addrOut0_valid : !hw.inout<i1>
    %handshake_buffer69.in0_ready, %handshake_buffer69.out0, %handshake_buffer69.out0_valid = hw.instance "handshake_buffer69" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %402: i64, in0_valid: %403: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %401: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer69"}
    sv.assign %_handshake_buffer69_out0_valid, %handshake_buffer69.out0_valid : i1
    sv.assign %_handshake_buffer69_out0, %handshake_buffer69.out0 : i64
    sv.assign %_handshake_buffer69_in0_ready, %handshake_buffer69.in0_ready : i1
    %404 = sv.read_inout %_handshake_memory1_stData1_ready : !hw.inout<i1>
    %405 = sv.read_inout %_handshake_store4_dataToMem : !hw.inout<i64>
    %406 = sv.read_inout %_handshake_store4_dataToMem_valid : !hw.inout<i1>
    %handshake_buffer70.in0_ready, %handshake_buffer70.out0, %handshake_buffer70.out0_valid = hw.instance "handshake_buffer70" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %405: i64, in0_valid: %406: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %404: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer70"}
    sv.assign %_handshake_buffer70_out0_valid, %handshake_buffer70.out0_valid : i1
    sv.assign %_handshake_buffer70_out0, %handshake_buffer70.out0 : i64
    sv.assign %_handshake_buffer70_in0_ready, %handshake_buffer70.in0_ready : i1
    %407 = sv.read_inout %_handshake_buffer1_out0 : !hw.inout<i0>
    %408 = sv.read_inout %_handshake_buffer1_out0_valid : !hw.inout<i1>
    %409 = sv.read_inout %_handshake_buffer22_out0 : !hw.inout<i0>
    %410 = sv.read_inout %_handshake_buffer22_out0_valid : !hw.inout<i1>
    %411 = sv.read_inout %_handshake_buffer25_out0 : !hw.inout<i0>
    %412 = sv.read_inout %_handshake_buffer25_out0_valid : !hw.inout<i1>
    %413 = sv.read_inout %_handshake_buffer71_in0_ready : !hw.inout<i1>
    %handshake_join4.in0_ready, %handshake_join4.in1_ready, %handshake_join4.in2_ready, %handshake_join4.out0, %handshake_join4.out0_valid = hw.instance "handshake_join4" @handshake_join_3ins_1outs_ctrl(in0: %407: i0, in0_valid: %408: i1, in1: %411: i0, in1_valid: %412: i1, in2: %409: i0, in2_valid: %410: i1, out0_ready: %413: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_join4"}
    sv.assign %_handshake_join4_out0_valid, %handshake_join4.out0_valid : i1
    sv.assign %_handshake_join4_out0, %handshake_join4.out0 : i0
    sv.assign %_handshake_join4_in2_ready, %handshake_join4.in2_ready : i1
    sv.assign %_handshake_join4_in1_ready, %handshake_join4.in1_ready : i1
    sv.assign %_handshake_join4_in0_ready, %handshake_join4.in0_ready : i1
    %414 = sv.read_inout %_handshake_join4_out0 : !hw.inout<i0>
    %415 = sv.read_inout %_handshake_join4_out0_valid : !hw.inout<i1>
    %416 = sv.read_inout %_handshake_store5_ctrl_ready : !hw.inout<i1>
    %handshake_buffer71.in0_ready, %handshake_buffer71.out0, %handshake_buffer71.out0_valid = hw.instance "handshake_buffer71" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %414: i0, in0_valid: %415: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %416: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer71"}
    sv.assign %_handshake_buffer71_out0_valid, %handshake_buffer71.out0_valid : i1
    sv.assign %_handshake_buffer71_out0, %handshake_buffer71.out0 : i0
    sv.assign %_handshake_buffer71_in0_ready, %handshake_buffer71.in0_ready : i1
    %417 = sv.read_inout %_handshake_buffer40_out0 : !hw.inout<i64>
    %418 = sv.read_inout %_handshake_buffer40_out0_valid : !hw.inout<i1>
    %419 = sv.read_inout %_handshake_buffer49_out0 : !hw.inout<i64>
    %420 = sv.read_inout %_handshake_buffer49_out0_valid : !hw.inout<i1>
    %421 = sv.read_inout %_handshake_buffer71_out0 : !hw.inout<i0>
    %422 = sv.read_inout %_handshake_buffer71_out0_valid : !hw.inout<i1>
    %423 = sv.read_inout %_handshake_buffer72_in0_ready : !hw.inout<i1>
    %424 = sv.read_inout %_handshake_buffer73_in0_ready : !hw.inout<i1>
    %handshake_store5.addrIn0_ready, %handshake_store5.dataIn_ready, %handshake_store5.ctrl_ready, %handshake_store5.dataToMem, %handshake_store5.dataToMem_valid, %handshake_store5.addrOut0, %handshake_store5.addrOut0_valid = hw.instance "handshake_store5" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %419: i64, addrIn0_valid: %420: i1, dataIn: %417: i64, dataIn_valid: %418: i1, ctrl: %421: i0, ctrl_valid: %422: i1, dataToMem_ready: %424: i1, addrOut0_ready: %423: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1) {hw.verilogName = "handshake_store5"}
    sv.assign %_handshake_store5_addrOut0_valid, %handshake_store5.addrOut0_valid : i1
    sv.assign %_handshake_store5_addrOut0, %handshake_store5.addrOut0 : i64
    sv.assign %_handshake_store5_dataToMem_valid, %handshake_store5.dataToMem_valid : i1
    sv.assign %_handshake_store5_dataToMem, %handshake_store5.dataToMem : i64
    sv.assign %_handshake_store5_ctrl_ready, %handshake_store5.ctrl_ready : i1
    sv.assign %_handshake_store5_dataIn_ready, %handshake_store5.dataIn_ready : i1
    sv.assign %_handshake_store5_addrIn0_ready, %handshake_store5.addrIn0_ready : i1
    %425 = sv.read_inout %_handshake_memory1_stAddr2_ready : !hw.inout<i1>
    %426 = sv.read_inout %_handshake_store5_addrOut0 : !hw.inout<i64>
    %427 = sv.read_inout %_handshake_store5_addrOut0_valid : !hw.inout<i1>
    %handshake_buffer72.in0_ready, %handshake_buffer72.out0, %handshake_buffer72.out0_valid = hw.instance "handshake_buffer72" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %426: i64, in0_valid: %427: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %425: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer72"}
    sv.assign %_handshake_buffer72_out0_valid, %handshake_buffer72.out0_valid : i1
    sv.assign %_handshake_buffer72_out0, %handshake_buffer72.out0 : i64
    sv.assign %_handshake_buffer72_in0_ready, %handshake_buffer72.in0_ready : i1
    %428 = sv.read_inout %_handshake_memory1_stData2_ready : !hw.inout<i1>
    %429 = sv.read_inout %_handshake_store5_dataToMem : !hw.inout<i64>
    %430 = sv.read_inout %_handshake_store5_dataToMem_valid : !hw.inout<i1>
    %handshake_buffer73.in0_ready, %handshake_buffer73.out0, %handshake_buffer73.out0_valid = hw.instance "handshake_buffer73" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %429: i64, in0_valid: %430: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %428: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer73"}
    sv.assign %_handshake_buffer73_out0_valid, %handshake_buffer73.out0_valid : i1
    sv.assign %_handshake_buffer73_out0, %handshake_buffer73.out0 : i64
    sv.assign %_handshake_buffer73_in0_ready, %handshake_buffer73.in0_ready : i1
    %431 = sv.read_inout %_handshake_fork11_in0_ready : !hw.inout<i1>
    %432 = sv.read_inout %_handshake_fork14_out0 : !hw.inout<i1>
    %433 = sv.read_inout %_handshake_fork14_out0_valid : !hw.inout<i1>
    %handshake_buffer74.in0_ready, %handshake_buffer74.out0, %handshake_buffer74.out0_valid = hw.instance "handshake_buffer74" @handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(in0: %432: i1, in0_valid: %433: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %431: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1) {hw.verilogName = "handshake_buffer74"}
    sv.assign %_handshake_buffer74_out0_valid, %handshake_buffer74.out0_valid : i1
    sv.assign %_handshake_buffer74_out0, %handshake_buffer74.out0 : i1
    sv.assign %_handshake_buffer74_in0_ready, %handshake_buffer74.in0_ready : i1
    %434 = sv.read_inout %_handshake_buffer74_out0 : !hw.inout<i1>
    %435 = sv.read_inout %_handshake_buffer74_out0_valid : !hw.inout<i1>
    %436 = sv.read_inout %_handshake_buffer75_in0_ready : !hw.inout<i1>
    %437 = sv.read_inout %_handshake_buffer76_in0_ready : !hw.inout<i1>
    %438 = sv.read_inout %_handshake_buffer77_in0_ready : !hw.inout<i1>
    %439 = sv.read_inout %_handshake_buffer78_in0_ready : !hw.inout<i1>
    %handshake_fork11.in0_ready, %handshake_fork11.out0, %handshake_fork11.out0_valid, %handshake_fork11.out1, %handshake_fork11.out1_valid, %handshake_fork11.out2, %handshake_fork11.out2_valid, %handshake_fork11.out3, %handshake_fork11.out3_valid = hw.instance "handshake_fork11" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(in0: %434: i1, in0_valid: %435: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %439: i1, out1_ready: %438: i1, out2_ready: %437: i1, out3_ready: %436: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1) {hw.verilogName = "handshake_fork11"}
    sv.assign %_handshake_fork11_out3_valid, %handshake_fork11.out3_valid : i1
    sv.assign %_handshake_fork11_out3, %handshake_fork11.out3 : i1
    sv.assign %_handshake_fork11_out2_valid, %handshake_fork11.out2_valid : i1
    sv.assign %_handshake_fork11_out2, %handshake_fork11.out2 : i1
    sv.assign %_handshake_fork11_out1_valid, %handshake_fork11.out1_valid : i1
    sv.assign %_handshake_fork11_out1, %handshake_fork11.out1 : i1
    sv.assign %_handshake_fork11_out0_valid, %handshake_fork11.out0_valid : i1
    sv.assign %_handshake_fork11_out0, %handshake_fork11.out0 : i1
    sv.assign %_handshake_fork11_in0_ready, %handshake_fork11.in0_ready : i1
    %440 = sv.read_inout %_handshake_fork11_out3 : !hw.inout<i1>
    %441 = sv.read_inout %_handshake_fork11_out3_valid : !hw.inout<i1>
    %442 = sv.read_inout %_handshake_mux0_select_ready : !hw.inout<i1>
    %handshake_buffer75.in0_ready, %handshake_buffer75.out0, %handshake_buffer75.out0_valid = hw.instance "handshake_buffer75" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %440: i1, in0_valid: %441: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %442: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1) {hw.verilogName = "handshake_buffer75"}
    sv.assign %_handshake_buffer75_out0_valid, %handshake_buffer75.out0_valid : i1
    sv.assign %_handshake_buffer75_out0, %handshake_buffer75.out0 : i1
    sv.assign %_handshake_buffer75_in0_ready, %handshake_buffer75.in0_ready : i1
    %443 = sv.read_inout %_handshake_fork11_out2 : !hw.inout<i1>
    %444 = sv.read_inout %_handshake_fork11_out2_valid : !hw.inout<i1>
    %445 = sv.read_inout %_handshake_mux1_select_ready : !hw.inout<i1>
    %handshake_buffer76.in0_ready, %handshake_buffer76.out0, %handshake_buffer76.out0_valid = hw.instance "handshake_buffer76" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %443: i1, in0_valid: %444: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %445: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1) {hw.verilogName = "handshake_buffer76"}
    sv.assign %_handshake_buffer76_out0_valid, %handshake_buffer76.out0_valid : i1
    sv.assign %_handshake_buffer76_out0, %handshake_buffer76.out0 : i1
    sv.assign %_handshake_buffer76_in0_ready, %handshake_buffer76.in0_ready : i1
    %446 = sv.read_inout %_handshake_fork11_out1 : !hw.inout<i1>
    %447 = sv.read_inout %_handshake_fork11_out1_valid : !hw.inout<i1>
    %448 = sv.read_inout %_handshake_mux2_select_ready : !hw.inout<i1>
    %handshake_buffer77.in0_ready, %handshake_buffer77.out0, %handshake_buffer77.out0_valid = hw.instance "handshake_buffer77" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %446: i1, in0_valid: %447: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %448: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1) {hw.verilogName = "handshake_buffer77"}
    sv.assign %_handshake_buffer77_out0_valid, %handshake_buffer77.out0_valid : i1
    sv.assign %_handshake_buffer77_out0, %handshake_buffer77.out0 : i1
    sv.assign %_handshake_buffer77_in0_ready, %handshake_buffer77.in0_ready : i1
    %449 = sv.read_inout %_handshake_fork11_out0 : !hw.inout<i1>
    %450 = sv.read_inout %_handshake_fork11_out0_valid : !hw.inout<i1>
    %451 = sv.read_inout %_handshake_mux3_select_ready : !hw.inout<i1>
    %handshake_buffer78.in0_ready, %handshake_buffer78.out0, %handshake_buffer78.out0_valid = hw.instance "handshake_buffer78" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %449: i1, in0_valid: %450: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %451: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1) {hw.verilogName = "handshake_buffer78"}
    sv.assign %_handshake_buffer78_out0_valid, %handshake_buffer78.out0_valid : i1
    sv.assign %_handshake_buffer78_out0, %handshake_buffer78.out0 : i1
    sv.assign %_handshake_buffer78_in0_ready, %handshake_buffer78.in0_ready : i1
    %452 = sv.read_inout %_handshake_buffer36_out0 : !hw.inout<i0>
    %453 = sv.read_inout %_handshake_buffer36_out0_valid : !hw.inout<i1>
    %454 = sv.read_inout %_handshake_buffer75_out0 : !hw.inout<i1>
    %455 = sv.read_inout %_handshake_buffer75_out0_valid : !hw.inout<i1>
    %456 = sv.read_inout %_handshake_buffer79_in0_ready : !hw.inout<i1>
    %457 = sv.read_inout %_handshake_buffer107_out0 : !hw.inout<i0>
    %458 = sv.read_inout %_handshake_buffer107_out0_valid : !hw.inout<i1>
    %handshake_mux0.select_ready, %handshake_mux0.in0_ready, %handshake_mux0.in1_ready, %handshake_mux0.out0, %handshake_mux0.out0_valid = hw.instance "handshake_mux0" @handshake_mux_in_ui1_3ins_1outs_ctrl(select: %454: i1, select_valid: %455: i1, in0: %452: i0, in0_valid: %453: i1, in1: %457: i0, in1_valid: %458: i1, out0_ready: %456: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_mux0"}
    sv.assign %_handshake_mux0_out0_valid, %handshake_mux0.out0_valid : i1
    sv.assign %_handshake_mux0_out0, %handshake_mux0.out0 : i0
    sv.assign %_handshake_mux0_in1_ready, %handshake_mux0.in1_ready : i1
    sv.assign %_handshake_mux0_in0_ready, %handshake_mux0.in0_ready : i1
    sv.assign %_handshake_mux0_select_ready, %handshake_mux0.select_ready : i1
    %459 = sv.read_inout %_handshake_mux0_out0 : !hw.inout<i0>
    %460 = sv.read_inout %_handshake_mux0_out0_valid : !hw.inout<i1>
    %461 = sv.read_inout %_handshake_cond_br3_data_ready : !hw.inout<i1>
    %handshake_buffer79.in0_ready, %handshake_buffer79.out0, %handshake_buffer79.out0_valid = hw.instance "handshake_buffer79" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %459: i0, in0_valid: %460: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %461: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer79"}
    sv.assign %_handshake_buffer79_out0_valid, %handshake_buffer79.out0_valid : i1
    sv.assign %_handshake_buffer79_out0, %handshake_buffer79.out0 : i0
    sv.assign %_handshake_buffer79_in0_ready, %handshake_buffer79.in0_ready : i1
    %462 = sv.read_inout %_handshake_buffer57_out0 : !hw.inout<i64>
    %463 = sv.read_inout %_handshake_buffer57_out0_valid : !hw.inout<i1>
    %464 = sv.read_inout %_handshake_buffer76_out0 : !hw.inout<i1>
    %465 = sv.read_inout %_handshake_buffer76_out0_valid : !hw.inout<i1>
    %466 = sv.read_inout %_handshake_buffer80_in0_ready : !hw.inout<i1>
    %467 = sv.read_inout %_handshake_buffer115_out0 : !hw.inout<i64>
    %468 = sv.read_inout %_handshake_buffer115_out0_valid : !hw.inout<i1>
    %handshake_mux1.select_ready, %handshake_mux1.in0_ready, %handshake_mux1.in1_ready, %handshake_mux1.out0, %handshake_mux1.out0_valid = hw.instance "handshake_mux1" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %464: i1, select_valid: %465: i1, in0: %462: i64, in0_valid: %463: i1, in1: %467: i64, in1_valid: %468: i1, out0_ready: %466: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_mux1"}
    sv.assign %_handshake_mux1_out0_valid, %handshake_mux1.out0_valid : i1
    sv.assign %_handshake_mux1_out0, %handshake_mux1.out0 : i64
    sv.assign %_handshake_mux1_in1_ready, %handshake_mux1.in1_ready : i1
    sv.assign %_handshake_mux1_in0_ready, %handshake_mux1.in0_ready : i1
    sv.assign %_handshake_mux1_select_ready, %handshake_mux1.select_ready : i1
    %469 = sv.read_inout %_handshake_mux1_out0 : !hw.inout<i64>
    %470 = sv.read_inout %_handshake_mux1_out0_valid : !hw.inout<i1>
    %471 = sv.read_inout %_handshake_fork12_in0_ready : !hw.inout<i1>
    %handshake_buffer80.in0_ready, %handshake_buffer80.out0, %handshake_buffer80.out0_valid = hw.instance "handshake_buffer80" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %469: i64, in0_valid: %470: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %471: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer80"}
    sv.assign %_handshake_buffer80_out0_valid, %handshake_buffer80.out0_valid : i1
    sv.assign %_handshake_buffer80_out0, %handshake_buffer80.out0 : i64
    sv.assign %_handshake_buffer80_in0_ready, %handshake_buffer80.in0_ready : i1
    %472 = sv.read_inout %_handshake_buffer80_out0 : !hw.inout<i64>
    %473 = sv.read_inout %_handshake_buffer80_out0_valid : !hw.inout<i1>
    %474 = sv.read_inout %_handshake_buffer81_in0_ready : !hw.inout<i1>
    %475 = sv.read_inout %_handshake_buffer82_in0_ready : !hw.inout<i1>
    %handshake_fork12.in0_ready, %handshake_fork12.out0, %handshake_fork12.out0_valid, %handshake_fork12.out1, %handshake_fork12.out1_valid = hw.instance "handshake_fork12" @handshake_fork_in_ui64_out_ui64_ui64(in0: %472: i64, in0_valid: %473: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %475: i1, out1_ready: %474: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1) {hw.verilogName = "handshake_fork12"}
    sv.assign %_handshake_fork12_out1_valid, %handshake_fork12.out1_valid : i1
    sv.assign %_handshake_fork12_out1, %handshake_fork12.out1 : i64
    sv.assign %_handshake_fork12_out0_valid, %handshake_fork12.out0_valid : i1
    sv.assign %_handshake_fork12_out0, %handshake_fork12.out0 : i64
    sv.assign %_handshake_fork12_in0_ready, %handshake_fork12.in0_ready : i1
    %476 = sv.read_inout %_handshake_fork12_out1 : !hw.inout<i64>
    %477 = sv.read_inout %_handshake_fork12_out1_valid : !hw.inout<i1>
    %478 = sv.read_inout %_handshake_cond_br0_data_ready : !hw.inout<i1>
    %handshake_buffer81.in0_ready, %handshake_buffer81.out0, %handshake_buffer81.out0_valid = hw.instance "handshake_buffer81" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %476: i64, in0_valid: %477: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %478: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer81"}
    sv.assign %_handshake_buffer81_out0_valid, %handshake_buffer81.out0_valid : i1
    sv.assign %_handshake_buffer81_out0, %handshake_buffer81.out0 : i64
    sv.assign %_handshake_buffer81_in0_ready, %handshake_buffer81.in0_ready : i1
    %479 = sv.read_inout %_handshake_fork12_out0 : !hw.inout<i64>
    %480 = sv.read_inout %_handshake_fork12_out0_valid : !hw.inout<i1>
    %481 = sv.read_inout %_arith_cmpi0_in0_ready : !hw.inout<i1>
    %handshake_buffer82.in0_ready, %handshake_buffer82.out0, %handshake_buffer82.out0_valid = hw.instance "handshake_buffer82" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %479: i64, in0_valid: %480: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %481: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer82"}
    sv.assign %_handshake_buffer82_out0_valid, %handshake_buffer82.out0_valid : i1
    sv.assign %_handshake_buffer82_out0, %handshake_buffer82.out0 : i64
    sv.assign %_handshake_buffer82_in0_ready, %handshake_buffer82.in0_ready : i1
    %482 = sv.read_inout %_handshake_buffer37_out0 : !hw.inout<i64>
    %483 = sv.read_inout %_handshake_buffer37_out0_valid : !hw.inout<i1>
    %484 = sv.read_inout %_handshake_buffer77_out0 : !hw.inout<i1>
    %485 = sv.read_inout %_handshake_buffer77_out0_valid : !hw.inout<i1>
    %486 = sv.read_inout %_handshake_buffer83_in0_ready : !hw.inout<i1>
    %487 = sv.read_inout %_handshake_buffer97_out0 : !hw.inout<i64>
    %488 = sv.read_inout %_handshake_buffer97_out0_valid : !hw.inout<i1>
    %handshake_mux2.select_ready, %handshake_mux2.in0_ready, %handshake_mux2.in1_ready, %handshake_mux2.out0, %handshake_mux2.out0_valid = hw.instance "handshake_mux2" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %484: i1, select_valid: %485: i1, in0: %482: i64, in0_valid: %483: i1, in1: %487: i64, in1_valid: %488: i1, out0_ready: %486: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_mux2"}
    sv.assign %_handshake_mux2_out0_valid, %handshake_mux2.out0_valid : i1
    sv.assign %_handshake_mux2_out0, %handshake_mux2.out0 : i64
    sv.assign %_handshake_mux2_in1_ready, %handshake_mux2.in1_ready : i1
    sv.assign %_handshake_mux2_in0_ready, %handshake_mux2.in0_ready : i1
    sv.assign %_handshake_mux2_select_ready, %handshake_mux2.select_ready : i1
    %489 = sv.read_inout %_handshake_mux2_out0 : !hw.inout<i64>
    %490 = sv.read_inout %_handshake_mux2_out0_valid : !hw.inout<i1>
    %491 = sv.read_inout %_handshake_fork13_in0_ready : !hw.inout<i1>
    %handshake_buffer83.in0_ready, %handshake_buffer83.out0, %handshake_buffer83.out0_valid = hw.instance "handshake_buffer83" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %489: i64, in0_valid: %490: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %491: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer83"}
    sv.assign %_handshake_buffer83_out0_valid, %handshake_buffer83.out0_valid : i1
    sv.assign %_handshake_buffer83_out0, %handshake_buffer83.out0 : i64
    sv.assign %_handshake_buffer83_in0_ready, %handshake_buffer83.in0_ready : i1
    %492 = sv.read_inout %_handshake_buffer83_out0 : !hw.inout<i64>
    %493 = sv.read_inout %_handshake_buffer83_out0_valid : !hw.inout<i1>
    %494 = sv.read_inout %_handshake_buffer84_in0_ready : !hw.inout<i1>
    %495 = sv.read_inout %_handshake_buffer85_in0_ready : !hw.inout<i1>
    %handshake_fork13.in0_ready, %handshake_fork13.out0, %handshake_fork13.out0_valid, %handshake_fork13.out1, %handshake_fork13.out1_valid = hw.instance "handshake_fork13" @handshake_fork_in_ui64_out_ui64_ui64(in0: %492: i64, in0_valid: %493: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %495: i1, out1_ready: %494: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1) {hw.verilogName = "handshake_fork13"}
    sv.assign %_handshake_fork13_out1_valid, %handshake_fork13.out1_valid : i1
    sv.assign %_handshake_fork13_out1, %handshake_fork13.out1 : i64
    sv.assign %_handshake_fork13_out0_valid, %handshake_fork13.out0_valid : i1
    sv.assign %_handshake_fork13_out0, %handshake_fork13.out0 : i64
    sv.assign %_handshake_fork13_in0_ready, %handshake_fork13.in0_ready : i1
    %496 = sv.read_inout %_handshake_fork13_out1 : !hw.inout<i64>
    %497 = sv.read_inout %_handshake_fork13_out1_valid : !hw.inout<i1>
    %498 = sv.read_inout %_handshake_cond_br1_data_ready : !hw.inout<i1>
    %handshake_buffer84.in0_ready, %handshake_buffer84.out0, %handshake_buffer84.out0_valid = hw.instance "handshake_buffer84" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %496: i64, in0_valid: %497: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %498: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer84"}
    sv.assign %_handshake_buffer84_out0_valid, %handshake_buffer84.out0_valid : i1
    sv.assign %_handshake_buffer84_out0, %handshake_buffer84.out0 : i64
    sv.assign %_handshake_buffer84_in0_ready, %handshake_buffer84.in0_ready : i1
    %499 = sv.read_inout %_handshake_fork13_out0 : !hw.inout<i64>
    %500 = sv.read_inout %_handshake_fork13_out0_valid : !hw.inout<i1>
    %501 = sv.read_inout %_arith_cmpi0_in1_ready : !hw.inout<i1>
    %handshake_buffer85.in0_ready, %handshake_buffer85.out0, %handshake_buffer85.out0_valid = hw.instance "handshake_buffer85" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %499: i64, in0_valid: %500: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %501: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer85"}
    sv.assign %_handshake_buffer85_out0_valid, %handshake_buffer85.out0_valid : i1
    sv.assign %_handshake_buffer85_out0, %handshake_buffer85.out0 : i64
    sv.assign %_handshake_buffer85_in0_ready, %handshake_buffer85.in0_ready : i1
    %502 = sv.read_inout %_handshake_buffer53_out0 : !hw.inout<i64>
    %503 = sv.read_inout %_handshake_buffer53_out0_valid : !hw.inout<i1>
    %504 = sv.read_inout %_handshake_buffer78_out0 : !hw.inout<i1>
    %505 = sv.read_inout %_handshake_buffer78_out0_valid : !hw.inout<i1>
    %506 = sv.read_inout %_handshake_buffer86_in0_ready : !hw.inout<i1>
    %507 = sv.read_inout %_handshake_buffer100_out0 : !hw.inout<i64>
    %508 = sv.read_inout %_handshake_buffer100_out0_valid : !hw.inout<i1>
    %handshake_mux3.select_ready, %handshake_mux3.in0_ready, %handshake_mux3.in1_ready, %handshake_mux3.out0, %handshake_mux3.out0_valid = hw.instance "handshake_mux3" @handshake_mux_in_ui1_ui64_ui64_out_ui64(select: %504: i1, select_valid: %505: i1, in0: %502: i64, in0_valid: %503: i1, in1: %507: i64, in1_valid: %508: i1, out0_ready: %506: i1) -> (select_ready: i1, in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_mux3"}
    sv.assign %_handshake_mux3_out0_valid, %handshake_mux3.out0_valid : i1
    sv.assign %_handshake_mux3_out0, %handshake_mux3.out0 : i64
    sv.assign %_handshake_mux3_in1_ready, %handshake_mux3.in1_ready : i1
    sv.assign %_handshake_mux3_in0_ready, %handshake_mux3.in0_ready : i1
    sv.assign %_handshake_mux3_select_ready, %handshake_mux3.select_ready : i1
    %509 = sv.read_inout %_handshake_mux3_out0 : !hw.inout<i64>
    %510 = sv.read_inout %_handshake_mux3_out0_valid : !hw.inout<i1>
    %511 = sv.read_inout %_handshake_cond_br2_data_ready : !hw.inout<i1>
    %handshake_buffer86.in0_ready, %handshake_buffer86.out0, %handshake_buffer86.out0_valid = hw.instance "handshake_buffer86" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %509: i64, in0_valid: %510: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %511: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer86"}
    sv.assign %_handshake_buffer86_out0_valid, %handshake_buffer86.out0_valid : i1
    sv.assign %_handshake_buffer86_out0, %handshake_buffer86.out0 : i64
    sv.assign %_handshake_buffer86_in0_ready, %handshake_buffer86.in0_ready : i1
    %512 = sv.read_inout %_handshake_buffer82_out0 : !hw.inout<i64>
    %513 = sv.read_inout %_handshake_buffer82_out0_valid : !hw.inout<i1>
    %514 = sv.read_inout %_handshake_buffer85_out0 : !hw.inout<i64>
    %515 = sv.read_inout %_handshake_buffer85_out0_valid : !hw.inout<i1>
    %516 = sv.read_inout %_handshake_buffer87_in0_ready : !hw.inout<i1>
    %arith_cmpi0.in0_ready, %arith_cmpi0.in1_ready, %arith_cmpi0.out0, %arith_cmpi0.out0_valid = hw.instance "arith_cmpi0" @arith_cmpi_in_ui64_ui64_out_ui1_slt(in0: %512: i64, in0_valid: %513: i1, in1: %514: i64, in1_valid: %515: i1, out0_ready: %516: i1) -> (in0_ready: i1, in1_ready: i1, out0: i1, out0_valid: i1) {hw.verilogName = "arith_cmpi0"}
    sv.assign %_arith_cmpi0_out0_valid, %arith_cmpi0.out0_valid : i1
    sv.assign %_arith_cmpi0_out0, %arith_cmpi0.out0 : i1
    sv.assign %_arith_cmpi0_in1_ready, %arith_cmpi0.in1_ready : i1
    sv.assign %_arith_cmpi0_in0_ready, %arith_cmpi0.in0_ready : i1
    %517 = sv.read_inout %_arith_cmpi0_out0 : !hw.inout<i1>
    %518 = sv.read_inout %_arith_cmpi0_out0_valid : !hw.inout<i1>
    %519 = sv.read_inout %_handshake_fork14_in0_ready : !hw.inout<i1>
    %handshake_buffer87.in0_ready, %handshake_buffer87.out0, %handshake_buffer87.out0_valid = hw.instance "handshake_buffer87" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %517: i1, in0_valid: %518: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %519: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1) {hw.verilogName = "handshake_buffer87"}
    sv.assign %_handshake_buffer87_out0_valid, %handshake_buffer87.out0_valid : i1
    sv.assign %_handshake_buffer87_out0, %handshake_buffer87.out0 : i1
    sv.assign %_handshake_buffer87_in0_ready, %handshake_buffer87.in0_ready : i1
    %520 = sv.read_inout %_handshake_buffer74_in0_ready : !hw.inout<i1>
    %521 = sv.read_inout %_handshake_buffer87_out0 : !hw.inout<i1>
    %522 = sv.read_inout %_handshake_buffer87_out0_valid : !hw.inout<i1>
    %523 = sv.read_inout %_handshake_buffer88_in0_ready : !hw.inout<i1>
    %524 = sv.read_inout %_handshake_buffer89_in0_ready : !hw.inout<i1>
    %525 = sv.read_inout %_handshake_buffer90_in0_ready : !hw.inout<i1>
    %526 = sv.read_inout %_handshake_buffer91_in0_ready : !hw.inout<i1>
    %handshake_fork14.in0_ready, %handshake_fork14.out0, %handshake_fork14.out0_valid, %handshake_fork14.out1, %handshake_fork14.out1_valid, %handshake_fork14.out2, %handshake_fork14.out2_valid, %handshake_fork14.out3, %handshake_fork14.out3_valid, %handshake_fork14.out4, %handshake_fork14.out4_valid = hw.instance "handshake_fork14" @handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(in0: %521: i1, in0_valid: %522: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %520: i1, out1_ready: %526: i1, out2_ready: %525: i1, out3_ready: %524: i1, out4_ready: %523: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1, out1: i1, out1_valid: i1, out2: i1, out2_valid: i1, out3: i1, out3_valid: i1, out4: i1, out4_valid: i1) {hw.verilogName = "handshake_fork14"}
    sv.assign %_handshake_fork14_out4_valid, %handshake_fork14.out4_valid : i1
    sv.assign %_handshake_fork14_out4, %handshake_fork14.out4 : i1
    sv.assign %_handshake_fork14_out3_valid, %handshake_fork14.out3_valid : i1
    sv.assign %_handshake_fork14_out3, %handshake_fork14.out3 : i1
    sv.assign %_handshake_fork14_out2_valid, %handshake_fork14.out2_valid : i1
    sv.assign %_handshake_fork14_out2, %handshake_fork14.out2 : i1
    sv.assign %_handshake_fork14_out1_valid, %handshake_fork14.out1_valid : i1
    sv.assign %_handshake_fork14_out1, %handshake_fork14.out1 : i1
    sv.assign %_handshake_fork14_out0_valid, %handshake_fork14.out0_valid : i1
    sv.assign %_handshake_fork14_out0, %handshake_fork14.out0 : i1
    sv.assign %_handshake_fork14_in0_ready, %handshake_fork14.in0_ready : i1
    %527 = sv.read_inout %_handshake_fork14_out4 : !hw.inout<i1>
    %528 = sv.read_inout %_handshake_fork14_out4_valid : !hw.inout<i1>
    %529 = sv.read_inout %_handshake_cond_br0_cond_ready : !hw.inout<i1>
    %handshake_buffer88.in0_ready, %handshake_buffer88.out0, %handshake_buffer88.out0_valid = hw.instance "handshake_buffer88" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %527: i1, in0_valid: %528: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %529: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1) {hw.verilogName = "handshake_buffer88"}
    sv.assign %_handshake_buffer88_out0_valid, %handshake_buffer88.out0_valid : i1
    sv.assign %_handshake_buffer88_out0, %handshake_buffer88.out0 : i1
    sv.assign %_handshake_buffer88_in0_ready, %handshake_buffer88.in0_ready : i1
    %530 = sv.read_inout %_handshake_fork14_out3 : !hw.inout<i1>
    %531 = sv.read_inout %_handshake_fork14_out3_valid : !hw.inout<i1>
    %532 = sv.read_inout %_handshake_cond_br1_cond_ready : !hw.inout<i1>
    %handshake_buffer89.in0_ready, %handshake_buffer89.out0, %handshake_buffer89.out0_valid = hw.instance "handshake_buffer89" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %530: i1, in0_valid: %531: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %532: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1) {hw.verilogName = "handshake_buffer89"}
    sv.assign %_handshake_buffer89_out0_valid, %handshake_buffer89.out0_valid : i1
    sv.assign %_handshake_buffer89_out0, %handshake_buffer89.out0 : i1
    sv.assign %_handshake_buffer89_in0_ready, %handshake_buffer89.in0_ready : i1
    %533 = sv.read_inout %_handshake_fork14_out2 : !hw.inout<i1>
    %534 = sv.read_inout %_handshake_fork14_out2_valid : !hw.inout<i1>
    %535 = sv.read_inout %_handshake_cond_br2_cond_ready : !hw.inout<i1>
    %handshake_buffer90.in0_ready, %handshake_buffer90.out0, %handshake_buffer90.out0_valid = hw.instance "handshake_buffer90" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %533: i1, in0_valid: %534: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %535: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1) {hw.verilogName = "handshake_buffer90"}
    sv.assign %_handshake_buffer90_out0_valid, %handshake_buffer90.out0_valid : i1
    sv.assign %_handshake_buffer90_out0, %handshake_buffer90.out0 : i1
    sv.assign %_handshake_buffer90_in0_ready, %handshake_buffer90.in0_ready : i1
    %536 = sv.read_inout %_handshake_fork14_out1 : !hw.inout<i1>
    %537 = sv.read_inout %_handshake_fork14_out1_valid : !hw.inout<i1>
    %538 = sv.read_inout %_handshake_cond_br3_cond_ready : !hw.inout<i1>
    %handshake_buffer91.in0_ready, %handshake_buffer91.out0, %handshake_buffer91.out0_valid = hw.instance "handshake_buffer91" @handshake_buffer_in_ui1_out_ui1_2slots_seq(in0: %536: i1, in0_valid: %537: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %538: i1) -> (in0_ready: i1, out0: i1, out0_valid: i1) {hw.verilogName = "handshake_buffer91"}
    sv.assign %_handshake_buffer91_out0_valid, %handshake_buffer91.out0_valid : i1
    sv.assign %_handshake_buffer91_out0, %handshake_buffer91.out0 : i1
    sv.assign %_handshake_buffer91_in0_ready, %handshake_buffer91.in0_ready : i1
    %539 = sv.read_inout %_handshake_buffer81_out0 : !hw.inout<i64>
    %540 = sv.read_inout %_handshake_buffer81_out0_valid : !hw.inout<i1>
    %541 = sv.read_inout %_handshake_buffer88_out0 : !hw.inout<i1>
    %542 = sv.read_inout %_handshake_buffer88_out0_valid : !hw.inout<i1>
    %543 = sv.read_inout %_handshake_buffer92_in0_ready : !hw.inout<i1>
    %544 = sv.read_inout %_handshake_sink0_in0_ready : !hw.inout<i1>
    %handshake_cond_br0.cond_ready, %handshake_cond_br0.data_ready, %handshake_cond_br0.outTrue, %handshake_cond_br0.outTrue_valid, %handshake_cond_br0.outFalse, %handshake_cond_br0.outFalse_valid = hw.instance "handshake_cond_br0" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %541: i1, cond_valid: %542: i1, data: %539: i64, data_valid: %540: i1, outTrue_ready: %543: i1, outFalse_ready: %544: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1) {hw.verilogName = "handshake_cond_br0"}
    sv.assign %_handshake_cond_br0_outFalse_valid, %handshake_cond_br0.outFalse_valid : i1
    sv.assign %_handshake_cond_br0_outFalse, %handshake_cond_br0.outFalse : i64
    sv.assign %_handshake_cond_br0_outTrue_valid, %handshake_cond_br0.outTrue_valid : i1
    sv.assign %_handshake_cond_br0_outTrue, %handshake_cond_br0.outTrue : i64
    sv.assign %_handshake_cond_br0_data_ready, %handshake_cond_br0.data_ready : i1
    sv.assign %_handshake_cond_br0_cond_ready, %handshake_cond_br0.cond_ready : i1
    %545 = sv.read_inout %_handshake_cond_br0_outTrue : !hw.inout<i64>
    %546 = sv.read_inout %_handshake_cond_br0_outTrue_valid : !hw.inout<i1>
    %547 = sv.read_inout %_handshake_fork15_in0_ready : !hw.inout<i1>
    %handshake_buffer92.in0_ready, %handshake_buffer92.out0, %handshake_buffer92.out0_valid = hw.instance "handshake_buffer92" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %545: i64, in0_valid: %546: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %547: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer92"}
    sv.assign %_handshake_buffer92_out0_valid, %handshake_buffer92.out0_valid : i1
    sv.assign %_handshake_buffer92_out0, %handshake_buffer92.out0 : i64
    sv.assign %_handshake_buffer92_in0_ready, %handshake_buffer92.in0_ready : i1
    %548 = sv.read_inout %_handshake_cond_br0_outFalse : !hw.inout<i64>
    %549 = sv.read_inout %_handshake_cond_br0_outFalse_valid : !hw.inout<i1>
    %handshake_sink0.in0_ready = hw.instance "handshake_sink0" @handshake_sink_in_ui64(in0: %548: i64, in0_valid: %549: i1) -> (in0_ready: i1) {hw.verilogName = "handshake_sink0"}
    sv.assign %_handshake_sink0_in0_ready, %handshake_sink0.in0_ready : i1
    %550 = sv.read_inout %_handshake_buffer92_out0 : !hw.inout<i64>
    %551 = sv.read_inout %_handshake_buffer92_out0_valid : !hw.inout<i1>
    %552 = sv.read_inout %_handshake_buffer93_in0_ready : !hw.inout<i1>
    %553 = sv.read_inout %_handshake_buffer94_in0_ready : !hw.inout<i1>
    %554 = sv.read_inout %_handshake_buffer95_in0_ready : !hw.inout<i1>
    %555 = sv.read_inout %_handshake_buffer96_in0_ready : !hw.inout<i1>
    %handshake_fork15.in0_ready, %handshake_fork15.out0, %handshake_fork15.out0_valid, %handshake_fork15.out1, %handshake_fork15.out1_valid, %handshake_fork15.out2, %handshake_fork15.out2_valid, %handshake_fork15.out3, %handshake_fork15.out3_valid = hw.instance "handshake_fork15" @handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(in0: %550: i64, in0_valid: %551: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %555: i1, out1_ready: %554: i1, out2_ready: %553: i1, out3_ready: %552: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1, out2: i64, out2_valid: i1, out3: i64, out3_valid: i1) {hw.verilogName = "handshake_fork15"}
    sv.assign %_handshake_fork15_out3_valid, %handshake_fork15.out3_valid : i1
    sv.assign %_handshake_fork15_out3, %handshake_fork15.out3 : i64
    sv.assign %_handshake_fork15_out2_valid, %handshake_fork15.out2_valid : i1
    sv.assign %_handshake_fork15_out2, %handshake_fork15.out2 : i64
    sv.assign %_handshake_fork15_out1_valid, %handshake_fork15.out1_valid : i1
    sv.assign %_handshake_fork15_out1, %handshake_fork15.out1 : i64
    sv.assign %_handshake_fork15_out0_valid, %handshake_fork15.out0_valid : i1
    sv.assign %_handshake_fork15_out0, %handshake_fork15.out0 : i64
    sv.assign %_handshake_fork15_in0_ready, %handshake_fork15.in0_ready : i1
    %556 = sv.read_inout %_handshake_fork15_out3 : !hw.inout<i64>
    %557 = sv.read_inout %_handshake_fork15_out3_valid : !hw.inout<i1>
    %558 = sv.read_inout %_handshake_store6_addrIn0_ready : !hw.inout<i1>
    %handshake_buffer93.in0_ready, %handshake_buffer93.out0, %handshake_buffer93.out0_valid = hw.instance "handshake_buffer93" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %556: i64, in0_valid: %557: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %558: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer93"}
    sv.assign %_handshake_buffer93_out0_valid, %handshake_buffer93.out0_valid : i1
    sv.assign %_handshake_buffer93_out0, %handshake_buffer93.out0 : i64
    sv.assign %_handshake_buffer93_in0_ready, %handshake_buffer93.in0_ready : i1
    %559 = sv.read_inout %_handshake_fork15_out2 : !hw.inout<i64>
    %560 = sv.read_inout %_handshake_fork15_out2_valid : !hw.inout<i1>
    %561 = sv.read_inout %_handshake_load1_addrIn0_ready : !hw.inout<i1>
    %handshake_buffer94.in0_ready, %handshake_buffer94.out0, %handshake_buffer94.out0_valid = hw.instance "handshake_buffer94" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %559: i64, in0_valid: %560: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %561: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer94"}
    sv.assign %_handshake_buffer94_out0_valid, %handshake_buffer94.out0_valid : i1
    sv.assign %_handshake_buffer94_out0, %handshake_buffer94.out0 : i64
    sv.assign %_handshake_buffer94_in0_ready, %handshake_buffer94.in0_ready : i1
    %562 = sv.read_inout %_handshake_fork15_out1 : !hw.inout<i64>
    %563 = sv.read_inout %_handshake_fork15_out1_valid : !hw.inout<i1>
    %564 = sv.read_inout %_handshake_load0_addrIn0_ready : !hw.inout<i1>
    %handshake_buffer95.in0_ready, %handshake_buffer95.out0, %handshake_buffer95.out0_valid = hw.instance "handshake_buffer95" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %562: i64, in0_valid: %563: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %564: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer95"}
    sv.assign %_handshake_buffer95_out0_valid, %handshake_buffer95.out0_valid : i1
    sv.assign %_handshake_buffer95_out0, %handshake_buffer95.out0 : i64
    sv.assign %_handshake_buffer95_in0_ready, %handshake_buffer95.in0_ready : i1
    %565 = sv.read_inout %_handshake_fork15_out0 : !hw.inout<i64>
    %566 = sv.read_inout %_handshake_fork15_out0_valid : !hw.inout<i1>
    %567 = sv.read_inout %_arith_addi1_in0_ready : !hw.inout<i1>
    %handshake_buffer96.in0_ready, %handshake_buffer96.out0, %handshake_buffer96.out0_valid = hw.instance "handshake_buffer96" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %565: i64, in0_valid: %566: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %567: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer96"}
    sv.assign %_handshake_buffer96_out0_valid, %handshake_buffer96.out0_valid : i1
    sv.assign %_handshake_buffer96_out0, %handshake_buffer96.out0 : i64
    sv.assign %_handshake_buffer96_in0_ready, %handshake_buffer96.in0_ready : i1
    %568 = sv.read_inout %_handshake_buffer84_out0 : !hw.inout<i64>
    %569 = sv.read_inout %_handshake_buffer84_out0_valid : !hw.inout<i1>
    %570 = sv.read_inout %_handshake_buffer89_out0 : !hw.inout<i1>
    %571 = sv.read_inout %_handshake_buffer89_out0_valid : !hw.inout<i1>
    %572 = sv.read_inout %_handshake_buffer97_in0_ready : !hw.inout<i1>
    %573 = sv.read_inout %_handshake_sink1_in0_ready : !hw.inout<i1>
    %handshake_cond_br1.cond_ready, %handshake_cond_br1.data_ready, %handshake_cond_br1.outTrue, %handshake_cond_br1.outTrue_valid, %handshake_cond_br1.outFalse, %handshake_cond_br1.outFalse_valid = hw.instance "handshake_cond_br1" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %570: i1, cond_valid: %571: i1, data: %568: i64, data_valid: %569: i1, outTrue_ready: %572: i1, outFalse_ready: %573: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1) {hw.verilogName = "handshake_cond_br1"}
    sv.assign %_handshake_cond_br1_outFalse_valid, %handshake_cond_br1.outFalse_valid : i1
    sv.assign %_handshake_cond_br1_outFalse, %handshake_cond_br1.outFalse : i64
    sv.assign %_handshake_cond_br1_outTrue_valid, %handshake_cond_br1.outTrue_valid : i1
    sv.assign %_handshake_cond_br1_outTrue, %handshake_cond_br1.outTrue : i64
    sv.assign %_handshake_cond_br1_data_ready, %handshake_cond_br1.data_ready : i1
    sv.assign %_handshake_cond_br1_cond_ready, %handshake_cond_br1.cond_ready : i1
    %574 = sv.read_inout %_handshake_mux2_in1_ready : !hw.inout<i1>
    %575 = sv.read_inout %_handshake_cond_br1_outTrue : !hw.inout<i64>
    %576 = sv.read_inout %_handshake_cond_br1_outTrue_valid : !hw.inout<i1>
    %handshake_buffer97.in0_ready, %handshake_buffer97.out0, %handshake_buffer97.out0_valid = hw.instance "handshake_buffer97" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %575: i64, in0_valid: %576: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %574: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer97"}
    sv.assign %_handshake_buffer97_out0_valid, %handshake_buffer97.out0_valid : i1
    sv.assign %_handshake_buffer97_out0, %handshake_buffer97.out0 : i64
    sv.assign %_handshake_buffer97_in0_ready, %handshake_buffer97.in0_ready : i1
    %577 = sv.read_inout %_handshake_cond_br1_outFalse : !hw.inout<i64>
    %578 = sv.read_inout %_handshake_cond_br1_outFalse_valid : !hw.inout<i1>
    %handshake_sink1.in0_ready = hw.instance "handshake_sink1" @handshake_sink_in_ui64(in0: %577: i64, in0_valid: %578: i1) -> (in0_ready: i1) {hw.verilogName = "handshake_sink1"}
    sv.assign %_handshake_sink1_in0_ready, %handshake_sink1.in0_ready : i1
    %579 = sv.read_inout %_handshake_buffer86_out0 : !hw.inout<i64>
    %580 = sv.read_inout %_handshake_buffer86_out0_valid : !hw.inout<i1>
    %581 = sv.read_inout %_handshake_buffer90_out0 : !hw.inout<i1>
    %582 = sv.read_inout %_handshake_buffer90_out0_valid : !hw.inout<i1>
    %583 = sv.read_inout %_handshake_buffer98_in0_ready : !hw.inout<i1>
    %584 = sv.read_inout %_handshake_sink2_in0_ready : !hw.inout<i1>
    %handshake_cond_br2.cond_ready, %handshake_cond_br2.data_ready, %handshake_cond_br2.outTrue, %handshake_cond_br2.outTrue_valid, %handshake_cond_br2.outFalse, %handshake_cond_br2.outFalse_valid = hw.instance "handshake_cond_br2" @handshake_cond_br_in_ui1_ui64_out_ui64_ui64(cond: %581: i1, cond_valid: %582: i1, data: %579: i64, data_valid: %580: i1, outTrue_ready: %583: i1, outFalse_ready: %584: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i64, outTrue_valid: i1, outFalse: i64, outFalse_valid: i1) {hw.verilogName = "handshake_cond_br2"}
    sv.assign %_handshake_cond_br2_outFalse_valid, %handshake_cond_br2.outFalse_valid : i1
    sv.assign %_handshake_cond_br2_outFalse, %handshake_cond_br2.outFalse : i64
    sv.assign %_handshake_cond_br2_outTrue_valid, %handshake_cond_br2.outTrue_valid : i1
    sv.assign %_handshake_cond_br2_outTrue, %handshake_cond_br2.outTrue : i64
    sv.assign %_handshake_cond_br2_data_ready, %handshake_cond_br2.data_ready : i1
    sv.assign %_handshake_cond_br2_cond_ready, %handshake_cond_br2.cond_ready : i1
    %585 = sv.read_inout %_handshake_cond_br2_outTrue : !hw.inout<i64>
    %586 = sv.read_inout %_handshake_cond_br2_outTrue_valid : !hw.inout<i1>
    %587 = sv.read_inout %_handshake_fork16_in0_ready : !hw.inout<i1>
    %handshake_buffer98.in0_ready, %handshake_buffer98.out0, %handshake_buffer98.out0_valid = hw.instance "handshake_buffer98" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %585: i64, in0_valid: %586: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %587: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer98"}
    sv.assign %_handshake_buffer98_out0_valid, %handshake_buffer98.out0_valid : i1
    sv.assign %_handshake_buffer98_out0, %handshake_buffer98.out0 : i64
    sv.assign %_handshake_buffer98_in0_ready, %handshake_buffer98.in0_ready : i1
    %588 = sv.read_inout %_handshake_cond_br2_outFalse : !hw.inout<i64>
    %589 = sv.read_inout %_handshake_cond_br2_outFalse_valid : !hw.inout<i1>
    %handshake_sink2.in0_ready = hw.instance "handshake_sink2" @handshake_sink_in_ui64(in0: %588: i64, in0_valid: %589: i1) -> (in0_ready: i1) {hw.verilogName = "handshake_sink2"}
    sv.assign %_handshake_sink2_in0_ready, %handshake_sink2.in0_ready : i1
    %590 = sv.read_inout %_handshake_buffer98_out0 : !hw.inout<i64>
    %591 = sv.read_inout %_handshake_buffer98_out0_valid : !hw.inout<i1>
    %592 = sv.read_inout %_handshake_buffer99_in0_ready : !hw.inout<i1>
    %593 = sv.read_inout %_handshake_buffer100_in0_ready : !hw.inout<i1>
    %handshake_fork16.in0_ready, %handshake_fork16.out0, %handshake_fork16.out0_valid, %handshake_fork16.out1, %handshake_fork16.out1_valid = hw.instance "handshake_fork16" @handshake_fork_in_ui64_out_ui64_ui64(in0: %590: i64, in0_valid: %591: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %593: i1, out1_ready: %592: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1, out1: i64, out1_valid: i1) {hw.verilogName = "handshake_fork16"}
    sv.assign %_handshake_fork16_out1_valid, %handshake_fork16.out1_valid : i1
    sv.assign %_handshake_fork16_out1, %handshake_fork16.out1 : i64
    sv.assign %_handshake_fork16_out0_valid, %handshake_fork16.out0_valid : i1
    sv.assign %_handshake_fork16_out0, %handshake_fork16.out0 : i64
    sv.assign %_handshake_fork16_in0_ready, %handshake_fork16.in0_ready : i1
    %594 = sv.read_inout %_handshake_fork16_out1 : !hw.inout<i64>
    %595 = sv.read_inout %_handshake_fork16_out1_valid : !hw.inout<i1>
    %596 = sv.read_inout %_arith_addi1_in1_ready : !hw.inout<i1>
    %handshake_buffer99.in0_ready, %handshake_buffer99.out0, %handshake_buffer99.out0_valid = hw.instance "handshake_buffer99" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %594: i64, in0_valid: %595: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %596: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer99"}
    sv.assign %_handshake_buffer99_out0_valid, %handshake_buffer99.out0_valid : i1
    sv.assign %_handshake_buffer99_out0, %handshake_buffer99.out0 : i64
    sv.assign %_handshake_buffer99_in0_ready, %handshake_buffer99.in0_ready : i1
    %597 = sv.read_inout %_handshake_mux3_in1_ready : !hw.inout<i1>
    %598 = sv.read_inout %_handshake_fork16_out0 : !hw.inout<i64>
    %599 = sv.read_inout %_handshake_fork16_out0_valid : !hw.inout<i1>
    %handshake_buffer100.in0_ready, %handshake_buffer100.out0, %handshake_buffer100.out0_valid = hw.instance "handshake_buffer100" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %598: i64, in0_valid: %599: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %597: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer100"}
    sv.assign %_handshake_buffer100_out0_valid, %handshake_buffer100.out0_valid : i1
    sv.assign %_handshake_buffer100_out0, %handshake_buffer100.out0 : i64
    sv.assign %_handshake_buffer100_in0_ready, %handshake_buffer100.in0_ready : i1
    %600 = sv.read_inout %_handshake_buffer79_out0 : !hw.inout<i0>
    %601 = sv.read_inout %_handshake_buffer79_out0_valid : !hw.inout<i1>
    %602 = sv.read_inout %_handshake_buffer91_out0 : !hw.inout<i1>
    %603 = sv.read_inout %_handshake_buffer91_out0_valid : !hw.inout<i1>
    %604 = sv.read_inout %_handshake_buffer101_in0_ready : !hw.inout<i1>
    %605 = sv.read_inout %_handshake_buffer102_in0_ready : !hw.inout<i1>
    %handshake_cond_br3.cond_ready, %handshake_cond_br3.data_ready, %handshake_cond_br3.outTrue, %handshake_cond_br3.outTrue_valid, %handshake_cond_br3.outFalse, %handshake_cond_br3.outFalse_valid = hw.instance "handshake_cond_br3" @handshake_cond_br_in_ui1_2ins_2outs_ctrl(cond: %602: i1, cond_valid: %603: i1, data: %600: i0, data_valid: %601: i1, outTrue_ready: %605: i1, outFalse_ready: %604: i1) -> (cond_ready: i1, data_ready: i1, outTrue: i0, outTrue_valid: i1, outFalse: i0, outFalse_valid: i1) {hw.verilogName = "handshake_cond_br3"}
    sv.assign %_handshake_cond_br3_outFalse_valid, %handshake_cond_br3.outFalse_valid : i1
    sv.assign %_handshake_cond_br3_outFalse, %handshake_cond_br3.outFalse : i0
    sv.assign %_handshake_cond_br3_outTrue_valid, %handshake_cond_br3.outTrue_valid : i1
    sv.assign %_handshake_cond_br3_outTrue, %handshake_cond_br3.outTrue : i0
    sv.assign %_handshake_cond_br3_data_ready, %handshake_cond_br3.data_ready : i1
    sv.assign %_handshake_cond_br3_cond_ready, %handshake_cond_br3.cond_ready : i1
    %606 = sv.read_inout %_handshake_cond_br3_outFalse : !hw.inout<i0>
    %607 = sv.read_inout %_handshake_cond_br3_outFalse_valid : !hw.inout<i1>
    %handshake_buffer101.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid = hw.instance "handshake_buffer101" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %606: i0, in0_valid: %607: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %out0_ready: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer101"}
    sv.assign %_handshake_buffer101_in0_ready, %handshake_buffer101.in0_ready : i1
    %608 = sv.read_inout %_handshake_cond_br3_outTrue : !hw.inout<i0>
    %609 = sv.read_inout %_handshake_cond_br3_outTrue_valid : !hw.inout<i1>
    %610 = sv.read_inout %_handshake_fork17_in0_ready : !hw.inout<i1>
    %handshake_buffer102.in0_ready, %handshake_buffer102.out0, %handshake_buffer102.out0_valid = hw.instance "handshake_buffer102" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %608: i0, in0_valid: %609: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %610: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer102"}
    sv.assign %_handshake_buffer102_out0_valid, %handshake_buffer102.out0_valid : i1
    sv.assign %_handshake_buffer102_out0, %handshake_buffer102.out0 : i0
    sv.assign %_handshake_buffer102_in0_ready, %handshake_buffer102.in0_ready : i1
    %611 = sv.read_inout %_handshake_buffer102_out0 : !hw.inout<i0>
    %612 = sv.read_inout %_handshake_buffer102_out0_valid : !hw.inout<i1>
    %613 = sv.read_inout %_handshake_buffer103_in0_ready : !hw.inout<i1>
    %614 = sv.read_inout %_handshake_buffer104_in0_ready : !hw.inout<i1>
    %615 = sv.read_inout %_handshake_buffer105_in0_ready : !hw.inout<i1>
    %616 = sv.read_inout %_handshake_buffer106_in0_ready : !hw.inout<i1>
    %handshake_fork17.in0_ready, %handshake_fork17.out0, %handshake_fork17.out0_valid, %handshake_fork17.out1, %handshake_fork17.out1_valid, %handshake_fork17.out2, %handshake_fork17.out2_valid, %handshake_fork17.out3, %handshake_fork17.out3_valid = hw.instance "handshake_fork17" @handshake_fork_1ins_4outs_ctrl(in0: %611: i0, in0_valid: %612: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %616: i1, out1_ready: %615: i1, out2_ready: %614: i1, out3_ready: %613: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1, out1: i0, out1_valid: i1, out2: i0, out2_valid: i1, out3: i0, out3_valid: i1) {hw.verilogName = "handshake_fork17"}
    sv.assign %_handshake_fork17_out3_valid, %handshake_fork17.out3_valid : i1
    sv.assign %_handshake_fork17_out3, %handshake_fork17.out3 : i0
    sv.assign %_handshake_fork17_out2_valid, %handshake_fork17.out2_valid : i1
    sv.assign %_handshake_fork17_out2, %handshake_fork17.out2 : i0
    sv.assign %_handshake_fork17_out1_valid, %handshake_fork17.out1_valid : i1
    sv.assign %_handshake_fork17_out1, %handshake_fork17.out1 : i0
    sv.assign %_handshake_fork17_out0_valid, %handshake_fork17.out0_valid : i1
    sv.assign %_handshake_fork17_out0, %handshake_fork17.out0 : i0
    sv.assign %_handshake_fork17_in0_ready, %handshake_fork17.in0_ready : i1
    %617 = sv.read_inout %_handshake_fork17_out3 : !hw.inout<i0>
    %618 = sv.read_inout %_handshake_fork17_out3_valid : !hw.inout<i1>
    %619 = sv.read_inout %_handshake_load0_ctrl_ready : !hw.inout<i1>
    %handshake_buffer103.in0_ready, %handshake_buffer103.out0, %handshake_buffer103.out0_valid = hw.instance "handshake_buffer103" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %617: i0, in0_valid: %618: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %619: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer103"}
    sv.assign %_handshake_buffer103_out0_valid, %handshake_buffer103.out0_valid : i1
    sv.assign %_handshake_buffer103_out0, %handshake_buffer103.out0 : i0
    sv.assign %_handshake_buffer103_in0_ready, %handshake_buffer103.in0_ready : i1
    %620 = sv.read_inout %_handshake_fork17_out2 : !hw.inout<i0>
    %621 = sv.read_inout %_handshake_fork17_out2_valid : !hw.inout<i1>
    %622 = sv.read_inout %_handshake_load1_ctrl_ready : !hw.inout<i1>
    %handshake_buffer104.in0_ready, %handshake_buffer104.out0, %handshake_buffer104.out0_valid = hw.instance "handshake_buffer104" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %620: i0, in0_valid: %621: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %622: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer104"}
    sv.assign %_handshake_buffer104_out0_valid, %handshake_buffer104.out0_valid : i1
    sv.assign %_handshake_buffer104_out0, %handshake_buffer104.out0 : i0
    sv.assign %_handshake_buffer104_in0_ready, %handshake_buffer104.in0_ready : i1
    %623 = sv.read_inout %_handshake_fork17_out1 : !hw.inout<i0>
    %624 = sv.read_inout %_handshake_fork17_out1_valid : !hw.inout<i1>
    %625 = sv.read_inout %_handshake_join5_in0_ready : !hw.inout<i1>
    %handshake_buffer105.in0_ready, %handshake_buffer105.out0, %handshake_buffer105.out0_valid = hw.instance "handshake_buffer105" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %623: i0, in0_valid: %624: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %625: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer105"}
    sv.assign %_handshake_buffer105_out0_valid, %handshake_buffer105.out0_valid : i1
    sv.assign %_handshake_buffer105_out0, %handshake_buffer105.out0 : i0
    sv.assign %_handshake_buffer105_in0_ready, %handshake_buffer105.in0_ready : i1
    %626 = sv.read_inout %_handshake_fork17_out0 : !hw.inout<i0>
    %627 = sv.read_inout %_handshake_fork17_out0_valid : !hw.inout<i1>
    %628 = sv.read_inout %_handshake_store6_ctrl_ready : !hw.inout<i1>
    %handshake_buffer106.in0_ready, %handshake_buffer106.out0, %handshake_buffer106.out0_valid = hw.instance "handshake_buffer106" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %626: i0, in0_valid: %627: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %628: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer106"}
    sv.assign %_handshake_buffer106_out0_valid, %handshake_buffer106.out0_valid : i1
    sv.assign %_handshake_buffer106_out0, %handshake_buffer106.out0 : i0
    sv.assign %_handshake_buffer106_in0_ready, %handshake_buffer106.in0_ready : i1
    %629 = sv.read_inout %_handshake_buffer15_out0 : !hw.inout<i0>
    %630 = sv.read_inout %_handshake_buffer15_out0_valid : !hw.inout<i1>
    %631 = sv.read_inout %_handshake_buffer16_out0 : !hw.inout<i0>
    %632 = sv.read_inout %_handshake_buffer16_out0_valid : !hw.inout<i1>
    %633 = sv.read_inout %_handshake_buffer26_out0 : !hw.inout<i0>
    %634 = sv.read_inout %_handshake_buffer26_out0_valid : !hw.inout<i1>
    %635 = sv.read_inout %_handshake_buffer105_out0 : !hw.inout<i0>
    %636 = sv.read_inout %_handshake_buffer105_out0_valid : !hw.inout<i1>
    %637 = sv.read_inout %_handshake_buffer107_in0_ready : !hw.inout<i1>
    %handshake_join5.in0_ready, %handshake_join5.in1_ready, %handshake_join5.in2_ready, %handshake_join5.in3_ready, %handshake_join5.out0, %handshake_join5.out0_valid = hw.instance "handshake_join5" @handshake_join_4ins_1outs_ctrl(in0: %635: i0, in0_valid: %636: i1, in1: %633: i0, in1_valid: %634: i1, in2: %631: i0, in2_valid: %632: i1, in3: %629: i0, in3_valid: %630: i1, out0_ready: %637: i1) -> (in0_ready: i1, in1_ready: i1, in2_ready: i1, in3_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_join5"}
    sv.assign %_handshake_join5_out0_valid, %handshake_join5.out0_valid : i1
    sv.assign %_handshake_join5_out0, %handshake_join5.out0 : i0
    sv.assign %_handshake_join5_in3_ready, %handshake_join5.in3_ready : i1
    sv.assign %_handshake_join5_in2_ready, %handshake_join5.in2_ready : i1
    sv.assign %_handshake_join5_in1_ready, %handshake_join5.in1_ready : i1
    sv.assign %_handshake_join5_in0_ready, %handshake_join5.in0_ready : i1
    %638 = sv.read_inout %_handshake_mux0_in1_ready : !hw.inout<i1>
    %639 = sv.read_inout %_handshake_join5_out0 : !hw.inout<i0>
    %640 = sv.read_inout %_handshake_join5_out0_valid : !hw.inout<i1>
    %handshake_buffer107.in0_ready, %handshake_buffer107.out0, %handshake_buffer107.out0_valid = hw.instance "handshake_buffer107" @handshake_buffer_2slots_seq_1ins_1outs_ctrl(in0: %639: i0, in0_valid: %640: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %638: i1) -> (in0_ready: i1, out0: i0, out0_valid: i1) {hw.verilogName = "handshake_buffer107"}
    sv.assign %_handshake_buffer107_out0_valid, %handshake_buffer107.out0_valid : i1
    sv.assign %_handshake_buffer107_out0, %handshake_buffer107.out0 : i0
    sv.assign %_handshake_buffer107_in0_ready, %handshake_buffer107.in0_ready : i1
    %641 = sv.read_inout %_handshake_buffer30_out0 : !hw.inout<i64>
    %642 = sv.read_inout %_handshake_buffer30_out0_valid : !hw.inout<i1>
    %643 = sv.read_inout %_handshake_buffer95_out0 : !hw.inout<i64>
    %644 = sv.read_inout %_handshake_buffer95_out0_valid : !hw.inout<i1>
    %645 = sv.read_inout %_handshake_buffer103_out0 : !hw.inout<i0>
    %646 = sv.read_inout %_handshake_buffer103_out0_valid : !hw.inout<i1>
    %647 = sv.read_inout %_handshake_buffer108_in0_ready : !hw.inout<i1>
    %648 = sv.read_inout %_handshake_buffer109_in0_ready : !hw.inout<i1>
    %handshake_load0.addrIn0_ready, %handshake_load0.dataFromMem_ready, %handshake_load0.ctrl_ready, %handshake_load0.dataOut, %handshake_load0.dataOut_valid, %handshake_load0.addrOut0, %handshake_load0.addrOut0_valid = hw.instance "handshake_load0" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %643: i64, addrIn0_valid: %644: i1, dataFromMem: %641: i64, dataFromMem_valid: %642: i1, ctrl: %645: i0, ctrl_valid: %646: i1, dataOut_ready: %648: i1, addrOut0_ready: %647: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1) {hw.verilogName = "handshake_load0"}
    sv.assign %_handshake_load0_addrOut0_valid, %handshake_load0.addrOut0_valid : i1
    sv.assign %_handshake_load0_addrOut0, %handshake_load0.addrOut0 : i64
    sv.assign %_handshake_load0_dataOut_valid, %handshake_load0.dataOut_valid : i1
    sv.assign %_handshake_load0_dataOut, %handshake_load0.dataOut : i64
    sv.assign %_handshake_load0_ctrl_ready, %handshake_load0.ctrl_ready : i1
    sv.assign %_handshake_load0_dataFromMem_ready, %handshake_load0.dataFromMem_ready : i1
    sv.assign %_handshake_load0_addrIn0_ready, %handshake_load0.addrIn0_ready : i1
    %649 = sv.read_inout %_handshake_memory2_ldAddr0_ready : !hw.inout<i1>
    %650 = sv.read_inout %_handshake_load0_addrOut0 : !hw.inout<i64>
    %651 = sv.read_inout %_handshake_load0_addrOut0_valid : !hw.inout<i1>
    %handshake_buffer108.in0_ready, %handshake_buffer108.out0, %handshake_buffer108.out0_valid = hw.instance "handshake_buffer108" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %650: i64, in0_valid: %651: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %649: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer108"}
    sv.assign %_handshake_buffer108_out0_valid, %handshake_buffer108.out0_valid : i1
    sv.assign %_handshake_buffer108_out0, %handshake_buffer108.out0 : i64
    sv.assign %_handshake_buffer108_in0_ready, %handshake_buffer108.in0_ready : i1
    %652 = sv.read_inout %_handshake_load0_dataOut : !hw.inout<i64>
    %653 = sv.read_inout %_handshake_load0_dataOut_valid : !hw.inout<i1>
    %654 = sv.read_inout %_arith_addi0_in0_ready : !hw.inout<i1>
    %handshake_buffer109.in0_ready, %handshake_buffer109.out0, %handshake_buffer109.out0_valid = hw.instance "handshake_buffer109" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %652: i64, in0_valid: %653: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %654: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer109"}
    sv.assign %_handshake_buffer109_out0_valid, %handshake_buffer109.out0_valid : i1
    sv.assign %_handshake_buffer109_out0, %handshake_buffer109.out0 : i64
    sv.assign %_handshake_buffer109_in0_ready, %handshake_buffer109.in0_ready : i1
    %655 = sv.read_inout %_handshake_buffer20_out0 : !hw.inout<i64>
    %656 = sv.read_inout %_handshake_buffer20_out0_valid : !hw.inout<i1>
    %657 = sv.read_inout %_handshake_buffer94_out0 : !hw.inout<i64>
    %658 = sv.read_inout %_handshake_buffer94_out0_valid : !hw.inout<i1>
    %659 = sv.read_inout %_handshake_buffer104_out0 : !hw.inout<i0>
    %660 = sv.read_inout %_handshake_buffer104_out0_valid : !hw.inout<i1>
    %661 = sv.read_inout %_handshake_buffer110_in0_ready : !hw.inout<i1>
    %662 = sv.read_inout %_handshake_buffer111_in0_ready : !hw.inout<i1>
    %handshake_load1.addrIn0_ready, %handshake_load1.dataFromMem_ready, %handshake_load1.ctrl_ready, %handshake_load1.dataOut, %handshake_load1.dataOut_valid, %handshake_load1.addrOut0, %handshake_load1.addrOut0_valid = hw.instance "handshake_load1" @handshake_load_in_ui64_ui64_out_ui64_ui64(addrIn0: %657: i64, addrIn0_valid: %658: i1, dataFromMem: %655: i64, dataFromMem_valid: %656: i1, ctrl: %659: i0, ctrl_valid: %660: i1, dataOut_ready: %662: i1, addrOut0_ready: %661: i1) -> (addrIn0_ready: i1, dataFromMem_ready: i1, ctrl_ready: i1, dataOut: i64, dataOut_valid: i1, addrOut0: i64, addrOut0_valid: i1) {hw.verilogName = "handshake_load1"}
    sv.assign %_handshake_load1_addrOut0_valid, %handshake_load1.addrOut0_valid : i1
    sv.assign %_handshake_load1_addrOut0, %handshake_load1.addrOut0 : i64
    sv.assign %_handshake_load1_dataOut_valid, %handshake_load1.dataOut_valid : i1
    sv.assign %_handshake_load1_dataOut, %handshake_load1.dataOut : i64
    sv.assign %_handshake_load1_ctrl_ready, %handshake_load1.ctrl_ready : i1
    sv.assign %_handshake_load1_dataFromMem_ready, %handshake_load1.dataFromMem_ready : i1
    sv.assign %_handshake_load1_addrIn0_ready, %handshake_load1.addrIn0_ready : i1
    %663 = sv.read_inout %_handshake_memory1_ldAddr0_ready : !hw.inout<i1>
    %664 = sv.read_inout %_handshake_load1_addrOut0 : !hw.inout<i64>
    %665 = sv.read_inout %_handshake_load1_addrOut0_valid : !hw.inout<i1>
    %handshake_buffer110.in0_ready, %handshake_buffer110.out0, %handshake_buffer110.out0_valid = hw.instance "handshake_buffer110" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %664: i64, in0_valid: %665: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %663: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer110"}
    sv.assign %_handshake_buffer110_out0_valid, %handshake_buffer110.out0_valid : i1
    sv.assign %_handshake_buffer110_out0, %handshake_buffer110.out0 : i64
    sv.assign %_handshake_buffer110_in0_ready, %handshake_buffer110.in0_ready : i1
    %666 = sv.read_inout %_handshake_load1_dataOut : !hw.inout<i64>
    %667 = sv.read_inout %_handshake_load1_dataOut_valid : !hw.inout<i1>
    %668 = sv.read_inout %_arith_addi0_in1_ready : !hw.inout<i1>
    %handshake_buffer111.in0_ready, %handshake_buffer111.out0, %handshake_buffer111.out0_valid = hw.instance "handshake_buffer111" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %666: i64, in0_valid: %667: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %668: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer111"}
    sv.assign %_handshake_buffer111_out0_valid, %handshake_buffer111.out0_valid : i1
    sv.assign %_handshake_buffer111_out0, %handshake_buffer111.out0 : i64
    sv.assign %_handshake_buffer111_in0_ready, %handshake_buffer111.in0_ready : i1
    %669 = sv.read_inout %_handshake_buffer109_out0 : !hw.inout<i64>
    %670 = sv.read_inout %_handshake_buffer109_out0_valid : !hw.inout<i1>
    %671 = sv.read_inout %_handshake_buffer111_out0 : !hw.inout<i64>
    %672 = sv.read_inout %_handshake_buffer111_out0_valid : !hw.inout<i1>
    %673 = sv.read_inout %_handshake_buffer112_in0_ready : !hw.inout<i1>
    %arith_addi0.in0_ready, %arith_addi0.in1_ready, %arith_addi0.out0, %arith_addi0.out0_valid = hw.instance "arith_addi0" @arith_addi_in_ui64_ui64_out_ui64(in0: %669: i64, in0_valid: %670: i1, in1: %671: i64, in1_valid: %672: i1, out0_ready: %673: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "arith_addi0"}
    sv.assign %_arith_addi0_out0_valid, %arith_addi0.out0_valid : i1
    sv.assign %_arith_addi0_out0, %arith_addi0.out0 : i64
    sv.assign %_arith_addi0_in1_ready, %arith_addi0.in1_ready : i1
    sv.assign %_arith_addi0_in0_ready, %arith_addi0.in0_ready : i1
    %674 = sv.read_inout %_arith_addi0_out0 : !hw.inout<i64>
    %675 = sv.read_inout %_arith_addi0_out0_valid : !hw.inout<i1>
    %676 = sv.read_inout %_handshake_store6_dataIn_ready : !hw.inout<i1>
    %handshake_buffer112.in0_ready, %handshake_buffer112.out0, %handshake_buffer112.out0_valid = hw.instance "handshake_buffer112" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %674: i64, in0_valid: %675: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %676: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer112"}
    sv.assign %_handshake_buffer112_out0_valid, %handshake_buffer112.out0_valid : i1
    sv.assign %_handshake_buffer112_out0, %handshake_buffer112.out0 : i64
    sv.assign %_handshake_buffer112_in0_ready, %handshake_buffer112.in0_ready : i1
    %677 = sv.read_inout %_handshake_buffer93_out0 : !hw.inout<i64>
    %678 = sv.read_inout %_handshake_buffer93_out0_valid : !hw.inout<i1>
    %679 = sv.read_inout %_handshake_buffer106_out0 : !hw.inout<i0>
    %680 = sv.read_inout %_handshake_buffer106_out0_valid : !hw.inout<i1>
    %681 = sv.read_inout %_handshake_buffer112_out0 : !hw.inout<i64>
    %682 = sv.read_inout %_handshake_buffer112_out0_valid : !hw.inout<i1>
    %683 = sv.read_inout %_handshake_buffer113_in0_ready : !hw.inout<i1>
    %684 = sv.read_inout %_handshake_buffer114_in0_ready : !hw.inout<i1>
    %handshake_store6.addrIn0_ready, %handshake_store6.dataIn_ready, %handshake_store6.ctrl_ready, %handshake_store6.dataToMem, %handshake_store6.dataToMem_valid, %handshake_store6.addrOut0, %handshake_store6.addrOut0_valid = hw.instance "handshake_store6" @handshake_store_in_ui64_ui64_out_ui64_ui64(addrIn0: %677: i64, addrIn0_valid: %678: i1, dataIn: %681: i64, dataIn_valid: %682: i1, ctrl: %679: i0, ctrl_valid: %680: i1, dataToMem_ready: %684: i1, addrOut0_ready: %683: i1) -> (addrIn0_ready: i1, dataIn_ready: i1, ctrl_ready: i1, dataToMem: i64, dataToMem_valid: i1, addrOut0: i64, addrOut0_valid: i1) {hw.verilogName = "handshake_store6"}
    sv.assign %_handshake_store6_addrOut0_valid, %handshake_store6.addrOut0_valid : i1
    sv.assign %_handshake_store6_addrOut0, %handshake_store6.addrOut0 : i64
    sv.assign %_handshake_store6_dataToMem_valid, %handshake_store6.dataToMem_valid : i1
    sv.assign %_handshake_store6_dataToMem, %handshake_store6.dataToMem : i64
    sv.assign %_handshake_store6_ctrl_ready, %handshake_store6.ctrl_ready : i1
    sv.assign %_handshake_store6_dataIn_ready, %handshake_store6.dataIn_ready : i1
    sv.assign %_handshake_store6_addrIn0_ready, %handshake_store6.addrIn0_ready : i1
    %685 = sv.read_inout %_handshake_memory0_stAddr0_ready : !hw.inout<i1>
    %686 = sv.read_inout %_handshake_store6_addrOut0 : !hw.inout<i64>
    %687 = sv.read_inout %_handshake_store6_addrOut0_valid : !hw.inout<i1>
    %handshake_buffer113.in0_ready, %handshake_buffer113.out0, %handshake_buffer113.out0_valid = hw.instance "handshake_buffer113" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %686: i64, in0_valid: %687: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %685: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer113"}
    sv.assign %_handshake_buffer113_out0_valid, %handshake_buffer113.out0_valid : i1
    sv.assign %_handshake_buffer113_out0, %handshake_buffer113.out0 : i64
    sv.assign %_handshake_buffer113_in0_ready, %handshake_buffer113.in0_ready : i1
    %688 = sv.read_inout %_handshake_memory0_stData0_ready : !hw.inout<i1>
    %689 = sv.read_inout %_handshake_store6_dataToMem : !hw.inout<i64>
    %690 = sv.read_inout %_handshake_store6_dataToMem_valid : !hw.inout<i1>
    %handshake_buffer114.in0_ready, %handshake_buffer114.out0, %handshake_buffer114.out0_valid = hw.instance "handshake_buffer114" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %689: i64, in0_valid: %690: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %688: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer114"}
    sv.assign %_handshake_buffer114_out0_valid, %handshake_buffer114.out0_valid : i1
    sv.assign %_handshake_buffer114_out0, %handshake_buffer114.out0 : i64
    sv.assign %_handshake_buffer114_in0_ready, %handshake_buffer114.in0_ready : i1
    %691 = sv.read_inout %_handshake_buffer96_out0 : !hw.inout<i64>
    %692 = sv.read_inout %_handshake_buffer96_out0_valid : !hw.inout<i1>
    %693 = sv.read_inout %_handshake_buffer99_out0 : !hw.inout<i64>
    %694 = sv.read_inout %_handshake_buffer99_out0_valid : !hw.inout<i1>
    %695 = sv.read_inout %_handshake_buffer115_in0_ready : !hw.inout<i1>
    %arith_addi1.in0_ready, %arith_addi1.in1_ready, %arith_addi1.out0, %arith_addi1.out0_valid = hw.instance "arith_addi1" @arith_addi_in_ui64_ui64_out_ui64(in0: %691: i64, in0_valid: %692: i1, in1: %693: i64, in1_valid: %694: i1, out0_ready: %695: i1) -> (in0_ready: i1, in1_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "arith_addi1"}
    sv.assign %_arith_addi1_out0_valid, %arith_addi1.out0_valid : i1
    sv.assign %_arith_addi1_out0, %arith_addi1.out0 : i64
    sv.assign %_arith_addi1_in1_ready, %arith_addi1.in1_ready : i1
    sv.assign %_arith_addi1_in0_ready, %arith_addi1.in0_ready : i1
    %696 = sv.read_inout %_handshake_mux1_in1_ready : !hw.inout<i1>
    %697 = sv.read_inout %_arith_addi1_out0 : !hw.inout<i64>
    %698 = sv.read_inout %_arith_addi1_out0_valid : !hw.inout<i1>
    %handshake_buffer115.in0_ready, %handshake_buffer115.out0, %handshake_buffer115.out0_valid = hw.instance "handshake_buffer115" @handshake_buffer_in_ui64_out_ui64_2slots_seq(in0: %697: i64, in0_valid: %698: i1, clock: %clock: i1, reset: %reset: i1, out0_ready: %696: i1) -> (in0_ready: i1, out0: i64, out0_valid: i1) {hw.verilogName = "handshake_buffer115"}
    sv.assign %_handshake_buffer115_out0_valid, %handshake_buffer115.out0_valid : i1
    sv.assign %_handshake_buffer115_out0, %handshake_buffer115.out0 : i64
    sv.assign %_handshake_buffer115_in0_ready, %handshake_buffer115.in0_ready : i1
    hw.output %handshake_buffer0.in0_ready, %handshake_buffer101.out0, %handshake_buffer101.out0_valid : i1, i0, i1
  }
}


