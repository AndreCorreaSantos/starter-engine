// Generated by CIRCT unknown git version
module handshake_buffer_2slots_seq_1ins_1outs_ctrl(	// hlsinput.mlir:2:3
  // input  /*Zero Width*/ in0,
     input                 in0_valid,
                           clock,
                           reset,
                           out0_ready,
     output                in0_ready,
  // output /*Zero Width*/ out0,
     output                out0_valid
);

  reg  ready1_reg;	// hlsinput.mlir:2:3
  reg  ready0_reg;	// hlsinput.mlir:2:3
  reg  valid0_reg;	// hlsinput.mlir:2:3
  wire _GEN = ~valid0_reg | ~ready0_reg;	// hlsinput.mlir:2:3
  reg  valid1_reg;	// hlsinput.mlir:2:3
  wire _GEN_0 = ~valid1_reg | ~ready1_reg;	// hlsinput.mlir:2:3
  always_ff @(posedge clock) begin	// hlsinput.mlir:2:3
    if (reset) begin	// hlsinput.mlir:2:3
      valid0_reg <= 1'h0;	// hlsinput.mlir:2:3
      ready0_reg <= 1'h0;	// hlsinput.mlir:2:3
      valid1_reg <= 1'h0;	// hlsinput.mlir:2:3
      ready1_reg <= 1'h0;	// hlsinput.mlir:2:3
    end
    else begin	// hlsinput.mlir:2:3
      valid0_reg <= _GEN ? in0_valid : valid0_reg;	// hlsinput.mlir:2:3
      ready0_reg <=
        ~(_GEN_0 & ready0_reg) & (~_GEN_0 & ~ready0_reg ? valid0_reg : ready0_reg);	// hlsinput.mlir:2:3
      valid1_reg <= _GEN_0 ? (ready0_reg ? ready0_reg : valid0_reg) : valid1_reg;	// hlsinput.mlir:2:3
      ready1_reg <=
        ~(out0_ready & ready1_reg)
        & (~out0_ready & ~ready1_reg ? valid1_reg : ready1_reg);	// hlsinput.mlir:2:3
    end
  end // always_ff @(posedge)
  assign in0_ready = _GEN;	// hlsinput.mlir:2:3
  // Zero width: assign out0 = /*Zero width*/;	// hlsinput.mlir:2:3
  assign out0_valid = ready1_reg ? ready1_reg : valid1_reg;	// hlsinput.mlir:2:3
endmodule

module handshake_fork_1ins_14outs_ctrl(	// hlsinput.mlir:2:3
  // input  /*Zero Width*/ in0,
     input                 in0_valid,
                           clock,
                           reset,
                           out0_ready,
                           out1_ready,
                           out2_ready,
                           out3_ready,
                           out4_ready,
                           out5_ready,
                           out6_ready,
                           out7_ready,
                           out8_ready,
                           out9_ready,
                           out10_ready,
                           out11_ready,
                           out12_ready,
                           out13_ready,
     output                in0_ready,
  // output /*Zero Width*/ out0,
     output                out0_valid,
  // output /*Zero Width*/ out1,
     output                out1_valid,
  // output /*Zero Width*/ out2,
     output                out2_valid,
  // output /*Zero Width*/ out3,
     output                out3_valid,
  // output /*Zero Width*/ out4,
     output                out4_valid,
  // output /*Zero Width*/ out5,
     output                out5_valid,
  // output /*Zero Width*/ out6,
     output                out6_valid,
  // output /*Zero Width*/ out7,
     output                out7_valid,
  // output /*Zero Width*/ out8,
     output                out8_valid,
  // output /*Zero Width*/ out9,
     output                out9_valid,
  // output /*Zero Width*/ out10,
     output                out10_valid,
  // output /*Zero Width*/ out11,
     output                out11_valid,
  // output /*Zero Width*/ out12,
     output                out12_valid,
  // output /*Zero Width*/ out13,
     output                out13_valid
);

  wire allDone;	// hlsinput.mlir:2:3
  wire done13;	// hlsinput.mlir:2:3
  reg  emitted_0;	// hlsinput.mlir:2:3
  wire _GEN = ~emitted_0 & in0_valid;	// hlsinput.mlir:2:3
  wire done0 = out0_ready & _GEN | emitted_0;	// hlsinput.mlir:2:3
  reg  emitted_1;	// hlsinput.mlir:2:3
  wire _GEN_0 = ~emitted_1 & in0_valid;	// hlsinput.mlir:2:3
  wire done1 = out1_ready & _GEN_0 | emitted_1;	// hlsinput.mlir:2:3
  reg  emitted_2;	// hlsinput.mlir:2:3
  wire _GEN_1 = ~emitted_2 & in0_valid;	// hlsinput.mlir:2:3
  wire done2 = out2_ready & _GEN_1 | emitted_2;	// hlsinput.mlir:2:3
  reg  emitted_3;	// hlsinput.mlir:2:3
  wire _GEN_2 = ~emitted_3 & in0_valid;	// hlsinput.mlir:2:3
  wire done3 = out3_ready & _GEN_2 | emitted_3;	// hlsinput.mlir:2:3
  reg  emitted_4;	// hlsinput.mlir:2:3
  wire _GEN_3 = ~emitted_4 & in0_valid;	// hlsinput.mlir:2:3
  wire done4 = out4_ready & _GEN_3 | emitted_4;	// hlsinput.mlir:2:3
  reg  emitted_5;	// hlsinput.mlir:2:3
  wire _GEN_4 = ~emitted_5 & in0_valid;	// hlsinput.mlir:2:3
  wire done5 = out5_ready & _GEN_4 | emitted_5;	// hlsinput.mlir:2:3
  reg  emitted_6;	// hlsinput.mlir:2:3
  wire _GEN_5 = ~emitted_6 & in0_valid;	// hlsinput.mlir:2:3
  wire done6 = out6_ready & _GEN_5 | emitted_6;	// hlsinput.mlir:2:3
  reg  emitted_7;	// hlsinput.mlir:2:3
  wire _GEN_6 = ~emitted_7 & in0_valid;	// hlsinput.mlir:2:3
  wire done7 = out7_ready & _GEN_6 | emitted_7;	// hlsinput.mlir:2:3
  reg  emitted_8;	// hlsinput.mlir:2:3
  wire _GEN_7 = ~emitted_8 & in0_valid;	// hlsinput.mlir:2:3
  wire done8 = out8_ready & _GEN_7 | emitted_8;	// hlsinput.mlir:2:3
  reg  emitted_9;	// hlsinput.mlir:2:3
  wire _GEN_8 = ~emitted_9 & in0_valid;	// hlsinput.mlir:2:3
  wire done9 = out9_ready & _GEN_8 | emitted_9;	// hlsinput.mlir:2:3
  reg  emitted_10;	// hlsinput.mlir:2:3
  wire _GEN_9 = ~emitted_10 & in0_valid;	// hlsinput.mlir:2:3
  wire done10 = out10_ready & _GEN_9 | emitted_10;	// hlsinput.mlir:2:3
  reg  emitted_11;	// hlsinput.mlir:2:3
  wire _GEN_10 = ~emitted_11 & in0_valid;	// hlsinput.mlir:2:3
  wire done11 = out11_ready & _GEN_10 | emitted_11;	// hlsinput.mlir:2:3
  reg  emitted_12;	// hlsinput.mlir:2:3
  wire _GEN_11 = ~emitted_12 & in0_valid;	// hlsinput.mlir:2:3
  wire done12 = out12_ready & _GEN_11 | emitted_12;	// hlsinput.mlir:2:3
  reg  emitted_13;	// hlsinput.mlir:2:3
  always_ff @(posedge clock) begin	// hlsinput.mlir:2:3
    if (reset) begin	// hlsinput.mlir:2:3
      emitted_0 <= 1'h0;	// hlsinput.mlir:2:3
      emitted_1 <= 1'h0;	// hlsinput.mlir:2:3
      emitted_2 <= 1'h0;	// hlsinput.mlir:2:3
      emitted_3 <= 1'h0;	// hlsinput.mlir:2:3
      emitted_4 <= 1'h0;	// hlsinput.mlir:2:3
      emitted_5 <= 1'h0;	// hlsinput.mlir:2:3
      emitted_6 <= 1'h0;	// hlsinput.mlir:2:3
      emitted_7 <= 1'h0;	// hlsinput.mlir:2:3
      emitted_8 <= 1'h0;	// hlsinput.mlir:2:3
      emitted_9 <= 1'h0;	// hlsinput.mlir:2:3
      emitted_10 <= 1'h0;	// hlsinput.mlir:2:3
      emitted_11 <= 1'h0;	// hlsinput.mlir:2:3
      emitted_12 <= 1'h0;	// hlsinput.mlir:2:3
      emitted_13 <= 1'h0;	// hlsinput.mlir:2:3
    end
    else begin	// hlsinput.mlir:2:3
      emitted_0 <= done0 & ~allDone;	// hlsinput.mlir:2:3
      emitted_1 <= done1 & ~allDone;	// hlsinput.mlir:2:3
      emitted_2 <= done2 & ~allDone;	// hlsinput.mlir:2:3
      emitted_3 <= done3 & ~allDone;	// hlsinput.mlir:2:3
      emitted_4 <= done4 & ~allDone;	// hlsinput.mlir:2:3
      emitted_5 <= done5 & ~allDone;	// hlsinput.mlir:2:3
      emitted_6 <= done6 & ~allDone;	// hlsinput.mlir:2:3
      emitted_7 <= done7 & ~allDone;	// hlsinput.mlir:2:3
      emitted_8 <= done8 & ~allDone;	// hlsinput.mlir:2:3
      emitted_9 <= done9 & ~allDone;	// hlsinput.mlir:2:3
      emitted_10 <= done10 & ~allDone;	// hlsinput.mlir:2:3
      emitted_11 <= done11 & ~allDone;	// hlsinput.mlir:2:3
      emitted_12 <= done12 & ~allDone;	// hlsinput.mlir:2:3
      emitted_13 <= done13 & ~allDone;	// hlsinput.mlir:2:3
    end
  end // always_ff @(posedge)
  wire _GEN_12 = ~emitted_13 & in0_valid;	// hlsinput.mlir:2:3
  assign done13 = out13_ready & _GEN_12 | emitted_13;	// hlsinput.mlir:2:3
  assign allDone =
    done0 & done1 & done2 & done3 & done4 & done5 & done6 & done7 & done8 & done9 & done10
    & done11 & done12 & done13;	// hlsinput.mlir:2:3
  assign in0_ready = allDone;	// hlsinput.mlir:2:3
  // Zero width: assign out0 = in0;	// hlsinput.mlir:2:3
  assign out0_valid = _GEN;	// hlsinput.mlir:2:3
  // Zero width: assign out1 = in0;	// hlsinput.mlir:2:3
  assign out1_valid = _GEN_0;	// hlsinput.mlir:2:3
  // Zero width: assign out2 = in0;	// hlsinput.mlir:2:3
  assign out2_valid = _GEN_1;	// hlsinput.mlir:2:3
  // Zero width: assign out3 = in0;	// hlsinput.mlir:2:3
  assign out3_valid = _GEN_2;	// hlsinput.mlir:2:3
  // Zero width: assign out4 = in0;	// hlsinput.mlir:2:3
  assign out4_valid = _GEN_3;	// hlsinput.mlir:2:3
  // Zero width: assign out5 = in0;	// hlsinput.mlir:2:3
  assign out5_valid = _GEN_4;	// hlsinput.mlir:2:3
  // Zero width: assign out6 = in0;	// hlsinput.mlir:2:3
  assign out6_valid = _GEN_5;	// hlsinput.mlir:2:3
  // Zero width: assign out7 = in0;	// hlsinput.mlir:2:3
  assign out7_valid = _GEN_6;	// hlsinput.mlir:2:3
  // Zero width: assign out8 = in0;	// hlsinput.mlir:2:3
  assign out8_valid = _GEN_7;	// hlsinput.mlir:2:3
  // Zero width: assign out9 = in0;	// hlsinput.mlir:2:3
  assign out9_valid = _GEN_8;	// hlsinput.mlir:2:3
  // Zero width: assign out10 = in0;	// hlsinput.mlir:2:3
  assign out10_valid = _GEN_9;	// hlsinput.mlir:2:3
  // Zero width: assign out11 = in0;	// hlsinput.mlir:2:3
  assign out11_valid = _GEN_10;	// hlsinput.mlir:2:3
  // Zero width: assign out12 = in0;	// hlsinput.mlir:2:3
  assign out12_valid = _GEN_11;	// hlsinput.mlir:2:3
  // Zero width: assign out13 = in0;	// hlsinput.mlir:2:3
  assign out13_valid = _GEN_12;	// hlsinput.mlir:2:3
endmodule

module handshake_memory_out_ui64_id2(	// hlsinput.mlir:3:11
     input  [63:0]         stData0,
     input                 stData0_valid,
     input  [63:0]         stAddr0,
     input                 stAddr0_valid,
                           clock,
                           reset,
                           stDone0_ready,
     output                stData0_ready,
                           stAddr0_ready,
  // output /*Zero Width*/ stDone0,
     output                stDone0_valid
);

  wire        emptyOrComplete;	// hlsinput.mlir:3:11
  reg  [63:0] _handshake_memory_2[0:2];	// hlsinput.mlir:3:11
  reg         writeValidBuffer;	// hlsinput.mlir:3:11
  always_ff @(posedge clock) begin	// hlsinput.mlir:3:11
    if (reset)	// hlsinput.mlir:3:11
      writeValidBuffer <= 1'h0;	// hlsinput.mlir:3:11
    else begin	// hlsinput.mlir:3:11
      automatic logic writeValid = stAddr0_valid & stData0_valid;	// hlsinput.mlir:3:11
      if (writeValid)	// hlsinput.mlir:3:11
        _handshake_memory_2[stAddr0[1:0]] <= stData0;	// hlsinput.mlir:3:11
      writeValidBuffer <= emptyOrComplete ? writeValid : writeValidBuffer;	// hlsinput.mlir:3:11
    end
  end // always_ff @(posedge)
  assign emptyOrComplete = ~writeValidBuffer | stDone0_ready & writeValidBuffer;	// hlsinput.mlir:3:11
  assign stData0_ready = emptyOrComplete;	// hlsinput.mlir:3:11
  assign stAddr0_ready = emptyOrComplete;	// hlsinput.mlir:3:11
  // Zero width: assign stDone0 = /*Zero width*/;	// hlsinput.mlir:3:11
  assign stDone0_valid = writeValidBuffer;	// hlsinput.mlir:3:11
endmodule

module handshake_memory_out_ui64_id1(	// hlsinput.mlir:3:11
     input  [63:0]         stData0,
     input                 stData0_valid,
     input  [63:0]         stAddr0,
     input                 stAddr0_valid,
     input  [63:0]         stData1,
     input                 stData1_valid,
     input  [63:0]         stAddr1,
     input                 stAddr1_valid,
     input  [63:0]         stData2,
     input                 stData2_valid,
     input  [63:0]         stAddr2,
     input                 stAddr2_valid,
     input  [63:0]         ldAddr0,
     input                 ldAddr0_valid,
                           clock,
                           reset,
                           ldData0_ready,
                           stDone0_ready,
                           stDone1_ready,
                           stDone2_ready,
                           ldDone0_ready,
     output                stData0_ready,
                           stAddr0_ready,
                           stData1_ready,
                           stAddr1_ready,
                           stData2_ready,
                           stAddr2_ready,
                           ldAddr0_ready,
     output [63:0]         ldData0,
     output                ldData0_valid,
  // output /*Zero Width*/ stDone0,
     output                stDone0_valid,
  // output /*Zero Width*/ stDone1,
     output                stDone1_valid,
  // output /*Zero Width*/ stDone2,
     output                stDone2_valid,
  // output /*Zero Width*/ ldDone0,
     output                ldDone0_valid
);

  wire        emptyOrComplete;	// hlsinput.mlir:3:11
  reg  [63:0] _handshake_memory_1[0:2];	// hlsinput.mlir:3:11
  reg         emitted_0;	// hlsinput.mlir:3:11
  wire        _GEN = ~emitted_0 & ldAddr0_valid;	// hlsinput.mlir:3:11
  wire        done0 = ldData0_ready & _GEN | emitted_0;	// hlsinput.mlir:3:11
  reg         emitted_1;	// hlsinput.mlir:3:11
  wire        _GEN_0 = ~emitted_1 & ldAddr0_valid;	// hlsinput.mlir:3:11
  wire        done1 = ldDone0_ready & _GEN_0 | emitted_1;	// hlsinput.mlir:3:11
  wire        allDone = done0 & done1;	// hlsinput.mlir:3:11
  reg         writeValidBuffer;	// hlsinput.mlir:3:11
  wire        emptyOrComplete_0 = ~writeValidBuffer | stDone0_ready & writeValidBuffer;	// hlsinput.mlir:3:11
  reg         writeValidBuffer_0;	// hlsinput.mlir:3:11
  wire        emptyOrComplete_1 =
    ~writeValidBuffer_0 | stDone1_ready & writeValidBuffer_0;	// hlsinput.mlir:3:11
  reg         writeValidBuffer_1;	// hlsinput.mlir:3:11
  always_ff @(posedge clock) begin	// hlsinput.mlir:3:11
    if (reset) begin	// hlsinput.mlir:3:11
      emitted_0 <= 1'h0;	// hlsinput.mlir:3:11
      emitted_1 <= 1'h0;	// hlsinput.mlir:3:11
      writeValidBuffer <= 1'h0;	// hlsinput.mlir:3:11
      writeValidBuffer_0 <= 1'h0;	// hlsinput.mlir:3:11
      writeValidBuffer_1 <= 1'h0;	// hlsinput.mlir:3:11
    end
    else begin	// hlsinput.mlir:3:11
      automatic logic writeValid = stAddr0_valid & stData0_valid;	// hlsinput.mlir:3:11
      automatic logic writeValid_0 = stAddr1_valid & stData1_valid;	// hlsinput.mlir:3:11
      automatic logic writeValid_1 = stAddr2_valid & stData2_valid;	// hlsinput.mlir:3:11
      if (writeValid_1)	// hlsinput.mlir:3:11
        _handshake_memory_1[stAddr2[1:0]] <= stData2;	// hlsinput.mlir:3:11
      if (writeValid_0)	// hlsinput.mlir:3:11
        _handshake_memory_1[stAddr1[1:0]] <= stData1;	// hlsinput.mlir:3:11
      if (writeValid)	// hlsinput.mlir:3:11
        _handshake_memory_1[stAddr0[1:0]] <= stData0;	// hlsinput.mlir:3:11
      emitted_0 <= done0 & ~allDone;	// hlsinput.mlir:3:11
      emitted_1 <= done1 & ~allDone;	// hlsinput.mlir:3:11
      writeValidBuffer <= emptyOrComplete_0 ? writeValid : writeValidBuffer;	// hlsinput.mlir:3:11
      writeValidBuffer_0 <= emptyOrComplete_1 ? writeValid_0 : writeValidBuffer_0;	// hlsinput.mlir:3:11
      writeValidBuffer_1 <= emptyOrComplete ? writeValid_1 : writeValidBuffer_1;	// hlsinput.mlir:3:11
    end
  end // always_ff @(posedge)
  assign emptyOrComplete = ~writeValidBuffer_1 | stDone2_ready & writeValidBuffer_1;	// hlsinput.mlir:3:11
  assign stData0_ready = emptyOrComplete_0;	// hlsinput.mlir:3:11
  assign stAddr0_ready = emptyOrComplete_0;	// hlsinput.mlir:3:11
  assign stData1_ready = emptyOrComplete_1;	// hlsinput.mlir:3:11
  assign stAddr1_ready = emptyOrComplete_1;	// hlsinput.mlir:3:11
  assign stData2_ready = emptyOrComplete;	// hlsinput.mlir:3:11
  assign stAddr2_ready = emptyOrComplete;	// hlsinput.mlir:3:11
  assign ldAddr0_ready = allDone;	// hlsinput.mlir:3:11
  assign ldData0 = _handshake_memory_1[ldAddr0[1:0]];	// hlsinput.mlir:3:11
  assign ldData0_valid = _GEN;	// hlsinput.mlir:3:11
  // Zero width: assign stDone0 = /*Zero width*/;	// hlsinput.mlir:3:11
  assign stDone0_valid = writeValidBuffer;	// hlsinput.mlir:3:11
  // Zero width: assign stDone1 = /*Zero width*/;	// hlsinput.mlir:3:11
  assign stDone1_valid = writeValidBuffer_0;	// hlsinput.mlir:3:11
  // Zero width: assign stDone2 = /*Zero width*/;	// hlsinput.mlir:3:11
  assign stDone2_valid = writeValidBuffer_1;	// hlsinput.mlir:3:11
  // Zero width: assign ldDone0 = /*Zero width*/;	// hlsinput.mlir:3:11
  assign ldDone0_valid = _GEN_0;	// hlsinput.mlir:3:11
endmodule

module handshake_buffer_in_ui64_out_ui64_2slots_seq(	// hlsinput.mlir:3:11
  input  [63:0] in0,
  input         in0_valid,
                clock,
                reset,
                out0_ready,
  output        in0_ready,
  output [63:0] out0,
  output        out0_valid
);

  reg         ready1_reg;	// hlsinput.mlir:3:11
  reg         ready0_reg;	// hlsinput.mlir:3:11
  reg         valid0_reg;	// hlsinput.mlir:3:11
  wire        _GEN = ~valid0_reg | ~ready0_reg;	// hlsinput.mlir:3:11
  reg  [63:0] data0_reg;	// hlsinput.mlir:3:11
  reg  [63:0] ctrl_data0_reg;	// hlsinput.mlir:3:11
  reg         valid1_reg;	// hlsinput.mlir:3:11
  wire        _GEN_0 = ~valid1_reg | ~ready1_reg;	// hlsinput.mlir:3:11
  reg  [63:0] data1_reg;	// hlsinput.mlir:3:11
  reg  [63:0] ctrl_data1_reg;	// hlsinput.mlir:3:11
  always_ff @(posedge clock) begin	// hlsinput.mlir:3:11
    if (reset) begin	// hlsinput.mlir:3:11
      valid0_reg <= 1'h0;	// hlsinput.mlir:3:11
      data0_reg <= 64'h0;	// hlsinput.mlir:3:11
      ready0_reg <= 1'h0;	// hlsinput.mlir:3:11
      ctrl_data0_reg <= 64'h0;	// hlsinput.mlir:3:11
      valid1_reg <= 1'h0;	// hlsinput.mlir:3:11
      data1_reg <= 64'h0;	// hlsinput.mlir:3:11
      ready1_reg <= 1'h0;	// hlsinput.mlir:3:11
      ctrl_data1_reg <= 64'h0;	// hlsinput.mlir:3:11
    end
    else begin	// hlsinput.mlir:3:11
      automatic logic _GEN_1 = ~_GEN_0 & ~ready0_reg;	// hlsinput.mlir:3:11
      automatic logic _GEN_2 = _GEN_0 & ready0_reg;	// hlsinput.mlir:3:11
      automatic logic _GEN_3 = ~out0_ready & ~ready1_reg;	// hlsinput.mlir:3:11
      automatic logic _GEN_4 = out0_ready & ready1_reg;	// hlsinput.mlir:3:11
      valid0_reg <= _GEN ? in0_valid : valid0_reg;	// hlsinput.mlir:3:11
      data0_reg <= _GEN ? in0 : data0_reg;	// hlsinput.mlir:3:11
      ready0_reg <= ~_GEN_2 & (_GEN_1 ? valid0_reg : ready0_reg);	// hlsinput.mlir:3:11
      ctrl_data0_reg <= _GEN_2 ? 64'h0 : _GEN_1 ? data0_reg : ctrl_data0_reg;	// hlsinput.mlir:3:11
      valid1_reg <= _GEN_0 ? (ready0_reg ? ready0_reg : valid0_reg) : valid1_reg;	// hlsinput.mlir:3:11
      data1_reg <= _GEN_0 ? (ready0_reg ? ctrl_data0_reg : data0_reg) : data1_reg;	// hlsinput.mlir:3:11
      ready1_reg <= ~_GEN_4 & (_GEN_3 ? valid1_reg : ready1_reg);	// hlsinput.mlir:3:11
      ctrl_data1_reg <= _GEN_4 ? 64'h0 : _GEN_3 ? data1_reg : ctrl_data1_reg;	// hlsinput.mlir:3:11
    end
  end // always_ff @(posedge)
  assign in0_ready = _GEN;	// hlsinput.mlir:3:11
  assign out0 = ready1_reg ? ctrl_data1_reg : data1_reg;	// hlsinput.mlir:3:11
  assign out0_valid = ready1_reg ? ready1_reg : valid1_reg;	// hlsinput.mlir:3:11
endmodule

module handshake_fork_1ins_2outs_ctrl(	// hlsinput.mlir:3:11
  // input  /*Zero Width*/ in0,
     input                 in0_valid,
                           clock,
                           reset,
                           out0_ready,
                           out1_ready,
     output                in0_ready,
  // output /*Zero Width*/ out0,
     output                out0_valid,
  // output /*Zero Width*/ out1,
     output                out1_valid
);

  wire allDone;	// hlsinput.mlir:3:11
  wire done1;	// hlsinput.mlir:3:11
  reg  emitted_0;	// hlsinput.mlir:3:11
  wire _GEN = ~emitted_0 & in0_valid;	// hlsinput.mlir:3:11
  wire done0 = out0_ready & _GEN | emitted_0;	// hlsinput.mlir:3:11
  reg  emitted_1;	// hlsinput.mlir:3:11
  always_ff @(posedge clock) begin	// hlsinput.mlir:3:11
    if (reset) begin	// hlsinput.mlir:3:11
      emitted_0 <= 1'h0;	// hlsinput.mlir:3:11
      emitted_1 <= 1'h0;	// hlsinput.mlir:3:11
    end
    else begin	// hlsinput.mlir:3:11
      emitted_0 <= done0 & ~allDone;	// hlsinput.mlir:3:11
      emitted_1 <= done1 & ~allDone;	// hlsinput.mlir:3:11
    end
  end // always_ff @(posedge)
  wire _GEN_0 = ~emitted_1 & in0_valid;	// hlsinput.mlir:3:11
  assign done1 = out1_ready & _GEN_0 | emitted_1;	// hlsinput.mlir:3:11
  assign allDone = done0 & done1;	// hlsinput.mlir:3:11
  assign in0_ready = allDone;	// hlsinput.mlir:3:11
  // Zero width: assign out0 = in0;	// hlsinput.mlir:3:11
  assign out0_valid = _GEN;	// hlsinput.mlir:3:11
  // Zero width: assign out1 = in0;	// hlsinput.mlir:3:11
  assign out1_valid = _GEN_0;	// hlsinput.mlir:3:11
endmodule

module handshake_fork_1ins_3outs_ctrl(	// hlsinput.mlir:3:11
  // input  /*Zero Width*/ in0,
     input                 in0_valid,
                           clock,
                           reset,
                           out0_ready,
                           out1_ready,
                           out2_ready,
     output                in0_ready,
  // output /*Zero Width*/ out0,
     output                out0_valid,
  // output /*Zero Width*/ out1,
     output                out1_valid,
  // output /*Zero Width*/ out2,
     output                out2_valid
);

  wire allDone;	// hlsinput.mlir:3:11
  wire done2;	// hlsinput.mlir:3:11
  reg  emitted_0;	// hlsinput.mlir:3:11
  wire _GEN = ~emitted_0 & in0_valid;	// hlsinput.mlir:3:11
  wire done0 = out0_ready & _GEN | emitted_0;	// hlsinput.mlir:3:11
  reg  emitted_1;	// hlsinput.mlir:3:11
  wire _GEN_0 = ~emitted_1 & in0_valid;	// hlsinput.mlir:3:11
  wire done1 = out1_ready & _GEN_0 | emitted_1;	// hlsinput.mlir:3:11
  reg  emitted_2;	// hlsinput.mlir:3:11
  always_ff @(posedge clock) begin	// hlsinput.mlir:3:11
    if (reset) begin	// hlsinput.mlir:3:11
      emitted_0 <= 1'h0;	// hlsinput.mlir:3:11
      emitted_1 <= 1'h0;	// hlsinput.mlir:3:11
      emitted_2 <= 1'h0;	// hlsinput.mlir:3:11
    end
    else begin	// hlsinput.mlir:3:11
      emitted_0 <= done0 & ~allDone;	// hlsinput.mlir:3:11
      emitted_1 <= done1 & ~allDone;	// hlsinput.mlir:3:11
      emitted_2 <= done2 & ~allDone;	// hlsinput.mlir:3:11
    end
  end // always_ff @(posedge)
  wire _GEN_1 = ~emitted_2 & in0_valid;	// hlsinput.mlir:3:11
  assign done2 = out2_ready & _GEN_1 | emitted_2;	// hlsinput.mlir:3:11
  assign allDone = done0 & done1 & done2;	// hlsinput.mlir:3:11
  assign in0_ready = allDone;	// hlsinput.mlir:3:11
  // Zero width: assign out0 = in0;	// hlsinput.mlir:3:11
  assign out0_valid = _GEN;	// hlsinput.mlir:3:11
  // Zero width: assign out1 = in0;	// hlsinput.mlir:3:11
  assign out1_valid = _GEN_0;	// hlsinput.mlir:3:11
  // Zero width: assign out2 = in0;	// hlsinput.mlir:3:11
  assign out2_valid = _GEN_1;	// hlsinput.mlir:3:11
endmodule

module handshake_memory_out_ui64_id0(	// hlsinput.mlir:3:11
     input  [63:0]         stData0,
     input                 stData0_valid,
     input  [63:0]         stAddr0,
     input                 stAddr0_valid,
     input  [63:0]         stData1,
     input                 stData1_valid,
     input  [63:0]         stAddr1,
     input                 stAddr1_valid,
     input  [63:0]         stData2,
     input                 stData2_valid,
     input  [63:0]         stAddr2,
     input                 stAddr2_valid,
     input  [63:0]         ldAddr0,
     input                 ldAddr0_valid,
                           clock,
                           reset,
                           ldData0_ready,
                           stDone0_ready,
                           stDone1_ready,
                           stDone2_ready,
                           ldDone0_ready,
     output                stData0_ready,
                           stAddr0_ready,
                           stData1_ready,
                           stAddr1_ready,
                           stData2_ready,
                           stAddr2_ready,
                           ldAddr0_ready,
     output [63:0]         ldData0,
     output                ldData0_valid,
  // output /*Zero Width*/ stDone0,
     output                stDone0_valid,
  // output /*Zero Width*/ stDone1,
     output                stDone1_valid,
  // output /*Zero Width*/ stDone2,
     output                stDone2_valid,
  // output /*Zero Width*/ ldDone0,
     output                ldDone0_valid
);

  wire        emptyOrComplete;	// hlsinput.mlir:3:11
  reg  [63:0] _handshake_memory_0[0:2];	// hlsinput.mlir:3:11
  reg         emitted_0;	// hlsinput.mlir:3:11
  wire        _GEN = ~emitted_0 & ldAddr0_valid;	// hlsinput.mlir:3:11
  wire        done0 = ldData0_ready & _GEN | emitted_0;	// hlsinput.mlir:3:11
  reg         emitted_1;	// hlsinput.mlir:3:11
  wire        _GEN_0 = ~emitted_1 & ldAddr0_valid;	// hlsinput.mlir:3:11
  wire        done1 = ldDone0_ready & _GEN_0 | emitted_1;	// hlsinput.mlir:3:11
  wire        allDone = done0 & done1;	// hlsinput.mlir:3:11
  reg         writeValidBuffer;	// hlsinput.mlir:3:11
  wire        emptyOrComplete_0 = ~writeValidBuffer | stDone0_ready & writeValidBuffer;	// hlsinput.mlir:3:11
  reg         writeValidBuffer_0;	// hlsinput.mlir:3:11
  wire        emptyOrComplete_1 =
    ~writeValidBuffer_0 | stDone1_ready & writeValidBuffer_0;	// hlsinput.mlir:3:11
  reg         writeValidBuffer_1;	// hlsinput.mlir:3:11
  always_ff @(posedge clock) begin	// hlsinput.mlir:3:11
    if (reset) begin	// hlsinput.mlir:3:11
      emitted_0 <= 1'h0;	// hlsinput.mlir:3:11
      emitted_1 <= 1'h0;	// hlsinput.mlir:3:11
      writeValidBuffer <= 1'h0;	// hlsinput.mlir:3:11
      writeValidBuffer_0 <= 1'h0;	// hlsinput.mlir:3:11
      writeValidBuffer_1 <= 1'h0;	// hlsinput.mlir:3:11
    end
    else begin	// hlsinput.mlir:3:11
      automatic logic writeValid = stAddr0_valid & stData0_valid;	// hlsinput.mlir:3:11
      automatic logic writeValid_0 = stAddr1_valid & stData1_valid;	// hlsinput.mlir:3:11
      automatic logic writeValid_1 = stAddr2_valid & stData2_valid;	// hlsinput.mlir:3:11
      if (writeValid_1)	// hlsinput.mlir:3:11
        _handshake_memory_0[stAddr2[1:0]] <= stData2;	// hlsinput.mlir:3:11
      if (writeValid_0)	// hlsinput.mlir:3:11
        _handshake_memory_0[stAddr1[1:0]] <= stData1;	// hlsinput.mlir:3:11
      if (writeValid)	// hlsinput.mlir:3:11
        _handshake_memory_0[stAddr0[1:0]] <= stData0;	// hlsinput.mlir:3:11
      emitted_0 <= done0 & ~allDone;	// hlsinput.mlir:3:11
      emitted_1 <= done1 & ~allDone;	// hlsinput.mlir:3:11
      writeValidBuffer <= emptyOrComplete_0 ? writeValid : writeValidBuffer;	// hlsinput.mlir:3:11
      writeValidBuffer_0 <= emptyOrComplete_1 ? writeValid_0 : writeValidBuffer_0;	// hlsinput.mlir:3:11
      writeValidBuffer_1 <= emptyOrComplete ? writeValid_1 : writeValidBuffer_1;	// hlsinput.mlir:3:11
    end
  end // always_ff @(posedge)
  assign emptyOrComplete = ~writeValidBuffer_1 | stDone2_ready & writeValidBuffer_1;	// hlsinput.mlir:3:11
  assign stData0_ready = emptyOrComplete_0;	// hlsinput.mlir:3:11
  assign stAddr0_ready = emptyOrComplete_0;	// hlsinput.mlir:3:11
  assign stData1_ready = emptyOrComplete_1;	// hlsinput.mlir:3:11
  assign stAddr1_ready = emptyOrComplete_1;	// hlsinput.mlir:3:11
  assign stData2_ready = emptyOrComplete;	// hlsinput.mlir:3:11
  assign stAddr2_ready = emptyOrComplete;	// hlsinput.mlir:3:11
  assign ldAddr0_ready = allDone;	// hlsinput.mlir:3:11
  assign ldData0 = _handshake_memory_0[ldAddr0[1:0]];	// hlsinput.mlir:3:11
  assign ldData0_valid = _GEN;	// hlsinput.mlir:3:11
  // Zero width: assign stDone0 = /*Zero width*/;	// hlsinput.mlir:3:11
  assign stDone0_valid = writeValidBuffer;	// hlsinput.mlir:3:11
  // Zero width: assign stDone1 = /*Zero width*/;	// hlsinput.mlir:3:11
  assign stDone1_valid = writeValidBuffer_0;	// hlsinput.mlir:3:11
  // Zero width: assign stDone2 = /*Zero width*/;	// hlsinput.mlir:3:11
  assign stDone2_valid = writeValidBuffer_1;	// hlsinput.mlir:3:11
  // Zero width: assign ldDone0 = /*Zero width*/;	// hlsinput.mlir:3:11
  assign ldDone0_valid = _GEN_0;	// hlsinput.mlir:3:11
endmodule

module handshake_join_7ins_1outs_ctrl(	// hlsinput.mlir:3:11
  // input  /*Zero Width*/ in0,
     input                 in0_valid,
  // input  /*Zero Width*/ in1,
     input                 in1_valid,
  // input  /*Zero Width*/ in2,
     input                 in2_valid,
  // input  /*Zero Width*/ in3,
     input                 in3_valid,
  // input  /*Zero Width*/ in4,
     input                 in4_valid,
  // input  /*Zero Width*/ in5,
     input                 in5_valid,
  // input  /*Zero Width*/ in6,
     input                 in6_valid,
                           out0_ready,
     output                in0_ready,
                           in1_ready,
                           in2_ready,
                           in3_ready,
                           in4_ready,
                           in5_ready,
                           in6_ready,
  // output /*Zero Width*/ out0,
     output                out0_valid
);

  wire _GEN =
    in0_valid & in1_valid & in2_valid & in3_valid & in4_valid & in5_valid & in6_valid;	// hlsinput.mlir:3:11
  wire _GEN_0 = out0_ready & _GEN;	// hlsinput.mlir:3:11
  assign in0_ready = _GEN_0;	// hlsinput.mlir:3:11
  assign in1_ready = _GEN_0;	// hlsinput.mlir:3:11
  assign in2_ready = _GEN_0;	// hlsinput.mlir:3:11
  assign in3_ready = _GEN_0;	// hlsinput.mlir:3:11
  assign in4_ready = _GEN_0;	// hlsinput.mlir:3:11
  assign in5_ready = _GEN_0;	// hlsinput.mlir:3:11
  assign in6_ready = _GEN_0;	// hlsinput.mlir:3:11
  // Zero width: assign out0 = /*Zero width*/;	// hlsinput.mlir:3:11
  assign out0_valid = _GEN;	// hlsinput.mlir:3:11
endmodule

module handshake_constant_c3_out_ui64(	// hlsinput.mlir:3:11
  // input  /*Zero Width*/ ctrl,
     input                 ctrl_valid,
                           out0_ready,
     output                ctrl_ready,
     output [63:0]         out0,
     output                out0_valid
);

  assign ctrl_ready = out0_ready;	// hlsinput.mlir:3:11
  assign out0 = 64'h3;	// hlsinput.mlir:3:11
  assign out0_valid = ctrl_valid;	// hlsinput.mlir:3:11
endmodule

module handshake_fork_in_ui64_out_ui64_ui64(	// hlsinput.mlir:4:12
  input  [63:0] in0,
  input         in0_valid,
                clock,
                reset,
                out0_ready,
                out1_ready,
  output        in0_ready,
  output [63:0] out0,
  output        out0_valid,
  output [63:0] out1,
  output        out1_valid
);

  wire allDone;	// hlsinput.mlir:4:12
  wire done1;	// hlsinput.mlir:4:12
  reg  emitted_0;	// hlsinput.mlir:4:12
  wire _GEN = ~emitted_0 & in0_valid;	// hlsinput.mlir:4:12
  wire done0 = out0_ready & _GEN | emitted_0;	// hlsinput.mlir:4:12
  reg  emitted_1;	// hlsinput.mlir:4:12
  always_ff @(posedge clock) begin	// hlsinput.mlir:4:12
    if (reset) begin	// hlsinput.mlir:4:12
      emitted_0 <= 1'h0;	// hlsinput.mlir:4:12
      emitted_1 <= 1'h0;	// hlsinput.mlir:4:12
    end
    else begin	// hlsinput.mlir:4:12
      emitted_0 <= done0 & ~allDone;	// hlsinput.mlir:4:12
      emitted_1 <= done1 & ~allDone;	// hlsinput.mlir:4:12
    end
  end // always_ff @(posedge)
  wire _GEN_0 = ~emitted_1 & in0_valid;	// hlsinput.mlir:4:12
  assign done1 = out1_ready & _GEN_0 | emitted_1;	// hlsinput.mlir:4:12
  assign allDone = done0 & done1;	// hlsinput.mlir:4:12
  assign in0_ready = allDone;	// hlsinput.mlir:4:12
  assign out0 = in0;	// hlsinput.mlir:4:12
  assign out0_valid = _GEN;	// hlsinput.mlir:4:12
  assign out1 = in0;	// hlsinput.mlir:4:12
  assign out1_valid = _GEN_0;	// hlsinput.mlir:4:12
endmodule

module handshake_constant_c2_out_ui64(	// hlsinput.mlir:5:14
  // input  /*Zero Width*/ ctrl,
     input                 ctrl_valid,
                           out0_ready,
     output                ctrl_ready,
     output [63:0]         out0,
     output                out0_valid
);

  assign ctrl_ready = out0_ready;	// hlsinput.mlir:5:14
  assign out0 = 64'h2;	// hlsinput.mlir:5:14
  assign out0_valid = ctrl_valid;	// hlsinput.mlir:5:14
endmodule

module handshake_constant_c1_out_ui64(	// hlsinput.mlir:6:14
  // input  /*Zero Width*/ ctrl,
     input                 ctrl_valid,
                           out0_ready,
     output                ctrl_ready,
     output [63:0]         out0,
     output                out0_valid
);

  assign ctrl_ready = out0_ready;	// hlsinput.mlir:6:14
  assign out0 = 64'h1;	// hlsinput.mlir:6:14
  assign out0_valid = ctrl_valid;	// hlsinput.mlir:6:14
endmodule

module handshake_fork_in_ui64_out_ui64_ui64_ui64(	// hlsinput.mlir:8:11
  input  [63:0] in0,
  input         in0_valid,
                clock,
                reset,
                out0_ready,
                out1_ready,
                out2_ready,
  output        in0_ready,
  output [63:0] out0,
  output        out0_valid,
  output [63:0] out1,
  output        out1_valid,
  output [63:0] out2,
  output        out2_valid
);

  wire allDone;	// hlsinput.mlir:8:11
  wire done2;	// hlsinput.mlir:8:11
  reg  emitted_0;	// hlsinput.mlir:8:11
  wire _GEN = ~emitted_0 & in0_valid;	// hlsinput.mlir:8:11
  wire done0 = out0_ready & _GEN | emitted_0;	// hlsinput.mlir:8:11
  reg  emitted_1;	// hlsinput.mlir:8:11
  wire _GEN_0 = ~emitted_1 & in0_valid;	// hlsinput.mlir:8:11
  wire done1 = out1_ready & _GEN_0 | emitted_1;	// hlsinput.mlir:8:11
  reg  emitted_2;	// hlsinput.mlir:8:11
  always_ff @(posedge clock) begin	// hlsinput.mlir:8:11
    if (reset) begin	// hlsinput.mlir:8:11
      emitted_0 <= 1'h0;	// hlsinput.mlir:8:11
      emitted_1 <= 1'h0;	// hlsinput.mlir:8:11
      emitted_2 <= 1'h0;	// hlsinput.mlir:8:11
    end
    else begin	// hlsinput.mlir:8:11
      emitted_0 <= done0 & ~allDone;	// hlsinput.mlir:8:11
      emitted_1 <= done1 & ~allDone;	// hlsinput.mlir:8:11
      emitted_2 <= done2 & ~allDone;	// hlsinput.mlir:8:11
    end
  end // always_ff @(posedge)
  wire _GEN_1 = ~emitted_2 & in0_valid;	// hlsinput.mlir:8:11
  assign done2 = out2_ready & _GEN_1 | emitted_2;	// hlsinput.mlir:8:11
  assign allDone = done0 & done1 & done2;	// hlsinput.mlir:8:11
  assign in0_ready = allDone;	// hlsinput.mlir:8:11
  assign out0 = in0;	// hlsinput.mlir:8:11
  assign out0_valid = _GEN;	// hlsinput.mlir:8:11
  assign out1 = in0;	// hlsinput.mlir:8:11
  assign out1_valid = _GEN_0;	// hlsinput.mlir:8:11
  assign out2 = in0;	// hlsinput.mlir:8:11
  assign out2_valid = _GEN_1;	// hlsinput.mlir:8:11
endmodule

module handshake_constant_c0_out_ui64(	// hlsinput.mlir:9:11
  // input  /*Zero Width*/ ctrl,
     input                 ctrl_valid,
                           out0_ready,
     output                ctrl_ready,
     output [63:0]         out0,
     output                out0_valid
);

  assign ctrl_ready = out0_ready;	// hlsinput.mlir:9:11
  assign out0 = 64'h0;	// hlsinput.mlir:9:11
  assign out0_valid = ctrl_valid;	// hlsinput.mlir:9:11
endmodule

module handshake_store_in_ui64_ui64_out_ui64_ui64(	// hlsinput.mlir:11:5
     input  [63:0]         addrIn0,
     input                 addrIn0_valid,
     input  [63:0]         dataIn,
     input                 dataIn_valid,
  // input  /*Zero Width*/ ctrl,
     input                 ctrl_valid,
                           dataToMem_ready,
                           addrOut0_ready,
     output                addrIn0_ready,
                           dataIn_ready,
                           ctrl_ready,
     output [63:0]         dataToMem,
     output                dataToMem_valid,
     output [63:0]         addrOut0,
     output                addrOut0_valid
);

  wire _GEN = dataIn_valid & addrIn0_valid & ctrl_valid;	// hlsinput.mlir:11:5
  wire _GEN_0 = dataToMem_ready & addrOut0_ready & _GEN;	// hlsinput.mlir:11:5
  assign addrIn0_ready = _GEN_0;	// hlsinput.mlir:11:5
  assign dataIn_ready = _GEN_0;	// hlsinput.mlir:11:5
  assign ctrl_ready = _GEN_0;	// hlsinput.mlir:11:5
  assign dataToMem = dataIn;	// hlsinput.mlir:11:5
  assign dataToMem_valid = _GEN;	// hlsinput.mlir:11:5
  assign addrOut0 = addrIn0;	// hlsinput.mlir:11:5
  assign addrOut0_valid = _GEN;	// hlsinput.mlir:11:5
endmodule

module handshake_join_2ins_1outs_ctrl(	// hlsinput.mlir:12:5
  // input  /*Zero Width*/ in0,
     input                 in0_valid,
  // input  /*Zero Width*/ in1,
     input                 in1_valid,
                           out0_ready,
     output                in0_ready,
                           in1_ready,
  // output /*Zero Width*/ out0,
     output                out0_valid
);

  wire _GEN = in0_valid & in1_valid;	// hlsinput.mlir:12:5
  wire _GEN_0 = out0_ready & _GEN;	// hlsinput.mlir:12:5
  assign in0_ready = _GEN_0;	// hlsinput.mlir:12:5
  assign in1_ready = _GEN_0;	// hlsinput.mlir:12:5
  // Zero width: assign out0 = /*Zero width*/;	// hlsinput.mlir:12:5
  assign out0_valid = _GEN;	// hlsinput.mlir:12:5
endmodule

module handshake_join_3ins_1outs_ctrl(	// hlsinput.mlir:13:5
  // input  /*Zero Width*/ in0,
     input                 in0_valid,
  // input  /*Zero Width*/ in1,
     input                 in1_valid,
  // input  /*Zero Width*/ in2,
     input                 in2_valid,
                           out0_ready,
     output                in0_ready,
                           in1_ready,
                           in2_ready,
  // output /*Zero Width*/ out0,
     output                out0_valid
);

  wire _GEN = in0_valid & in1_valid & in2_valid;	// hlsinput.mlir:13:5
  wire _GEN_0 = out0_ready & _GEN;	// hlsinput.mlir:13:5
  assign in0_ready = _GEN_0;	// hlsinput.mlir:13:5
  assign in1_ready = _GEN_0;	// hlsinput.mlir:13:5
  assign in2_ready = _GEN_0;	// hlsinput.mlir:13:5
  // Zero width: assign out0 = /*Zero width*/;	// hlsinput.mlir:13:5
  assign out0_valid = _GEN;	// hlsinput.mlir:13:5
endmodule

module handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0(	// hlsinput.mlir:3:11
  input  in0,
         in0_valid,
         clock,
         reset,
         out0_ready,
  output in0_ready,
         out0,
         out0_valid
);

  reg  ready0_reg;	// hlsinput.mlir:3:11
  reg  valid0_reg;	// hlsinput.mlir:3:11
  wire _GEN = ~valid0_reg | ~ready0_reg;	// hlsinput.mlir:3:11
  reg  data0_reg;	// hlsinput.mlir:3:11
  reg  ctrl_data0_reg;	// hlsinput.mlir:3:11
  always_ff @(posedge clock) begin	// hlsinput.mlir:3:11
    if (reset) begin	// hlsinput.mlir:3:11
      valid0_reg <= 1'h1;	// hlsinput.mlir:3:11
      data0_reg <= 1'h0;	// hlsinput.mlir:3:11
      ready0_reg <= 1'h0;	// hlsinput.mlir:3:11
      ctrl_data0_reg <= 1'h0;	// hlsinput.mlir:3:11
    end
    else begin	// hlsinput.mlir:3:11
      automatic logic _GEN_0 = ~out0_ready & ~ready0_reg;	// hlsinput.mlir:3:11
      automatic logic _GEN_1 = out0_ready & ready0_reg;	// hlsinput.mlir:3:11
      valid0_reg <= _GEN ? in0_valid : valid0_reg;	// hlsinput.mlir:3:11
      data0_reg <= _GEN ? in0 : data0_reg;	// hlsinput.mlir:3:11
      ready0_reg <= ~_GEN_1 & (_GEN_0 ? valid0_reg : ready0_reg);	// hlsinput.mlir:3:11
      ctrl_data0_reg <= ~_GEN_1 & (_GEN_0 ? data0_reg : ctrl_data0_reg);	// hlsinput.mlir:3:11
    end
  end // always_ff @(posedge)
  assign in0_ready = _GEN;	// hlsinput.mlir:3:11
  assign out0 = ready0_reg ? ctrl_data0_reg : data0_reg;	// hlsinput.mlir:3:11
  assign out0_valid = ready0_reg ? ready0_reg : valid0_reg;	// hlsinput.mlir:3:11
endmodule

module handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1(	// hlsinput.mlir:3:11
  input  in0,
         in0_valid,
         clock,
         reset,
         out0_ready,
         out1_ready,
         out2_ready,
         out3_ready,
  output in0_ready,
         out0,
         out0_valid,
         out1,
         out1_valid,
         out2,
         out2_valid,
         out3,
         out3_valid
);

  wire allDone;	// hlsinput.mlir:3:11
  wire done3;	// hlsinput.mlir:3:11
  reg  emitted_0;	// hlsinput.mlir:3:11
  wire _GEN = ~emitted_0 & in0_valid;	// hlsinput.mlir:3:11
  wire done0 = out0_ready & _GEN | emitted_0;	// hlsinput.mlir:3:11
  reg  emitted_1;	// hlsinput.mlir:3:11
  wire _GEN_0 = ~emitted_1 & in0_valid;	// hlsinput.mlir:3:11
  wire done1 = out1_ready & _GEN_0 | emitted_1;	// hlsinput.mlir:3:11
  reg  emitted_2;	// hlsinput.mlir:3:11
  wire _GEN_1 = ~emitted_2 & in0_valid;	// hlsinput.mlir:3:11
  wire done2 = out2_ready & _GEN_1 | emitted_2;	// hlsinput.mlir:3:11
  reg  emitted_3;	// hlsinput.mlir:3:11
  always_ff @(posedge clock) begin	// hlsinput.mlir:3:11
    if (reset) begin	// hlsinput.mlir:3:11
      emitted_0 <= 1'h0;	// hlsinput.mlir:3:11
      emitted_1 <= 1'h0;	// hlsinput.mlir:3:11
      emitted_2 <= 1'h0;	// hlsinput.mlir:3:11
      emitted_3 <= 1'h0;	// hlsinput.mlir:3:11
    end
    else begin	// hlsinput.mlir:3:11
      emitted_0 <= done0 & ~allDone;	// hlsinput.mlir:3:11
      emitted_1 <= done1 & ~allDone;	// hlsinput.mlir:3:11
      emitted_2 <= done2 & ~allDone;	// hlsinput.mlir:3:11
      emitted_3 <= done3 & ~allDone;	// hlsinput.mlir:3:11
    end
  end // always_ff @(posedge)
  wire _GEN_2 = ~emitted_3 & in0_valid;	// hlsinput.mlir:3:11
  assign done3 = out3_ready & _GEN_2 | emitted_3;	// hlsinput.mlir:3:11
  assign allDone = done0 & done1 & done2 & done3;	// hlsinput.mlir:3:11
  assign in0_ready = allDone;	// hlsinput.mlir:3:11
  assign out0 = in0;	// hlsinput.mlir:3:11
  assign out0_valid = _GEN;	// hlsinput.mlir:3:11
  assign out1 = in0;	// hlsinput.mlir:3:11
  assign out1_valid = _GEN_0;	// hlsinput.mlir:3:11
  assign out2 = in0;	// hlsinput.mlir:3:11
  assign out2_valid = _GEN_1;	// hlsinput.mlir:3:11
  assign out3 = in0;	// hlsinput.mlir:3:11
  assign out3_valid = _GEN_2;	// hlsinput.mlir:3:11
endmodule

module handshake_buffer_in_ui1_out_ui1_2slots_seq(	// hlsinput.mlir:3:11
  input  in0,
         in0_valid,
         clock,
         reset,
         out0_ready,
  output in0_ready,
         out0,
         out0_valid
);

  reg  ready1_reg;	// hlsinput.mlir:3:11
  reg  ready0_reg;	// hlsinput.mlir:3:11
  reg  valid0_reg;	// hlsinput.mlir:3:11
  wire _GEN = ~valid0_reg | ~ready0_reg;	// hlsinput.mlir:3:11
  reg  data0_reg;	// hlsinput.mlir:3:11
  reg  ctrl_data0_reg;	// hlsinput.mlir:3:11
  reg  valid1_reg;	// hlsinput.mlir:3:11
  wire _GEN_0 = ~valid1_reg | ~ready1_reg;	// hlsinput.mlir:3:11
  reg  data1_reg;	// hlsinput.mlir:3:11
  reg  ctrl_data1_reg;	// hlsinput.mlir:3:11
  always_ff @(posedge clock) begin	// hlsinput.mlir:3:11
    if (reset) begin	// hlsinput.mlir:3:11
      valid0_reg <= 1'h0;	// hlsinput.mlir:3:11
      data0_reg <= 1'h0;	// hlsinput.mlir:3:11
      ready0_reg <= 1'h0;	// hlsinput.mlir:3:11
      ctrl_data0_reg <= 1'h0;	// hlsinput.mlir:3:11
      valid1_reg <= 1'h0;	// hlsinput.mlir:3:11
      data1_reg <= 1'h0;	// hlsinput.mlir:3:11
      ready1_reg <= 1'h0;	// hlsinput.mlir:3:11
      ctrl_data1_reg <= 1'h0;	// hlsinput.mlir:3:11
    end
    else begin	// hlsinput.mlir:3:11
      automatic logic _GEN_1 = ~_GEN_0 & ~ready0_reg;	// hlsinput.mlir:3:11
      automatic logic _GEN_2 = _GEN_0 & ready0_reg;	// hlsinput.mlir:3:11
      automatic logic _GEN_3 = ~out0_ready & ~ready1_reg;	// hlsinput.mlir:3:11
      automatic logic _GEN_4 = out0_ready & ready1_reg;	// hlsinput.mlir:3:11
      valid0_reg <= _GEN ? in0_valid : valid0_reg;	// hlsinput.mlir:3:11
      data0_reg <= _GEN ? in0 : data0_reg;	// hlsinput.mlir:3:11
      ready0_reg <= ~_GEN_2 & (_GEN_1 ? valid0_reg : ready0_reg);	// hlsinput.mlir:3:11
      ctrl_data0_reg <= ~_GEN_2 & (_GEN_1 ? data0_reg : ctrl_data0_reg);	// hlsinput.mlir:3:11
      valid1_reg <= _GEN_0 ? (ready0_reg ? ready0_reg : valid0_reg) : valid1_reg;	// hlsinput.mlir:3:11
      data1_reg <= _GEN_0 ? (ready0_reg ? ctrl_data0_reg : data0_reg) : data1_reg;	// hlsinput.mlir:3:11
      ready1_reg <= ~_GEN_4 & (_GEN_3 ? valid1_reg : ready1_reg);	// hlsinput.mlir:3:11
      ctrl_data1_reg <= ~_GEN_4 & (_GEN_3 ? data1_reg : ctrl_data1_reg);	// hlsinput.mlir:3:11
    end
  end // always_ff @(posedge)
  assign in0_ready = _GEN;	// hlsinput.mlir:3:11
  assign out0 = ready1_reg ? ctrl_data1_reg : data1_reg;	// hlsinput.mlir:3:11
  assign out0_valid = ready1_reg ? ready1_reg : valid1_reg;	// hlsinput.mlir:3:11
endmodule

module handshake_mux_in_ui1_3ins_1outs_ctrl(	// hlsinput.mlir:3:11
     input                 select,
                           select_valid,
  // input  /*Zero Width*/ in0,
     input                 in0_valid,
  // input  /*Zero Width*/ in1,
     input                 in1_valid,
                           out0_ready,
     output                select_ready,
                           in0_ready,
                           in1_ready,
  // output /*Zero Width*/ out0,
     output                out0_valid
);

  wire [1:0] _GEN = 2'h1 << select;	// hlsinput.mlir:3:11
  wire       _GEN_0 = (select ? in1_valid : in0_valid) & select_valid;	// hlsinput.mlir:3:11
  wire       _GEN_1 = _GEN_0 & out0_ready;	// hlsinput.mlir:3:11
  assign select_ready = _GEN_1;	// hlsinput.mlir:3:11
  assign in0_ready = _GEN[0] & _GEN_1;	// hlsinput.mlir:3:11
  assign in1_ready = _GEN[1] & _GEN_1;	// hlsinput.mlir:3:11
  // Zero width: assign out0 = /*Zero width*/;	// hlsinput.mlir:3:11
  assign out0_valid = _GEN_0;	// hlsinput.mlir:3:11
endmodule

module handshake_mux_in_ui1_ui64_ui64_out_ui64(	// hlsinput.mlir:3:11
  input         select,
                select_valid,
  input  [63:0] in0,
  input         in0_valid,
  input  [63:0] in1,
  input         in1_valid,
                out0_ready,
  output        select_ready,
                in0_ready,
                in1_ready,
  output [63:0] out0,
  output        out0_valid
);

  wire [1:0] _GEN = 2'h1 << select;	// hlsinput.mlir:3:11
  wire       _GEN_0 = (select ? in1_valid : in0_valid) & select_valid;	// hlsinput.mlir:3:11
  wire       _GEN_1 = _GEN_0 & out0_ready;	// hlsinput.mlir:3:11
  assign select_ready = _GEN_1;	// hlsinput.mlir:3:11
  assign in0_ready = _GEN[0] & _GEN_1;	// hlsinput.mlir:3:11
  assign in1_ready = _GEN[1] & _GEN_1;	// hlsinput.mlir:3:11
  assign out0 = select ? in1 : in0;	// hlsinput.mlir:3:11
  assign out0_valid = _GEN_0;	// hlsinput.mlir:3:11
endmodule

module arith_cmpi_in_ui64_ui64_out_ui1_slt(	// hlsinput.mlir:21:10
  input  [63:0] in0,
  input         in0_valid,
  input  [63:0] in1,
  input         in1_valid,
                out0_ready,
  output        in0_ready,
                in1_ready,
                out0,
                out0_valid
);

  wire _GEN = in0_valid & in1_valid;	// hlsinput.mlir:21:10
  wire _GEN_0 = out0_ready & _GEN;	// hlsinput.mlir:21:10
  assign in0_ready = _GEN_0;	// hlsinput.mlir:21:10
  assign in1_ready = _GEN_0;	// hlsinput.mlir:21:10
  assign out0 = $signed(in0) < $signed(in1);	// hlsinput.mlir:21:10
  assign out0_valid = _GEN;	// hlsinput.mlir:21:10
endmodule

module handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1(	// hlsinput.mlir:21:10
  input  in0,
         in0_valid,
         clock,
         reset,
         out0_ready,
         out1_ready,
         out2_ready,
         out3_ready,
         out4_ready,
  output in0_ready,
         out0,
         out0_valid,
         out1,
         out1_valid,
         out2,
         out2_valid,
         out3,
         out3_valid,
         out4,
         out4_valid
);

  wire allDone;	// hlsinput.mlir:21:10
  wire done4;	// hlsinput.mlir:21:10
  reg  emitted_0;	// hlsinput.mlir:21:10
  wire _GEN = ~emitted_0 & in0_valid;	// hlsinput.mlir:21:10
  wire done0 = out0_ready & _GEN | emitted_0;	// hlsinput.mlir:21:10
  reg  emitted_1;	// hlsinput.mlir:21:10
  wire _GEN_0 = ~emitted_1 & in0_valid;	// hlsinput.mlir:21:10
  wire done1 = out1_ready & _GEN_0 | emitted_1;	// hlsinput.mlir:21:10
  reg  emitted_2;	// hlsinput.mlir:21:10
  wire _GEN_1 = ~emitted_2 & in0_valid;	// hlsinput.mlir:21:10
  wire done2 = out2_ready & _GEN_1 | emitted_2;	// hlsinput.mlir:21:10
  reg  emitted_3;	// hlsinput.mlir:21:10
  wire _GEN_2 = ~emitted_3 & in0_valid;	// hlsinput.mlir:21:10
  wire done3 = out3_ready & _GEN_2 | emitted_3;	// hlsinput.mlir:21:10
  reg  emitted_4;	// hlsinput.mlir:21:10
  always_ff @(posedge clock) begin	// hlsinput.mlir:21:10
    if (reset) begin	// hlsinput.mlir:21:10
      emitted_0 <= 1'h0;	// hlsinput.mlir:21:10
      emitted_1 <= 1'h0;	// hlsinput.mlir:21:10
      emitted_2 <= 1'h0;	// hlsinput.mlir:21:10
      emitted_3 <= 1'h0;	// hlsinput.mlir:21:10
      emitted_4 <= 1'h0;	// hlsinput.mlir:21:10
    end
    else begin	// hlsinput.mlir:21:10
      emitted_0 <= done0 & ~allDone;	// hlsinput.mlir:21:10
      emitted_1 <= done1 & ~allDone;	// hlsinput.mlir:21:10
      emitted_2 <= done2 & ~allDone;	// hlsinput.mlir:21:10
      emitted_3 <= done3 & ~allDone;	// hlsinput.mlir:21:10
      emitted_4 <= done4 & ~allDone;	// hlsinput.mlir:21:10
    end
  end // always_ff @(posedge)
  wire _GEN_3 = ~emitted_4 & in0_valid;	// hlsinput.mlir:21:10
  assign done4 = out4_ready & _GEN_3 | emitted_4;	// hlsinput.mlir:21:10
  assign allDone = done0 & done1 & done2 & done3 & done4;	// hlsinput.mlir:21:10
  assign in0_ready = allDone;	// hlsinput.mlir:21:10
  assign out0 = in0;	// hlsinput.mlir:21:10
  assign out0_valid = _GEN;	// hlsinput.mlir:21:10
  assign out1 = in0;	// hlsinput.mlir:21:10
  assign out1_valid = _GEN_0;	// hlsinput.mlir:21:10
  assign out2 = in0;	// hlsinput.mlir:21:10
  assign out2_valid = _GEN_1;	// hlsinput.mlir:21:10
  assign out3 = in0;	// hlsinput.mlir:21:10
  assign out3_valid = _GEN_2;	// hlsinput.mlir:21:10
  assign out4 = in0;	// hlsinput.mlir:21:10
  assign out4_valid = _GEN_3;	// hlsinput.mlir:21:10
endmodule

module handshake_cond_br_in_ui1_ui64_out_ui64_ui64(	// hlsinput.mlir:22:5
  input         cond,
                cond_valid,
  input  [63:0] data,
  input         data_valid,
                outTrue_ready,
                outFalse_ready,
  output        cond_ready,
                data_ready,
  output [63:0] outTrue,
  output        outTrue_valid,
  output [63:0] outFalse,
  output        outFalse_valid
);

  wire _GEN = cond_valid & data_valid;	// hlsinput.mlir:22:5
  wire _GEN_0 = (cond ? outTrue_ready : outFalse_ready) & _GEN;	// hlsinput.mlir:22:5
  assign cond_ready = _GEN_0;	// hlsinput.mlir:22:5
  assign data_ready = _GEN_0;	// hlsinput.mlir:22:5
  assign outTrue = data;	// hlsinput.mlir:22:5
  assign outTrue_valid = cond & _GEN;	// hlsinput.mlir:22:5
  assign outFalse = data;	// hlsinput.mlir:22:5
  assign outFalse_valid = ~cond & _GEN;	// hlsinput.mlir:22:5
endmodule

module handshake_sink_in_ui64(	// hlsinput.mlir:22:5
  input  [63:0] in0,
  input         in0_valid,
  output        in0_ready
);

  assign in0_ready = 1'h1;	// hlsinput.mlir:22:5
endmodule

module handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64(	// hlsinput.mlir:22:5
  input  [63:0] in0,
  input         in0_valid,
                clock,
                reset,
                out0_ready,
                out1_ready,
                out2_ready,
                out3_ready,
  output        in0_ready,
  output [63:0] out0,
  output        out0_valid,
  output [63:0] out1,
  output        out1_valid,
  output [63:0] out2,
  output        out2_valid,
  output [63:0] out3,
  output        out3_valid
);

  wire allDone;	// hlsinput.mlir:22:5
  wire done3;	// hlsinput.mlir:22:5
  reg  emitted_0;	// hlsinput.mlir:22:5
  wire _GEN = ~emitted_0 & in0_valid;	// hlsinput.mlir:22:5
  wire done0 = out0_ready & _GEN | emitted_0;	// hlsinput.mlir:22:5
  reg  emitted_1;	// hlsinput.mlir:22:5
  wire _GEN_0 = ~emitted_1 & in0_valid;	// hlsinput.mlir:22:5
  wire done1 = out1_ready & _GEN_0 | emitted_1;	// hlsinput.mlir:22:5
  reg  emitted_2;	// hlsinput.mlir:22:5
  wire _GEN_1 = ~emitted_2 & in0_valid;	// hlsinput.mlir:22:5
  wire done2 = out2_ready & _GEN_1 | emitted_2;	// hlsinput.mlir:22:5
  reg  emitted_3;	// hlsinput.mlir:22:5
  always_ff @(posedge clock) begin	// hlsinput.mlir:22:5
    if (reset) begin	// hlsinput.mlir:22:5
      emitted_0 <= 1'h0;	// hlsinput.mlir:22:5
      emitted_1 <= 1'h0;	// hlsinput.mlir:22:5
      emitted_2 <= 1'h0;	// hlsinput.mlir:22:5
      emitted_3 <= 1'h0;	// hlsinput.mlir:22:5
    end
    else begin	// hlsinput.mlir:22:5
      emitted_0 <= done0 & ~allDone;	// hlsinput.mlir:22:5
      emitted_1 <= done1 & ~allDone;	// hlsinput.mlir:22:5
      emitted_2 <= done2 & ~allDone;	// hlsinput.mlir:22:5
      emitted_3 <= done3 & ~allDone;	// hlsinput.mlir:22:5
    end
  end // always_ff @(posedge)
  wire _GEN_2 = ~emitted_3 & in0_valid;	// hlsinput.mlir:22:5
  assign done3 = out3_ready & _GEN_2 | emitted_3;	// hlsinput.mlir:22:5
  assign allDone = done0 & done1 & done2 & done3;	// hlsinput.mlir:22:5
  assign in0_ready = allDone;	// hlsinput.mlir:22:5
  assign out0 = in0;	// hlsinput.mlir:22:5
  assign out0_valid = _GEN;	// hlsinput.mlir:22:5
  assign out1 = in0;	// hlsinput.mlir:22:5
  assign out1_valid = _GEN_0;	// hlsinput.mlir:22:5
  assign out2 = in0;	// hlsinput.mlir:22:5
  assign out2_valid = _GEN_1;	// hlsinput.mlir:22:5
  assign out3 = in0;	// hlsinput.mlir:22:5
  assign out3_valid = _GEN_2;	// hlsinput.mlir:22:5
endmodule

module handshake_cond_br_in_ui1_2ins_2outs_ctrl(	// hlsinput.mlir:22:5
     input                 cond,
                           cond_valid,
  // input  /*Zero Width*/ data,
     input                 data_valid,
                           outTrue_ready,
                           outFalse_ready,
     output                cond_ready,
                           data_ready,
  // output /*Zero Width*/ outTrue,
     output                outTrue_valid,
  // output /*Zero Width*/ outFalse,
     output                outFalse_valid
);

  wire _GEN = cond_valid & data_valid;	// hlsinput.mlir:22:5
  wire _GEN_0 = (cond ? outTrue_ready : outFalse_ready) & _GEN;	// hlsinput.mlir:22:5
  assign cond_ready = _GEN_0;	// hlsinput.mlir:22:5
  assign data_ready = _GEN_0;	// hlsinput.mlir:22:5
  // Zero width: assign outTrue = data;	// hlsinput.mlir:22:5
  assign outTrue_valid = cond & _GEN;	// hlsinput.mlir:22:5
  // Zero width: assign outFalse = data;	// hlsinput.mlir:22:5
  assign outFalse_valid = ~cond & _GEN;	// hlsinput.mlir:22:5
endmodule

module handshake_fork_1ins_4outs_ctrl(	// hlsinput.mlir:22:5
  // input  /*Zero Width*/ in0,
     input                 in0_valid,
                           clock,
                           reset,
                           out0_ready,
                           out1_ready,
                           out2_ready,
                           out3_ready,
     output                in0_ready,
  // output /*Zero Width*/ out0,
     output                out0_valid,
  // output /*Zero Width*/ out1,
     output                out1_valid,
  // output /*Zero Width*/ out2,
     output                out2_valid,
  // output /*Zero Width*/ out3,
     output                out3_valid
);

  wire allDone;	// hlsinput.mlir:22:5
  wire done3;	// hlsinput.mlir:22:5
  reg  emitted_0;	// hlsinput.mlir:22:5
  wire _GEN = ~emitted_0 & in0_valid;	// hlsinput.mlir:22:5
  wire done0 = out0_ready & _GEN | emitted_0;	// hlsinput.mlir:22:5
  reg  emitted_1;	// hlsinput.mlir:22:5
  wire _GEN_0 = ~emitted_1 & in0_valid;	// hlsinput.mlir:22:5
  wire done1 = out1_ready & _GEN_0 | emitted_1;	// hlsinput.mlir:22:5
  reg  emitted_2;	// hlsinput.mlir:22:5
  wire _GEN_1 = ~emitted_2 & in0_valid;	// hlsinput.mlir:22:5
  wire done2 = out2_ready & _GEN_1 | emitted_2;	// hlsinput.mlir:22:5
  reg  emitted_3;	// hlsinput.mlir:22:5
  always_ff @(posedge clock) begin	// hlsinput.mlir:22:5
    if (reset) begin	// hlsinput.mlir:22:5
      emitted_0 <= 1'h0;	// hlsinput.mlir:22:5
      emitted_1 <= 1'h0;	// hlsinput.mlir:22:5
      emitted_2 <= 1'h0;	// hlsinput.mlir:22:5
      emitted_3 <= 1'h0;	// hlsinput.mlir:22:5
    end
    else begin	// hlsinput.mlir:22:5
      emitted_0 <= done0 & ~allDone;	// hlsinput.mlir:22:5
      emitted_1 <= done1 & ~allDone;	// hlsinput.mlir:22:5
      emitted_2 <= done2 & ~allDone;	// hlsinput.mlir:22:5
      emitted_3 <= done3 & ~allDone;	// hlsinput.mlir:22:5
    end
  end // always_ff @(posedge)
  wire _GEN_2 = ~emitted_3 & in0_valid;	// hlsinput.mlir:22:5
  assign done3 = out3_ready & _GEN_2 | emitted_3;	// hlsinput.mlir:22:5
  assign allDone = done0 & done1 & done2 & done3;	// hlsinput.mlir:22:5
  assign in0_ready = allDone;	// hlsinput.mlir:22:5
  // Zero width: assign out0 = in0;	// hlsinput.mlir:22:5
  assign out0_valid = _GEN;	// hlsinput.mlir:22:5
  // Zero width: assign out1 = in0;	// hlsinput.mlir:22:5
  assign out1_valid = _GEN_0;	// hlsinput.mlir:22:5
  // Zero width: assign out2 = in0;	// hlsinput.mlir:22:5
  assign out2_valid = _GEN_1;	// hlsinput.mlir:22:5
  // Zero width: assign out3 = in0;	// hlsinput.mlir:22:5
  assign out3_valid = _GEN_2;	// hlsinput.mlir:22:5
endmodule

module handshake_join_4ins_1outs_ctrl(	// hlsinput.mlir:3:11
  // input  /*Zero Width*/ in0,
     input                 in0_valid,
  // input  /*Zero Width*/ in1,
     input                 in1_valid,
  // input  /*Zero Width*/ in2,
     input                 in2_valid,
  // input  /*Zero Width*/ in3,
     input                 in3_valid,
                           out0_ready,
     output                in0_ready,
                           in1_ready,
                           in2_ready,
                           in3_ready,
  // output /*Zero Width*/ out0,
     output                out0_valid
);

  wire _GEN = in0_valid & in1_valid & in2_valid & in3_valid;	// hlsinput.mlir:3:11
  wire _GEN_0 = out0_ready & _GEN;	// hlsinput.mlir:3:11
  assign in0_ready = _GEN_0;	// hlsinput.mlir:3:11
  assign in1_ready = _GEN_0;	// hlsinput.mlir:3:11
  assign in2_ready = _GEN_0;	// hlsinput.mlir:3:11
  assign in3_ready = _GEN_0;	// hlsinput.mlir:3:11
  // Zero width: assign out0 = /*Zero width*/;	// hlsinput.mlir:3:11
  assign out0_valid = _GEN;	// hlsinput.mlir:3:11
endmodule

module handshake_load_in_ui64_ui64_out_ui64_ui64(	// hlsinput.mlir:24:10
     input  [63:0]         addrIn0,
     input                 addrIn0_valid,
     input  [63:0]         dataFromMem,
     input                 dataFromMem_valid,
  // input  /*Zero Width*/ ctrl,
     input                 ctrl_valid,
                           dataOut_ready,
                           addrOut0_ready,
     output                addrIn0_ready,
                           dataFromMem_ready,
                           ctrl_ready,
     output [63:0]         dataOut,
     output                dataOut_valid,
     output [63:0]         addrOut0,
     output                addrOut0_valid
);

  wire _GEN = addrIn0_valid & ctrl_valid;	// hlsinput.mlir:24:10
  wire _GEN_0 = addrOut0_ready & _GEN;	// hlsinput.mlir:24:10
  assign addrIn0_ready = _GEN_0;	// hlsinput.mlir:24:10
  assign dataFromMem_ready = dataOut_ready;	// hlsinput.mlir:24:10
  assign ctrl_ready = _GEN_0;	// hlsinput.mlir:24:10
  assign dataOut = dataFromMem;	// hlsinput.mlir:24:10
  assign dataOut_valid = dataFromMem_valid;	// hlsinput.mlir:24:10
  assign addrOut0 = addrIn0;	// hlsinput.mlir:24:10
  assign addrOut0_valid = _GEN;	// hlsinput.mlir:24:10
endmodule

module arith_addi_in_ui64_ui64_out_ui64(	// hlsinput.mlir:26:10
  input  [63:0] in0,
  input         in0_valid,
  input  [63:0] in1,
  input         in1_valid,
                out0_ready,
  output        in0_ready,
                in1_ready,
  output [63:0] out0,
  output        out0_valid
);

  wire _GEN = in0_valid & in1_valid;	// hlsinput.mlir:26:10
  wire _GEN_0 = out0_ready & _GEN;	// hlsinput.mlir:26:10
  assign in0_ready = _GEN_0;	// hlsinput.mlir:26:10
  assign in1_ready = _GEN_0;	// hlsinput.mlir:26:10
  assign out0 = in0 + in1;	// hlsinput.mlir:26:10
  assign out0_valid = _GEN;	// hlsinput.mlir:26:10
endmodule

module main(	// hlsinput.mlir:2:3
  // input  /*Zero Width*/ in0,
     input                 in0_valid,
                           clock,
                           reset,
                           out0_ready,
     output                in0_ready,
  // output /*Zero Width*/ out0,
     output                out0_valid
);

  wire                _handshake_buffer115_in0_ready;	// hlsinput.mlir:28:10
  wire [63:0]         _handshake_buffer115_out0;	// hlsinput.mlir:28:10
  wire                _handshake_buffer115_out0_valid;	// hlsinput.mlir:28:10
  wire                _arith_addi1_in0_ready;	// hlsinput.mlir:28:10
  wire                _arith_addi1_in1_ready;	// hlsinput.mlir:28:10
  wire [63:0]         _arith_addi1_out0;	// hlsinput.mlir:28:10
  wire                _arith_addi1_out0_valid;	// hlsinput.mlir:28:10
  wire                _handshake_buffer114_in0_ready;	// hlsinput.mlir:27:5
  wire [63:0]         _handshake_buffer114_out0;	// hlsinput.mlir:27:5
  wire                _handshake_buffer114_out0_valid;	// hlsinput.mlir:27:5
  wire                _handshake_buffer113_in0_ready;	// hlsinput.mlir:27:5
  wire [63:0]         _handshake_buffer113_out0;	// hlsinput.mlir:27:5
  wire                _handshake_buffer113_out0_valid;	// hlsinput.mlir:27:5
  wire                _handshake_store6_addrIn0_ready;	// hlsinput.mlir:27:5
  wire                _handshake_store6_dataIn_ready;	// hlsinput.mlir:27:5
  wire                _handshake_store6_ctrl_ready;	// hlsinput.mlir:27:5
  wire [63:0]         _handshake_store6_dataToMem;	// hlsinput.mlir:27:5
  wire                _handshake_store6_dataToMem_valid;	// hlsinput.mlir:27:5
  wire [63:0]         _handshake_store6_addrOut0;	// hlsinput.mlir:27:5
  wire                _handshake_store6_addrOut0_valid;	// hlsinput.mlir:27:5
  wire                _handshake_buffer112_in0_ready;	// hlsinput.mlir:26:10
  wire [63:0]         _handshake_buffer112_out0;	// hlsinput.mlir:26:10
  wire                _handshake_buffer112_out0_valid;	// hlsinput.mlir:26:10
  wire                _arith_addi0_in0_ready;	// hlsinput.mlir:26:10
  wire                _arith_addi0_in1_ready;	// hlsinput.mlir:26:10
  wire [63:0]         _arith_addi0_out0;	// hlsinput.mlir:26:10
  wire                _arith_addi0_out0_valid;	// hlsinput.mlir:26:10
  wire                _handshake_buffer111_in0_ready;	// hlsinput.mlir:25:10
  wire [63:0]         _handshake_buffer111_out0;	// hlsinput.mlir:25:10
  wire                _handshake_buffer111_out0_valid;	// hlsinput.mlir:25:10
  wire                _handshake_buffer110_in0_ready;	// hlsinput.mlir:25:10
  wire [63:0]         _handshake_buffer110_out0;	// hlsinput.mlir:25:10
  wire                _handshake_buffer110_out0_valid;	// hlsinput.mlir:25:10
  wire                _handshake_load1_addrIn0_ready;	// hlsinput.mlir:25:10
  wire                _handshake_load1_dataFromMem_ready;	// hlsinput.mlir:25:10
  wire                _handshake_load1_ctrl_ready;	// hlsinput.mlir:25:10
  wire [63:0]         _handshake_load1_dataOut;	// hlsinput.mlir:25:10
  wire                _handshake_load1_dataOut_valid;	// hlsinput.mlir:25:10
  wire [63:0]         _handshake_load1_addrOut0;	// hlsinput.mlir:25:10
  wire                _handshake_load1_addrOut0_valid;	// hlsinput.mlir:25:10
  wire                _handshake_buffer109_in0_ready;	// hlsinput.mlir:24:10
  wire [63:0]         _handshake_buffer109_out0;	// hlsinput.mlir:24:10
  wire                _handshake_buffer109_out0_valid;	// hlsinput.mlir:24:10
  wire                _handshake_buffer108_in0_ready;	// hlsinput.mlir:24:10
  wire [63:0]         _handshake_buffer108_out0;	// hlsinput.mlir:24:10
  wire                _handshake_buffer108_out0_valid;	// hlsinput.mlir:24:10
  wire                _handshake_load0_addrIn0_ready;	// hlsinput.mlir:24:10
  wire                _handshake_load0_dataFromMem_ready;	// hlsinput.mlir:24:10
  wire                _handshake_load0_ctrl_ready;	// hlsinput.mlir:24:10
  wire [63:0]         _handshake_load0_dataOut;	// hlsinput.mlir:24:10
  wire                _handshake_load0_dataOut_valid;	// hlsinput.mlir:24:10
  wire [63:0]         _handshake_load0_addrOut0;	// hlsinput.mlir:24:10
  wire                _handshake_load0_addrOut0_valid;	// hlsinput.mlir:24:10
  wire                _handshake_buffer107_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_buffer107_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer107_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_join5_in0_ready;	// hlsinput.mlir:3:11
  wire                _handshake_join5_in1_ready;	// hlsinput.mlir:3:11
  wire                _handshake_join5_in2_ready;	// hlsinput.mlir:3:11
  wire                _handshake_join5_in3_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_join5_out0;	// hlsinput.mlir:3:11
  wire                _handshake_join5_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer106_in0_ready;	// hlsinput.mlir:22:5
  // Zero width: wire /*Zero Width*/      _handshake_buffer106_out0;	// hlsinput.mlir:22:5
  wire                _handshake_buffer106_out0_valid;	// hlsinput.mlir:22:5
  wire                _handshake_buffer105_in0_ready;	// hlsinput.mlir:22:5
  // Zero width: wire /*Zero Width*/      _handshake_buffer105_out0;	// hlsinput.mlir:22:5
  wire                _handshake_buffer105_out0_valid;	// hlsinput.mlir:22:5
  wire                _handshake_buffer104_in0_ready;	// hlsinput.mlir:22:5
  // Zero width: wire /*Zero Width*/      _handshake_buffer104_out0;	// hlsinput.mlir:22:5
  wire                _handshake_buffer104_out0_valid;	// hlsinput.mlir:22:5
  wire                _handshake_buffer103_in0_ready;	// hlsinput.mlir:22:5
  // Zero width: wire /*Zero Width*/      _handshake_buffer103_out0;	// hlsinput.mlir:22:5
  wire                _handshake_buffer103_out0_valid;	// hlsinput.mlir:22:5
  wire                _handshake_fork17_in0_ready;	// hlsinput.mlir:22:5
  // Zero width: wire /*Zero Width*/      _handshake_fork17_out0;	// hlsinput.mlir:22:5
  wire                _handshake_fork17_out0_valid;	// hlsinput.mlir:22:5
  // Zero width: wire /*Zero Width*/      _handshake_fork17_out1;	// hlsinput.mlir:22:5
  wire                _handshake_fork17_out1_valid;	// hlsinput.mlir:22:5
  // Zero width: wire /*Zero Width*/      _handshake_fork17_out2;	// hlsinput.mlir:22:5
  wire                _handshake_fork17_out2_valid;	// hlsinput.mlir:22:5
  // Zero width: wire /*Zero Width*/      _handshake_fork17_out3;	// hlsinput.mlir:22:5
  wire                _handshake_fork17_out3_valid;	// hlsinput.mlir:22:5
  wire                _handshake_buffer102_in0_ready;	// hlsinput.mlir:22:5
  // Zero width: wire /*Zero Width*/      _handshake_buffer102_out0;	// hlsinput.mlir:22:5
  wire                _handshake_buffer102_out0_valid;	// hlsinput.mlir:22:5
  wire                _handshake_buffer101_in0_ready;	// hlsinput.mlir:22:5
  wire                _handshake_cond_br3_cond_ready;	// hlsinput.mlir:22:5
  wire                _handshake_cond_br3_data_ready;	// hlsinput.mlir:22:5
  // Zero width: wire /*Zero Width*/      _handshake_cond_br3_outTrue;	// hlsinput.mlir:22:5
  wire                _handshake_cond_br3_outTrue_valid;	// hlsinput.mlir:22:5
  // Zero width: wire /*Zero Width*/      _handshake_cond_br3_outFalse;	// hlsinput.mlir:22:5
  wire                _handshake_cond_br3_outFalse_valid;	// hlsinput.mlir:22:5
  wire                _handshake_buffer100_in0_ready;	// hlsinput.mlir:22:5
  wire [63:0]         _handshake_buffer100_out0;	// hlsinput.mlir:22:5
  wire                _handshake_buffer100_out0_valid;	// hlsinput.mlir:22:5
  wire                _handshake_buffer99_in0_ready;	// hlsinput.mlir:22:5
  wire [63:0]         _handshake_buffer99_out0;	// hlsinput.mlir:22:5
  wire                _handshake_buffer99_out0_valid;	// hlsinput.mlir:22:5
  wire                _handshake_fork16_in0_ready;	// hlsinput.mlir:22:5
  wire [63:0]         _handshake_fork16_out0;	// hlsinput.mlir:22:5
  wire                _handshake_fork16_out0_valid;	// hlsinput.mlir:22:5
  wire [63:0]         _handshake_fork16_out1;	// hlsinput.mlir:22:5
  wire                _handshake_fork16_out1_valid;	// hlsinput.mlir:22:5
  wire                _handshake_sink2_in0_ready;	// hlsinput.mlir:22:5
  wire                _handshake_buffer98_in0_ready;	// hlsinput.mlir:22:5
  wire [63:0]         _handshake_buffer98_out0;	// hlsinput.mlir:22:5
  wire                _handshake_buffer98_out0_valid;	// hlsinput.mlir:22:5
  wire                _handshake_cond_br2_cond_ready;	// hlsinput.mlir:22:5
  wire                _handshake_cond_br2_data_ready;	// hlsinput.mlir:22:5
  wire [63:0]         _handshake_cond_br2_outTrue;	// hlsinput.mlir:22:5
  wire                _handshake_cond_br2_outTrue_valid;	// hlsinput.mlir:22:5
  wire [63:0]         _handshake_cond_br2_outFalse;	// hlsinput.mlir:22:5
  wire                _handshake_cond_br2_outFalse_valid;	// hlsinput.mlir:22:5
  wire                _handshake_sink1_in0_ready;	// hlsinput.mlir:22:5
  wire                _handshake_buffer97_in0_ready;	// hlsinput.mlir:22:5
  wire [63:0]         _handshake_buffer97_out0;	// hlsinput.mlir:22:5
  wire                _handshake_buffer97_out0_valid;	// hlsinput.mlir:22:5
  wire                _handshake_cond_br1_cond_ready;	// hlsinput.mlir:22:5
  wire                _handshake_cond_br1_data_ready;	// hlsinput.mlir:22:5
  wire [63:0]         _handshake_cond_br1_outTrue;	// hlsinput.mlir:22:5
  wire                _handshake_cond_br1_outTrue_valid;	// hlsinput.mlir:22:5
  wire [63:0]         _handshake_cond_br1_outFalse;	// hlsinput.mlir:22:5
  wire                _handshake_cond_br1_outFalse_valid;	// hlsinput.mlir:22:5
  wire                _handshake_buffer96_in0_ready;	// hlsinput.mlir:22:5
  wire [63:0]         _handshake_buffer96_out0;	// hlsinput.mlir:22:5
  wire                _handshake_buffer96_out0_valid;	// hlsinput.mlir:22:5
  wire                _handshake_buffer95_in0_ready;	// hlsinput.mlir:22:5
  wire [63:0]         _handshake_buffer95_out0;	// hlsinput.mlir:22:5
  wire                _handshake_buffer95_out0_valid;	// hlsinput.mlir:22:5
  wire                _handshake_buffer94_in0_ready;	// hlsinput.mlir:22:5
  wire [63:0]         _handshake_buffer94_out0;	// hlsinput.mlir:22:5
  wire                _handshake_buffer94_out0_valid;	// hlsinput.mlir:22:5
  wire                _handshake_buffer93_in0_ready;	// hlsinput.mlir:22:5
  wire [63:0]         _handshake_buffer93_out0;	// hlsinput.mlir:22:5
  wire                _handshake_buffer93_out0_valid;	// hlsinput.mlir:22:5
  wire                _handshake_fork15_in0_ready;	// hlsinput.mlir:22:5
  wire [63:0]         _handshake_fork15_out0;	// hlsinput.mlir:22:5
  wire                _handshake_fork15_out0_valid;	// hlsinput.mlir:22:5
  wire [63:0]         _handshake_fork15_out1;	// hlsinput.mlir:22:5
  wire                _handshake_fork15_out1_valid;	// hlsinput.mlir:22:5
  wire [63:0]         _handshake_fork15_out2;	// hlsinput.mlir:22:5
  wire                _handshake_fork15_out2_valid;	// hlsinput.mlir:22:5
  wire [63:0]         _handshake_fork15_out3;	// hlsinput.mlir:22:5
  wire                _handshake_fork15_out3_valid;	// hlsinput.mlir:22:5
  wire                _handshake_sink0_in0_ready;	// hlsinput.mlir:22:5
  wire                _handshake_buffer92_in0_ready;	// hlsinput.mlir:22:5
  wire [63:0]         _handshake_buffer92_out0;	// hlsinput.mlir:22:5
  wire                _handshake_buffer92_out0_valid;	// hlsinput.mlir:22:5
  wire                _handshake_cond_br0_cond_ready;	// hlsinput.mlir:22:5
  wire                _handshake_cond_br0_data_ready;	// hlsinput.mlir:22:5
  wire [63:0]         _handshake_cond_br0_outTrue;	// hlsinput.mlir:22:5
  wire                _handshake_cond_br0_outTrue_valid;	// hlsinput.mlir:22:5
  wire [63:0]         _handshake_cond_br0_outFalse;	// hlsinput.mlir:22:5
  wire                _handshake_cond_br0_outFalse_valid;	// hlsinput.mlir:22:5
  wire                _handshake_buffer91_in0_ready;	// hlsinput.mlir:21:10
  wire                _handshake_buffer91_out0;	// hlsinput.mlir:21:10
  wire                _handshake_buffer91_out0_valid;	// hlsinput.mlir:21:10
  wire                _handshake_buffer90_in0_ready;	// hlsinput.mlir:21:10
  wire                _handshake_buffer90_out0;	// hlsinput.mlir:21:10
  wire                _handshake_buffer90_out0_valid;	// hlsinput.mlir:21:10
  wire                _handshake_buffer89_in0_ready;	// hlsinput.mlir:21:10
  wire                _handshake_buffer89_out0;	// hlsinput.mlir:21:10
  wire                _handshake_buffer89_out0_valid;	// hlsinput.mlir:21:10
  wire                _handshake_buffer88_in0_ready;	// hlsinput.mlir:21:10
  wire                _handshake_buffer88_out0;	// hlsinput.mlir:21:10
  wire                _handshake_buffer88_out0_valid;	// hlsinput.mlir:21:10
  wire                _handshake_fork14_in0_ready;	// hlsinput.mlir:21:10
  wire                _handshake_fork14_out0;	// hlsinput.mlir:21:10
  wire                _handshake_fork14_out0_valid;	// hlsinput.mlir:21:10
  wire                _handshake_fork14_out1;	// hlsinput.mlir:21:10
  wire                _handshake_fork14_out1_valid;	// hlsinput.mlir:21:10
  wire                _handshake_fork14_out2;	// hlsinput.mlir:21:10
  wire                _handshake_fork14_out2_valid;	// hlsinput.mlir:21:10
  wire                _handshake_fork14_out3;	// hlsinput.mlir:21:10
  wire                _handshake_fork14_out3_valid;	// hlsinput.mlir:21:10
  wire                _handshake_fork14_out4;	// hlsinput.mlir:21:10
  wire                _handshake_fork14_out4_valid;	// hlsinput.mlir:21:10
  wire                _handshake_buffer87_in0_ready;	// hlsinput.mlir:21:10
  wire                _handshake_buffer87_out0;	// hlsinput.mlir:21:10
  wire                _handshake_buffer87_out0_valid;	// hlsinput.mlir:21:10
  wire                _arith_cmpi0_in0_ready;	// hlsinput.mlir:21:10
  wire                _arith_cmpi0_in1_ready;	// hlsinput.mlir:21:10
  wire                _arith_cmpi0_out0;	// hlsinput.mlir:21:10
  wire                _arith_cmpi0_out0_valid;	// hlsinput.mlir:21:10
  wire                _handshake_buffer86_in0_ready;	// hlsinput.mlir:3:11
  wire [63:0]         _handshake_buffer86_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer86_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_mux3_select_ready;	// hlsinput.mlir:3:11
  wire                _handshake_mux3_in0_ready;	// hlsinput.mlir:3:11
  wire                _handshake_mux3_in1_ready;	// hlsinput.mlir:3:11
  wire [63:0]         _handshake_mux3_out0;	// hlsinput.mlir:3:11
  wire                _handshake_mux3_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer85_in0_ready;	// hlsinput.mlir:3:11
  wire [63:0]         _handshake_buffer85_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer85_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer84_in0_ready;	// hlsinput.mlir:3:11
  wire [63:0]         _handshake_buffer84_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer84_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_fork13_in0_ready;	// hlsinput.mlir:3:11
  wire [63:0]         _handshake_fork13_out0;	// hlsinput.mlir:3:11
  wire                _handshake_fork13_out0_valid;	// hlsinput.mlir:3:11
  wire [63:0]         _handshake_fork13_out1;	// hlsinput.mlir:3:11
  wire                _handshake_fork13_out1_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer83_in0_ready;	// hlsinput.mlir:3:11
  wire [63:0]         _handshake_buffer83_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer83_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_mux2_select_ready;	// hlsinput.mlir:3:11
  wire                _handshake_mux2_in0_ready;	// hlsinput.mlir:3:11
  wire                _handshake_mux2_in1_ready;	// hlsinput.mlir:3:11
  wire [63:0]         _handshake_mux2_out0;	// hlsinput.mlir:3:11
  wire                _handshake_mux2_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer82_in0_ready;	// hlsinput.mlir:3:11
  wire [63:0]         _handshake_buffer82_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer82_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer81_in0_ready;	// hlsinput.mlir:3:11
  wire [63:0]         _handshake_buffer81_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer81_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_fork12_in0_ready;	// hlsinput.mlir:3:11
  wire [63:0]         _handshake_fork12_out0;	// hlsinput.mlir:3:11
  wire                _handshake_fork12_out0_valid;	// hlsinput.mlir:3:11
  wire [63:0]         _handshake_fork12_out1;	// hlsinput.mlir:3:11
  wire                _handshake_fork12_out1_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer80_in0_ready;	// hlsinput.mlir:3:11
  wire [63:0]         _handshake_buffer80_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer80_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_mux1_select_ready;	// hlsinput.mlir:3:11
  wire                _handshake_mux1_in0_ready;	// hlsinput.mlir:3:11
  wire                _handshake_mux1_in1_ready;	// hlsinput.mlir:3:11
  wire [63:0]         _handshake_mux1_out0;	// hlsinput.mlir:3:11
  wire                _handshake_mux1_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer79_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_buffer79_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer79_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_mux0_select_ready;	// hlsinput.mlir:3:11
  wire                _handshake_mux0_in0_ready;	// hlsinput.mlir:3:11
  wire                _handshake_mux0_in1_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_mux0_out0;	// hlsinput.mlir:3:11
  wire                _handshake_mux0_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer78_in0_ready;	// hlsinput.mlir:3:11
  wire                _handshake_buffer78_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer78_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer77_in0_ready;	// hlsinput.mlir:3:11
  wire                _handshake_buffer77_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer77_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer76_in0_ready;	// hlsinput.mlir:3:11
  wire                _handshake_buffer76_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer76_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer75_in0_ready;	// hlsinput.mlir:3:11
  wire                _handshake_buffer75_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer75_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_fork11_in0_ready;	// hlsinput.mlir:3:11
  wire                _handshake_fork11_out0;	// hlsinput.mlir:3:11
  wire                _handshake_fork11_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_fork11_out1;	// hlsinput.mlir:3:11
  wire                _handshake_fork11_out1_valid;	// hlsinput.mlir:3:11
  wire                _handshake_fork11_out2;	// hlsinput.mlir:3:11
  wire                _handshake_fork11_out2_valid;	// hlsinput.mlir:3:11
  wire                _handshake_fork11_out3;	// hlsinput.mlir:3:11
  wire                _handshake_fork11_out3_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer74_in0_ready;	// hlsinput.mlir:3:11
  wire                _handshake_buffer74_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer74_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer73_in0_ready;	// hlsinput.mlir:17:5
  wire [63:0]         _handshake_buffer73_out0;	// hlsinput.mlir:17:5
  wire                _handshake_buffer73_out0_valid;	// hlsinput.mlir:17:5
  wire                _handshake_buffer72_in0_ready;	// hlsinput.mlir:17:5
  wire [63:0]         _handshake_buffer72_out0;	// hlsinput.mlir:17:5
  wire                _handshake_buffer72_out0_valid;	// hlsinput.mlir:17:5
  wire                _handshake_store5_addrIn0_ready;	// hlsinput.mlir:17:5
  wire                _handshake_store5_dataIn_ready;	// hlsinput.mlir:17:5
  wire                _handshake_store5_ctrl_ready;	// hlsinput.mlir:17:5
  wire [63:0]         _handshake_store5_dataToMem;	// hlsinput.mlir:17:5
  wire                _handshake_store5_dataToMem_valid;	// hlsinput.mlir:17:5
  wire [63:0]         _handshake_store5_addrOut0;	// hlsinput.mlir:17:5
  wire                _handshake_store5_addrOut0_valid;	// hlsinput.mlir:17:5
  wire                _handshake_buffer71_in0_ready;	// hlsinput.mlir:17:5
  // Zero width: wire /*Zero Width*/      _handshake_buffer71_out0;	// hlsinput.mlir:17:5
  wire                _handshake_buffer71_out0_valid;	// hlsinput.mlir:17:5
  wire                _handshake_join4_in0_ready;	// hlsinput.mlir:17:5
  wire                _handshake_join4_in1_ready;	// hlsinput.mlir:17:5
  wire                _handshake_join4_in2_ready;	// hlsinput.mlir:17:5
  // Zero width: wire /*Zero Width*/      _handshake_join4_out0;	// hlsinput.mlir:17:5
  wire                _handshake_join4_out0_valid;	// hlsinput.mlir:17:5
  wire                _handshake_buffer70_in0_ready;	// hlsinput.mlir:16:5
  wire [63:0]         _handshake_buffer70_out0;	// hlsinput.mlir:16:5
  wire                _handshake_buffer70_out0_valid;	// hlsinput.mlir:16:5
  wire                _handshake_buffer69_in0_ready;	// hlsinput.mlir:16:5
  wire [63:0]         _handshake_buffer69_out0;	// hlsinput.mlir:16:5
  wire                _handshake_buffer69_out0_valid;	// hlsinput.mlir:16:5
  wire                _handshake_store4_addrIn0_ready;	// hlsinput.mlir:16:5
  wire                _handshake_store4_dataIn_ready;	// hlsinput.mlir:16:5
  wire                _handshake_store4_ctrl_ready;	// hlsinput.mlir:16:5
  wire [63:0]         _handshake_store4_dataToMem;	// hlsinput.mlir:16:5
  wire                _handshake_store4_dataToMem_valid;	// hlsinput.mlir:16:5
  wire [63:0]         _handshake_store4_addrOut0;	// hlsinput.mlir:16:5
  wire                _handshake_store4_addrOut0_valid;	// hlsinput.mlir:16:5
  wire                _handshake_buffer68_in0_ready;	// hlsinput.mlir:16:5
  // Zero width: wire /*Zero Width*/      _handshake_buffer68_out0;	// hlsinput.mlir:16:5
  wire                _handshake_buffer68_out0_valid;	// hlsinput.mlir:16:5
  wire                _handshake_join3_in0_ready;	// hlsinput.mlir:16:5
  wire                _handshake_join3_in1_ready;	// hlsinput.mlir:16:5
  // Zero width: wire /*Zero Width*/      _handshake_join3_out0;	// hlsinput.mlir:16:5
  wire                _handshake_join3_out0_valid;	// hlsinput.mlir:16:5
  wire                _handshake_buffer67_in0_ready;	// hlsinput.mlir:15:5
  wire [63:0]         _handshake_buffer67_out0;	// hlsinput.mlir:15:5
  wire                _handshake_buffer67_out0_valid;	// hlsinput.mlir:15:5
  wire                _handshake_buffer66_in0_ready;	// hlsinput.mlir:15:5
  wire [63:0]         _handshake_buffer66_out0;	// hlsinput.mlir:15:5
  wire                _handshake_buffer66_out0_valid;	// hlsinput.mlir:15:5
  wire                _handshake_store3_addrIn0_ready;	// hlsinput.mlir:15:5
  wire                _handshake_store3_dataIn_ready;	// hlsinput.mlir:15:5
  wire                _handshake_store3_ctrl_ready;	// hlsinput.mlir:15:5
  wire [63:0]         _handshake_store3_dataToMem;	// hlsinput.mlir:15:5
  wire                _handshake_store3_dataToMem_valid;	// hlsinput.mlir:15:5
  wire [63:0]         _handshake_store3_addrOut0;	// hlsinput.mlir:15:5
  wire                _handshake_store3_addrOut0_valid;	// hlsinput.mlir:15:5
  wire                _handshake_buffer65_in0_ready;	// hlsinput.mlir:13:5
  wire [63:0]         _handshake_buffer65_out0;	// hlsinput.mlir:13:5
  wire                _handshake_buffer65_out0_valid;	// hlsinput.mlir:13:5
  wire                _handshake_buffer64_in0_ready;	// hlsinput.mlir:13:5
  wire [63:0]         _handshake_buffer64_out0;	// hlsinput.mlir:13:5
  wire                _handshake_buffer64_out0_valid;	// hlsinput.mlir:13:5
  wire                _handshake_store2_addrIn0_ready;	// hlsinput.mlir:13:5
  wire                _handshake_store2_dataIn_ready;	// hlsinput.mlir:13:5
  wire                _handshake_store2_ctrl_ready;	// hlsinput.mlir:13:5
  wire [63:0]         _handshake_store2_dataToMem;	// hlsinput.mlir:13:5
  wire                _handshake_store2_dataToMem_valid;	// hlsinput.mlir:13:5
  wire [63:0]         _handshake_store2_addrOut0;	// hlsinput.mlir:13:5
  wire                _handshake_store2_addrOut0_valid;	// hlsinput.mlir:13:5
  wire                _handshake_buffer63_in0_ready;	// hlsinput.mlir:13:5
  // Zero width: wire /*Zero Width*/      _handshake_buffer63_out0;	// hlsinput.mlir:13:5
  wire                _handshake_buffer63_out0_valid;	// hlsinput.mlir:13:5
  wire                _handshake_join2_in0_ready;	// hlsinput.mlir:13:5
  wire                _handshake_join2_in1_ready;	// hlsinput.mlir:13:5
  wire                _handshake_join2_in2_ready;	// hlsinput.mlir:13:5
  // Zero width: wire /*Zero Width*/      _handshake_join2_out0;	// hlsinput.mlir:13:5
  wire                _handshake_join2_out0_valid;	// hlsinput.mlir:13:5
  wire                _handshake_buffer62_in0_ready;	// hlsinput.mlir:12:5
  wire [63:0]         _handshake_buffer62_out0;	// hlsinput.mlir:12:5
  wire                _handshake_buffer62_out0_valid;	// hlsinput.mlir:12:5
  wire                _handshake_buffer61_in0_ready;	// hlsinput.mlir:12:5
  wire [63:0]         _handshake_buffer61_out0;	// hlsinput.mlir:12:5
  wire                _handshake_buffer61_out0_valid;	// hlsinput.mlir:12:5
  wire                _handshake_store1_addrIn0_ready;	// hlsinput.mlir:12:5
  wire                _handshake_store1_dataIn_ready;	// hlsinput.mlir:12:5
  wire                _handshake_store1_ctrl_ready;	// hlsinput.mlir:12:5
  wire [63:0]         _handshake_store1_dataToMem;	// hlsinput.mlir:12:5
  wire                _handshake_store1_dataToMem_valid;	// hlsinput.mlir:12:5
  wire [63:0]         _handshake_store1_addrOut0;	// hlsinput.mlir:12:5
  wire                _handshake_store1_addrOut0_valid;	// hlsinput.mlir:12:5
  wire                _handshake_buffer60_in0_ready;	// hlsinput.mlir:12:5
  // Zero width: wire /*Zero Width*/      _handshake_buffer60_out0;	// hlsinput.mlir:12:5
  wire                _handshake_buffer60_out0_valid;	// hlsinput.mlir:12:5
  wire                _handshake_join1_in0_ready;	// hlsinput.mlir:12:5
  wire                _handshake_join1_in1_ready;	// hlsinput.mlir:12:5
  // Zero width: wire /*Zero Width*/      _handshake_join1_out0;	// hlsinput.mlir:12:5
  wire                _handshake_join1_out0_valid;	// hlsinput.mlir:12:5
  wire                _handshake_buffer59_in0_ready;	// hlsinput.mlir:11:5
  wire [63:0]         _handshake_buffer59_out0;	// hlsinput.mlir:11:5
  wire                _handshake_buffer59_out0_valid;	// hlsinput.mlir:11:5
  wire                _handshake_buffer58_in0_ready;	// hlsinput.mlir:11:5
  wire [63:0]         _handshake_buffer58_out0;	// hlsinput.mlir:11:5
  wire                _handshake_buffer58_out0_valid;	// hlsinput.mlir:11:5
  wire                _handshake_store0_addrIn0_ready;	// hlsinput.mlir:11:5
  wire                _handshake_store0_dataIn_ready;	// hlsinput.mlir:11:5
  wire                _handshake_store0_ctrl_ready;	// hlsinput.mlir:11:5
  wire [63:0]         _handshake_store0_dataToMem;	// hlsinput.mlir:11:5
  wire                _handshake_store0_dataToMem_valid;	// hlsinput.mlir:11:5
  wire [63:0]         _handshake_store0_addrOut0;	// hlsinput.mlir:11:5
  wire                _handshake_store0_addrOut0_valid;	// hlsinput.mlir:11:5
  wire                _handshake_buffer57_in0_ready;	// hlsinput.mlir:9:11
  wire [63:0]         _handshake_buffer57_out0;	// hlsinput.mlir:9:11
  wire                _handshake_buffer57_out0_valid;	// hlsinput.mlir:9:11
  wire                _handshake_buffer56_in0_ready;	// hlsinput.mlir:9:11
  wire [63:0]         _handshake_buffer56_out0;	// hlsinput.mlir:9:11
  wire                _handshake_buffer56_out0_valid;	// hlsinput.mlir:9:11
  wire                _handshake_buffer55_in0_ready;	// hlsinput.mlir:9:11
  wire [63:0]         _handshake_buffer55_out0;	// hlsinput.mlir:9:11
  wire                _handshake_buffer55_out0_valid;	// hlsinput.mlir:9:11
  wire                _handshake_fork10_in0_ready;	// hlsinput.mlir:9:11
  wire [63:0]         _handshake_fork10_out0;	// hlsinput.mlir:9:11
  wire                _handshake_fork10_out0_valid;	// hlsinput.mlir:9:11
  wire [63:0]         _handshake_fork10_out1;	// hlsinput.mlir:9:11
  wire                _handshake_fork10_out1_valid;	// hlsinput.mlir:9:11
  wire [63:0]         _handshake_fork10_out2;	// hlsinput.mlir:9:11
  wire                _handshake_fork10_out2_valid;	// hlsinput.mlir:9:11
  wire                _handshake_buffer54_in0_ready;	// hlsinput.mlir:9:11
  wire [63:0]         _handshake_buffer54_out0;	// hlsinput.mlir:9:11
  wire                _handshake_buffer54_out0_valid;	// hlsinput.mlir:9:11
  wire                _handshake_constant6_ctrl_ready;	// hlsinput.mlir:9:11
  wire [63:0]         _handshake_constant6_out0;	// hlsinput.mlir:9:11
  wire                _handshake_constant6_out0_valid;	// hlsinput.mlir:9:11
  wire                _handshake_buffer53_in0_ready;	// hlsinput.mlir:8:11
  wire [63:0]         _handshake_buffer53_out0;	// hlsinput.mlir:8:11
  wire                _handshake_buffer53_out0_valid;	// hlsinput.mlir:8:11
  wire                _handshake_buffer52_in0_ready;	// hlsinput.mlir:8:11
  wire [63:0]         _handshake_buffer52_out0;	// hlsinput.mlir:8:11
  wire                _handshake_buffer52_out0_valid;	// hlsinput.mlir:8:11
  wire                _handshake_buffer51_in0_ready;	// hlsinput.mlir:8:11
  wire [63:0]         _handshake_buffer51_out0;	// hlsinput.mlir:8:11
  wire                _handshake_buffer51_out0_valid;	// hlsinput.mlir:8:11
  wire                _handshake_fork9_in0_ready;	// hlsinput.mlir:8:11
  wire [63:0]         _handshake_fork9_out0;	// hlsinput.mlir:8:11
  wire                _handshake_fork9_out0_valid;	// hlsinput.mlir:8:11
  wire [63:0]         _handshake_fork9_out1;	// hlsinput.mlir:8:11
  wire                _handshake_fork9_out1_valid;	// hlsinput.mlir:8:11
  wire [63:0]         _handshake_fork9_out2;	// hlsinput.mlir:8:11
  wire                _handshake_fork9_out2_valid;	// hlsinput.mlir:8:11
  wire                _handshake_buffer50_in0_ready;	// hlsinput.mlir:8:11
  wire [63:0]         _handshake_buffer50_out0;	// hlsinput.mlir:8:11
  wire                _handshake_buffer50_out0_valid;	// hlsinput.mlir:8:11
  wire                _handshake_constant5_ctrl_ready;	// hlsinput.mlir:8:11
  wire [63:0]         _handshake_constant5_out0;	// hlsinput.mlir:8:11
  wire                _handshake_constant5_out0_valid;	// hlsinput.mlir:8:11
  wire                _handshake_buffer49_in0_ready;	// hlsinput.mlir:7:11
  wire [63:0]         _handshake_buffer49_out0;	// hlsinput.mlir:7:11
  wire                _handshake_buffer49_out0_valid;	// hlsinput.mlir:7:11
  wire                _handshake_buffer48_in0_ready;	// hlsinput.mlir:7:11
  wire [63:0]         _handshake_buffer48_out0;	// hlsinput.mlir:7:11
  wire                _handshake_buffer48_out0_valid;	// hlsinput.mlir:7:11
  wire                _handshake_fork8_in0_ready;	// hlsinput.mlir:7:11
  wire [63:0]         _handshake_fork8_out0;	// hlsinput.mlir:7:11
  wire                _handshake_fork8_out0_valid;	// hlsinput.mlir:7:11
  wire [63:0]         _handshake_fork8_out1;	// hlsinput.mlir:7:11
  wire                _handshake_fork8_out1_valid;	// hlsinput.mlir:7:11
  wire                _handshake_buffer47_in0_ready;	// hlsinput.mlir:7:11
  wire [63:0]         _handshake_buffer47_out0;	// hlsinput.mlir:7:11
  wire                _handshake_buffer47_out0_valid;	// hlsinput.mlir:7:11
  wire                _handshake_constant4_ctrl_ready;	// hlsinput.mlir:7:11
  wire [63:0]         _handshake_constant4_out0;	// hlsinput.mlir:7:11
  wire                _handshake_constant4_out0_valid;	// hlsinput.mlir:7:11
  wire                _handshake_buffer46_in0_ready;	// hlsinput.mlir:6:14
  wire [63:0]         _handshake_buffer46_out0;	// hlsinput.mlir:6:14
  wire                _handshake_buffer46_out0_valid;	// hlsinput.mlir:6:14
  wire                _handshake_buffer45_in0_ready;	// hlsinput.mlir:6:14
  wire [63:0]         _handshake_buffer45_out0;	// hlsinput.mlir:6:14
  wire                _handshake_buffer45_out0_valid;	// hlsinput.mlir:6:14
  wire                _handshake_fork7_in0_ready;	// hlsinput.mlir:6:14
  wire [63:0]         _handshake_fork7_out0;	// hlsinput.mlir:6:14
  wire                _handshake_fork7_out0_valid;	// hlsinput.mlir:6:14
  wire [63:0]         _handshake_fork7_out1;	// hlsinput.mlir:6:14
  wire                _handshake_fork7_out1_valid;	// hlsinput.mlir:6:14
  wire                _handshake_buffer44_in0_ready;	// hlsinput.mlir:6:14
  wire [63:0]         _handshake_buffer44_out0;	// hlsinput.mlir:6:14
  wire                _handshake_buffer44_out0_valid;	// hlsinput.mlir:6:14
  wire                _handshake_constant3_ctrl_ready;	// hlsinput.mlir:6:14
  wire [63:0]         _handshake_constant3_out0;	// hlsinput.mlir:6:14
  wire                _handshake_constant3_out0_valid;	// hlsinput.mlir:6:14
  wire                _handshake_buffer43_in0_ready;	// hlsinput.mlir:5:14
  wire [63:0]         _handshake_buffer43_out0;	// hlsinput.mlir:5:14
  wire                _handshake_buffer43_out0_valid;	// hlsinput.mlir:5:14
  wire                _handshake_buffer42_in0_ready;	// hlsinput.mlir:5:14
  wire [63:0]         _handshake_buffer42_out0;	// hlsinput.mlir:5:14
  wire                _handshake_buffer42_out0_valid;	// hlsinput.mlir:5:14
  wire                _handshake_fork6_in0_ready;	// hlsinput.mlir:5:14
  wire [63:0]         _handshake_fork6_out0;	// hlsinput.mlir:5:14
  wire                _handshake_fork6_out0_valid;	// hlsinput.mlir:5:14
  wire [63:0]         _handshake_fork6_out1;	// hlsinput.mlir:5:14
  wire                _handshake_fork6_out1_valid;	// hlsinput.mlir:5:14
  wire                _handshake_buffer41_in0_ready;	// hlsinput.mlir:5:14
  wire [63:0]         _handshake_buffer41_out0;	// hlsinput.mlir:5:14
  wire                _handshake_buffer41_out0_valid;	// hlsinput.mlir:5:14
  wire                _handshake_constant2_ctrl_ready;	// hlsinput.mlir:5:14
  wire [63:0]         _handshake_constant2_out0;	// hlsinput.mlir:5:14
  wire                _handshake_constant2_out0_valid;	// hlsinput.mlir:5:14
  wire                _handshake_buffer40_in0_ready;	// hlsinput.mlir:4:12
  wire [63:0]         _handshake_buffer40_out0;	// hlsinput.mlir:4:12
  wire                _handshake_buffer40_out0_valid;	// hlsinput.mlir:4:12
  wire                _handshake_buffer39_in0_ready;	// hlsinput.mlir:4:12
  wire [63:0]         _handshake_buffer39_out0;	// hlsinput.mlir:4:12
  wire                _handshake_buffer39_out0_valid;	// hlsinput.mlir:4:12
  wire                _handshake_fork5_in0_ready;	// hlsinput.mlir:4:12
  wire [63:0]         _handshake_fork5_out0;	// hlsinput.mlir:4:12
  wire                _handshake_fork5_out0_valid;	// hlsinput.mlir:4:12
  wire [63:0]         _handshake_fork5_out1;	// hlsinput.mlir:4:12
  wire                _handshake_fork5_out1_valid;	// hlsinput.mlir:4:12
  wire                _handshake_buffer38_in0_ready;	// hlsinput.mlir:4:12
  wire [63:0]         _handshake_buffer38_out0;	// hlsinput.mlir:4:12
  wire                _handshake_buffer38_out0_valid;	// hlsinput.mlir:4:12
  wire                _handshake_constant1_ctrl_ready;	// hlsinput.mlir:4:12
  wire [63:0]         _handshake_constant1_out0;	// hlsinput.mlir:4:12
  wire                _handshake_constant1_out0_valid;	// hlsinput.mlir:4:12
  wire                _handshake_buffer37_in0_ready;	// hlsinput.mlir:3:11
  wire [63:0]         _handshake_buffer37_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer37_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_constant0_ctrl_ready;	// hlsinput.mlir:3:11
  wire [63:0]         _handshake_constant0_out0;	// hlsinput.mlir:3:11
  wire                _handshake_constant0_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer36_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_buffer36_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer36_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_join0_in0_ready;	// hlsinput.mlir:3:11
  wire                _handshake_join0_in1_ready;	// hlsinput.mlir:3:11
  wire                _handshake_join0_in2_ready;	// hlsinput.mlir:3:11
  wire                _handshake_join0_in3_ready;	// hlsinput.mlir:3:11
  wire                _handshake_join0_in4_ready;	// hlsinput.mlir:3:11
  wire                _handshake_join0_in5_ready;	// hlsinput.mlir:3:11
  wire                _handshake_join0_in6_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_join0_out0;	// hlsinput.mlir:3:11
  wire                _handshake_join0_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer35_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_buffer35_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer35_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer34_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_buffer34_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer34_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer33_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_buffer33_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer33_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_fork4_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_fork4_out0;	// hlsinput.mlir:3:11
  wire                _handshake_fork4_out0_valid;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_fork4_out1;	// hlsinput.mlir:3:11
  wire                _handshake_fork4_out1_valid;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_fork4_out2;	// hlsinput.mlir:3:11
  wire                _handshake_fork4_out2_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer32_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_buffer32_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer32_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer31_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_buffer31_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer31_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_fork3_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_fork3_out0;	// hlsinput.mlir:3:11
  wire                _handshake_fork3_out0_valid;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_fork3_out1;	// hlsinput.mlir:3:11
  wire                _handshake_fork3_out1_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer30_in0_ready;	// hlsinput.mlir:3:11
  wire [63:0]         _handshake_buffer30_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer30_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer29_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_buffer29_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer29_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer28_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_buffer28_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer28_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer27_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_buffer27_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer27_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer26_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_buffer26_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer26_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_memory2_stData0_ready;	// hlsinput.mlir:3:11
  wire                _handshake_memory2_stAddr0_ready;	// hlsinput.mlir:3:11
  wire                _handshake_memory2_stData1_ready;	// hlsinput.mlir:3:11
  wire                _handshake_memory2_stAddr1_ready;	// hlsinput.mlir:3:11
  wire                _handshake_memory2_stData2_ready;	// hlsinput.mlir:3:11
  wire                _handshake_memory2_stAddr2_ready;	// hlsinput.mlir:3:11
  wire                _handshake_memory2_ldAddr0_ready;	// hlsinput.mlir:3:11
  wire [63:0]         _handshake_memory2_ldData0;	// hlsinput.mlir:3:11
  wire                _handshake_memory2_ldData0_valid;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_memory2_stDone0;	// hlsinput.mlir:3:11
  wire                _handshake_memory2_stDone0_valid;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_memory2_stDone1;	// hlsinput.mlir:3:11
  wire                _handshake_memory2_stDone1_valid;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_memory2_stDone2;	// hlsinput.mlir:3:11
  wire                _handshake_memory2_stDone2_valid;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_memory2_ldDone0;	// hlsinput.mlir:3:11
  wire                _handshake_memory2_ldDone0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer25_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_buffer25_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer25_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer24_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_buffer24_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer24_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer23_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_buffer23_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer23_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_fork2_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_fork2_out0;	// hlsinput.mlir:3:11
  wire                _handshake_fork2_out0_valid;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_fork2_out1;	// hlsinput.mlir:3:11
  wire                _handshake_fork2_out1_valid;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_fork2_out2;	// hlsinput.mlir:3:11
  wire                _handshake_fork2_out2_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer22_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_buffer22_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer22_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer21_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_buffer21_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer21_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_fork1_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_fork1_out0;	// hlsinput.mlir:3:11
  wire                _handshake_fork1_out0_valid;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_fork1_out1;	// hlsinput.mlir:3:11
  wire                _handshake_fork1_out1_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer20_in0_ready;	// hlsinput.mlir:3:11
  wire [63:0]         _handshake_buffer20_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer20_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer19_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_buffer19_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer19_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer18_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_buffer18_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer18_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer17_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_buffer17_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer17_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer16_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_buffer16_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer16_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_memory1_stData0_ready;	// hlsinput.mlir:3:11
  wire                _handshake_memory1_stAddr0_ready;	// hlsinput.mlir:3:11
  wire                _handshake_memory1_stData1_ready;	// hlsinput.mlir:3:11
  wire                _handshake_memory1_stAddr1_ready;	// hlsinput.mlir:3:11
  wire                _handshake_memory1_stData2_ready;	// hlsinput.mlir:3:11
  wire                _handshake_memory1_stAddr2_ready;	// hlsinput.mlir:3:11
  wire                _handshake_memory1_ldAddr0_ready;	// hlsinput.mlir:3:11
  wire [63:0]         _handshake_memory1_ldData0;	// hlsinput.mlir:3:11
  wire                _handshake_memory1_ldData0_valid;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_memory1_stDone0;	// hlsinput.mlir:3:11
  wire                _handshake_memory1_stDone0_valid;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_memory1_stDone1;	// hlsinput.mlir:3:11
  wire                _handshake_memory1_stDone1_valid;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_memory1_stDone2;	// hlsinput.mlir:3:11
  wire                _handshake_memory1_stDone2_valid;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_memory1_ldDone0;	// hlsinput.mlir:3:11
  wire                _handshake_memory1_ldDone0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer15_in0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_buffer15_out0;	// hlsinput.mlir:3:11
  wire                _handshake_buffer15_out0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_memory0_stData0_ready;	// hlsinput.mlir:3:11
  wire                _handshake_memory0_stAddr0_ready;	// hlsinput.mlir:3:11
  // Zero width: wire /*Zero Width*/      _handshake_memory0_stDone0;	// hlsinput.mlir:3:11
  wire                _handshake_memory0_stDone0_valid;	// hlsinput.mlir:3:11
  wire                _handshake_buffer14_in0_ready;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_buffer14_out0;	// hlsinput.mlir:2:3
  wire                _handshake_buffer14_out0_valid;	// hlsinput.mlir:2:3
  wire                _handshake_buffer13_in0_ready;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_buffer13_out0;	// hlsinput.mlir:2:3
  wire                _handshake_buffer13_out0_valid;	// hlsinput.mlir:2:3
  wire                _handshake_buffer12_in0_ready;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_buffer12_out0;	// hlsinput.mlir:2:3
  wire                _handshake_buffer12_out0_valid;	// hlsinput.mlir:2:3
  wire                _handshake_buffer11_in0_ready;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_buffer11_out0;	// hlsinput.mlir:2:3
  wire                _handshake_buffer11_out0_valid;	// hlsinput.mlir:2:3
  wire                _handshake_buffer10_in0_ready;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_buffer10_out0;	// hlsinput.mlir:2:3
  wire                _handshake_buffer10_out0_valid;	// hlsinput.mlir:2:3
  wire                _handshake_buffer9_in0_ready;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_buffer9_out0;	// hlsinput.mlir:2:3
  wire                _handshake_buffer9_out0_valid;	// hlsinput.mlir:2:3
  wire                _handshake_buffer8_in0_ready;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_buffer8_out0;	// hlsinput.mlir:2:3
  wire                _handshake_buffer8_out0_valid;	// hlsinput.mlir:2:3
  wire                _handshake_buffer7_in0_ready;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_buffer7_out0;	// hlsinput.mlir:2:3
  wire                _handshake_buffer7_out0_valid;	// hlsinput.mlir:2:3
  wire                _handshake_buffer6_in0_ready;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_buffer6_out0;	// hlsinput.mlir:2:3
  wire                _handshake_buffer6_out0_valid;	// hlsinput.mlir:2:3
  wire                _handshake_buffer5_in0_ready;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_buffer5_out0;	// hlsinput.mlir:2:3
  wire                _handshake_buffer5_out0_valid;	// hlsinput.mlir:2:3
  wire                _handshake_buffer4_in0_ready;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_buffer4_out0;	// hlsinput.mlir:2:3
  wire                _handshake_buffer4_out0_valid;	// hlsinput.mlir:2:3
  wire                _handshake_buffer3_in0_ready;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_buffer3_out0;	// hlsinput.mlir:2:3
  wire                _handshake_buffer3_out0_valid;	// hlsinput.mlir:2:3
  wire                _handshake_buffer2_in0_ready;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_buffer2_out0;	// hlsinput.mlir:2:3
  wire                _handshake_buffer2_out0_valid;	// hlsinput.mlir:2:3
  wire                _handshake_buffer1_in0_ready;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_buffer1_out0;	// hlsinput.mlir:2:3
  wire                _handshake_buffer1_out0_valid;	// hlsinput.mlir:2:3
  wire                _handshake_fork0_in0_ready;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_fork0_out0;	// hlsinput.mlir:2:3
  wire                _handshake_fork0_out0_valid;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_fork0_out1;	// hlsinput.mlir:2:3
  wire                _handshake_fork0_out1_valid;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_fork0_out2;	// hlsinput.mlir:2:3
  wire                _handshake_fork0_out2_valid;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_fork0_out3;	// hlsinput.mlir:2:3
  wire                _handshake_fork0_out3_valid;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_fork0_out4;	// hlsinput.mlir:2:3
  wire                _handshake_fork0_out4_valid;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_fork0_out5;	// hlsinput.mlir:2:3
  wire                _handshake_fork0_out5_valid;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_fork0_out6;	// hlsinput.mlir:2:3
  wire                _handshake_fork0_out6_valid;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_fork0_out7;	// hlsinput.mlir:2:3
  wire                _handshake_fork0_out7_valid;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_fork0_out8;	// hlsinput.mlir:2:3
  wire                _handshake_fork0_out8_valid;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_fork0_out9;	// hlsinput.mlir:2:3
  wire                _handshake_fork0_out9_valid;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_fork0_out10;	// hlsinput.mlir:2:3
  wire                _handshake_fork0_out10_valid;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_fork0_out11;	// hlsinput.mlir:2:3
  wire                _handshake_fork0_out11_valid;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_fork0_out12;	// hlsinput.mlir:2:3
  wire                _handshake_fork0_out12_valid;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_fork0_out13;	// hlsinput.mlir:2:3
  wire                _handshake_fork0_out13_valid;	// hlsinput.mlir:2:3
  // Zero width: wire /*Zero Width*/      _handshake_buffer0_out0;	// hlsinput.mlir:2:3
  wire                _handshake_buffer0_out0_valid;	// hlsinput.mlir:2:3
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer0 (	// hlsinput.mlir:2:3
  //.in0        (in0)
    .in0_valid  (in0_valid),
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_fork0_in0_ready),	// hlsinput.mlir:2:3
    .in0_ready  (in0_ready),
  //.out0       (_handshake_buffer0_out0),
    .out0_valid (_handshake_buffer0_out0_valid)
  );	// hlsinput.mlir:2:3
  handshake_fork_1ins_14outs_ctrl handshake_fork0 (	// hlsinput.mlir:2:3
  //.in0         (_handshake_buffer0_out0)	// hlsinput.mlir:2:3
    .in0_valid   (_handshake_buffer0_out0_valid),	// hlsinput.mlir:2:3
    .clock       (clock),
    .reset       (reset),
    .out0_ready  (_handshake_buffer14_in0_ready),	// hlsinput.mlir:2:3
    .out1_ready  (_handshake_buffer13_in0_ready),	// hlsinput.mlir:2:3
    .out2_ready  (_handshake_buffer12_in0_ready),	// hlsinput.mlir:2:3
    .out3_ready  (_handshake_buffer11_in0_ready),	// hlsinput.mlir:2:3
    .out4_ready  (_handshake_buffer10_in0_ready),	// hlsinput.mlir:2:3
    .out5_ready  (_handshake_buffer9_in0_ready),	// hlsinput.mlir:2:3
    .out6_ready  (_handshake_buffer8_in0_ready),	// hlsinput.mlir:2:3
    .out7_ready  (_handshake_buffer7_in0_ready),	// hlsinput.mlir:2:3
    .out8_ready  (_handshake_buffer6_in0_ready),	// hlsinput.mlir:2:3
    .out9_ready  (_handshake_buffer5_in0_ready),	// hlsinput.mlir:2:3
    .out10_ready (_handshake_buffer4_in0_ready),	// hlsinput.mlir:2:3
    .out11_ready (_handshake_buffer3_in0_ready),	// hlsinput.mlir:2:3
    .out12_ready (_handshake_buffer2_in0_ready),	// hlsinput.mlir:2:3
    .out13_ready (_handshake_buffer1_in0_ready),	// hlsinput.mlir:2:3
    .in0_ready   (_handshake_fork0_in0_ready),
  //.out0        (_handshake_fork0_out0),
    .out0_valid  (_handshake_fork0_out0_valid),
  //.out1        (_handshake_fork0_out1),
    .out1_valid  (_handshake_fork0_out1_valid),
  //.out2        (_handshake_fork0_out2),
    .out2_valid  (_handshake_fork0_out2_valid),
  //.out3        (_handshake_fork0_out3),
    .out3_valid  (_handshake_fork0_out3_valid),
  //.out4        (_handshake_fork0_out4),
    .out4_valid  (_handshake_fork0_out4_valid),
  //.out5        (_handshake_fork0_out5),
    .out5_valid  (_handshake_fork0_out5_valid),
  //.out6        (_handshake_fork0_out6),
    .out6_valid  (_handshake_fork0_out6_valid),
  //.out7        (_handshake_fork0_out7),
    .out7_valid  (_handshake_fork0_out7_valid),
  //.out8        (_handshake_fork0_out8),
    .out8_valid  (_handshake_fork0_out8_valid),
  //.out9        (_handshake_fork0_out9),
    .out9_valid  (_handshake_fork0_out9_valid),
  //.out10       (_handshake_fork0_out10),
    .out10_valid (_handshake_fork0_out10_valid),
  //.out11       (_handshake_fork0_out11),
    .out11_valid (_handshake_fork0_out11_valid),
  //.out12       (_handshake_fork0_out12),
    .out12_valid (_handshake_fork0_out12_valid),
  //.out13       (_handshake_fork0_out13),
    .out13_valid (_handshake_fork0_out13_valid)
  );	// hlsinput.mlir:2:3
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer1 (	// hlsinput.mlir:2:3
  //.in0        (_handshake_fork0_out13)	// hlsinput.mlir:2:3
    .in0_valid  (_handshake_fork0_out13_valid),	// hlsinput.mlir:2:3
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_join4_in0_ready),	// hlsinput.mlir:17:5
    .in0_ready  (_handshake_buffer1_in0_ready),
  //.out0       (_handshake_buffer1_out0),
    .out0_valid (_handshake_buffer1_out0_valid)
  );	// hlsinput.mlir:2:3
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer2 (	// hlsinput.mlir:2:3
  //.in0        (_handshake_fork0_out12)	// hlsinput.mlir:2:3
    .in0_valid  (_handshake_fork0_out12_valid),	// hlsinput.mlir:2:3
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_join3_in0_ready),	// hlsinput.mlir:16:5
    .in0_ready  (_handshake_buffer2_in0_ready),
  //.out0       (_handshake_buffer2_out0),
    .out0_valid (_handshake_buffer2_out0_valid)
  );	// hlsinput.mlir:2:3
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer3 (	// hlsinput.mlir:2:3
  //.in0        (_handshake_fork0_out11)	// hlsinput.mlir:2:3
    .in0_valid  (_handshake_fork0_out11_valid),	// hlsinput.mlir:2:3
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_store3_ctrl_ready),	// hlsinput.mlir:15:5
    .in0_ready  (_handshake_buffer3_in0_ready),
  //.out0       (_handshake_buffer3_out0),
    .out0_valid (_handshake_buffer3_out0_valid)
  );	// hlsinput.mlir:2:3
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer4 (	// hlsinput.mlir:2:3
  //.in0        (_handshake_fork0_out10)	// hlsinput.mlir:2:3
    .in0_valid  (_handshake_fork0_out10_valid),	// hlsinput.mlir:2:3
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_join0_in0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer4_in0_ready),
  //.out0       (_handshake_buffer4_out0),
    .out0_valid (_handshake_buffer4_out0_valid)
  );	// hlsinput.mlir:2:3
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer5 (	// hlsinput.mlir:2:3
  //.in0        (_handshake_fork0_out9)	// hlsinput.mlir:2:3
    .in0_valid  (_handshake_fork0_out9_valid),	// hlsinput.mlir:2:3
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_join2_in0_ready),	// hlsinput.mlir:13:5
    .in0_ready  (_handshake_buffer5_in0_ready),
  //.out0       (_handshake_buffer5_out0),
    .out0_valid (_handshake_buffer5_out0_valid)
  );	// hlsinput.mlir:2:3
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer6 (	// hlsinput.mlir:2:3
  //.in0        (_handshake_fork0_out8)	// hlsinput.mlir:2:3
    .in0_valid  (_handshake_fork0_out8_valid),	// hlsinput.mlir:2:3
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_join1_in0_ready),	// hlsinput.mlir:12:5
    .in0_ready  (_handshake_buffer6_in0_ready),
  //.out0       (_handshake_buffer6_out0),
    .out0_valid (_handshake_buffer6_out0_valid)
  );	// hlsinput.mlir:2:3
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer7 (	// hlsinput.mlir:2:3
  //.in0        (_handshake_fork0_out7)	// hlsinput.mlir:2:3
    .in0_valid  (_handshake_fork0_out7_valid),	// hlsinput.mlir:2:3
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_store0_ctrl_ready),	// hlsinput.mlir:11:5
    .in0_ready  (_handshake_buffer7_in0_ready),
  //.out0       (_handshake_buffer7_out0),
    .out0_valid (_handshake_buffer7_out0_valid)
  );	// hlsinput.mlir:2:3
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer8 (	// hlsinput.mlir:2:3
  //.in0        (_handshake_fork0_out6)	// hlsinput.mlir:2:3
    .in0_valid  (_handshake_fork0_out6_valid),	// hlsinput.mlir:2:3
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_constant6_ctrl_ready),	// hlsinput.mlir:9:11
    .in0_ready  (_handshake_buffer8_in0_ready),
  //.out0       (_handshake_buffer8_out0),
    .out0_valid (_handshake_buffer8_out0_valid)
  );	// hlsinput.mlir:2:3
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer9 (	// hlsinput.mlir:2:3
  //.in0        (_handshake_fork0_out5)	// hlsinput.mlir:2:3
    .in0_valid  (_handshake_fork0_out5_valid),	// hlsinput.mlir:2:3
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_constant5_ctrl_ready),	// hlsinput.mlir:8:11
    .in0_ready  (_handshake_buffer9_in0_ready),
  //.out0       (_handshake_buffer9_out0),
    .out0_valid (_handshake_buffer9_out0_valid)
  );	// hlsinput.mlir:2:3
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer10 (	// hlsinput.mlir:2:3
  //.in0        (_handshake_fork0_out4)	// hlsinput.mlir:2:3
    .in0_valid  (_handshake_fork0_out4_valid),	// hlsinput.mlir:2:3
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_constant4_ctrl_ready),	// hlsinput.mlir:7:11
    .in0_ready  (_handshake_buffer10_in0_ready),
  //.out0       (_handshake_buffer10_out0),
    .out0_valid (_handshake_buffer10_out0_valid)
  );	// hlsinput.mlir:2:3
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer11 (	// hlsinput.mlir:2:3
  //.in0        (_handshake_fork0_out3)	// hlsinput.mlir:2:3
    .in0_valid  (_handshake_fork0_out3_valid),	// hlsinput.mlir:2:3
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_constant3_ctrl_ready),	// hlsinput.mlir:6:14
    .in0_ready  (_handshake_buffer11_in0_ready),
  //.out0       (_handshake_buffer11_out0),
    .out0_valid (_handshake_buffer11_out0_valid)
  );	// hlsinput.mlir:2:3
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer12 (	// hlsinput.mlir:2:3
  //.in0        (_handshake_fork0_out2)	// hlsinput.mlir:2:3
    .in0_valid  (_handshake_fork0_out2_valid),	// hlsinput.mlir:2:3
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_constant2_ctrl_ready),	// hlsinput.mlir:5:14
    .in0_ready  (_handshake_buffer12_in0_ready),
  //.out0       (_handshake_buffer12_out0),
    .out0_valid (_handshake_buffer12_out0_valid)
  );	// hlsinput.mlir:2:3
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer13 (	// hlsinput.mlir:2:3
  //.in0        (_handshake_fork0_out1)	// hlsinput.mlir:2:3
    .in0_valid  (_handshake_fork0_out1_valid),	// hlsinput.mlir:2:3
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_constant1_ctrl_ready),	// hlsinput.mlir:4:12
    .in0_ready  (_handshake_buffer13_in0_ready),
  //.out0       (_handshake_buffer13_out0),
    .out0_valid (_handshake_buffer13_out0_valid)
  );	// hlsinput.mlir:2:3
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer14 (	// hlsinput.mlir:2:3
  //.in0        (_handshake_fork0_out0)	// hlsinput.mlir:2:3
    .in0_valid  (_handshake_fork0_out0_valid),	// hlsinput.mlir:2:3
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_constant0_ctrl_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer14_in0_ready),
  //.out0       (_handshake_buffer14_out0),
    .out0_valid (_handshake_buffer14_out0_valid)
  );	// hlsinput.mlir:2:3
  handshake_memory_out_ui64_id2 handshake_memory0 (	// hlsinput.mlir:3:11
    .stData0       (_handshake_buffer114_out0),	// hlsinput.mlir:27:5
    .stData0_valid (_handshake_buffer114_out0_valid),	// hlsinput.mlir:27:5
    .stAddr0       (_handshake_buffer113_out0),	// hlsinput.mlir:27:5
    .stAddr0_valid (_handshake_buffer113_out0_valid),	// hlsinput.mlir:27:5
    .clock         (clock),
    .reset         (reset),
    .stDone0_ready (_handshake_buffer15_in0_ready),	// hlsinput.mlir:3:11
    .stData0_ready (_handshake_memory0_stData0_ready),
    .stAddr0_ready (_handshake_memory0_stAddr0_ready),
  //.stDone0       (_handshake_memory0_stDone0),
    .stDone0_valid (_handshake_memory0_stDone0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer15 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_memory0_stDone0)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_memory0_stDone0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_join5_in3_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer15_in0_ready),
  //.out0       (_handshake_buffer15_out0),
    .out0_valid (_handshake_buffer15_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_memory_out_ui64_id1 handshake_memory1 (	// hlsinput.mlir:3:11
    .stData0       (_handshake_buffer67_out0),	// hlsinput.mlir:15:5
    .stData0_valid (_handshake_buffer67_out0_valid),	// hlsinput.mlir:15:5
    .stAddr0       (_handshake_buffer66_out0),	// hlsinput.mlir:15:5
    .stAddr0_valid (_handshake_buffer66_out0_valid),	// hlsinput.mlir:15:5
    .stData1       (_handshake_buffer70_out0),	// hlsinput.mlir:16:5
    .stData1_valid (_handshake_buffer70_out0_valid),	// hlsinput.mlir:16:5
    .stAddr1       (_handshake_buffer69_out0),	// hlsinput.mlir:16:5
    .stAddr1_valid (_handshake_buffer69_out0_valid),	// hlsinput.mlir:16:5
    .stData2       (_handshake_buffer73_out0),	// hlsinput.mlir:17:5
    .stData2_valid (_handshake_buffer73_out0_valid),	// hlsinput.mlir:17:5
    .stAddr2       (_handshake_buffer72_out0),	// hlsinput.mlir:17:5
    .stAddr2_valid (_handshake_buffer72_out0_valid),	// hlsinput.mlir:17:5
    .ldAddr0       (_handshake_buffer110_out0),	// hlsinput.mlir:25:10
    .ldAddr0_valid (_handshake_buffer110_out0_valid),	// hlsinput.mlir:25:10
    .clock         (clock),
    .reset         (reset),
    .ldData0_ready (_handshake_buffer20_in0_ready),	// hlsinput.mlir:3:11
    .stDone0_ready (_handshake_buffer19_in0_ready),	// hlsinput.mlir:3:11
    .stDone1_ready (_handshake_buffer18_in0_ready),	// hlsinput.mlir:3:11
    .stDone2_ready (_handshake_buffer17_in0_ready),	// hlsinput.mlir:3:11
    .ldDone0_ready (_handshake_buffer16_in0_ready),	// hlsinput.mlir:3:11
    .stData0_ready (_handshake_memory1_stData0_ready),
    .stAddr0_ready (_handshake_memory1_stAddr0_ready),
    .stData1_ready (_handshake_memory1_stData1_ready),
    .stAddr1_ready (_handshake_memory1_stAddr1_ready),
    .stData2_ready (_handshake_memory1_stData2_ready),
    .stAddr2_ready (_handshake_memory1_stAddr2_ready),
    .ldAddr0_ready (_handshake_memory1_ldAddr0_ready),
    .ldData0       (_handshake_memory1_ldData0),
    .ldData0_valid (_handshake_memory1_ldData0_valid),
  //.stDone0       (_handshake_memory1_stDone0),
    .stDone0_valid (_handshake_memory1_stDone0_valid),
  //.stDone1       (_handshake_memory1_stDone1),
    .stDone1_valid (_handshake_memory1_stDone1_valid),
  //.stDone2       (_handshake_memory1_stDone2),
    .stDone2_valid (_handshake_memory1_stDone2_valid),
  //.ldDone0       (_handshake_memory1_ldDone0),
    .ldDone0_valid (_handshake_memory1_ldDone0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer16 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_memory1_ldDone0)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_memory1_ldDone0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_join5_in2_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer16_in0_ready),
  //.out0       (_handshake_buffer16_out0),
    .out0_valid (_handshake_buffer16_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer17 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_memory1_stDone2)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_memory1_stDone2_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_join0_in6_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer17_in0_ready),
  //.out0       (_handshake_buffer17_out0),
    .out0_valid (_handshake_buffer17_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer18 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_memory1_stDone1)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_memory1_stDone1_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_fork1_in0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer18_in0_ready),
  //.out0       (_handshake_buffer18_out0),
    .out0_valid (_handshake_buffer18_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer19 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_memory1_stDone0)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_memory1_stDone0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_fork2_in0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer19_in0_ready),
  //.out0       (_handshake_buffer19_out0),
    .out0_valid (_handshake_buffer19_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer20 (	// hlsinput.mlir:3:11
    .in0        (_handshake_memory1_ldData0),	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_memory1_ldData0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_load1_dataFromMem_ready),	// hlsinput.mlir:25:10
    .in0_ready  (_handshake_buffer20_in0_ready),
    .out0       (_handshake_buffer20_out0),
    .out0_valid (_handshake_buffer20_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_fork_1ins_2outs_ctrl handshake_fork1 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_buffer18_out0)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_buffer18_out0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_buffer22_in0_ready),	// hlsinput.mlir:3:11
    .out1_ready (_handshake_buffer21_in0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_fork1_in0_ready),
  //.out0       (_handshake_fork1_out0),
    .out0_valid (_handshake_fork1_out0_valid),
  //.out1       (_handshake_fork1_out1),
    .out1_valid (_handshake_fork1_out1_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer21 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_fork1_out1)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_fork1_out1_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_join0_in5_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer21_in0_ready),
  //.out0       (_handshake_buffer21_out0),
    .out0_valid (_handshake_buffer21_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer22 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_fork1_out0)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_fork1_out0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_join4_in2_ready),	// hlsinput.mlir:17:5
    .in0_ready  (_handshake_buffer22_in0_ready),
  //.out0       (_handshake_buffer22_out0),
    .out0_valid (_handshake_buffer22_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_fork_1ins_3outs_ctrl handshake_fork2 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_buffer19_out0)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_buffer19_out0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_buffer25_in0_ready),	// hlsinput.mlir:3:11
    .out1_ready (_handshake_buffer24_in0_ready),	// hlsinput.mlir:3:11
    .out2_ready (_handshake_buffer23_in0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_fork2_in0_ready),
  //.out0       (_handshake_fork2_out0),
    .out0_valid (_handshake_fork2_out0_valid),
  //.out1       (_handshake_fork2_out1),
    .out1_valid (_handshake_fork2_out1_valid),
  //.out2       (_handshake_fork2_out2),
    .out2_valid (_handshake_fork2_out2_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer23 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_fork2_out2)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_fork2_out2_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_join0_in4_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer23_in0_ready),
  //.out0       (_handshake_buffer23_out0),
    .out0_valid (_handshake_buffer23_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer24 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_fork2_out1)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_fork2_out1_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_join3_in1_ready),	// hlsinput.mlir:16:5
    .in0_ready  (_handshake_buffer24_in0_ready),
  //.out0       (_handshake_buffer24_out0),
    .out0_valid (_handshake_buffer24_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer25 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_fork2_out0)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_fork2_out0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_join4_in1_ready),	// hlsinput.mlir:17:5
    .in0_ready  (_handshake_buffer25_in0_ready),
  //.out0       (_handshake_buffer25_out0),
    .out0_valid (_handshake_buffer25_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_memory_out_ui64_id0 handshake_memory2 (	// hlsinput.mlir:3:11
    .stData0       (_handshake_buffer59_out0),	// hlsinput.mlir:11:5
    .stData0_valid (_handshake_buffer59_out0_valid),	// hlsinput.mlir:11:5
    .stAddr0       (_handshake_buffer58_out0),	// hlsinput.mlir:11:5
    .stAddr0_valid (_handshake_buffer58_out0_valid),	// hlsinput.mlir:11:5
    .stData1       (_handshake_buffer62_out0),	// hlsinput.mlir:12:5
    .stData1_valid (_handshake_buffer62_out0_valid),	// hlsinput.mlir:12:5
    .stAddr1       (_handshake_buffer61_out0),	// hlsinput.mlir:12:5
    .stAddr1_valid (_handshake_buffer61_out0_valid),	// hlsinput.mlir:12:5
    .stData2       (_handshake_buffer65_out0),	// hlsinput.mlir:13:5
    .stData2_valid (_handshake_buffer65_out0_valid),	// hlsinput.mlir:13:5
    .stAddr2       (_handshake_buffer64_out0),	// hlsinput.mlir:13:5
    .stAddr2_valid (_handshake_buffer64_out0_valid),	// hlsinput.mlir:13:5
    .ldAddr0       (_handshake_buffer108_out0),	// hlsinput.mlir:24:10
    .ldAddr0_valid (_handshake_buffer108_out0_valid),	// hlsinput.mlir:24:10
    .clock         (clock),
    .reset         (reset),
    .ldData0_ready (_handshake_buffer30_in0_ready),	// hlsinput.mlir:3:11
    .stDone0_ready (_handshake_buffer29_in0_ready),	// hlsinput.mlir:3:11
    .stDone1_ready (_handshake_buffer28_in0_ready),	// hlsinput.mlir:3:11
    .stDone2_ready (_handshake_buffer27_in0_ready),	// hlsinput.mlir:3:11
    .ldDone0_ready (_handshake_buffer26_in0_ready),	// hlsinput.mlir:3:11
    .stData0_ready (_handshake_memory2_stData0_ready),
    .stAddr0_ready (_handshake_memory2_stAddr0_ready),
    .stData1_ready (_handshake_memory2_stData1_ready),
    .stAddr1_ready (_handshake_memory2_stAddr1_ready),
    .stData2_ready (_handshake_memory2_stData2_ready),
    .stAddr2_ready (_handshake_memory2_stAddr2_ready),
    .ldAddr0_ready (_handshake_memory2_ldAddr0_ready),
    .ldData0       (_handshake_memory2_ldData0),
    .ldData0_valid (_handshake_memory2_ldData0_valid),
  //.stDone0       (_handshake_memory2_stDone0),
    .stDone0_valid (_handshake_memory2_stDone0_valid),
  //.stDone1       (_handshake_memory2_stDone1),
    .stDone1_valid (_handshake_memory2_stDone1_valid),
  //.stDone2       (_handshake_memory2_stDone2),
    .stDone2_valid (_handshake_memory2_stDone2_valid),
  //.ldDone0       (_handshake_memory2_ldDone0),
    .ldDone0_valid (_handshake_memory2_ldDone0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer26 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_memory2_ldDone0)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_memory2_ldDone0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_join5_in1_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer26_in0_ready),
  //.out0       (_handshake_buffer26_out0),
    .out0_valid (_handshake_buffer26_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer27 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_memory2_stDone2)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_memory2_stDone2_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_join0_in3_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer27_in0_ready),
  //.out0       (_handshake_buffer27_out0),
    .out0_valid (_handshake_buffer27_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer28 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_memory2_stDone1)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_memory2_stDone1_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_fork3_in0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer28_in0_ready),
  //.out0       (_handshake_buffer28_out0),
    .out0_valid (_handshake_buffer28_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer29 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_memory2_stDone0)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_memory2_stDone0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_fork4_in0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer29_in0_ready),
  //.out0       (_handshake_buffer29_out0),
    .out0_valid (_handshake_buffer29_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer30 (	// hlsinput.mlir:3:11
    .in0        (_handshake_memory2_ldData0),	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_memory2_ldData0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_load0_dataFromMem_ready),	// hlsinput.mlir:24:10
    .in0_ready  (_handshake_buffer30_in0_ready),
    .out0       (_handshake_buffer30_out0),
    .out0_valid (_handshake_buffer30_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_fork_1ins_2outs_ctrl handshake_fork3 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_buffer28_out0)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_buffer28_out0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_buffer32_in0_ready),	// hlsinput.mlir:3:11
    .out1_ready (_handshake_buffer31_in0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_fork3_in0_ready),
  //.out0       (_handshake_fork3_out0),
    .out0_valid (_handshake_fork3_out0_valid),
  //.out1       (_handshake_fork3_out1),
    .out1_valid (_handshake_fork3_out1_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer31 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_fork3_out1)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_fork3_out1_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_join2_in2_ready),	// hlsinput.mlir:13:5
    .in0_ready  (_handshake_buffer31_in0_ready),
  //.out0       (_handshake_buffer31_out0),
    .out0_valid (_handshake_buffer31_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer32 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_fork3_out0)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_fork3_out0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_join0_in2_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer32_in0_ready),
  //.out0       (_handshake_buffer32_out0),
    .out0_valid (_handshake_buffer32_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_fork_1ins_3outs_ctrl handshake_fork4 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_buffer29_out0)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_buffer29_out0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_buffer35_in0_ready),	// hlsinput.mlir:3:11
    .out1_ready (_handshake_buffer34_in0_ready),	// hlsinput.mlir:3:11
    .out2_ready (_handshake_buffer33_in0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_fork4_in0_ready),
  //.out0       (_handshake_fork4_out0),
    .out0_valid (_handshake_fork4_out0_valid),
  //.out1       (_handshake_fork4_out1),
    .out1_valid (_handshake_fork4_out1_valid),
  //.out2       (_handshake_fork4_out2),
    .out2_valid (_handshake_fork4_out2_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer33 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_fork4_out2)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_fork4_out2_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_join1_in1_ready),	// hlsinput.mlir:12:5
    .in0_ready  (_handshake_buffer33_in0_ready),
  //.out0       (_handshake_buffer33_out0),
    .out0_valid (_handshake_buffer33_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer34 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_fork4_out1)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_fork4_out1_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_join2_in1_ready),	// hlsinput.mlir:13:5
    .in0_ready  (_handshake_buffer34_in0_ready),
  //.out0       (_handshake_buffer34_out0),
    .out0_valid (_handshake_buffer34_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer35 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_fork4_out0)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_fork4_out0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_join0_in1_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer35_in0_ready),
  //.out0       (_handshake_buffer35_out0),
    .out0_valid (_handshake_buffer35_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_join_7ins_1outs_ctrl handshake_join0 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_buffer4_out0)	// hlsinput.mlir:2:3
    .in0_valid  (_handshake_buffer4_out0_valid),	// hlsinput.mlir:2:3
  //.in1        (_handshake_buffer35_out0),	// hlsinput.mlir:3:11
    .in1_valid  (_handshake_buffer35_out0_valid),	// hlsinput.mlir:3:11
  //.in2        (_handshake_buffer32_out0),	// hlsinput.mlir:3:11
    .in2_valid  (_handshake_buffer32_out0_valid),	// hlsinput.mlir:3:11
  //.in3        (_handshake_buffer27_out0),	// hlsinput.mlir:3:11
    .in3_valid  (_handshake_buffer27_out0_valid),	// hlsinput.mlir:3:11
  //.in4        (_handshake_buffer23_out0),	// hlsinput.mlir:3:11
    .in4_valid  (_handshake_buffer23_out0_valid),	// hlsinput.mlir:3:11
  //.in5        (_handshake_buffer21_out0),	// hlsinput.mlir:3:11
    .in5_valid  (_handshake_buffer21_out0_valid),	// hlsinput.mlir:3:11
  //.in6        (_handshake_buffer17_out0),	// hlsinput.mlir:3:11
    .in6_valid  (_handshake_buffer17_out0_valid),	// hlsinput.mlir:3:11
    .out0_ready (_handshake_buffer36_in0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_join0_in0_ready),
    .in1_ready  (_handshake_join0_in1_ready),
    .in2_ready  (_handshake_join0_in2_ready),
    .in3_ready  (_handshake_join0_in3_ready),
    .in4_ready  (_handshake_join0_in4_ready),
    .in5_ready  (_handshake_join0_in5_ready),
    .in6_ready  (_handshake_join0_in6_ready),
  //.out0       (_handshake_join0_out0),
    .out0_valid (_handshake_join0_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer36 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_join0_out0)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_join0_out0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_mux0_in0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer36_in0_ready),
  //.out0       (_handshake_buffer36_out0),
    .out0_valid (_handshake_buffer36_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_constant_c3_out_ui64 handshake_constant0 (	// hlsinput.mlir:3:11
  //.ctrl       (_handshake_buffer14_out0)	// hlsinput.mlir:2:3
    .ctrl_valid (_handshake_buffer14_out0_valid),	// hlsinput.mlir:2:3
    .out0_ready (_handshake_buffer37_in0_ready),	// hlsinput.mlir:3:11
    .ctrl_ready (_handshake_constant0_ctrl_ready),
    .out0       (_handshake_constant0_out0),
    .out0_valid (_handshake_constant0_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer37 (	// hlsinput.mlir:3:11
    .in0        (_handshake_constant0_out0),	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_constant0_out0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_mux2_in0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer37_in0_ready),
    .out0       (_handshake_buffer37_out0),
    .out0_valid (_handshake_buffer37_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_constant_c3_out_ui64 handshake_constant1 (	// hlsinput.mlir:4:12
  //.ctrl       (_handshake_buffer13_out0)	// hlsinput.mlir:2:3
    .ctrl_valid (_handshake_buffer13_out0_valid),	// hlsinput.mlir:2:3
    .out0_ready (_handshake_buffer38_in0_ready),	// hlsinput.mlir:4:12
    .ctrl_ready (_handshake_constant1_ctrl_ready),
    .out0       (_handshake_constant1_out0),
    .out0_valid (_handshake_constant1_out0_valid)
  );	// hlsinput.mlir:4:12
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer38 (	// hlsinput.mlir:4:12
    .in0        (_handshake_constant1_out0),	// hlsinput.mlir:4:12
    .in0_valid  (_handshake_constant1_out0_valid),	// hlsinput.mlir:4:12
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_fork5_in0_ready),	// hlsinput.mlir:4:12
    .in0_ready  (_handshake_buffer38_in0_ready),
    .out0       (_handshake_buffer38_out0),
    .out0_valid (_handshake_buffer38_out0_valid)
  );	// hlsinput.mlir:4:12
  handshake_fork_in_ui64_out_ui64_ui64 handshake_fork5 (	// hlsinput.mlir:4:12
    .in0        (_handshake_buffer38_out0),	// hlsinput.mlir:4:12
    .in0_valid  (_handshake_buffer38_out0_valid),	// hlsinput.mlir:4:12
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_buffer40_in0_ready),	// hlsinput.mlir:4:12
    .out1_ready (_handshake_buffer39_in0_ready),	// hlsinput.mlir:4:12
    .in0_ready  (_handshake_fork5_in0_ready),
    .out0       (_handshake_fork5_out0),
    .out0_valid (_handshake_fork5_out0_valid),
    .out1       (_handshake_fork5_out1),
    .out1_valid (_handshake_fork5_out1_valid)
  );	// hlsinput.mlir:4:12
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer39 (	// hlsinput.mlir:4:12
    .in0        (_handshake_fork5_out1),	// hlsinput.mlir:4:12
    .in0_valid  (_handshake_fork5_out1_valid),	// hlsinput.mlir:4:12
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_store2_dataIn_ready),	// hlsinput.mlir:13:5
    .in0_ready  (_handshake_buffer39_in0_ready),
    .out0       (_handshake_buffer39_out0),
    .out0_valid (_handshake_buffer39_out0_valid)
  );	// hlsinput.mlir:4:12
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer40 (	// hlsinput.mlir:4:12
    .in0        (_handshake_fork5_out0),	// hlsinput.mlir:4:12
    .in0_valid  (_handshake_fork5_out0_valid),	// hlsinput.mlir:4:12
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_store5_dataIn_ready),	// hlsinput.mlir:17:5
    .in0_ready  (_handshake_buffer40_in0_ready),
    .out0       (_handshake_buffer40_out0),
    .out0_valid (_handshake_buffer40_out0_valid)
  );	// hlsinput.mlir:4:12
  handshake_constant_c2_out_ui64 handshake_constant2 (	// hlsinput.mlir:5:14
  //.ctrl       (_handshake_buffer12_out0)	// hlsinput.mlir:2:3
    .ctrl_valid (_handshake_buffer12_out0_valid),	// hlsinput.mlir:2:3
    .out0_ready (_handshake_buffer41_in0_ready),	// hlsinput.mlir:5:14
    .ctrl_ready (_handshake_constant2_ctrl_ready),
    .out0       (_handshake_constant2_out0),
    .out0_valid (_handshake_constant2_out0_valid)
  );	// hlsinput.mlir:5:14
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer41 (	// hlsinput.mlir:5:14
    .in0        (_handshake_constant2_out0),	// hlsinput.mlir:5:14
    .in0_valid  (_handshake_constant2_out0_valid),	// hlsinput.mlir:5:14
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_fork6_in0_ready),	// hlsinput.mlir:5:14
    .in0_ready  (_handshake_buffer41_in0_ready),
    .out0       (_handshake_buffer41_out0),
    .out0_valid (_handshake_buffer41_out0_valid)
  );	// hlsinput.mlir:5:14
  handshake_fork_in_ui64_out_ui64_ui64 handshake_fork6 (	// hlsinput.mlir:5:14
    .in0        (_handshake_buffer41_out0),	// hlsinput.mlir:5:14
    .in0_valid  (_handshake_buffer41_out0_valid),	// hlsinput.mlir:5:14
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_buffer43_in0_ready),	// hlsinput.mlir:5:14
    .out1_ready (_handshake_buffer42_in0_ready),	// hlsinput.mlir:5:14
    .in0_ready  (_handshake_fork6_in0_ready),
    .out0       (_handshake_fork6_out0),
    .out0_valid (_handshake_fork6_out0_valid),
    .out1       (_handshake_fork6_out1),
    .out1_valid (_handshake_fork6_out1_valid)
  );	// hlsinput.mlir:5:14
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer42 (	// hlsinput.mlir:5:14
    .in0        (_handshake_fork6_out1),	// hlsinput.mlir:5:14
    .in0_valid  (_handshake_fork6_out1_valid),	// hlsinput.mlir:5:14
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_store1_dataIn_ready),	// hlsinput.mlir:12:5
    .in0_ready  (_handshake_buffer42_in0_ready),
    .out0       (_handshake_buffer42_out0),
    .out0_valid (_handshake_buffer42_out0_valid)
  );	// hlsinput.mlir:5:14
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer43 (	// hlsinput.mlir:5:14
    .in0        (_handshake_fork6_out0),	// hlsinput.mlir:5:14
    .in0_valid  (_handshake_fork6_out0_valid),	// hlsinput.mlir:5:14
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_store4_dataIn_ready),	// hlsinput.mlir:16:5
    .in0_ready  (_handshake_buffer43_in0_ready),
    .out0       (_handshake_buffer43_out0),
    .out0_valid (_handshake_buffer43_out0_valid)
  );	// hlsinput.mlir:5:14
  handshake_constant_c1_out_ui64 handshake_constant3 (	// hlsinput.mlir:6:14
  //.ctrl       (_handshake_buffer11_out0)	// hlsinput.mlir:2:3
    .ctrl_valid (_handshake_buffer11_out0_valid),	// hlsinput.mlir:2:3
    .out0_ready (_handshake_buffer44_in0_ready),	// hlsinput.mlir:6:14
    .ctrl_ready (_handshake_constant3_ctrl_ready),
    .out0       (_handshake_constant3_out0),
    .out0_valid (_handshake_constant3_out0_valid)
  );	// hlsinput.mlir:6:14
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer44 (	// hlsinput.mlir:6:14
    .in0        (_handshake_constant3_out0),	// hlsinput.mlir:6:14
    .in0_valid  (_handshake_constant3_out0_valid),	// hlsinput.mlir:6:14
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_fork7_in0_ready),	// hlsinput.mlir:6:14
    .in0_ready  (_handshake_buffer44_in0_ready),
    .out0       (_handshake_buffer44_out0),
    .out0_valid (_handshake_buffer44_out0_valid)
  );	// hlsinput.mlir:6:14
  handshake_fork_in_ui64_out_ui64_ui64 handshake_fork7 (	// hlsinput.mlir:6:14
    .in0        (_handshake_buffer44_out0),	// hlsinput.mlir:6:14
    .in0_valid  (_handshake_buffer44_out0_valid),	// hlsinput.mlir:6:14
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_buffer46_in0_ready),	// hlsinput.mlir:6:14
    .out1_ready (_handshake_buffer45_in0_ready),	// hlsinput.mlir:6:14
    .in0_ready  (_handshake_fork7_in0_ready),
    .out0       (_handshake_fork7_out0),
    .out0_valid (_handshake_fork7_out0_valid),
    .out1       (_handshake_fork7_out1),
    .out1_valid (_handshake_fork7_out1_valid)
  );	// hlsinput.mlir:6:14
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer45 (	// hlsinput.mlir:6:14
    .in0        (_handshake_fork7_out1),	// hlsinput.mlir:6:14
    .in0_valid  (_handshake_fork7_out1_valid),	// hlsinput.mlir:6:14
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_store0_dataIn_ready),	// hlsinput.mlir:11:5
    .in0_ready  (_handshake_buffer45_in0_ready),
    .out0       (_handshake_buffer45_out0),
    .out0_valid (_handshake_buffer45_out0_valid)
  );	// hlsinput.mlir:6:14
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer46 (	// hlsinput.mlir:6:14
    .in0        (_handshake_fork7_out0),	// hlsinput.mlir:6:14
    .in0_valid  (_handshake_fork7_out0_valid),	// hlsinput.mlir:6:14
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_store3_dataIn_ready),	// hlsinput.mlir:15:5
    .in0_ready  (_handshake_buffer46_in0_ready),
    .out0       (_handshake_buffer46_out0),
    .out0_valid (_handshake_buffer46_out0_valid)
  );	// hlsinput.mlir:6:14
  handshake_constant_c2_out_ui64 handshake_constant4 (	// hlsinput.mlir:7:11
  //.ctrl       (_handshake_buffer10_out0)	// hlsinput.mlir:2:3
    .ctrl_valid (_handshake_buffer10_out0_valid),	// hlsinput.mlir:2:3
    .out0_ready (_handshake_buffer47_in0_ready),	// hlsinput.mlir:7:11
    .ctrl_ready (_handshake_constant4_ctrl_ready),
    .out0       (_handshake_constant4_out0),
    .out0_valid (_handshake_constant4_out0_valid)
  );	// hlsinput.mlir:7:11
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer47 (	// hlsinput.mlir:7:11
    .in0        (_handshake_constant4_out0),	// hlsinput.mlir:7:11
    .in0_valid  (_handshake_constant4_out0_valid),	// hlsinput.mlir:7:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_fork8_in0_ready),	// hlsinput.mlir:7:11
    .in0_ready  (_handshake_buffer47_in0_ready),
    .out0       (_handshake_buffer47_out0),
    .out0_valid (_handshake_buffer47_out0_valid)
  );	// hlsinput.mlir:7:11
  handshake_fork_in_ui64_out_ui64_ui64 handshake_fork8 (	// hlsinput.mlir:7:11
    .in0        (_handshake_buffer47_out0),	// hlsinput.mlir:7:11
    .in0_valid  (_handshake_buffer47_out0_valid),	// hlsinput.mlir:7:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_buffer49_in0_ready),	// hlsinput.mlir:7:11
    .out1_ready (_handshake_buffer48_in0_ready),	// hlsinput.mlir:7:11
    .in0_ready  (_handshake_fork8_in0_ready),
    .out0       (_handshake_fork8_out0),
    .out0_valid (_handshake_fork8_out0_valid),
    .out1       (_handshake_fork8_out1),
    .out1_valid (_handshake_fork8_out1_valid)
  );	// hlsinput.mlir:7:11
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer48 (	// hlsinput.mlir:7:11
    .in0        (_handshake_fork8_out1),	// hlsinput.mlir:7:11
    .in0_valid  (_handshake_fork8_out1_valid),	// hlsinput.mlir:7:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_store2_addrIn0_ready),	// hlsinput.mlir:13:5
    .in0_ready  (_handshake_buffer48_in0_ready),
    .out0       (_handshake_buffer48_out0),
    .out0_valid (_handshake_buffer48_out0_valid)
  );	// hlsinput.mlir:7:11
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer49 (	// hlsinput.mlir:7:11
    .in0        (_handshake_fork8_out0),	// hlsinput.mlir:7:11
    .in0_valid  (_handshake_fork8_out0_valid),	// hlsinput.mlir:7:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_store5_addrIn0_ready),	// hlsinput.mlir:17:5
    .in0_ready  (_handshake_buffer49_in0_ready),
    .out0       (_handshake_buffer49_out0),
    .out0_valid (_handshake_buffer49_out0_valid)
  );	// hlsinput.mlir:7:11
  handshake_constant_c1_out_ui64 handshake_constant5 (	// hlsinput.mlir:8:11
  //.ctrl       (_handshake_buffer9_out0)	// hlsinput.mlir:2:3
    .ctrl_valid (_handshake_buffer9_out0_valid),	// hlsinput.mlir:2:3
    .out0_ready (_handshake_buffer50_in0_ready),	// hlsinput.mlir:8:11
    .ctrl_ready (_handshake_constant5_ctrl_ready),
    .out0       (_handshake_constant5_out0),
    .out0_valid (_handshake_constant5_out0_valid)
  );	// hlsinput.mlir:8:11
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer50 (	// hlsinput.mlir:8:11
    .in0        (_handshake_constant5_out0),	// hlsinput.mlir:8:11
    .in0_valid  (_handshake_constant5_out0_valid),	// hlsinput.mlir:8:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_fork9_in0_ready),	// hlsinput.mlir:8:11
    .in0_ready  (_handshake_buffer50_in0_ready),
    .out0       (_handshake_buffer50_out0),
    .out0_valid (_handshake_buffer50_out0_valid)
  );	// hlsinput.mlir:8:11
  handshake_fork_in_ui64_out_ui64_ui64_ui64 handshake_fork9 (	// hlsinput.mlir:8:11
    .in0        (_handshake_buffer50_out0),	// hlsinput.mlir:8:11
    .in0_valid  (_handshake_buffer50_out0_valid),	// hlsinput.mlir:8:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_buffer53_in0_ready),	// hlsinput.mlir:8:11
    .out1_ready (_handshake_buffer52_in0_ready),	// hlsinput.mlir:8:11
    .out2_ready (_handshake_buffer51_in0_ready),	// hlsinput.mlir:8:11
    .in0_ready  (_handshake_fork9_in0_ready),
    .out0       (_handshake_fork9_out0),
    .out0_valid (_handshake_fork9_out0_valid),
    .out1       (_handshake_fork9_out1),
    .out1_valid (_handshake_fork9_out1_valid),
    .out2       (_handshake_fork9_out2),
    .out2_valid (_handshake_fork9_out2_valid)
  );	// hlsinput.mlir:8:11
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer51 (	// hlsinput.mlir:8:11
    .in0        (_handshake_fork9_out2),	// hlsinput.mlir:8:11
    .in0_valid  (_handshake_fork9_out2_valid),	// hlsinput.mlir:8:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_store1_addrIn0_ready),	// hlsinput.mlir:12:5
    .in0_ready  (_handshake_buffer51_in0_ready),
    .out0       (_handshake_buffer51_out0),
    .out0_valid (_handshake_buffer51_out0_valid)
  );	// hlsinput.mlir:8:11
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer52 (	// hlsinput.mlir:8:11
    .in0        (_handshake_fork9_out1),	// hlsinput.mlir:8:11
    .in0_valid  (_handshake_fork9_out1_valid),	// hlsinput.mlir:8:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_store4_addrIn0_ready),	// hlsinput.mlir:16:5
    .in0_ready  (_handshake_buffer52_in0_ready),
    .out0       (_handshake_buffer52_out0),
    .out0_valid (_handshake_buffer52_out0_valid)
  );	// hlsinput.mlir:8:11
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer53 (	// hlsinput.mlir:8:11
    .in0        (_handshake_fork9_out0),	// hlsinput.mlir:8:11
    .in0_valid  (_handshake_fork9_out0_valid),	// hlsinput.mlir:8:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_mux3_in0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer53_in0_ready),
    .out0       (_handshake_buffer53_out0),
    .out0_valid (_handshake_buffer53_out0_valid)
  );	// hlsinput.mlir:8:11
  handshake_constant_c0_out_ui64 handshake_constant6 (	// hlsinput.mlir:9:11
  //.ctrl       (_handshake_buffer8_out0)	// hlsinput.mlir:2:3
    .ctrl_valid (_handshake_buffer8_out0_valid),	// hlsinput.mlir:2:3
    .out0_ready (_handshake_buffer54_in0_ready),	// hlsinput.mlir:9:11
    .ctrl_ready (_handshake_constant6_ctrl_ready),
    .out0       (_handshake_constant6_out0),
    .out0_valid (_handshake_constant6_out0_valid)
  );	// hlsinput.mlir:9:11
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer54 (	// hlsinput.mlir:9:11
    .in0        (_handshake_constant6_out0),	// hlsinput.mlir:9:11
    .in0_valid  (_handshake_constant6_out0_valid),	// hlsinput.mlir:9:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_fork10_in0_ready),	// hlsinput.mlir:9:11
    .in0_ready  (_handshake_buffer54_in0_ready),
    .out0       (_handshake_buffer54_out0),
    .out0_valid (_handshake_buffer54_out0_valid)
  );	// hlsinput.mlir:9:11
  handshake_fork_in_ui64_out_ui64_ui64_ui64 handshake_fork10 (	// hlsinput.mlir:9:11
    .in0        (_handshake_buffer54_out0),	// hlsinput.mlir:9:11
    .in0_valid  (_handshake_buffer54_out0_valid),	// hlsinput.mlir:9:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_buffer57_in0_ready),	// hlsinput.mlir:9:11
    .out1_ready (_handshake_buffer56_in0_ready),	// hlsinput.mlir:9:11
    .out2_ready (_handshake_buffer55_in0_ready),	// hlsinput.mlir:9:11
    .in0_ready  (_handshake_fork10_in0_ready),
    .out0       (_handshake_fork10_out0),
    .out0_valid (_handshake_fork10_out0_valid),
    .out1       (_handshake_fork10_out1),
    .out1_valid (_handshake_fork10_out1_valid),
    .out2       (_handshake_fork10_out2),
    .out2_valid (_handshake_fork10_out2_valid)
  );	// hlsinput.mlir:9:11
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer55 (	// hlsinput.mlir:9:11
    .in0        (_handshake_fork10_out2),	// hlsinput.mlir:9:11
    .in0_valid  (_handshake_fork10_out2_valid),	// hlsinput.mlir:9:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_store0_addrIn0_ready),	// hlsinput.mlir:11:5
    .in0_ready  (_handshake_buffer55_in0_ready),
    .out0       (_handshake_buffer55_out0),
    .out0_valid (_handshake_buffer55_out0_valid)
  );	// hlsinput.mlir:9:11
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer56 (	// hlsinput.mlir:9:11
    .in0        (_handshake_fork10_out1),	// hlsinput.mlir:9:11
    .in0_valid  (_handshake_fork10_out1_valid),	// hlsinput.mlir:9:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_store3_addrIn0_ready),	// hlsinput.mlir:15:5
    .in0_ready  (_handshake_buffer56_in0_ready),
    .out0       (_handshake_buffer56_out0),
    .out0_valid (_handshake_buffer56_out0_valid)
  );	// hlsinput.mlir:9:11
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer57 (	// hlsinput.mlir:9:11
    .in0        (_handshake_fork10_out0),	// hlsinput.mlir:9:11
    .in0_valid  (_handshake_fork10_out0_valid),	// hlsinput.mlir:9:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_mux1_in0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer57_in0_ready),
    .out0       (_handshake_buffer57_out0),
    .out0_valid (_handshake_buffer57_out0_valid)
  );	// hlsinput.mlir:9:11
  handshake_store_in_ui64_ui64_out_ui64_ui64 handshake_store0 (	// hlsinput.mlir:11:5
    .addrIn0         (_handshake_buffer55_out0),	// hlsinput.mlir:9:11
    .addrIn0_valid   (_handshake_buffer55_out0_valid),	// hlsinput.mlir:9:11
    .dataIn          (_handshake_buffer45_out0),	// hlsinput.mlir:6:14
    .dataIn_valid    (_handshake_buffer45_out0_valid),	// hlsinput.mlir:6:14
  //.ctrl            (_handshake_buffer7_out0),	// hlsinput.mlir:2:3
    .ctrl_valid      (_handshake_buffer7_out0_valid),	// hlsinput.mlir:2:3
    .dataToMem_ready (_handshake_buffer59_in0_ready),	// hlsinput.mlir:11:5
    .addrOut0_ready  (_handshake_buffer58_in0_ready),	// hlsinput.mlir:11:5
    .addrIn0_ready   (_handshake_store0_addrIn0_ready),
    .dataIn_ready    (_handshake_store0_dataIn_ready),
    .ctrl_ready      (_handshake_store0_ctrl_ready),
    .dataToMem       (_handshake_store0_dataToMem),
    .dataToMem_valid (_handshake_store0_dataToMem_valid),
    .addrOut0        (_handshake_store0_addrOut0),
    .addrOut0_valid  (_handshake_store0_addrOut0_valid)
  );	// hlsinput.mlir:11:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer58 (	// hlsinput.mlir:11:5
    .in0        (_handshake_store0_addrOut0),	// hlsinput.mlir:11:5
    .in0_valid  (_handshake_store0_addrOut0_valid),	// hlsinput.mlir:11:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_memory2_stAddr0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer58_in0_ready),
    .out0       (_handshake_buffer58_out0),
    .out0_valid (_handshake_buffer58_out0_valid)
  );	// hlsinput.mlir:11:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer59 (	// hlsinput.mlir:11:5
    .in0        (_handshake_store0_dataToMem),	// hlsinput.mlir:11:5
    .in0_valid  (_handshake_store0_dataToMem_valid),	// hlsinput.mlir:11:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_memory2_stData0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer59_in0_ready),
    .out0       (_handshake_buffer59_out0),
    .out0_valid (_handshake_buffer59_out0_valid)
  );	// hlsinput.mlir:11:5
  handshake_join_2ins_1outs_ctrl handshake_join1 (	// hlsinput.mlir:12:5
  //.in0        (_handshake_buffer6_out0)	// hlsinput.mlir:2:3
    .in0_valid  (_handshake_buffer6_out0_valid),	// hlsinput.mlir:2:3
  //.in1        (_handshake_buffer33_out0),	// hlsinput.mlir:3:11
    .in1_valid  (_handshake_buffer33_out0_valid),	// hlsinput.mlir:3:11
    .out0_ready (_handshake_buffer60_in0_ready),	// hlsinput.mlir:12:5
    .in0_ready  (_handshake_join1_in0_ready),
    .in1_ready  (_handshake_join1_in1_ready),
  //.out0       (_handshake_join1_out0),
    .out0_valid (_handshake_join1_out0_valid)
  );	// hlsinput.mlir:12:5
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer60 (	// hlsinput.mlir:12:5
  //.in0        (_handshake_join1_out0)	// hlsinput.mlir:12:5
    .in0_valid  (_handshake_join1_out0_valid),	// hlsinput.mlir:12:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_store1_ctrl_ready),	// hlsinput.mlir:12:5
    .in0_ready  (_handshake_buffer60_in0_ready),
  //.out0       (_handshake_buffer60_out0),
    .out0_valid (_handshake_buffer60_out0_valid)
  );	// hlsinput.mlir:12:5
  handshake_store_in_ui64_ui64_out_ui64_ui64 handshake_store1 (	// hlsinput.mlir:12:5
    .addrIn0         (_handshake_buffer51_out0),	// hlsinput.mlir:8:11
    .addrIn0_valid   (_handshake_buffer51_out0_valid),	// hlsinput.mlir:8:11
    .dataIn          (_handshake_buffer42_out0),	// hlsinput.mlir:5:14
    .dataIn_valid    (_handshake_buffer42_out0_valid),	// hlsinput.mlir:5:14
  //.ctrl            (_handshake_buffer60_out0),	// hlsinput.mlir:12:5
    .ctrl_valid      (_handshake_buffer60_out0_valid),	// hlsinput.mlir:12:5
    .dataToMem_ready (_handshake_buffer62_in0_ready),	// hlsinput.mlir:12:5
    .addrOut0_ready  (_handshake_buffer61_in0_ready),	// hlsinput.mlir:12:5
    .addrIn0_ready   (_handshake_store1_addrIn0_ready),
    .dataIn_ready    (_handshake_store1_dataIn_ready),
    .ctrl_ready      (_handshake_store1_ctrl_ready),
    .dataToMem       (_handshake_store1_dataToMem),
    .dataToMem_valid (_handshake_store1_dataToMem_valid),
    .addrOut0        (_handshake_store1_addrOut0),
    .addrOut0_valid  (_handshake_store1_addrOut0_valid)
  );	// hlsinput.mlir:12:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer61 (	// hlsinput.mlir:12:5
    .in0        (_handshake_store1_addrOut0),	// hlsinput.mlir:12:5
    .in0_valid  (_handshake_store1_addrOut0_valid),	// hlsinput.mlir:12:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_memory2_stAddr1_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer61_in0_ready),
    .out0       (_handshake_buffer61_out0),
    .out0_valid (_handshake_buffer61_out0_valid)
  );	// hlsinput.mlir:12:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer62 (	// hlsinput.mlir:12:5
    .in0        (_handshake_store1_dataToMem),	// hlsinput.mlir:12:5
    .in0_valid  (_handshake_store1_dataToMem_valid),	// hlsinput.mlir:12:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_memory2_stData1_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer62_in0_ready),
    .out0       (_handshake_buffer62_out0),
    .out0_valid (_handshake_buffer62_out0_valid)
  );	// hlsinput.mlir:12:5
  handshake_join_3ins_1outs_ctrl handshake_join2 (	// hlsinput.mlir:13:5
  //.in0        (_handshake_buffer5_out0)	// hlsinput.mlir:2:3
    .in0_valid  (_handshake_buffer5_out0_valid),	// hlsinput.mlir:2:3
  //.in1        (_handshake_buffer34_out0),	// hlsinput.mlir:3:11
    .in1_valid  (_handshake_buffer34_out0_valid),	// hlsinput.mlir:3:11
  //.in2        (_handshake_buffer31_out0),	// hlsinput.mlir:3:11
    .in2_valid  (_handshake_buffer31_out0_valid),	// hlsinput.mlir:3:11
    .out0_ready (_handshake_buffer63_in0_ready),	// hlsinput.mlir:13:5
    .in0_ready  (_handshake_join2_in0_ready),
    .in1_ready  (_handshake_join2_in1_ready),
    .in2_ready  (_handshake_join2_in2_ready),
  //.out0       (_handshake_join2_out0),
    .out0_valid (_handshake_join2_out0_valid)
  );	// hlsinput.mlir:13:5
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer63 (	// hlsinput.mlir:13:5
  //.in0        (_handshake_join2_out0)	// hlsinput.mlir:13:5
    .in0_valid  (_handshake_join2_out0_valid),	// hlsinput.mlir:13:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_store2_ctrl_ready),	// hlsinput.mlir:13:5
    .in0_ready  (_handshake_buffer63_in0_ready),
  //.out0       (_handshake_buffer63_out0),
    .out0_valid (_handshake_buffer63_out0_valid)
  );	// hlsinput.mlir:13:5
  handshake_store_in_ui64_ui64_out_ui64_ui64 handshake_store2 (	// hlsinput.mlir:13:5
    .addrIn0         (_handshake_buffer48_out0),	// hlsinput.mlir:7:11
    .addrIn0_valid   (_handshake_buffer48_out0_valid),	// hlsinput.mlir:7:11
    .dataIn          (_handshake_buffer39_out0),	// hlsinput.mlir:4:12
    .dataIn_valid    (_handshake_buffer39_out0_valid),	// hlsinput.mlir:4:12
  //.ctrl            (_handshake_buffer63_out0),	// hlsinput.mlir:13:5
    .ctrl_valid      (_handshake_buffer63_out0_valid),	// hlsinput.mlir:13:5
    .dataToMem_ready (_handshake_buffer65_in0_ready),	// hlsinput.mlir:13:5
    .addrOut0_ready  (_handshake_buffer64_in0_ready),	// hlsinput.mlir:13:5
    .addrIn0_ready   (_handshake_store2_addrIn0_ready),
    .dataIn_ready    (_handshake_store2_dataIn_ready),
    .ctrl_ready      (_handshake_store2_ctrl_ready),
    .dataToMem       (_handshake_store2_dataToMem),
    .dataToMem_valid (_handshake_store2_dataToMem_valid),
    .addrOut0        (_handshake_store2_addrOut0),
    .addrOut0_valid  (_handshake_store2_addrOut0_valid)
  );	// hlsinput.mlir:13:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer64 (	// hlsinput.mlir:13:5
    .in0        (_handshake_store2_addrOut0),	// hlsinput.mlir:13:5
    .in0_valid  (_handshake_store2_addrOut0_valid),	// hlsinput.mlir:13:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_memory2_stAddr2_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer64_in0_ready),
    .out0       (_handshake_buffer64_out0),
    .out0_valid (_handshake_buffer64_out0_valid)
  );	// hlsinput.mlir:13:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer65 (	// hlsinput.mlir:13:5
    .in0        (_handshake_store2_dataToMem),	// hlsinput.mlir:13:5
    .in0_valid  (_handshake_store2_dataToMem_valid),	// hlsinput.mlir:13:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_memory2_stData2_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer65_in0_ready),
    .out0       (_handshake_buffer65_out0),
    .out0_valid (_handshake_buffer65_out0_valid)
  );	// hlsinput.mlir:13:5
  handshake_store_in_ui64_ui64_out_ui64_ui64 handshake_store3 (	// hlsinput.mlir:15:5
    .addrIn0         (_handshake_buffer56_out0),	// hlsinput.mlir:9:11
    .addrIn0_valid   (_handshake_buffer56_out0_valid),	// hlsinput.mlir:9:11
    .dataIn          (_handshake_buffer46_out0),	// hlsinput.mlir:6:14
    .dataIn_valid    (_handshake_buffer46_out0_valid),	// hlsinput.mlir:6:14
  //.ctrl            (_handshake_buffer3_out0),	// hlsinput.mlir:2:3
    .ctrl_valid      (_handshake_buffer3_out0_valid),	// hlsinput.mlir:2:3
    .dataToMem_ready (_handshake_buffer67_in0_ready),	// hlsinput.mlir:15:5
    .addrOut0_ready  (_handshake_buffer66_in0_ready),	// hlsinput.mlir:15:5
    .addrIn0_ready   (_handshake_store3_addrIn0_ready),
    .dataIn_ready    (_handshake_store3_dataIn_ready),
    .ctrl_ready      (_handshake_store3_ctrl_ready),
    .dataToMem       (_handshake_store3_dataToMem),
    .dataToMem_valid (_handshake_store3_dataToMem_valid),
    .addrOut0        (_handshake_store3_addrOut0),
    .addrOut0_valid  (_handshake_store3_addrOut0_valid)
  );	// hlsinput.mlir:15:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer66 (	// hlsinput.mlir:15:5
    .in0        (_handshake_store3_addrOut0),	// hlsinput.mlir:15:5
    .in0_valid  (_handshake_store3_addrOut0_valid),	// hlsinput.mlir:15:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_memory1_stAddr0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer66_in0_ready),
    .out0       (_handshake_buffer66_out0),
    .out0_valid (_handshake_buffer66_out0_valid)
  );	// hlsinput.mlir:15:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer67 (	// hlsinput.mlir:15:5
    .in0        (_handshake_store3_dataToMem),	// hlsinput.mlir:15:5
    .in0_valid  (_handshake_store3_dataToMem_valid),	// hlsinput.mlir:15:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_memory1_stData0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer67_in0_ready),
    .out0       (_handshake_buffer67_out0),
    .out0_valid (_handshake_buffer67_out0_valid)
  );	// hlsinput.mlir:15:5
  handshake_join_2ins_1outs_ctrl handshake_join3 (	// hlsinput.mlir:16:5
  //.in0        (_handshake_buffer2_out0)	// hlsinput.mlir:2:3
    .in0_valid  (_handshake_buffer2_out0_valid),	// hlsinput.mlir:2:3
  //.in1        (_handshake_buffer24_out0),	// hlsinput.mlir:3:11
    .in1_valid  (_handshake_buffer24_out0_valid),	// hlsinput.mlir:3:11
    .out0_ready (_handshake_buffer68_in0_ready),	// hlsinput.mlir:16:5
    .in0_ready  (_handshake_join3_in0_ready),
    .in1_ready  (_handshake_join3_in1_ready),
  //.out0       (_handshake_join3_out0),
    .out0_valid (_handshake_join3_out0_valid)
  );	// hlsinput.mlir:16:5
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer68 (	// hlsinput.mlir:16:5
  //.in0        (_handshake_join3_out0)	// hlsinput.mlir:16:5
    .in0_valid  (_handshake_join3_out0_valid),	// hlsinput.mlir:16:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_store4_ctrl_ready),	// hlsinput.mlir:16:5
    .in0_ready  (_handshake_buffer68_in0_ready),
  //.out0       (_handshake_buffer68_out0),
    .out0_valid (_handshake_buffer68_out0_valid)
  );	// hlsinput.mlir:16:5
  handshake_store_in_ui64_ui64_out_ui64_ui64 handshake_store4 (	// hlsinput.mlir:16:5
    .addrIn0         (_handshake_buffer52_out0),	// hlsinput.mlir:8:11
    .addrIn0_valid   (_handshake_buffer52_out0_valid),	// hlsinput.mlir:8:11
    .dataIn          (_handshake_buffer43_out0),	// hlsinput.mlir:5:14
    .dataIn_valid    (_handshake_buffer43_out0_valid),	// hlsinput.mlir:5:14
  //.ctrl            (_handshake_buffer68_out0),	// hlsinput.mlir:16:5
    .ctrl_valid      (_handshake_buffer68_out0_valid),	// hlsinput.mlir:16:5
    .dataToMem_ready (_handshake_buffer70_in0_ready),	// hlsinput.mlir:16:5
    .addrOut0_ready  (_handshake_buffer69_in0_ready),	// hlsinput.mlir:16:5
    .addrIn0_ready   (_handshake_store4_addrIn0_ready),
    .dataIn_ready    (_handshake_store4_dataIn_ready),
    .ctrl_ready      (_handshake_store4_ctrl_ready),
    .dataToMem       (_handshake_store4_dataToMem),
    .dataToMem_valid (_handshake_store4_dataToMem_valid),
    .addrOut0        (_handshake_store4_addrOut0),
    .addrOut0_valid  (_handshake_store4_addrOut0_valid)
  );	// hlsinput.mlir:16:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer69 (	// hlsinput.mlir:16:5
    .in0        (_handshake_store4_addrOut0),	// hlsinput.mlir:16:5
    .in0_valid  (_handshake_store4_addrOut0_valid),	// hlsinput.mlir:16:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_memory1_stAddr1_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer69_in0_ready),
    .out0       (_handshake_buffer69_out0),
    .out0_valid (_handshake_buffer69_out0_valid)
  );	// hlsinput.mlir:16:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer70 (	// hlsinput.mlir:16:5
    .in0        (_handshake_store4_dataToMem),	// hlsinput.mlir:16:5
    .in0_valid  (_handshake_store4_dataToMem_valid),	// hlsinput.mlir:16:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_memory1_stData1_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer70_in0_ready),
    .out0       (_handshake_buffer70_out0),
    .out0_valid (_handshake_buffer70_out0_valid)
  );	// hlsinput.mlir:16:5
  handshake_join_3ins_1outs_ctrl handshake_join4 (	// hlsinput.mlir:17:5
  //.in0        (_handshake_buffer1_out0)	// hlsinput.mlir:2:3
    .in0_valid  (_handshake_buffer1_out0_valid),	// hlsinput.mlir:2:3
  //.in1        (_handshake_buffer25_out0),	// hlsinput.mlir:3:11
    .in1_valid  (_handshake_buffer25_out0_valid),	// hlsinput.mlir:3:11
  //.in2        (_handshake_buffer22_out0),	// hlsinput.mlir:3:11
    .in2_valid  (_handshake_buffer22_out0_valid),	// hlsinput.mlir:3:11
    .out0_ready (_handshake_buffer71_in0_ready),	// hlsinput.mlir:17:5
    .in0_ready  (_handshake_join4_in0_ready),
    .in1_ready  (_handshake_join4_in1_ready),
    .in2_ready  (_handshake_join4_in2_ready),
  //.out0       (_handshake_join4_out0),
    .out0_valid (_handshake_join4_out0_valid)
  );	// hlsinput.mlir:17:5
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer71 (	// hlsinput.mlir:17:5
  //.in0        (_handshake_join4_out0)	// hlsinput.mlir:17:5
    .in0_valid  (_handshake_join4_out0_valid),	// hlsinput.mlir:17:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_store5_ctrl_ready),	// hlsinput.mlir:17:5
    .in0_ready  (_handshake_buffer71_in0_ready),
  //.out0       (_handshake_buffer71_out0),
    .out0_valid (_handshake_buffer71_out0_valid)
  );	// hlsinput.mlir:17:5
  handshake_store_in_ui64_ui64_out_ui64_ui64 handshake_store5 (	// hlsinput.mlir:17:5
    .addrIn0         (_handshake_buffer49_out0),	// hlsinput.mlir:7:11
    .addrIn0_valid   (_handshake_buffer49_out0_valid),	// hlsinput.mlir:7:11
    .dataIn          (_handshake_buffer40_out0),	// hlsinput.mlir:4:12
    .dataIn_valid    (_handshake_buffer40_out0_valid),	// hlsinput.mlir:4:12
  //.ctrl            (_handshake_buffer71_out0),	// hlsinput.mlir:17:5
    .ctrl_valid      (_handshake_buffer71_out0_valid),	// hlsinput.mlir:17:5
    .dataToMem_ready (_handshake_buffer73_in0_ready),	// hlsinput.mlir:17:5
    .addrOut0_ready  (_handshake_buffer72_in0_ready),	// hlsinput.mlir:17:5
    .addrIn0_ready   (_handshake_store5_addrIn0_ready),
    .dataIn_ready    (_handshake_store5_dataIn_ready),
    .ctrl_ready      (_handshake_store5_ctrl_ready),
    .dataToMem       (_handshake_store5_dataToMem),
    .dataToMem_valid (_handshake_store5_dataToMem_valid),
    .addrOut0        (_handshake_store5_addrOut0),
    .addrOut0_valid  (_handshake_store5_addrOut0_valid)
  );	// hlsinput.mlir:17:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer72 (	// hlsinput.mlir:17:5
    .in0        (_handshake_store5_addrOut0),	// hlsinput.mlir:17:5
    .in0_valid  (_handshake_store5_addrOut0_valid),	// hlsinput.mlir:17:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_memory1_stAddr2_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer72_in0_ready),
    .out0       (_handshake_buffer72_out0),
    .out0_valid (_handshake_buffer72_out0_valid)
  );	// hlsinput.mlir:17:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer73 (	// hlsinput.mlir:17:5
    .in0        (_handshake_store5_dataToMem),	// hlsinput.mlir:17:5
    .in0_valid  (_handshake_store5_dataToMem_valid),	// hlsinput.mlir:17:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_memory1_stData2_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer73_in0_ready),
    .out0       (_handshake_buffer73_out0),
    .out0_valid (_handshake_buffer73_out0_valid)
  );	// hlsinput.mlir:17:5
  handshake_buffer_in_ui1_out_ui1_1slots_seq_init_0 handshake_buffer74 (	// hlsinput.mlir:3:11
    .in0        (_handshake_fork14_out0),	// hlsinput.mlir:21:10
    .in0_valid  (_handshake_fork14_out0_valid),	// hlsinput.mlir:21:10
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_fork11_in0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer74_in0_ready),
    .out0       (_handshake_buffer74_out0),
    .out0_valid (_handshake_buffer74_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1 handshake_fork11 (	// hlsinput.mlir:3:11
    .in0        (_handshake_buffer74_out0),	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_buffer74_out0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_buffer78_in0_ready),	// hlsinput.mlir:3:11
    .out1_ready (_handshake_buffer77_in0_ready),	// hlsinput.mlir:3:11
    .out2_ready (_handshake_buffer76_in0_ready),	// hlsinput.mlir:3:11
    .out3_ready (_handshake_buffer75_in0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_fork11_in0_ready),
    .out0       (_handshake_fork11_out0),
    .out0_valid (_handshake_fork11_out0_valid),
    .out1       (_handshake_fork11_out1),
    .out1_valid (_handshake_fork11_out1_valid),
    .out2       (_handshake_fork11_out2),
    .out2_valid (_handshake_fork11_out2_valid),
    .out3       (_handshake_fork11_out3),
    .out3_valid (_handshake_fork11_out3_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_in_ui1_out_ui1_2slots_seq handshake_buffer75 (	// hlsinput.mlir:3:11
    .in0        (_handshake_fork11_out3),	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_fork11_out3_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_mux0_select_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer75_in0_ready),
    .out0       (_handshake_buffer75_out0),
    .out0_valid (_handshake_buffer75_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_in_ui1_out_ui1_2slots_seq handshake_buffer76 (	// hlsinput.mlir:3:11
    .in0        (_handshake_fork11_out2),	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_fork11_out2_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_mux1_select_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer76_in0_ready),
    .out0       (_handshake_buffer76_out0),
    .out0_valid (_handshake_buffer76_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_in_ui1_out_ui1_2slots_seq handshake_buffer77 (	// hlsinput.mlir:3:11
    .in0        (_handshake_fork11_out1),	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_fork11_out1_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_mux2_select_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer77_in0_ready),
    .out0       (_handshake_buffer77_out0),
    .out0_valid (_handshake_buffer77_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_in_ui1_out_ui1_2slots_seq handshake_buffer78 (	// hlsinput.mlir:3:11
    .in0        (_handshake_fork11_out0),	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_fork11_out0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_mux3_select_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer78_in0_ready),
    .out0       (_handshake_buffer78_out0),
    .out0_valid (_handshake_buffer78_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_mux_in_ui1_3ins_1outs_ctrl handshake_mux0 (	// hlsinput.mlir:3:11
    .select       (_handshake_buffer75_out0),	// hlsinput.mlir:3:11
    .select_valid (_handshake_buffer75_out0_valid),	// hlsinput.mlir:3:11
  //.in0          (_handshake_buffer36_out0),	// hlsinput.mlir:3:11
    .in0_valid    (_handshake_buffer36_out0_valid),	// hlsinput.mlir:3:11
  //.in1          (_handshake_buffer107_out0),	// hlsinput.mlir:3:11
    .in1_valid    (_handshake_buffer107_out0_valid),	// hlsinput.mlir:3:11
    .out0_ready   (_handshake_buffer79_in0_ready),	// hlsinput.mlir:3:11
    .select_ready (_handshake_mux0_select_ready),
    .in0_ready    (_handshake_mux0_in0_ready),
    .in1_ready    (_handshake_mux0_in1_ready),
  //.out0         (_handshake_mux0_out0),
    .out0_valid   (_handshake_mux0_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer79 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_mux0_out0)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_mux0_out0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_cond_br3_data_ready),	// hlsinput.mlir:22:5
    .in0_ready  (_handshake_buffer79_in0_ready),
  //.out0       (_handshake_buffer79_out0),
    .out0_valid (_handshake_buffer79_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_mux_in_ui1_ui64_ui64_out_ui64 handshake_mux1 (	// hlsinput.mlir:3:11
    .select       (_handshake_buffer76_out0),	// hlsinput.mlir:3:11
    .select_valid (_handshake_buffer76_out0_valid),	// hlsinput.mlir:3:11
    .in0          (_handshake_buffer57_out0),	// hlsinput.mlir:9:11
    .in0_valid    (_handshake_buffer57_out0_valid),	// hlsinput.mlir:9:11
    .in1          (_handshake_buffer115_out0),	// hlsinput.mlir:28:10
    .in1_valid    (_handshake_buffer115_out0_valid),	// hlsinput.mlir:28:10
    .out0_ready   (_handshake_buffer80_in0_ready),	// hlsinput.mlir:3:11
    .select_ready (_handshake_mux1_select_ready),
    .in0_ready    (_handshake_mux1_in0_ready),
    .in1_ready    (_handshake_mux1_in1_ready),
    .out0         (_handshake_mux1_out0),
    .out0_valid   (_handshake_mux1_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer80 (	// hlsinput.mlir:3:11
    .in0        (_handshake_mux1_out0),	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_mux1_out0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_fork12_in0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer80_in0_ready),
    .out0       (_handshake_buffer80_out0),
    .out0_valid (_handshake_buffer80_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_fork_in_ui64_out_ui64_ui64 handshake_fork12 (	// hlsinput.mlir:3:11
    .in0        (_handshake_buffer80_out0),	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_buffer80_out0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_buffer82_in0_ready),	// hlsinput.mlir:3:11
    .out1_ready (_handshake_buffer81_in0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_fork12_in0_ready),
    .out0       (_handshake_fork12_out0),
    .out0_valid (_handshake_fork12_out0_valid),
    .out1       (_handshake_fork12_out1),
    .out1_valid (_handshake_fork12_out1_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer81 (	// hlsinput.mlir:3:11
    .in0        (_handshake_fork12_out1),	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_fork12_out1_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_cond_br0_data_ready),	// hlsinput.mlir:22:5
    .in0_ready  (_handshake_buffer81_in0_ready),
    .out0       (_handshake_buffer81_out0),
    .out0_valid (_handshake_buffer81_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer82 (	// hlsinput.mlir:3:11
    .in0        (_handshake_fork12_out0),	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_fork12_out0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_arith_cmpi0_in0_ready),	// hlsinput.mlir:21:10
    .in0_ready  (_handshake_buffer82_in0_ready),
    .out0       (_handshake_buffer82_out0),
    .out0_valid (_handshake_buffer82_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_mux_in_ui1_ui64_ui64_out_ui64 handshake_mux2 (	// hlsinput.mlir:3:11
    .select       (_handshake_buffer77_out0),	// hlsinput.mlir:3:11
    .select_valid (_handshake_buffer77_out0_valid),	// hlsinput.mlir:3:11
    .in0          (_handshake_buffer37_out0),	// hlsinput.mlir:3:11
    .in0_valid    (_handshake_buffer37_out0_valid),	// hlsinput.mlir:3:11
    .in1          (_handshake_buffer97_out0),	// hlsinput.mlir:22:5
    .in1_valid    (_handshake_buffer97_out0_valid),	// hlsinput.mlir:22:5
    .out0_ready   (_handshake_buffer83_in0_ready),	// hlsinput.mlir:3:11
    .select_ready (_handshake_mux2_select_ready),
    .in0_ready    (_handshake_mux2_in0_ready),
    .in1_ready    (_handshake_mux2_in1_ready),
    .out0         (_handshake_mux2_out0),
    .out0_valid   (_handshake_mux2_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer83 (	// hlsinput.mlir:3:11
    .in0        (_handshake_mux2_out0),	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_mux2_out0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_fork13_in0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer83_in0_ready),
    .out0       (_handshake_buffer83_out0),
    .out0_valid (_handshake_buffer83_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_fork_in_ui64_out_ui64_ui64 handshake_fork13 (	// hlsinput.mlir:3:11
    .in0        (_handshake_buffer83_out0),	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_buffer83_out0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_buffer85_in0_ready),	// hlsinput.mlir:3:11
    .out1_ready (_handshake_buffer84_in0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_fork13_in0_ready),
    .out0       (_handshake_fork13_out0),
    .out0_valid (_handshake_fork13_out0_valid),
    .out1       (_handshake_fork13_out1),
    .out1_valid (_handshake_fork13_out1_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer84 (	// hlsinput.mlir:3:11
    .in0        (_handshake_fork13_out1),	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_fork13_out1_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_cond_br1_data_ready),	// hlsinput.mlir:22:5
    .in0_ready  (_handshake_buffer84_in0_ready),
    .out0       (_handshake_buffer84_out0),
    .out0_valid (_handshake_buffer84_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer85 (	// hlsinput.mlir:3:11
    .in0        (_handshake_fork13_out0),	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_fork13_out0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_arith_cmpi0_in1_ready),	// hlsinput.mlir:21:10
    .in0_ready  (_handshake_buffer85_in0_ready),
    .out0       (_handshake_buffer85_out0),
    .out0_valid (_handshake_buffer85_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_mux_in_ui1_ui64_ui64_out_ui64 handshake_mux3 (	// hlsinput.mlir:3:11
    .select       (_handshake_buffer78_out0),	// hlsinput.mlir:3:11
    .select_valid (_handshake_buffer78_out0_valid),	// hlsinput.mlir:3:11
    .in0          (_handshake_buffer53_out0),	// hlsinput.mlir:8:11
    .in0_valid    (_handshake_buffer53_out0_valid),	// hlsinput.mlir:8:11
    .in1          (_handshake_buffer100_out0),	// hlsinput.mlir:22:5
    .in1_valid    (_handshake_buffer100_out0_valid),	// hlsinput.mlir:22:5
    .out0_ready   (_handshake_buffer86_in0_ready),	// hlsinput.mlir:3:11
    .select_ready (_handshake_mux3_select_ready),
    .in0_ready    (_handshake_mux3_in0_ready),
    .in1_ready    (_handshake_mux3_in1_ready),
    .out0         (_handshake_mux3_out0),
    .out0_valid   (_handshake_mux3_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer86 (	// hlsinput.mlir:3:11
    .in0        (_handshake_mux3_out0),	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_mux3_out0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_cond_br2_data_ready),	// hlsinput.mlir:22:5
    .in0_ready  (_handshake_buffer86_in0_ready),
    .out0       (_handshake_buffer86_out0),
    .out0_valid (_handshake_buffer86_out0_valid)
  );	// hlsinput.mlir:3:11
  arith_cmpi_in_ui64_ui64_out_ui1_slt arith_cmpi0 (	// hlsinput.mlir:21:10
    .in0        (_handshake_buffer82_out0),	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_buffer82_out0_valid),	// hlsinput.mlir:3:11
    .in1        (_handshake_buffer85_out0),	// hlsinput.mlir:3:11
    .in1_valid  (_handshake_buffer85_out0_valid),	// hlsinput.mlir:3:11
    .out0_ready (_handshake_buffer87_in0_ready),	// hlsinput.mlir:21:10
    .in0_ready  (_arith_cmpi0_in0_ready),
    .in1_ready  (_arith_cmpi0_in1_ready),
    .out0       (_arith_cmpi0_out0),
    .out0_valid (_arith_cmpi0_out0_valid)
  );	// hlsinput.mlir:21:10
  handshake_buffer_in_ui1_out_ui1_2slots_seq handshake_buffer87 (	// hlsinput.mlir:21:10
    .in0        (_arith_cmpi0_out0),	// hlsinput.mlir:21:10
    .in0_valid  (_arith_cmpi0_out0_valid),	// hlsinput.mlir:21:10
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_fork14_in0_ready),	// hlsinput.mlir:21:10
    .in0_ready  (_handshake_buffer87_in0_ready),
    .out0       (_handshake_buffer87_out0),
    .out0_valid (_handshake_buffer87_out0_valid)
  );	// hlsinput.mlir:21:10
  handshake_fork_in_ui1_out_ui1_ui1_ui1_ui1_ui1 handshake_fork14 (	// hlsinput.mlir:21:10
    .in0        (_handshake_buffer87_out0),	// hlsinput.mlir:21:10
    .in0_valid  (_handshake_buffer87_out0_valid),	// hlsinput.mlir:21:10
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_buffer74_in0_ready),	// hlsinput.mlir:3:11
    .out1_ready (_handshake_buffer91_in0_ready),	// hlsinput.mlir:21:10
    .out2_ready (_handshake_buffer90_in0_ready),	// hlsinput.mlir:21:10
    .out3_ready (_handshake_buffer89_in0_ready),	// hlsinput.mlir:21:10
    .out4_ready (_handshake_buffer88_in0_ready),	// hlsinput.mlir:21:10
    .in0_ready  (_handshake_fork14_in0_ready),
    .out0       (_handshake_fork14_out0),
    .out0_valid (_handshake_fork14_out0_valid),
    .out1       (_handshake_fork14_out1),
    .out1_valid (_handshake_fork14_out1_valid),
    .out2       (_handshake_fork14_out2),
    .out2_valid (_handshake_fork14_out2_valid),
    .out3       (_handshake_fork14_out3),
    .out3_valid (_handshake_fork14_out3_valid),
    .out4       (_handshake_fork14_out4),
    .out4_valid (_handshake_fork14_out4_valid)
  );	// hlsinput.mlir:21:10
  handshake_buffer_in_ui1_out_ui1_2slots_seq handshake_buffer88 (	// hlsinput.mlir:21:10
    .in0        (_handshake_fork14_out4),	// hlsinput.mlir:21:10
    .in0_valid  (_handshake_fork14_out4_valid),	// hlsinput.mlir:21:10
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_cond_br0_cond_ready),	// hlsinput.mlir:22:5
    .in0_ready  (_handshake_buffer88_in0_ready),
    .out0       (_handshake_buffer88_out0),
    .out0_valid (_handshake_buffer88_out0_valid)
  );	// hlsinput.mlir:21:10
  handshake_buffer_in_ui1_out_ui1_2slots_seq handshake_buffer89 (	// hlsinput.mlir:21:10
    .in0        (_handshake_fork14_out3),	// hlsinput.mlir:21:10
    .in0_valid  (_handshake_fork14_out3_valid),	// hlsinput.mlir:21:10
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_cond_br1_cond_ready),	// hlsinput.mlir:22:5
    .in0_ready  (_handshake_buffer89_in0_ready),
    .out0       (_handshake_buffer89_out0),
    .out0_valid (_handshake_buffer89_out0_valid)
  );	// hlsinput.mlir:21:10
  handshake_buffer_in_ui1_out_ui1_2slots_seq handshake_buffer90 (	// hlsinput.mlir:21:10
    .in0        (_handshake_fork14_out2),	// hlsinput.mlir:21:10
    .in0_valid  (_handshake_fork14_out2_valid),	// hlsinput.mlir:21:10
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_cond_br2_cond_ready),	// hlsinput.mlir:22:5
    .in0_ready  (_handshake_buffer90_in0_ready),
    .out0       (_handshake_buffer90_out0),
    .out0_valid (_handshake_buffer90_out0_valid)
  );	// hlsinput.mlir:21:10
  handshake_buffer_in_ui1_out_ui1_2slots_seq handshake_buffer91 (	// hlsinput.mlir:21:10
    .in0        (_handshake_fork14_out1),	// hlsinput.mlir:21:10
    .in0_valid  (_handshake_fork14_out1_valid),	// hlsinput.mlir:21:10
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_cond_br3_cond_ready),	// hlsinput.mlir:22:5
    .in0_ready  (_handshake_buffer91_in0_ready),
    .out0       (_handshake_buffer91_out0),
    .out0_valid (_handshake_buffer91_out0_valid)
  );	// hlsinput.mlir:21:10
  handshake_cond_br_in_ui1_ui64_out_ui64_ui64 handshake_cond_br0 (	// hlsinput.mlir:22:5
    .cond           (_handshake_buffer88_out0),	// hlsinput.mlir:21:10
    .cond_valid     (_handshake_buffer88_out0_valid),	// hlsinput.mlir:21:10
    .data           (_handshake_buffer81_out0),	// hlsinput.mlir:3:11
    .data_valid     (_handshake_buffer81_out0_valid),	// hlsinput.mlir:3:11
    .outTrue_ready  (_handshake_buffer92_in0_ready),	// hlsinput.mlir:22:5
    .outFalse_ready (_handshake_sink0_in0_ready),	// hlsinput.mlir:22:5
    .cond_ready     (_handshake_cond_br0_cond_ready),
    .data_ready     (_handshake_cond_br0_data_ready),
    .outTrue        (_handshake_cond_br0_outTrue),
    .outTrue_valid  (_handshake_cond_br0_outTrue_valid),
    .outFalse       (_handshake_cond_br0_outFalse),
    .outFalse_valid (_handshake_cond_br0_outFalse_valid)
  );	// hlsinput.mlir:22:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer92 (	// hlsinput.mlir:22:5
    .in0        (_handshake_cond_br0_outTrue),	// hlsinput.mlir:22:5
    .in0_valid  (_handshake_cond_br0_outTrue_valid),	// hlsinput.mlir:22:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_fork15_in0_ready),	// hlsinput.mlir:22:5
    .in0_ready  (_handshake_buffer92_in0_ready),
    .out0       (_handshake_buffer92_out0),
    .out0_valid (_handshake_buffer92_out0_valid)
  );	// hlsinput.mlir:22:5
  handshake_sink_in_ui64 handshake_sink0 (	// hlsinput.mlir:22:5
    .in0       (_handshake_cond_br0_outFalse),	// hlsinput.mlir:22:5
    .in0_valid (_handshake_cond_br0_outFalse_valid),	// hlsinput.mlir:22:5
    .in0_ready (_handshake_sink0_in0_ready)
  );	// hlsinput.mlir:22:5
  handshake_fork_in_ui64_out_ui64_ui64_ui64_ui64 handshake_fork15 (	// hlsinput.mlir:22:5
    .in0        (_handshake_buffer92_out0),	// hlsinput.mlir:22:5
    .in0_valid  (_handshake_buffer92_out0_valid),	// hlsinput.mlir:22:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_buffer96_in0_ready),	// hlsinput.mlir:22:5
    .out1_ready (_handshake_buffer95_in0_ready),	// hlsinput.mlir:22:5
    .out2_ready (_handshake_buffer94_in0_ready),	// hlsinput.mlir:22:5
    .out3_ready (_handshake_buffer93_in0_ready),	// hlsinput.mlir:22:5
    .in0_ready  (_handshake_fork15_in0_ready),
    .out0       (_handshake_fork15_out0),
    .out0_valid (_handshake_fork15_out0_valid),
    .out1       (_handshake_fork15_out1),
    .out1_valid (_handshake_fork15_out1_valid),
    .out2       (_handshake_fork15_out2),
    .out2_valid (_handshake_fork15_out2_valid),
    .out3       (_handshake_fork15_out3),
    .out3_valid (_handshake_fork15_out3_valid)
  );	// hlsinput.mlir:22:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer93 (	// hlsinput.mlir:22:5
    .in0        (_handshake_fork15_out3),	// hlsinput.mlir:22:5
    .in0_valid  (_handshake_fork15_out3_valid),	// hlsinput.mlir:22:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_store6_addrIn0_ready),	// hlsinput.mlir:27:5
    .in0_ready  (_handshake_buffer93_in0_ready),
    .out0       (_handshake_buffer93_out0),
    .out0_valid (_handshake_buffer93_out0_valid)
  );	// hlsinput.mlir:22:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer94 (	// hlsinput.mlir:22:5
    .in0        (_handshake_fork15_out2),	// hlsinput.mlir:22:5
    .in0_valid  (_handshake_fork15_out2_valid),	// hlsinput.mlir:22:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_load1_addrIn0_ready),	// hlsinput.mlir:25:10
    .in0_ready  (_handshake_buffer94_in0_ready),
    .out0       (_handshake_buffer94_out0),
    .out0_valid (_handshake_buffer94_out0_valid)
  );	// hlsinput.mlir:22:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer95 (	// hlsinput.mlir:22:5
    .in0        (_handshake_fork15_out1),	// hlsinput.mlir:22:5
    .in0_valid  (_handshake_fork15_out1_valid),	// hlsinput.mlir:22:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_load0_addrIn0_ready),	// hlsinput.mlir:24:10
    .in0_ready  (_handshake_buffer95_in0_ready),
    .out0       (_handshake_buffer95_out0),
    .out0_valid (_handshake_buffer95_out0_valid)
  );	// hlsinput.mlir:22:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer96 (	// hlsinput.mlir:22:5
    .in0        (_handshake_fork15_out0),	// hlsinput.mlir:22:5
    .in0_valid  (_handshake_fork15_out0_valid),	// hlsinput.mlir:22:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_arith_addi1_in0_ready),	// hlsinput.mlir:28:10
    .in0_ready  (_handshake_buffer96_in0_ready),
    .out0       (_handshake_buffer96_out0),
    .out0_valid (_handshake_buffer96_out0_valid)
  );	// hlsinput.mlir:22:5
  handshake_cond_br_in_ui1_ui64_out_ui64_ui64 handshake_cond_br1 (	// hlsinput.mlir:22:5
    .cond           (_handshake_buffer89_out0),	// hlsinput.mlir:21:10
    .cond_valid     (_handshake_buffer89_out0_valid),	// hlsinput.mlir:21:10
    .data           (_handshake_buffer84_out0),	// hlsinput.mlir:3:11
    .data_valid     (_handshake_buffer84_out0_valid),	// hlsinput.mlir:3:11
    .outTrue_ready  (_handshake_buffer97_in0_ready),	// hlsinput.mlir:22:5
    .outFalse_ready (_handshake_sink1_in0_ready),	// hlsinput.mlir:22:5
    .cond_ready     (_handshake_cond_br1_cond_ready),
    .data_ready     (_handshake_cond_br1_data_ready),
    .outTrue        (_handshake_cond_br1_outTrue),
    .outTrue_valid  (_handshake_cond_br1_outTrue_valid),
    .outFalse       (_handshake_cond_br1_outFalse),
    .outFalse_valid (_handshake_cond_br1_outFalse_valid)
  );	// hlsinput.mlir:22:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer97 (	// hlsinput.mlir:22:5
    .in0        (_handshake_cond_br1_outTrue),	// hlsinput.mlir:22:5
    .in0_valid  (_handshake_cond_br1_outTrue_valid),	// hlsinput.mlir:22:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_mux2_in1_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer97_in0_ready),
    .out0       (_handshake_buffer97_out0),
    .out0_valid (_handshake_buffer97_out0_valid)
  );	// hlsinput.mlir:22:5
  handshake_sink_in_ui64 handshake_sink1 (	// hlsinput.mlir:22:5
    .in0       (_handshake_cond_br1_outFalse),	// hlsinput.mlir:22:5
    .in0_valid (_handshake_cond_br1_outFalse_valid),	// hlsinput.mlir:22:5
    .in0_ready (_handshake_sink1_in0_ready)
  );	// hlsinput.mlir:22:5
  handshake_cond_br_in_ui1_ui64_out_ui64_ui64 handshake_cond_br2 (	// hlsinput.mlir:22:5
    .cond           (_handshake_buffer90_out0),	// hlsinput.mlir:21:10
    .cond_valid     (_handshake_buffer90_out0_valid),	// hlsinput.mlir:21:10
    .data           (_handshake_buffer86_out0),	// hlsinput.mlir:3:11
    .data_valid     (_handshake_buffer86_out0_valid),	// hlsinput.mlir:3:11
    .outTrue_ready  (_handshake_buffer98_in0_ready),	// hlsinput.mlir:22:5
    .outFalse_ready (_handshake_sink2_in0_ready),	// hlsinput.mlir:22:5
    .cond_ready     (_handshake_cond_br2_cond_ready),
    .data_ready     (_handshake_cond_br2_data_ready),
    .outTrue        (_handshake_cond_br2_outTrue),
    .outTrue_valid  (_handshake_cond_br2_outTrue_valid),
    .outFalse       (_handshake_cond_br2_outFalse),
    .outFalse_valid (_handshake_cond_br2_outFalse_valid)
  );	// hlsinput.mlir:22:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer98 (	// hlsinput.mlir:22:5
    .in0        (_handshake_cond_br2_outTrue),	// hlsinput.mlir:22:5
    .in0_valid  (_handshake_cond_br2_outTrue_valid),	// hlsinput.mlir:22:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_fork16_in0_ready),	// hlsinput.mlir:22:5
    .in0_ready  (_handshake_buffer98_in0_ready),
    .out0       (_handshake_buffer98_out0),
    .out0_valid (_handshake_buffer98_out0_valid)
  );	// hlsinput.mlir:22:5
  handshake_sink_in_ui64 handshake_sink2 (	// hlsinput.mlir:22:5
    .in0       (_handshake_cond_br2_outFalse),	// hlsinput.mlir:22:5
    .in0_valid (_handshake_cond_br2_outFalse_valid),	// hlsinput.mlir:22:5
    .in0_ready (_handshake_sink2_in0_ready)
  );	// hlsinput.mlir:22:5
  handshake_fork_in_ui64_out_ui64_ui64 handshake_fork16 (	// hlsinput.mlir:22:5
    .in0        (_handshake_buffer98_out0),	// hlsinput.mlir:22:5
    .in0_valid  (_handshake_buffer98_out0_valid),	// hlsinput.mlir:22:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_buffer100_in0_ready),	// hlsinput.mlir:22:5
    .out1_ready (_handshake_buffer99_in0_ready),	// hlsinput.mlir:22:5
    .in0_ready  (_handshake_fork16_in0_ready),
    .out0       (_handshake_fork16_out0),
    .out0_valid (_handshake_fork16_out0_valid),
    .out1       (_handshake_fork16_out1),
    .out1_valid (_handshake_fork16_out1_valid)
  );	// hlsinput.mlir:22:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer99 (	// hlsinput.mlir:22:5
    .in0        (_handshake_fork16_out1),	// hlsinput.mlir:22:5
    .in0_valid  (_handshake_fork16_out1_valid),	// hlsinput.mlir:22:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_arith_addi1_in1_ready),	// hlsinput.mlir:28:10
    .in0_ready  (_handshake_buffer99_in0_ready),
    .out0       (_handshake_buffer99_out0),
    .out0_valid (_handshake_buffer99_out0_valid)
  );	// hlsinput.mlir:22:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer100 (	// hlsinput.mlir:22:5
    .in0        (_handshake_fork16_out0),	// hlsinput.mlir:22:5
    .in0_valid  (_handshake_fork16_out0_valid),	// hlsinput.mlir:22:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_mux3_in1_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer100_in0_ready),
    .out0       (_handshake_buffer100_out0),
    .out0_valid (_handshake_buffer100_out0_valid)
  );	// hlsinput.mlir:22:5
  handshake_cond_br_in_ui1_2ins_2outs_ctrl handshake_cond_br3 (	// hlsinput.mlir:22:5
    .cond           (_handshake_buffer91_out0),	// hlsinput.mlir:21:10
    .cond_valid     (_handshake_buffer91_out0_valid),	// hlsinput.mlir:21:10
  //.data           (_handshake_buffer79_out0),	// hlsinput.mlir:3:11
    .data_valid     (_handshake_buffer79_out0_valid),	// hlsinput.mlir:3:11
    .outTrue_ready  (_handshake_buffer102_in0_ready),	// hlsinput.mlir:22:5
    .outFalse_ready (_handshake_buffer101_in0_ready),	// hlsinput.mlir:22:5
    .cond_ready     (_handshake_cond_br3_cond_ready),
    .data_ready     (_handshake_cond_br3_data_ready),
  //.outTrue        (_handshake_cond_br3_outTrue),
    .outTrue_valid  (_handshake_cond_br3_outTrue_valid),
  //.outFalse       (_handshake_cond_br3_outFalse),
    .outFalse_valid (_handshake_cond_br3_outFalse_valid)
  );	// hlsinput.mlir:22:5
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer101 (	// hlsinput.mlir:22:5
  //.in0        (_handshake_cond_br3_outFalse)	// hlsinput.mlir:22:5
    .in0_valid  (_handshake_cond_br3_outFalse_valid),	// hlsinput.mlir:22:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (out0_ready),
    .in0_ready  (_handshake_buffer101_in0_ready),
  //.out0       (out0),
    .out0_valid (out0_valid)
  );	// hlsinput.mlir:22:5
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer102 (	// hlsinput.mlir:22:5
  //.in0        (_handshake_cond_br3_outTrue)	// hlsinput.mlir:22:5
    .in0_valid  (_handshake_cond_br3_outTrue_valid),	// hlsinput.mlir:22:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_fork17_in0_ready),	// hlsinput.mlir:22:5
    .in0_ready  (_handshake_buffer102_in0_ready),
  //.out0       (_handshake_buffer102_out0),
    .out0_valid (_handshake_buffer102_out0_valid)
  );	// hlsinput.mlir:22:5
  handshake_fork_1ins_4outs_ctrl handshake_fork17 (	// hlsinput.mlir:22:5
  //.in0        (_handshake_buffer102_out0)	// hlsinput.mlir:22:5
    .in0_valid  (_handshake_buffer102_out0_valid),	// hlsinput.mlir:22:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_buffer106_in0_ready),	// hlsinput.mlir:22:5
    .out1_ready (_handshake_buffer105_in0_ready),	// hlsinput.mlir:22:5
    .out2_ready (_handshake_buffer104_in0_ready),	// hlsinput.mlir:22:5
    .out3_ready (_handshake_buffer103_in0_ready),	// hlsinput.mlir:22:5
    .in0_ready  (_handshake_fork17_in0_ready),
  //.out0       (_handshake_fork17_out0),
    .out0_valid (_handshake_fork17_out0_valid),
  //.out1       (_handshake_fork17_out1),
    .out1_valid (_handshake_fork17_out1_valid),
  //.out2       (_handshake_fork17_out2),
    .out2_valid (_handshake_fork17_out2_valid),
  //.out3       (_handshake_fork17_out3),
    .out3_valid (_handshake_fork17_out3_valid)
  );	// hlsinput.mlir:22:5
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer103 (	// hlsinput.mlir:22:5
  //.in0        (_handshake_fork17_out3)	// hlsinput.mlir:22:5
    .in0_valid  (_handshake_fork17_out3_valid),	// hlsinput.mlir:22:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_load0_ctrl_ready),	// hlsinput.mlir:24:10
    .in0_ready  (_handshake_buffer103_in0_ready),
  //.out0       (_handshake_buffer103_out0),
    .out0_valid (_handshake_buffer103_out0_valid)
  );	// hlsinput.mlir:22:5
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer104 (	// hlsinput.mlir:22:5
  //.in0        (_handshake_fork17_out2)	// hlsinput.mlir:22:5
    .in0_valid  (_handshake_fork17_out2_valid),	// hlsinput.mlir:22:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_load1_ctrl_ready),	// hlsinput.mlir:25:10
    .in0_ready  (_handshake_buffer104_in0_ready),
  //.out0       (_handshake_buffer104_out0),
    .out0_valid (_handshake_buffer104_out0_valid)
  );	// hlsinput.mlir:22:5
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer105 (	// hlsinput.mlir:22:5
  //.in0        (_handshake_fork17_out1)	// hlsinput.mlir:22:5
    .in0_valid  (_handshake_fork17_out1_valid),	// hlsinput.mlir:22:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_join5_in0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer105_in0_ready),
  //.out0       (_handshake_buffer105_out0),
    .out0_valid (_handshake_buffer105_out0_valid)
  );	// hlsinput.mlir:22:5
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer106 (	// hlsinput.mlir:22:5
  //.in0        (_handshake_fork17_out0)	// hlsinput.mlir:22:5
    .in0_valid  (_handshake_fork17_out0_valid),	// hlsinput.mlir:22:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_store6_ctrl_ready),	// hlsinput.mlir:27:5
    .in0_ready  (_handshake_buffer106_in0_ready),
  //.out0       (_handshake_buffer106_out0),
    .out0_valid (_handshake_buffer106_out0_valid)
  );	// hlsinput.mlir:22:5
  handshake_join_4ins_1outs_ctrl handshake_join5 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_buffer105_out0)	// hlsinput.mlir:22:5
    .in0_valid  (_handshake_buffer105_out0_valid),	// hlsinput.mlir:22:5
  //.in1        (_handshake_buffer26_out0),	// hlsinput.mlir:3:11
    .in1_valid  (_handshake_buffer26_out0_valid),	// hlsinput.mlir:3:11
  //.in2        (_handshake_buffer16_out0),	// hlsinput.mlir:3:11
    .in2_valid  (_handshake_buffer16_out0_valid),	// hlsinput.mlir:3:11
  //.in3        (_handshake_buffer15_out0),	// hlsinput.mlir:3:11
    .in3_valid  (_handshake_buffer15_out0_valid),	// hlsinput.mlir:3:11
    .out0_ready (_handshake_buffer107_in0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_join5_in0_ready),
    .in1_ready  (_handshake_join5_in1_ready),
    .in2_ready  (_handshake_join5_in2_ready),
    .in3_ready  (_handshake_join5_in3_ready),
  //.out0       (_handshake_join5_out0),
    .out0_valid (_handshake_join5_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_buffer_2slots_seq_1ins_1outs_ctrl handshake_buffer107 (	// hlsinput.mlir:3:11
  //.in0        (_handshake_join5_out0)	// hlsinput.mlir:3:11
    .in0_valid  (_handshake_join5_out0_valid),	// hlsinput.mlir:3:11
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_mux0_in1_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer107_in0_ready),
  //.out0       (_handshake_buffer107_out0),
    .out0_valid (_handshake_buffer107_out0_valid)
  );	// hlsinput.mlir:3:11
  handshake_load_in_ui64_ui64_out_ui64_ui64 handshake_load0 (	// hlsinput.mlir:24:10
    .addrIn0           (_handshake_buffer95_out0),	// hlsinput.mlir:22:5
    .addrIn0_valid     (_handshake_buffer95_out0_valid),	// hlsinput.mlir:22:5
    .dataFromMem       (_handshake_buffer30_out0),	// hlsinput.mlir:3:11
    .dataFromMem_valid (_handshake_buffer30_out0_valid),	// hlsinput.mlir:3:11
  //.ctrl              (_handshake_buffer103_out0),	// hlsinput.mlir:22:5
    .ctrl_valid        (_handshake_buffer103_out0_valid),	// hlsinput.mlir:22:5
    .dataOut_ready     (_handshake_buffer109_in0_ready),	// hlsinput.mlir:24:10
    .addrOut0_ready    (_handshake_buffer108_in0_ready),	// hlsinput.mlir:24:10
    .addrIn0_ready     (_handshake_load0_addrIn0_ready),
    .dataFromMem_ready (_handshake_load0_dataFromMem_ready),
    .ctrl_ready        (_handshake_load0_ctrl_ready),
    .dataOut           (_handshake_load0_dataOut),
    .dataOut_valid     (_handshake_load0_dataOut_valid),
    .addrOut0          (_handshake_load0_addrOut0),
    .addrOut0_valid    (_handshake_load0_addrOut0_valid)
  );	// hlsinput.mlir:24:10
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer108 (	// hlsinput.mlir:24:10
    .in0        (_handshake_load0_addrOut0),	// hlsinput.mlir:24:10
    .in0_valid  (_handshake_load0_addrOut0_valid),	// hlsinput.mlir:24:10
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_memory2_ldAddr0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer108_in0_ready),
    .out0       (_handshake_buffer108_out0),
    .out0_valid (_handshake_buffer108_out0_valid)
  );	// hlsinput.mlir:24:10
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer109 (	// hlsinput.mlir:24:10
    .in0        (_handshake_load0_dataOut),	// hlsinput.mlir:24:10
    .in0_valid  (_handshake_load0_dataOut_valid),	// hlsinput.mlir:24:10
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_arith_addi0_in0_ready),	// hlsinput.mlir:26:10
    .in0_ready  (_handshake_buffer109_in0_ready),
    .out0       (_handshake_buffer109_out0),
    .out0_valid (_handshake_buffer109_out0_valid)
  );	// hlsinput.mlir:24:10
  handshake_load_in_ui64_ui64_out_ui64_ui64 handshake_load1 (	// hlsinput.mlir:25:10
    .addrIn0           (_handshake_buffer94_out0),	// hlsinput.mlir:22:5
    .addrIn0_valid     (_handshake_buffer94_out0_valid),	// hlsinput.mlir:22:5
    .dataFromMem       (_handshake_buffer20_out0),	// hlsinput.mlir:3:11
    .dataFromMem_valid (_handshake_buffer20_out0_valid),	// hlsinput.mlir:3:11
  //.ctrl              (_handshake_buffer104_out0),	// hlsinput.mlir:22:5
    .ctrl_valid        (_handshake_buffer104_out0_valid),	// hlsinput.mlir:22:5
    .dataOut_ready     (_handshake_buffer111_in0_ready),	// hlsinput.mlir:25:10
    .addrOut0_ready    (_handshake_buffer110_in0_ready),	// hlsinput.mlir:25:10
    .addrIn0_ready     (_handshake_load1_addrIn0_ready),
    .dataFromMem_ready (_handshake_load1_dataFromMem_ready),
    .ctrl_ready        (_handshake_load1_ctrl_ready),
    .dataOut           (_handshake_load1_dataOut),
    .dataOut_valid     (_handshake_load1_dataOut_valid),
    .addrOut0          (_handshake_load1_addrOut0),
    .addrOut0_valid    (_handshake_load1_addrOut0_valid)
  );	// hlsinput.mlir:25:10
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer110 (	// hlsinput.mlir:25:10
    .in0        (_handshake_load1_addrOut0),	// hlsinput.mlir:25:10
    .in0_valid  (_handshake_load1_addrOut0_valid),	// hlsinput.mlir:25:10
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_memory1_ldAddr0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer110_in0_ready),
    .out0       (_handshake_buffer110_out0),
    .out0_valid (_handshake_buffer110_out0_valid)
  );	// hlsinput.mlir:25:10
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer111 (	// hlsinput.mlir:25:10
    .in0        (_handshake_load1_dataOut),	// hlsinput.mlir:25:10
    .in0_valid  (_handshake_load1_dataOut_valid),	// hlsinput.mlir:25:10
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_arith_addi0_in1_ready),	// hlsinput.mlir:26:10
    .in0_ready  (_handshake_buffer111_in0_ready),
    .out0       (_handshake_buffer111_out0),
    .out0_valid (_handshake_buffer111_out0_valid)
  );	// hlsinput.mlir:25:10
  arith_addi_in_ui64_ui64_out_ui64 arith_addi0 (	// hlsinput.mlir:26:10
    .in0        (_handshake_buffer109_out0),	// hlsinput.mlir:24:10
    .in0_valid  (_handshake_buffer109_out0_valid),	// hlsinput.mlir:24:10
    .in1        (_handshake_buffer111_out0),	// hlsinput.mlir:25:10
    .in1_valid  (_handshake_buffer111_out0_valid),	// hlsinput.mlir:25:10
    .out0_ready (_handshake_buffer112_in0_ready),	// hlsinput.mlir:26:10
    .in0_ready  (_arith_addi0_in0_ready),
    .in1_ready  (_arith_addi0_in1_ready),
    .out0       (_arith_addi0_out0),
    .out0_valid (_arith_addi0_out0_valid)
  );	// hlsinput.mlir:26:10
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer112 (	// hlsinput.mlir:26:10
    .in0        (_arith_addi0_out0),	// hlsinput.mlir:26:10
    .in0_valid  (_arith_addi0_out0_valid),	// hlsinput.mlir:26:10
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_store6_dataIn_ready),	// hlsinput.mlir:27:5
    .in0_ready  (_handshake_buffer112_in0_ready),
    .out0       (_handshake_buffer112_out0),
    .out0_valid (_handshake_buffer112_out0_valid)
  );	// hlsinput.mlir:26:10
  handshake_store_in_ui64_ui64_out_ui64_ui64 handshake_store6 (	// hlsinput.mlir:27:5
    .addrIn0         (_handshake_buffer93_out0),	// hlsinput.mlir:22:5
    .addrIn0_valid   (_handshake_buffer93_out0_valid),	// hlsinput.mlir:22:5
    .dataIn          (_handshake_buffer112_out0),	// hlsinput.mlir:26:10
    .dataIn_valid    (_handshake_buffer112_out0_valid),	// hlsinput.mlir:26:10
  //.ctrl            (_handshake_buffer106_out0),	// hlsinput.mlir:22:5
    .ctrl_valid      (_handshake_buffer106_out0_valid),	// hlsinput.mlir:22:5
    .dataToMem_ready (_handshake_buffer114_in0_ready),	// hlsinput.mlir:27:5
    .addrOut0_ready  (_handshake_buffer113_in0_ready),	// hlsinput.mlir:27:5
    .addrIn0_ready   (_handshake_store6_addrIn0_ready),
    .dataIn_ready    (_handshake_store6_dataIn_ready),
    .ctrl_ready      (_handshake_store6_ctrl_ready),
    .dataToMem       (_handshake_store6_dataToMem),
    .dataToMem_valid (_handshake_store6_dataToMem_valid),
    .addrOut0        (_handshake_store6_addrOut0),
    .addrOut0_valid  (_handshake_store6_addrOut0_valid)
  );	// hlsinput.mlir:27:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer113 (	// hlsinput.mlir:27:5
    .in0        (_handshake_store6_addrOut0),	// hlsinput.mlir:27:5
    .in0_valid  (_handshake_store6_addrOut0_valid),	// hlsinput.mlir:27:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_memory0_stAddr0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer113_in0_ready),
    .out0       (_handshake_buffer113_out0),
    .out0_valid (_handshake_buffer113_out0_valid)
  );	// hlsinput.mlir:27:5
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer114 (	// hlsinput.mlir:27:5
    .in0        (_handshake_store6_dataToMem),	// hlsinput.mlir:27:5
    .in0_valid  (_handshake_store6_dataToMem_valid),	// hlsinput.mlir:27:5
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_memory0_stData0_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer114_in0_ready),
    .out0       (_handshake_buffer114_out0),
    .out0_valid (_handshake_buffer114_out0_valid)
  );	// hlsinput.mlir:27:5
  arith_addi_in_ui64_ui64_out_ui64 arith_addi1 (	// hlsinput.mlir:28:10
    .in0        (_handshake_buffer96_out0),	// hlsinput.mlir:22:5
    .in0_valid  (_handshake_buffer96_out0_valid),	// hlsinput.mlir:22:5
    .in1        (_handshake_buffer99_out0),	// hlsinput.mlir:22:5
    .in1_valid  (_handshake_buffer99_out0_valid),	// hlsinput.mlir:22:5
    .out0_ready (_handshake_buffer115_in0_ready),	// hlsinput.mlir:28:10
    .in0_ready  (_arith_addi1_in0_ready),
    .in1_ready  (_arith_addi1_in1_ready),
    .out0       (_arith_addi1_out0),
    .out0_valid (_arith_addi1_out0_valid)
  );	// hlsinput.mlir:28:10
  handshake_buffer_in_ui64_out_ui64_2slots_seq handshake_buffer115 (	// hlsinput.mlir:28:10
    .in0        (_arith_addi1_out0),	// hlsinput.mlir:28:10
    .in0_valid  (_arith_addi1_out0_valid),	// hlsinput.mlir:28:10
    .clock      (clock),
    .reset      (reset),
    .out0_ready (_handshake_mux1_in1_ready),	// hlsinput.mlir:3:11
    .in0_ready  (_handshake_buffer115_in0_ready),
    .out0       (_handshake_buffer115_out0),
    .out0_valid (_handshake_buffer115_out0_valid)
  );	// hlsinput.mlir:28:10
endmodule

